Things to do:

o Update APLVector to handle at least 2-dimensional arrays. See core 
  "multiarray" for potentially reuse / subclassing.
  o properly print/display N dimensional arrays. 

o Need more tests! More tests for each type of operand per operator.

o Add function declarations.

o Add selective specification {in perl: lvalues}

o Add bracket indexing. { in perl: $a[1] } { implement index operator first }

o clean up the tools/ script so non-generated code is moved into a .pir file.

o Change how strings are handled internally?

ATM, we are using the builtin type string as basically another APLVector, 
but is *ONLY* usable for 1 dimensional strings. To properly deal with multi 
dimensional strings, we'd need to:

APLV: (shape: ??)
 0 - String: 'ABC'
 1 - String: 'DEF'

Then, when we wanted $P1[2;1], we'd be able easily to get the row, which is
the string 'DEF', then we'd need to switch to string-based code to do a
substr instead, to get the 'D'. But our "shape" calculation would be 
VERY painful. (whereas with a pure APLVector, we can just return the
given shape.)

It'd be easier from a coding standpoint to forgo separate string storage and
have each character always be stored as a single-character string (in an
element of an APLVector)

APLV: (shape 2x3)
 0 - A  [1;1]
 1 - B  [1;2]
 2 - C  [1;3]
 3 - D  [2;1]
 4 - E  [2;2]
 5 - F  [2;3]

And then when our index is requested, we plug (2,1) into the "get_element"
function : 

sum of { (size of remaining dim: default to 1) * (position in dim) } -1

   1D                   2D         -1
  (3 * (2-1) ) +   ( 1 * (1-1) )   -1

  = 3 + 1 - 1
  = 3

$aplv[3] = 'D', as above.

while the math seems more complicated than the current string arranagement,
it is also much more generic, and will work for arbitrarily-dimensionsed 
storage.

This will also let us remove all the String variants from our :multi's -
we no longer need substr/length to do indexing/shape, etc.

We might need to be able to detect when we have only strings in our APLVector,
but if necessary, we can add another property that keeps track of such things.
(To avoid a full check of all elements each time). Turns out this is 
needed to print strings differently from other vectors.

  -- First pass of this is done, 'AAA' is now stored as an APL Vector.
     Next step is to remove the now-crufty String variants of all the
     various :multi opcodes, and fixup the vectorized ops so that a
     proper domain error is thrown (instead of blinding trying to do 
     math on characters)
