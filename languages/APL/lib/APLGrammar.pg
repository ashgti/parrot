grammar APL::Grammar;

regex statement_list { ^<statement> [ \n <statement> ]* }

regex statement { <expression> [ \s*? $$ | <syntax_error> ] }

regex expression { 
      <target> ← <expression>
    | <monadic_identifier> <expression>
    | <subexpression> [ <dyadic_identifier> <expression> ]?
}

regex subexpression {
    <simple_expression>
}

regex simple_expression {
    <array_identifier>
}

regex target { <variable_identifier> }

regex dyadic_identifier  { <[|⍟*⌈⌊○!+−×÷∧∨⍲⍱<≤=≥>≠⍳⊖]> }

regex monadic_identifier { <[|⍟*⌈⌊○!+−×÷~⍳⌽]> }

regex array_identifier {
      <constant>
    | <variable_identifier>
}

regex constant {
      <character_constant>
    | <numeric_constant>
}


regex numeric_constant { 
    <decimal_representation> [ \s+ <decimal_representation> ]*
}


regex decimal_representation {
    [ ⁻? \d+: \.? \d*: | ⁻? \. \d+: ] [ E ⁻? \d+: ]?
}


regex character_constant {
      (') ( [ '' | <-[']> ]*: ) '
    | (") ( [ "" | <-["]> ]*: ) "
   
}


regex variable_identifier { <[A..Za..z]> \w*: }


regex syntax_error { <?PGE::Util::die: Syntax error> }
