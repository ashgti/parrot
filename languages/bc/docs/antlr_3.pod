# $Id$

=head1 Overview

These are some rumblings on using ANTLR 3 for Parrot bc, or with Parrot in general.

=head1 Parsing in general

=head1 ANTLR 3

=head2 Running

  export CLASSPATH=/home/bernhard/devel/ANTLR/v3/antlr-3.0ea7/lib/antlr-3.0ea7.jar:/home/bernhard/devel/ANTLR/v3/antlr-3.0ea7/lib/antlr-2.7.5.jar:/home/bernhard/devel/ANTLR/v3/antlr-3.0ea7/lib/stringtemplate-2.3b4.jar:$CLASSPATH

And see Makefile.

=head2 Syntax

Lexer, Parser and TreeParser are in the same file, speak grammar.
C-comments serve as comments. C++ style as well ?

'+' is one or many

'(  )' is for grouping
'|'    as for alternation 
"''"   Sring delimeter, honoring '\t', '\n', '\r'

'{   }' are actions
';'     delimits rules
'grammar <name>', set name of Parser, Name of autogenerated Lexer is generated from it

Tell to generate an AST
options 
{
    output=AST;
    ASTLabelType=CommonTree;
}

'Sigil $' is for referencing alternations in actions, Lexer items only ???, also for setting returns

'->' Is for tree construction
'^' Is for definition and matching of tree nodes

 
=head2 Lexer

The lexer specification can be in the parser specification.
A lexer grammar is automatically generated.
'protected' is gone.

=head2 Parser

=head2 TreeParser

=head2 StringTemplate

=head1 ANTLR Backends

=head2 Java

=head2 Python

=head2 Perl5

=head1 ANTLR and Parrot

=head2 Backend for Parrot

=head2 Parrot bc

=head1 Glossary

=head1 AUTHOR

Bernhard Schmalhofer - <Bernhard.Schmalhofer@gmx.de>

=head1 SEE ALSO

  L<http://www.antlr.org/>
  L<http://www.antlr.org/blog/index.tml>
  L<http://www.antlr.org:8080/pipermail/antlr-dev/>

=cut
