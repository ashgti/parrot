# Copyright (C) 2005-2006, The Perl Foundation.
# $Id$

# Setup of some commands
PERL          = @perl@
RM_F          = @rm_f@
CP            = @cp@

# The runtime files are also in SVN, need to be generated only by maintainer
PYTHON_RUNTIME_FILES = \
    python/lib/bc/BcLexer.py \
    python/lib/bc/BcParser.py \
    python/lib/bc/BcTreeWalker.py \
    python/lib/antlr_past2pir_past/AntlrPast2PirPastTreeWalker.py

# the default target
all: build 

# This is a listing of all targets, that are meant to be called by users
help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "Building:"
	@echo "  all:               BcLexer.py and BcParser.py"
	@echo "                     This is the default."
	@echo "  build-python:      Build implementation in Python"
	@echo ""
	@echo "  build-java:        Build implementation in Java"
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite."
	@echo "  test-python:       Run the test suite for Parrot bc in Python."
	@echo "  test-java:         Run the test suite for Parrot bc in Java."
	@echo "  test-posix:        Run the test suite for POSIX bc."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  distclean:         Remove everything not in MANIFEST."
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""
	@echo "Only for maintainer:"
	@echo "  maintain:          Generate Python runtime files"
	@echo "                     Needs ANTLR and Python"
	@echo ""

test: test-python test-posix test-java

test-python: build-python
	cd .. && $(PERL) -I../lib -I bc/lib bc/t/harness --with-python

test-posix: build-posix 
	cd .. && $(PERL) -I../lib -I bc/lib bc/t/harness --with-posix

test-java: 
	cd .. && $(PERL) -I../lib -I bc/lib bc/t/harness --with-java

# For smoke testing build only the Implementation in Python
build: build-python

build-python:
# Nothing to do

build-posix:
# Nothing to do

build-java: 
	@echo 'Be sure to have set CLASSPATH as laid out in docs/antlr_3.pod'
	javac Bc.java 
	javac grammar/antlr_3/*.java

maintain: maintain-python maintain-java

maintain-python: $(PYTHON_RUNTIME_FILES)

maintain-java: grammar/antlr_3/bc.g
	@echo 'Be sure to set CLASSPATH first'
	java org.antlr.Tool grammar/antlr_3/bc.g
	java org.antlr.Tool grammar/antlr_3/antlr_past2pir_past.g

# BcLexer.py will be created too
# TODO: antlr_past2pir_past shouldn't need BcLexerTokenTypes.txt
$(PYTHON_RUNTIME_FILES): grammar/antlr_2/bc_python.g grammar/antlr_2/antlr_past2pir_past.g
	antlr -o python/lib/bc grammar/antlr_2/bc_python.g
	$(CP) python/lib/bc/BcLexerTokenTypes.txt python/lib/antlr_past2pir_past
	antlr -o python/lib/antlr_past2pir_past grammar/antlr_2/antlr_past2pir_past.g

clean: clean-test clean-python clean-java

clean-test: 
	$(RM_F) \
    "t/*.bc" "t/*.pir" "t/*.out"

clean-python:
	$(RM_F) \
    "python/lib/bc/*.pyc" \
    "python/lib/antlr_past2pir_past/*.pyc" 

clean-java:
	$(RM_F) \
    "*.class" \
    "grammar/antlr_3/*.class" \
    "grammar/antlr_3/*.tokens"

realclean: clean
	$(RM_F) \
    Makefile

distclean: realclean
