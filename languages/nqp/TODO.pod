## $Id$

=head1 Things that NQP needs

This list is based on discussions with pmichaud and unimplemented
items in the grammar, C<src/Grammar.pg>.

Last updated: 2007-11-24

=head2 Code

=over 4

=item * C<return> statement

While it seems like implementing C<return> would be a simple
matter of generating PIR C<.return> statements, it's not quite
that simple, because C<return> statements can occur inside of
nested blocks.

So, we need an NQP C<return> statement to throw a "return exception",
which is then caught by the outermost block of the currently
executing subroutine and then used as the argument to C<.return>.

Fortunately, the new design of S05 means that we don't really need
return statements for developing action grammars (see C<make> below), 
so this is no longer as much of a priority as it was.

=item * C<make> support

S05 now identifies the C<make> function as being the mechanism 
used to set the result object for a match object.  (Previously
one would do this via C<return>.)  

We could implement 'make' as a standard function call, but this
then requires runtime support.  Instead it would be better if it
could be converted into equivalent inline PIR  (essentially,
lexically look up C<$/> and call 'result_object' on it).

=item * Namespace support

NQP can currently look up symbols in other namespaces; we need
to add the C<package>, C<module>, and C<class> keywords to NQP
to be able to define symbols and subroutines into other namespaces.

=item * Named argument (not param) support

C<PAST> now supports named arguments in subroutines, we simply need
to modify the grammar to parse named arguments in subroutine
declarations and build the appropriate actions to fill in the 
C<PAST::Var> parameter nodes.

=back

=head2 Tests

=over 4

=item * Method ops

We should be able to load an external module (Pm suggests Test.pbc)
and exercise methods using that.

=item * Hash key access C<$varE<lt>someKeyE<gt>>

=item * List member access C<$var[index]>

=item * Match variable access C<$/>

=item * Scalar context $( ... )

=item * List context @( ... )

=back
