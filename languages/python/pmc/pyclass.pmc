/*
Copyright (C) 2001-2003, The Perl Foundation.
$Id$

=head1 NAME

pmc/pyclass.pmc - Python Class

=head1 DESCRIPTION

These are the vtable functions for the Python Class base class (i.e.,
methods you would expect to see on python objects).

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "pyconsts.h"

struct parrot_regs_t *
Parrot_PyClass_runops_fromc(Interp* interpreter, PMC *sub)
{
    opcode_t offset, *dest;
    struct parrot_regs_t *bp_save, *bp_new;

    bp_save = interpreter->ctx.bp;

    if (Interp_trace_TEST(interpreter, PARROT_TRACE_SUB_CALL_FLAG)) {
        PIO_eprintf(interpreter, "# Invoking %Ss on %Ss\n",
           REG_STR(0), REG_PMC(2)->vtable->whoami);
    }

    dest = VTABLE_invoke(interpreter, sub, NULL);

    bp_new = interpreter->ctx.bp;

    if (dest) {
        /* we need one return continuation with a NULL offset */
        interpreter->ctx.current_cont = REG_PMC(1) =
            new_ret_continuation_pmc(interpreter, NULL);

#if GC_VERBOSE
        PObj_report_SET(REG_PMC(1));     /* s. also dod.c */
#endif

        if (bp_new != bp_save) copy_regs(interpreter, bp_save);
        interpreter->ctx.current_sub = sub;

        offset = dest - interpreter->code->base.data;
        runops(interpreter, offset);
    }

    interpreter->ctx.bp = bp_save;
    return bp_new;
}

static PMC *
Parrot_PyClass_call_meth_fromc_P(Interp* interpreter, PMC *obj,
    STRING *meth)
{
    struct parrot_regs_t *bp;
    struct Parrot_Context ctx;
    PMC *sub, *ret;

    save_context(interpreter, &ctx);
    interpreter->ctx.bp = new_register_frame(interpreter,
                &interpreter->ctx.reg_stack);

    REG_STR(0) = meth;
    REG_INT(0) = 1;
    REG_INT(1) = REG_INT(2) = REG_INT(3) = REG_INT(4) = 0;
    interpreter->ctx.current_object = REG_PMC(2) = obj;

    sub = VTABLE_find_method(interpreter, obj, meth);

    if (!sub)
        ret = NULL;
    else {
        bp = Parrot_PyClass_runops_fromc(interpreter, sub);
        ret = BP_REG_PMC(bp,5);
    }

    restore_context(interpreter, &ctx);
    return ret;
}

PMC *
Parrot_PyClass_call_meth_fromc_P_P(Interp* interpreter, PMC *obj,
    STRING *meth, PMC* arg1)
{
    struct parrot_regs_t *bp;
    struct Parrot_Context ctx;
    PMC *sub, *ret;

    save_context(interpreter, &ctx);
    interpreter->ctx.bp = new_register_frame(interpreter,
                &interpreter->ctx.reg_stack);

    REG_STR(0) = meth;
    REG_INT(0) = REG_INT(3) = 1;
    REG_INT(1) = REG_INT(2) = REG_INT(4) = 0;
    REG_PMC(5) = arg1;
    interpreter->ctx.current_object = REG_PMC(2) = obj;

    sub = VTABLE_find_method(interpreter, obj, meth);

    if (!sub)
        ret = NULL;
    else {
        bp = Parrot_PyClass_runops_fromc(interpreter, sub);
        ret = BP_REG_PMC(bp,5);
    }

    restore_context(interpreter, &ctx);
    return ret;
}

pmclass PyClass dynpmc group python_group {

/*

=item C<void destroy()>

Destroys the object.

=cut

*/

    void destroy () {
    }

/*

=item C<PMC *find_method(STRING *method_name)>

Looks up the method for C<*method_name> and returns it.

=cut

*/

    PMC* find_method(STRING* method_name) {
        PMC *class;

        PMC *method = VTABLE_getprop(INTERP, SELF, method_name);
        if (method && VTABLE_defined(INTERP, method)) {
            PMC *get = Parrot_PyClass_call_meth_fromc_P_P(INTERP, method,
                    PyString_get, SELF);
            if (get) return get;
            return method;
        }

        /* Not defined on the instance?  Try the class... */
        class = VTABLE_getprop(INTERP, SELF, PyString_class);
        if (class) {
            PMC *object = INTERP->ctx.current_object;
            INTERP->ctx.current_object = SELF;
            method = VTABLE_find_method(INTERP, class, method_name);
            INTERP->ctx.current_object = object;
            return method;
        }

        return 0;
    }

/*

=item C<PMC* get_attr_str(STRING *name)>

Return attribute named C<name>.

=cut

*/

    PMC* get_attr_str(STRING* idx) {
        PMC *class, *get;

        PMC *attr = VTABLE_getprop(INTERP, SELF, idx);

        if (!attr || !VTABLE_defined(INTERP, attr)) {
            class = VTABLE_getprop(INTERP, SELF, PyString_class);
            if (class) {
                PMC *object = INTERP->ctx.current_object;
                INTERP->ctx.current_object = SELF;
                attr = VTABLE_get_attr_str(INTERP, class, idx);
                INTERP->ctx.current_object = object;
            }
        }

        if (!attr || !VTABLE_defined(INTERP, attr)) {
            STRING *message;
            real_exception(INTERP, NULL, E_AttributeError,
                "AttributeError: %Ss instance has no attribute '%Ss'",
                VTABLE_name(INTERP, SELF), idx);
        }

        /* is the attribute a Property? */
        get = Parrot_PyClass_call_meth_fromc_P_P(INTERP, attr, PyString_get,
            SELF);
        if (get) attr = get;

        return attr;
    }

/*

=item C<PMC *get_class()>

Return the class of this object.

=cut

*/

    PMC* get_class() {
        PMC *ret = VTABLE_getprop(INTERP, SELF, PyString_class);
        return ret;
    }

/*

=item C<INTVAL cmp(PMC *value)>

Returns the result of comparing the integer with C<*value>.

=cut

TODO: optimize for NCI, PyProxyClass

*/

    INTVAL cmp(PMC* value) {
        PMC *ret;

        if (SELF == value) return 0;

        ret = Parrot_PyClass_call_meth_fromc_P_P(INTERP, SELF, PyString_cmp,
            value);
        if (!ret) return -1;

        return VTABLE_get_integer(INTERP, ret);
    }

/*

=item C<INTVAL get_integer()>

Returns the integer value of the object.

=cut

*/

    INTVAL get_integer () {
        PMC *ret = Parrot_PyClass_call_meth_fromc_P(INTERP, SELF,
            PyString_int);
        if (!ret)
           real_exception(INTERP, NULL, E_TypeError,
                   "TypeError: int() argument must be a string or a number");
        return VTABLE_get_integer(INTERP, ret);
    }

/*

=item C<PMC *get_iter()>

Return an iterator for this object.

=cut

*/

    PMC* get_iter() {
        PMC *iter, *next;

        iter = Parrot_PyClass_call_meth_fromc_P(INTERP, SELF, PyString_iter);
        if (!iter)
           real_exception(INTERP, NULL, E_TypeError,
                   "TypeError: iteration over non-sequence");

        next = VTABLE_find_method(INTERP, iter, PyString_next);

        if (PObj_get_FLAGS(next) & SUB_FLAG_GENERATOR)
            return iter;
        else {
            PMC *gen = pmc_new(INTERP, PyBuiltin_PyGen);
            VTABLE_set_pmc(INTERP, gen, iter);
            return gen;
        }
    }

/*

=item C<STRING *get_repr()>

Return the representation of this object.

=cut

*/

    STRING* get_repr() {
        PMC *repr = Parrot_PyClass_call_meth_fromc_P(INTERP, SELF,
                PyString_repr);

        if (!repr) internal_exception(1, "unable to locate object.__repr__");

        return VTABLE_get_string(INTERP, repr);
    }

/*

=item C<STRING *get_string()>

Return the object in string form.

=cut

*/

    STRING* get_string() {
        PMC *str = Parrot_PyClass_call_meth_fromc_P(INTERP, SELF, PyString_str);

        if (str)
            return VTABLE_get_string(INTERP, str);
        else {
            return VTABLE_get_repr(INTERP, SELF);
        }
    }

/*

=item C<INTVAL hash()>

Returns a unique hash for this value

=cut

*/

    INTVAL hash (size_t seed) {
        PMC *ret = Parrot_PyClass_call_meth_fromc_P(INTERP, SELF,
            PyString_hash);

        if (ret)
            return VTABLE_get_integer(INTERP, ret);
        else {
            return (INTVAL)SELF;
        }
    }

/*

=item C<void* invoke(void* next)>

Call the object.

=cut

*/

    void* invoke(void* next) {
        PMC *call = VTABLE_find_method(INTERP, SELF, PyString_call);
        if (!REG_INT(3)) REG_INT(3)=1;
        REG_PMC(5) = SELF;
        return VTABLE_invoke(INTERP, call, next);
    }

/*

=item C<STRING *name()>

Returns the name of this class.

*/


    STRING* name() {
        return VTABLE_name(INTERP, VTABLE_get_class(INTERP, SELF));
    }

/*

=item C<STRING *"__repr__"(PMC *self)>

Return the string representation of this instance.

*/

    METHOD PMC* __repr__(PMC *self) {
        PMC *res = pmc_new(INTERP, PyBuiltin_PyString);
        STRING *repr;

        repr = string_from_cstring(INTERP, "<", 0);
        repr = string_append(INTERP, repr,
            VTABLE_name(INTERP, VTABLE_get_class(INTERP, SELF)), 0);
        repr = string_append(INTERP, repr,
            const_string(INTERP, " instance at "), 0);
        repr = string_append(INTERP, repr,
            Parrot_sprintf_c(INTERP, "%#x", (INTVAL) SELF), 0);
        repr = string_append(INTERP, repr,
            const_string(INTERP, ">"), 0);

        VTABLE_set_string_native(INTERP, res, repr);
        return res;
    }

/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
