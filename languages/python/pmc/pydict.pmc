/*
Copyright (C) 2001-2003, The Perl Foundation.
$Id$

=head1 NAME

pmc/pydict.pmc - Python Dictionary

=head1 DESCRIPTION

These are the vtable functions for the Python Dictionary class

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "pyconsts.h"

/*

=item C<static size_t
key_hash_object(Interp *interpreter, void *value, size_t seed)>

Return the hashed value of the object C<value>.

=cut

*/

static size_t
key_hash_object(Interp *interpreter, void *value, size_t seed)
{
    return VTABLE_hash(interpreter, (PMC*)value, seed);
}

static void
pobject_lives_fn(Interp *interp, PObj *o)
{
    pobject_lives(interp, o);
}
/*

=item C<static int
object_compare(Interp* interp, void *a, void *b)>

Compares the two objects, return 0 if they are identical.

C<a> is the search key, C<b> is the bucket key.

=cut

*/

static int
object_compare(Interp* interp, void *a, void *b)
{
    return !mmd_dispatch_i_pp(interp, (PMC *)a, (PMC *)b, MMD_EQ);
}

pmclass PyDict extends PyObject need_ext does hash dynpmc group python_group {

/*

=item C<void init()>

Initializes the instance.

=item C<void destroy()>

Free hash structure.

=cut

*/

    void init () {
        PMC_struct_val(SELF) = NULL;
        PObj_custom_mark_destroy_SETALL(SELF);
        parrot_new_pmc_hash_x(INTERP, SELF,
            enum_type_PMC,
            Hash_key_type_PMC,
            object_compare,     /* object compare */
            key_hash_object);    /* object hash    */
    }

    void destroy () {
        if (PMC_struct_val(SELF)) {
            parrot_hash_destroy(INTERP, (Hash*) PMC_struct_val(SELF));
            PMC_struct_val(SELF) = NULL;
        }
    }
/*

=item C<void mark()>

Marks the hash as live.

=cut

*/

    void mark () {
        if (PMC_struct_val(SELF))
            parrot_mark_hash(INTERP, PMC_struct_val(SELF));
    }

/*

=item C<void delete_keyed(PMC *key)>

Deletes the element associated with C<*key>.

=cut

*/

    void delete_keyed(PMC* key) {
        Hash * h = (Hash *)PMC_struct_val(SELF);
        HashBucket *b;
        PMC *nextkey = key_next(INTERP, key);
        b = parrot_hash_get_bucket(INTERP, h, key);
        if (b == NULL)
                return;  /* no such key */
        else if (nextkey == NULL)
            parrot_hash_delete(INTERP, h, key);
        else
            VTABLE_delete_keyed(INTERP, (PMC*)b->value, nextkey);
    }

/*

=item C<INTVAL elements()>

Returns the number of elements in the hash.

=cut

*/

    INTVAL elements () {
        return parrot_hash_size(INTERP, PMC_struct_val(SELF));
    }

/*

=item C<INTVAL exists_keyed(PMC *key)>

Returns whether a key C<*key> exists in the hash.

=cut

*/

    INTVAL exists_keyed(PMC* key) {
        Hash * h = (Hash *)PMC_struct_val(SELF);
        HashBucket *b;
        PMC *nextkey = key_next(INTERP, key);
        b = parrot_hash_get_bucket(INTERP, h, key);
        if (b == NULL)
            return 0;       /* no such key */
        if (nextkey == NULL)
            return 1;       /* lookup stops here */
        return VTABLE_exists_keyed(INTERP, (PMC*)b->value, nextkey);
    }

/*

=item C<PMC* "fromkeys" (PMC* self, PMC* keys, PMC* value)>

Create a new dict with the specified C<keys> and C<value>.  If C<value>
is not specified, it defaults to C<None>.

=cut

*/

    METHOD PMC* fromkeys (PMC *self, PMC *keys, PMC* value) {
        PMC *iter = VTABLE_get_iter(INTERP, keys);
        PMC *ret = pmc_new(INTERP, PyBuiltin_PyDict);

        if (REG_INT(3) < 3) value = pmc_new(INTERP, PyBuiltin_PyNone);

        while (VTABLE_get_bool(INTERP, iter)) {
            PMC *key = VTABLE_shift_pmc(INTERP, iter);
            VTABLE_set_pmc_keyed(INTERP, ret, key, value);
        }

        return ret;
    }

/*

=item C<INTVAL get_bool()>

Returns true iff there are elements in the dictionary.

=cut

*/

    INTVAL get_bool () {
        return DYNSELF.elements() != 0;
    }

/*

=item C<PMC *get_class()>

Return the class of this object.

=cut

*/

    PMC* get_class() {
        return PyBuiltin_PyDict_class;
    }

/*

=item C<PMC* get_iter ()>

Return a new iterator for dictionary

=cut

*/

    PMC* get_iter () {
        PMC *iter = pmc_new_init(INTERP, enum_class_Iterator, SELF);
        PMC *key =  pmc_new(INTERP, enum_class_Key);
        PMC_struct_val(iter) = key;
        PObj_get_FLAGS(key) |= KEY_hash_iterator_FLAGS;
        PMC_int_val(key) = 0;
        PMC_data(key) = (void *)INITBucketIndex;
        if (!parrot_hash_size(INTERP, PMC_struct_val(SELF)))
            PMC_int_val(key) = -1;
        return iter;
    }

/*

=item C<PMC *get_pmc_keyed(PMC *key)>

Returns the PMC value for the element at C<*key>.

=cut

*/

    PMC* get_pmc_keyed (PMC* key) {
        PMC* valpmc;
        Hash *hash = PMC_struct_val(SELF);
        HashBucket *b;
        PMC* nextkey;

        if ((PObj_get_FLAGS(key) & KEY_type_FLAGS) == KEY_hash_iterator_FLAGS) {
            return parrot_hash_get_idx(INTERP, hash, key);
        }

        b = parrot_hash_get_bucket(INTERP, (Hash*) PMC_struct_val(SELF),
                                        key);
        if (b == NULL) {
            real_exception(INTERP, NULL, E_KeyError,
                "KeyError: %Ss", VTABLE_get_repr(INTERP, key));
        }
        nextkey = key_next(INTERP, key);
        if (!nextkey)
            return b->value;
        return VTABLE_get_pmc_keyed(INTERP, (PMC*)b->value, nextkey);
    }

/*

=item C<PMC *get_pmc_keyed_str(STRING *key)>

=cut

*/

    PMC* get_pmc_keyed_str (STRING* key) {
        PMC *pmckey = pmc_new(INTERP, PyBuiltin_PyString);
        VTABLE_set_string_native(INTERP, pmckey, key);
        return VTABLE_get_pmc_keyed(INTERP, SELF, pmckey);
    }

/*

=item C<STRING *get_string()>

Returns a string representation of the dictionary.

=cut

*/

    STRING* get_string () {
        /* TODO use freeze */
        PMC *iter = VTABLE_get_iter(INTERP, SELF);
        STRING *res;
        INTVAL j, n;

        res = string_from_cstring(INTERP, "{", 0);
        n = VTABLE_elements(INTERP, SELF);
        for (j = 0; j < n; ++j) {
            PMC *key = VTABLE_shift_pmc(INTERP, iter);
            PMC *val = SELF.get_pmc_keyed(key);

            res = string_append(INTERP, res,
                    VTABLE_get_repr(INTERP, key), 0);
            res = string_append(INTERP, res,
                    const_string(INTERP, ": "), 0);
            res = string_append(INTERP, res,
                    VTABLE_get_repr(INTERP, val), 0);

            if (j < n - 1)
                res = string_append(INTERP, res,
                        const_string(INTERP, ", "), 0);
        }
        res = string_append(INTERP, res,
                    const_string(INTERP, "}"), 0);
        return res;
    }

/*

=item C<STRING *get_string_keyed(PMC *key)>

Returns the big number value for the element at C<*key>.

=cut

*/

    STRING* get_string_keyed (PMC* key) {
        PMC *value = VTABLE_get_pmc_keyed(INTERP, SELF, key);
        return VTABLE_get_string(INTERP, value);
    }

/*

=item C<PMC* "__new__"(PMC *cls, PMC *source)>

Create a new dictionary from a sequence

=cut

*/

    METHOD PMC* __new__(PMC *cls, PMC *source) {
        PMC *dict = pmc_new(INTERP, PyBuiltin_PyDict);
        PMC *iter;
        INTVAL argc = REG_INT(3);

        if (argc == 1) return dict;

        if (source->vtable->base_type == PyBuiltin_PyDict) {
            iter = VTABLE_get_iter(INTERP, source);
            while (VTABLE_get_bool(INTERP, iter)) {
                PMC *key = VTABLE_shift_pmc(INTERP, iter);
                PMC *value = VTABLE_get_pmc_keyed(INTERP, source, key);
                VTABLE_set_pmc_keyed(INTERP, dict, key, value);
            }
        }

        else {
            /*
             * source is an array of tuples which are key/value pairs
             */
            iter = VTABLE_get_iter(INTERP, source);
            while (VTABLE_get_bool(INTERP, iter)) {
                PMC *tupl = VTABLE_shift_pmc(INTERP, iter);
                PMC *key, *value;
                INTVAL n = VTABLE_elements(INTERP, tupl);
                if (n != 2)
                    real_exception(INTERP, NULL, E_ValueError,
                            "dictionary update sequence element "
                            "has length %d; 2 is required",
                            (int)n);
                key = VTABLE_get_pmc_keyed_int(INTERP, tupl, 0);
                value = VTABLE_get_pmc_keyed_int(INTERP, tupl, 1);
                VTABLE_set_pmc_keyed(INTERP, dict, key, value);
            }
        }

        return dict;
    }

/*

=item C<void set_integer_keyed(PMC *key, STRING *value)>

=cut

*/

    void set_integer_keyed (PMC* key, INTVAL value) {
        PMC *ivalue = pmc_new(INTERP, PyBuiltin_PyInt);
        VTABLE_set_integer_native(INTERP, ivalue, value);
        VTABLE_set_pmc_keyed(INTERP, SELF, key, ivalue);
    }

/*

=item C<INTVAL is_equal(PMC *value)>

The C<==> operation.

Check if two dictionaries hold the same keys and values.

=cut

*/

    INTVAL is_equal (PMC* value) {
        PMC *iter = VTABLE_get_iter(INTERP, SELF);
        INTVAL j, n;

        if (value->vtable->base_type != SELF->vtable->base_type)
            return 0;
        n = SELF.elements();
        if (VTABLE_elements(INTERP, value) != n)
            return 0;
        for (j = 0; j < n; ++j) {
            PMC *key = VTABLE_shift_pmc(INTERP, iter);
            PMC *item1, *item2;
            if (!VTABLE_exists_keyed(INTERP, value, key))
                return 0;
            item1 = SELF.get_pmc_keyed(key);
            item2 = VTABLE_get_pmc_keyed(INTERP, value, key);
            if (item1 == item2)
                continue;
            if (!mmd_dispatch_i_pp(INTERP, item1, item2, MMD_EQ))
                return 0;
        }
        return 1;
    }

/*

=item C<void set_pmc_keyed(PMC *key, PMC *value)>

=cut

*/

    void set_pmc_keyed (PMC* key, PMC* value) {
        PMC* nextkey;
        PMC* box;
        PMC* val;

        if (!key) return;

        if (key->vtable->base_type == enum_class_Key) {
            PMC *key2;
            switch (PObj_get_FLAGS(key) & KEY_type_FLAGS) {
                case KEY_integer_FLAG:
                    key2 = pmc_new(INTERP, PyBuiltin_PyInt);
                    VTABLE_set_integer_native(INTERP, key2, PMC_int_val(key));
                    break;
                case KEY_number_FLAG:
                    key2 = pmc_new(INTERP, PyBuiltin_PyFloat);
                    VTABLE_set_number_native(INTERP, key2, PMC_num_val(key));
                    break;
                case KEY_string_FLAG:
                    key2 = pmc_new(INTERP, PyBuiltin_PyString);
                    VTABLE_set_string_native(INTERP, key2, PMC_str_val(key));
                    break;
                case KEY_pmc_FLAG:
                    key2 = PMC_pmc_val(SELF);
                    break;
                default:
                    internal_exception(1, "Unknown key type");
            }
            key = key2;
        }

        nextkey = key_next(INTERP, key);
        if (nextkey == NULL) {
            parrot_hash_put(INTERP, PMC_struct_val(SELF), key, value);
            return;
        }
        box = SELF.get_pmc_keyed(key);
        if (box == NULL) {
            /* autovivify an PyDict */
            box = pmc_new(INTERP, DYNSELF.type());
        }
        VTABLE_set_pmc_keyed(INTERP, box, nextkey, value);
    }

/*

=item C<void set_string_keyed(PMC *key, STRING *value)>

=cut

*/

    void set_string_keyed (PMC* key, STRING* value) {
        PMC *svalue = pmc_new(INTERP, PyBuiltin_PyString);
        VTABLE_set_string_native(INTERP, svalue, value);
        VTABLE_set_pmc_keyed(INTERP, SELF, key, svalue);
    }

/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
