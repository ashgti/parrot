/*
Copyright (C) 2004, The Perl Foundation.
$Id$

=head1 NAME

pmc/pycomplex.pmc - Python Complex Numbers PMC Class

=head1 DESCRIPTION

C<Complex> provides a representation of complex numbers. It handles
string parsing/generating and basic mathematical operations.

=head2 Functions

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "pyconsts.h"


pmclass PyComplex extends Complex dynpmc group python_group {

/*

=item C<PMC* "__new__"(PMC *class, PMC *source)>

Create a new complex number

=cut

*/

    METHOD PMC* __new__(PMC *class, PMC *real, PMC *imag) {
        INTVAL argc = REG_INT(3);

        PMC * ret = pmc_new(INTERP, PyBuiltin_PyComplex);

        if (argc > 1) {
            FLOATVAL fvalue = VTABLE_get_number(INTERP, real);
            VTABLE_set_number_keyed_int(INTERP, ret, 0, fvalue);
        }

        if (argc > 2) {
            FLOATVAL fvalue = VTABLE_get_number(INTERP, imag);
            VTABLE_set_number_keyed_int(INTERP, ret, 1, fvalue);
        }

        return ret;
    }

/*

=item C<PMC *get_class()>

Return the class of this object.

=cut

*/

    PMC* get_class() {
        return PyBuiltin_PyComplex_class;
    }

/*

=item C<STRING* get_string ()>

Returns the complex number as a string in the form C<a+bi>.

=cut

*/

    STRING* get_string () {
        STRING *s;
        FLOATVAL real = VTABLE_get_number_keyed_int(INTERP, SELF, 0);
        FLOATVAL imag = VTABLE_get_number_keyed_int(INTERP, SELF, 1);
        if (real == 0.0) {
            s = Parrot_sprintf_c(INTERP, "%.12vgj", imag);
        }
        else if (imag >= 0.0)
            s = Parrot_sprintf_c(INTERP,
                    "(%.12vg+%.12vgj)", real, imag);
        else
            s = Parrot_sprintf_c(INTERP,
                    "(%.12vg-%.12vgj)", real, -imag);
        return s;
    }

/*

=item C<STRING *get_repr()>

Returns the string representation of the integer.

=cut

*/

    STRING* get_repr () {
        return VTABLE_get_string(INTERP, SELF);
    }

/*

=item C<INTVAL hash(size_t seed)>

Returns a unique hash for this value

=cut

*/

    INTVAL hash (size_t seed) {
        return VTABLE_get_integer(INTERP, SELF);
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
