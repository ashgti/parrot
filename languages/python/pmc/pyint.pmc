/*
Copyright (C) 2001-2003, The Perl Foundation.
$Id$

=head1 NAME

classes/pyint.pmc - Python Integer

=head1 DESCRIPTION

C<PyInt> extends C<PyObject> to provide a Python integer.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "pyconsts.h"

pmclass PyInt extends PyObject extends Integer dynpmc group python_group {

    void class_init() {
        if (pass) {
            /*
             * Python uses either integer divide := floor_divide
             * or true_divide := divide for integer division
             * depending on Python version and __future__ import
             */
            INTVAL real_divide;
            MMD_init *e = _temp_mmd_init;
            int i, n, is_pmc;
            funcptr_t func;

            n = (sizeof(_temp_mmd_init)/sizeof(_temp_mmd_init[0]));
            /*
             * if we find a DIVIDE, install FLOOR_DIVIDE
             */
            real_divide = MMD_FLOOR_DIVIDE;    /* XXX settings */
            for (i = 0; i < n; ++i, ++e) {
                if (e->func_nr == MMD_DIVIDE) {
                    func = get_mmd_dispatch_type(interp,
                            real_divide, enum_class_Integer,
                            e->right, &is_pmc);
                    e->func_ptr = func;
                }
            }
        }
    }


/*

=item C<PMC *get_bignum()>

Return a new PyLong PMC with the value of C<SELF>.

=cut

*/
    PMC* get_bignum () {
        INTVAL val = DYNSELF.get_integer();
        PMC *ret = pmc_new(INTERP, PyBuiltin_PyLong);
        VTABLE_set_integer_native(INTERP, ret, val);
        return ret;
    }
/*

=item C<PMC* clone()>

Return a clone of the integer.

=cut

*/

    PMC* clone () {
        PMC* ret = pmc_new(INTERP, SELF->vtable->base_type);
        PMC_int_val(ret) = PMC_int_val(SELF);
        return ret;
    }

/*

=item C<PMC* divide(PMC *value, PMC *dest)>

=item C<PMC* divide_int(INTVAL value, PMC *dest)>

=item C<PMC* divide_float(FLOATVAL value, PMC *dest)>

Divides the number by C<value> and returns the result in C<*dest>.

*/
    PMC* divide (PMC* value, PMC* dest) {
MMD_BigInt:     {
            return SUPER(value, dest);
        }
MMD_DEFAULT: {
            return SUPER(value, dest);
        }
    }

/*

=item C<PMC* "__hex__"(PMC *self)>

Returns the hex representation of C<self>.

=cut

*/

    METHOD PMC* __hex__(PMC *self) {
        PMC * ret = pmc_new(INTERP, PyBuiltin_PyString);
        STRING *s = Parrot_sprintf_c(INTERP, "%#x",
            VTABLE_get_integer(INTERP, self));
        VTABLE_set_string_native(INTERP, ret, s);
        return ret;
    }

/*

=item C<PMC* "__oct__"(PMC *self)>

Returns the octal representation of C<self>.

=cut

*/

    METHOD PMC* __oct__(PMC *self) {
        PMC * ret = pmc_new(INTERP, PyBuiltin_PyString);
        STRING *s = Parrot_sprintf_c(INTERP, "%#o",
            VTABLE_get_integer(INTERP, self));
        VTABLE_set_string_native(INTERP, ret, s);
        return ret;
    }

/*

=item C<PMC* "__pos__"(PMC *self)>

Returns the value of the prefix operator C<+>.

=cut

*/

    METHOD PMC* __pos__(PMC *self) {
        PMC * ret = pmc_new(INTERP, PyBuiltin_PyInt);
        PMC_int_val(ret) = PMC_int_val(self);
        return ret;
    }
/*

=item C<PMC* "__truediv__"(PMC *self, PMC *value)>

Divides C<self> by C<*value> and returns the result.

=cut

*/

    METHOD PMC* __truediv__(PMC *self, PMC *value) {
        FLOATVAL valf = VTABLE_get_number(INTERP, value);
        FLOATVAL d = PMC_int_val(self)/valf;
        INTVAL i = (INTVAL) d;
        PMC * ret;
        if ( (FLOATVAL)i != d ) {
            ret = pmc_new(INTERP, PyBuiltin_PyFloat);
            VTABLE_set_number_native(INTERP, ret, d);
        }
        else {
            ret = pmc_new(INTERP, PyBuiltin_PyInt);
            PMC_int_val(ret) = i;
        }
        return ret;
    }


/*

=item C<INTVAL cmp(PMC *value)>

Returns the result of comparing the integer with C<*value>.

=cut

*/

    INTVAL cmp(PMC* value) {
MMD_PyFloat: {
            FLOATVAL diff;
            diff = (FLOATVAL)PMC_int_val(SELF)
                - VTABLE_get_number(INTERP, value);
            return diff > 0 ? 1 : diff < 0 ? -1 : 0;
        }
MMD_PyInt: {
            INTVAL diff = PMC_int_val(SELF)
                - VTABLE_get_integer(INTERP, value);
            return diff > 0 ? 1 : diff < 0 ? -1 : 0;
        }
MMD_PyClass: {
            /* XXX: redispatch if proxy? */
            INTVAL diff = PMC_int_val(SELF)
                - VTABLE_get_integer(INTERP, value);
            return diff > 0 ? 1 : diff < 0 ? -1 : 0;
        }
MMD_PyLong: {
            PMC *temp;
            INTVAL a = PMC_int_val(SELF);
            temp = pmc_new(INTERP, PyBuiltin_PyLong);
            VTABLE_set_integer_native(INTERP, temp, a);
            return mmd_dispatch_i_pp(INTERP, temp, value, MMD_CMP);
        }
MMD_DEFAULT: {
            return -1;
        }
    }

/*

=item C<INTVAL get_bool()>

Returns the boolean value of the integer.

=cut

*/

    INTVAL get_bool () {
        return PMC_int_val(SELF) != 0;
    }

/*

=item C<PMC *get_class()>

Return the class of this object.

=cut

*/

    PMC* get_class() {
        return PyBuiltin_PyInt_class;
    }

/*

=item C<INTVAL get_integer()>

Returns the integer value of the integer.

=cut

*/

    INTVAL get_integer () {
        return PMC_int_val(SELF);
    }

/*

=item C<FLOATVAL get_number()>

Returns the float value of the integer.

=cut

*/

    FLOATVAL get_number () {
        return (FLOATVAL) PMC_int_val(SELF);
    }

/*

=item C<STRING *get_string()>

Returns the string value of the integer.

=cut

*/

    STRING* get_string () {
        return string_from_int(INTERP, PMC_int_val(SELF));
    }

/*

=item C<INTVAL hash(size_t seed)>

Returns a unique hash for this value

=cut

*/

    INTVAL hash (size_t seed) {
        return VTABLE_get_integer(INTERP, SELF);
    }

/*

=item C<PMC* "__new__"(PMC *class, PMC *source)>

Create a new integer

=cut

*/

    METHOD PMC* __new__(PMC *class, PMC *source, PMC *base) {
        INTVAL argc = REG_INT(3);

        PMC * ret = pmc_new(INTERP, PyBuiltin_PyInt);

        /* XXX: quick hack: class method called directly */
        if (argc == 3 && source->vtable->base_type == PyBuiltin_PyProxyType)
            source = REG_PMC(7);

        if (argc > 1) {
            if (source->vtable->base_type == PyBuiltin_PyString) {
                INTVAL key = 0;
                if (argc > 2) key = VTABLE_get_integer(INTERP, base);
                VTABLE_morph(INTERP, ret, PyBuiltin_PyLong);
                VTABLE_set_string_keyed_int(INTERP, ret, key,
                    VTABLE_get_string(INTERP, source));
                mmd_dispatch_p_pip(INTERP, ret, 1, ret, MMD_DIVIDE);
            }
            else {
                INTVAL ivalue = VTABLE_get_integer(INTERP, source);
                VTABLE_set_integer_native(INTERP, ret, ivalue);
            }
        }

        return ret;
    }

/*

=item C<INTVAL is_same(PMC *value)>

Returns whether the PMC is numerically equal to C<value>.

=cut

*/

    INTVAL is_same (PMC* value) {
        if (value->vtable != SELF->vtable) return 0;
        return (INTVAL)(PMC_int_val(SELF) ==
            VTABLE_get_integer(INTERP, value));
    }

/*

=item C<INTVAL is_equal (PMC* value)>

The C<==> operation.

=cut

*/

    INTVAL is_equal (PMC* value) {
MMD_PyNone: {
            return 0;
        }
MMD_PyLong: {
            PMC *temp = pmc_new(INTERP, PyBuiltin_PyLong);
            VTABLE_set_integer_native(INTERP, temp, PMC_int_val(SELF));
            return mmd_dispatch_i_pp(INTERP, temp, value, MMD_EQ);
        }
MMD_DEFAULT: {
            return (INTVAL)(PMC_int_val(SELF) ==
                VTABLE_get_integer(INTERP, value));
        }
    }

/*

=item C<void set_integer_native(INTVAL value)>

Sets the value of the integer to the value of the C<PyInt> C<*value>.

=cut

*/

    void set_integer_native (INTVAL value) {
        PMC_int_val(SELF) = value;
    }

/*

=item C<void set_integer_same(PMC *value)>

Sets the value of the integer to the value of the C<PyInt> C<*value>.

=cut

*/

    void set_integer_same (PMC * value) {
        PMC_int_val(SELF) = PMC_int_val(value);
    }

/*

=item C<void set_pmc(PMC *value)>

Sets the PMC C<*value>, calling the appropriate C<set_*> method
according to the type of C<*value>.

=cut

*/

    void set_pmc (PMC* value) {
        if (SELF->vtable->base_type == value->vtable->base_type) {
            DYNSELF.set_integer_same(value);
        }
        else {
            DYNSELF.morph(value->vtable->base_type);
            DYNSELF.set_pmc(value);
        }
    }

/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
