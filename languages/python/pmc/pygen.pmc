/*
Copyright (C) 2001-2003, The Perl Foundation.
$Id$

=head1 NAME

pmc/pygen.pmc - Python Generator

=head1 DESCRIPTION

These are the vtable functions for the Python Generator class

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "pyconsts.h"

static STRING *STOPITERATION;

static PMC* PyGen_next(Interp* interpreter, PMC *self) {
    PMC *ret;
    PMC *iter = PMC_pmc_val(self);
    PMC *next = VTABLE_find_method(interpreter, iter, PyString_next);
    if (PObj_get_FLAGS(iter) & KEY_end_slice_FLAG) {
        real_exception(interpreter, NULL, E_StopIteration, "StopIteration");
    }

    PObj_get_FLAGS(iter) |= KEY_end_slice_FLAG;
    ret = Parrot_runops_fromc_args(interpreter, next, "PP", iter);
    if (iter == ret)
        /* XXX: runops ate my exception: presume StopIteration */
        real_exception(interpreter, NULL, E_StopIteration, "StopIteration");
    PObj_get_FLAGS(iter) &= ~KEY_end_slice_FLAG;
    return ret;
}

pmclass PyGen dynpmc extends PyClass group python_group {

/*

=item C<void class_init()>

Class initialization.

=cut

*/

    void class_init() {
        if (pass) {
            STOPITERATION = const_string(INTERP, "StopIteration");
        }
    }

/*

=item C<void init()>

Initializes the key.

=cut

*/

    void init () {
        PObj_custom_mark_SET(SELF);
        PMC_struct_val(SELF) = NULL;
        PMC_pmc_val(SELF) = SELF;
    }

/*

=item C<void mark()>

Marks the hash as live.

=cut

*/

    void mark () {
        if (PMC_struct_val(SELF))   /* next value */
            pobject_lives(INTERP, (PObj *) PMC_struct_val(SELF));
        if (PMC_pmc_val(SELF))      /* next function */
             pobject_lives(INTERP, (PObj *) PMC_pmc_val(SELF));
    }

/*

=item C<INTVAL get_bool()>

Returns true if there are more elements to return

=cut

*/

    INTVAL get_bool () {
        /* Do I already know what the next iteration will return? */
        if (PMC_struct_val(SELF)) return 1;

        /* Peek ahead */
        new_internal_exception(INTERP);
        push_new_c_exception_handler(INTERP, INTERP->exceptions);
        if (!setjmp(INTERP->exceptions->destination)) {
            PMC_struct_val(SELF) = PyGen_next(INTERP, SELF);
        } else {
            Parrot_exception *exception = INTERP->exceptions;
            if (exception->error != E_StopIteration) {
                rethrow_c_exception(INTERP);
            }
        }

        if (PMC_struct_val(SELF)) return 1;
        return 0;
    }

/*

=item C<PMC* get_iter ()>

Return a new iterator for generator.

=cut

For now, return self.  TODO: revisit this.

*/

    PMC* get_iter () {
        return SELF;
    }

/*

=item C<void setprop(STRING *key, PMC *value)>

Sets the property for C<*key> to C<*value>.

=cut

*/

    void setprop(STRING* key, PMC* value) {
        if (0 == string_compare(INTERP, key, PyString_next))
            PObj_get_FLAGS(value) |= SUB_FLAG_GENERATOR;
        SUPER(key, value);
    }

/*

=item C<void set_pmc(PMC *value)>

Sets the value of the NEXT function.

=cut

*/

    void set_pmc (PMC* value) {
        PMC_pmc_val(SELF) = value;
    }

/*

=item C<PMC* shift_pmc()>

Returns the next yielded element.

=cut

*/

    PMC* shift_pmc () {
        PMC *ret;

        if (PMC_struct_val(SELF)) {
            ret = PMC_struct_val(SELF);
            PMC_struct_val(SELF) = NULL;
        }
        else {
            ret = PyGen_next(INTERP, SELF);
        }

        return ret;
    }


/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
