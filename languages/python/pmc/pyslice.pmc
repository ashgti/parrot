/*
Copyright (C) 2004, The Perl Foundation.
$Id$

=head1 NAME

pmc/pyslice.pmc - Python Slice PMC

=head1 DESCRIPTION

These are the vtable functions for the Python slice PMC class.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "pyconsts.h"

pmclass PySlice need_ext extends Slice dynpmc group python_group {

/*

=item C<PMC* "__new__"(PMC *class, PMC *start, PMC *stop, PMC *step)>

Create a new slice

=cut

*/

    METHOD PMC* __new__(PMC *class, PMC *start, PMC *stop, PMC *step) {
        int argcP = REG_INT(3);
        PMC *xro = pmc_new_noinit(INTERP, PyBuiltin_PySlice);

        parrot_range_t *range = mem_sys_allocate(sizeof *range);

        PMC_struct_val(xro) = range;
        range->next = NULL;
        range->type = enum_type_INTVAL;
        if (argcP == 2) {
            RVal_int(range->start) = 0;
            RVal_int(range->end) = VTABLE_get_integer(INTERP, start);
            RVal_int(range->step) = 1;
        }
        else if (argcP == 3) {
            RVal_int(range->start) = VTABLE_get_integer(INTERP, start);
            RVal_int(range->end) = VTABLE_get_integer(INTERP, stop);
            RVal_int(range->step) = 1;
        }
        else if (argcP == 4) {
            RVal_int(range->start) = VTABLE_get_integer(INTERP, start);
            RVal_int(range->end) = VTABLE_get_integer(INTERP, stop);
            RVal_int(range->step) = VTABLE_get_integer(INTERP, step);
            if (RVal_int(range->step) == 0)
                real_exception(INTERP, NULL, E_ValueError,
                        "xrange() step argument must not be zero");
        }
        else
            real_exception(INTERP, NULL, E_TypeError,
                    "xrange() requires 1-3 int arguments");
        RVal_int(range->cur) = RVal_int(range->start);
        if (RVal_int(range->step) > 0)
            RVal_int(range->end)--;
        else
            RVal_int(range->end)++;
        PMC_pmc_val(xro) = pmc_new_noinit(INTERP, PyBuiltin_PyInt);
        PObj_custom_mark_destroy_SETALL(xro);
        return xro;
    }

/*

=item C<PMC *get_class()>

Return the class of this object.

=cut

*/

    PMC* get_class() {
        return PyBuiltin_PySlice_class;
    }

/*

=item <PMC* get_pmc_keyed(PMC* key)>

Returns the PMC value of the element at index C<key>.

=cut

*/

    PMC* get_pmc_keyed (PMC* key) {
        INTVAL next = VTABLE_get_integer(INTERP, SUPER(key));
        PMC *res = pmc_new(INTERP, PyBuiltin_PyInt);
        VTABLE_set_integer_native(INTERP, res, next);
        return res;
    }


/*

=item C<void* invoke(void*)>

Invoke is not supported by instances.

=cut

*/

    void* invoke(void *next) {
        return Parrot_default_invoke(INTERP, SELF, next);
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
