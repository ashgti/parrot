=head1 Perl 6 parser

This is a Perl 6 parser/compiler, an early version (no version numbers 
yet).  It's still very early, only simple expressions and functions are
available.  If you're in a hurry to write "real Perl 6" programs,  
you might try looking at Pugs -- http://www.pugscode.org.  Or, you
can send patches and contributions to the one being built here!

However, even though this is not a complete compiler yet, you can
still see how Perl 6 programs are parsed, help us create test
cases, and extend/improve the grammar and runtime to cover more 
of Perl 6.  Here's how the system currently works:

=head2 Compiling

The Perl 6 parser lives in the perl6.pbc file.  To create this
file, simply issue the command

  $ make

To invoke the parser from a shell prompt on a (Perl 6)
input file named "foo.p6", use:

  $ parrot perl6.pbc foo.p6

To run interactively, entering single-line statements:

  $ parrot perl6.pbc

To display the parse tree, add the "--target=parse" option:

  $ parrot perl6.pbc --target=parse foo.p6

Or, to display the abstract syntax tree or the generated PIR
code, use "--target=PAST" or "--target=PIR".

To get a dump of the parser's operator precedence table,
use --dump-optable:

  $ parrot perl6.pbc --dump-optable

=head2 Files

The "top" file for the parser is F<perl6.pir> which is used to
create the F<perl6.pbc> file.  It initializes the overall
parsing system and registers the parser as a Parrot "Perl6" compiler.

The other files needed for parsing are in the F<lib/> subdirectory.

The F<lib/grammar.pge> file defines the "top-down" grammar used for
large Perl 6 program structures.  It consists of rule statements
defined in Perl 6 rules syntax and is compiled using the
C<rulec.pir> "rules compiler" from PGE to produce a lib/grammar.pir
file with the PIR version of the rules.  (For more information on 
Perl 6 rules, see Synopsis 5 and the Parrot Grammar Engine in the 
F<compilers/pge> directory.)

The F<lib/parse.pir> file defines the "bottom-up" parser 
operators, as well as any special-purpose rules needed for
parsing Perl 6 that are better written directly in PIR instead
of using the top-down rules syntax or bottom-up operator
precedence parser.  

The F<lib/pge2past.tge> is a tree grammar that specifies how to
convert the parse tree into the abstract syntax tree (PAST), and
F<lib/past2pir.tge> generates PIR from PAST.  These are both
held together by the F<lib/PAST.pir> file which defines the
Perl6::PAST node structures and other support features.
(See also "What about POST?" below.)

The F<lib/main.pir> file controls what happens when the perl6.pbc
file is invoked directly from parrot (as opposed to being
loaded via the load_bytecode op).

The PIR files in F<lib/> are included as part of compiling
F<perl6.pir> to produce F<perl6.pbc>.  

The F<perl6.pbc> file can also be used to compile Perl 6 code
from PIR:

    load_bytecode "perl6.pbc"
    $S0 = 'say "hello world"'            # source code to compile
    $P0 = compreg("Perl6")               # obtain the compiler
    $P1 = $P0($S0)                       # compile source code
    $P1()                                # execute

One can also provide the "target" option to the compiler:

    $P1 = $P0($S0, 'target'=>'parse')    # obtain parse tree
    $P1 = $P0($S0, 'target'=>'PAST')     # get AST
    $P1 = $P0($S0, 'target'=>'PIR')      # get PIR

"What about POST?"

The Perl 6 "Milestones" document says that translation will actually
go from a parse tree to an abstract syntax tree (PAST), then from
PAST to an opcode syntax tree (POST), and then to executable code.
This is still the ultimate plan.  However, to keep things slightly
simpler initially, this version of the compiler simply goes straight
from PAST to PIR until the division of labor between the two
systems is a bit more well-defined and understood.

=head1 AUTHOR

Patrick Michaud (pmichaud@pobox.com) is the author and maintainer.
Patches and suggestions should be sent to the Perl 6 compiler list
(perl6-compiler@perl.org).

=cut
