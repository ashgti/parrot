grammar Perl6::Grammar;


## terms
sub 'term:' is precedence('22=')
    is parsed(&term)
    is pastrule('past_term') { ... }

sub 'circumfix:( )' is equiv('term:')
    is pir("        # circumfix op") { ... }


## method postfix
sub 'postfix:.' is precedence('21=')
    # is parsed(&postfix_dot)
    is nows { ... }

sub 'postcircumfix:.+' is equiv('postfix:.') is nows { ... }
sub 'postcircumfix:.?' is equiv('postfix:.') is nows { ... }
sub 'postcircumfix:.*' is equiv('postfix:.') is nows { ... }
sub 'postcircumfix:.< >' is equiv('postfix:.') is nows { ... }
sub 'postcircumfix:.<< >>' is equiv('postfix:.') is nows { ... }
sub 'postcircumfix:.( )' is equiv('postfix:.') is nows { ... }
sub 'postcircumfix:.[ ]' is equiv('postfix:.') is nows { ... }
sub 'postcircumfix:.{ }' is equiv('postfix:.') is nows { ... }
sub 'postcircumfix:< >' is equiv('postfix:.') is nows { ... }
sub 'postcircumfix:<< >>' is equiv('postfix:.') is nows { ... }
sub 'postcircumfix:( )' is equiv('postfix:.') is nows { ... }
sub 'postcircumfix:[ ]' is equiv('postfix:.') is nows { ... }
sub 'postcircumfix:{ }' is equiv('postfix:.') is nows { ... }


## autoincrement
sub 'postfix:++' is precedence('20=')
    is pir("    %r = clone %0\n    inc %0") { ... }

sub 'postfix:--' is equiv('postfix:++')
    is pir("    %r = clone %0\n    dec %0") { ... }

sub 'prefix:++' is equiv('postfix:++')
    is pir("    inc %0")
    { ... }

sub 'prefix:--' is equiv('postfix:++')
    is pir("    dec %0")
    { ... }


## exponentiation
sub 'infix:**' is precedence('19=') { ... }


## symbolic unary
sub 'prefix:!' is precedence('18=')
    is pir("    $I0 = isfalse %0\n    %t = $I0")
    { ... }

sub 'prefix:+' is equiv('prefix:!')
    is pir("    %t = %0 + 0")
    { ... }

sub 'prefix:-' is equiv('prefix:!')
    is pir("    %t = neg %0")
    { ... }

sub 'prefix:~' is equiv('prefix:!')
    is pir("    %t = concat %0, ''")
    { ... }

sub 'prefix:?' is equiv('prefix:!')
    is pir("    $I0 = istrue %0\n    %t = $I0")
    { ... }

# waiting for term: rules
# sub 'prefix:$' is equiv('prefix:!') { ... }
# sub 'prefix:@' is equiv('prefix:!') { ... }
# sub 'prefix:%' is equiv('prefix:!') { ... }
# sub 'prefix:&' is equiv('prefix:!') { ... }
sub 'prefix:*' is equiv('prefix:!') { ... }
sub 'prefix:**' is equiv('prefix:!') { ... }
sub 'prefix:+^' is equiv('prefix:!') { ... }
sub 'prefix:~^' is equiv('prefix:!') { ... }
sub 'prefix:?^' is equiv('prefix:!') { ... }
sub 'prefix:\' is equiv('prefix:!') { ... } #'
sub 'prefix:^' is equiv('prefix:!') { ... }


## multiplicative
sub 'infix:*' is precedence('17=')
    is pir("    %t = %0 * %1")
    { ... }

sub 'infix:/' is equiv('infix:*')
    is pir("    %t = %0 / %1")
    { ... }

sub 'infix:%' is equiv('infix:*')
    is pir("    %t = mod %0, %1")
    { ... }

sub 'infix:x' is equiv('infix:*') { ... }
sub 'infix:xx' is equiv('infix:*') { ... }
sub 'infix:+&' is equiv('infix:*') { ... }
sub 'infix:+<' is equiv('infix:*') { ... }
sub 'infix:+>' is equiv('infix:*') { ... }
sub 'infix:~&' is equiv('infix:*') { ... }
sub 'infix:~<' is equiv('infix:*') { ... }
sub 'infix:~>' is equiv('infix:*') { ... }


## additive
sub 'infix:+' is precedence('16=')
    is pir("    %t = %0 + %1")
    { ... }

sub 'infix:-' is equiv('infix:+')
    is pir("    %t = %0 - %1")
    { ... }

sub 'infix:~' is equiv('infix:+')
    is pir("    %t = concat %0, %1")
    { ... }

sub 'infix:+|' is equiv('infix:+') { ... }
sub 'infix:+^' is equiv('infix:+') { ... }
sub 'infix:~|' is equiv('infix:+') { ... }
sub 'infix:~^' is equiv('infix:+') { ... }


## junctive and (all)
sub 'infix:&' is precedence('15=') { ... }


## junctive or (any)
sub 'infix:|' is precedence('14=') { ... }
sub 'infix:^' is equiv('infix:|') { ... }


## named unary
sub 'prefix:rand' is precedence('13=')
    is nullterm
    { ... }

sub 'prefix:sleep' is equiv('rand')
    is nullterm
    { ... }

sub 'prefix:abs' is equiv('rand')
    is nullterm
    { ... }


## nonchaining binary
sub 'infix:<=>' is precedence('12=') is assoc('non')
    { ... }

sub 'infix:cmp' is equiv('infix:<=>')
    { ... }

sub 'infix:but' is equiv('infix:<=>')
    { ... }

sub 'infix:does' is equiv('infix:<=>')
    { ... }

sub 'infix:..' is equiv('infix:<=>')
    { ... }

sub 'infix:^..' is equiv('infix:<=>')
    { ... }

sub 'infix:..^' is equiv('infix:<=>')
    { ... }

sub 'infix:^..^' is equiv('infix:<=>')
    { ... }
## TODO: ff ^ff etc.


## chaining binary
sub 'infix:==' is precedence('11=') is assoc('chain')
    is pir("    $I0 = cmp_num %0, %1\n    $I0 = iseq $I0, 0\n    %t = $I0")
    { ... }

sub 'infix:!=' is equiv('infix:==')
    is pir("    $I0 = cmp_num %0, %1\n    $I0 = isne $I0, 0\n    %t = $I0")
    { ... }

sub 'infix:<' is equiv('infix:==')
    is pir("    $I0 = cmp_num %0, %1\n    $I0 = islt $I0, 0\n    %t = $I0")
    { ... }

sub 'infix:<=' is equiv('infix:==')
    is pir("    $I0 = cmp_num %0, %1\n    $I0 = isle $I0, 0\n    %t = $I0")
    { ... }

sub 'infix:>' is equiv('infix:==')
    is pir("    $I0 = cmp_num %0, %1\n    $I0 = isgt $I0, 0\n    %t = $I0")
    { ... }

sub 'infix:>=' is equiv('infix:==')
    is pir("    $I0 = cmp_num %0, %1\n    $I0 = isge $I0, 0\n    %t = $I0")
    { ... }

sub 'infix:~~' is equiv('infix:==')
    { ... }

sub 'infix:!~' is equiv('infix:==')
    { ... }

sub 'infix:=~' is equiv('infix:==')
    is pir<"    'die'('brain-o. use ~~ or ~= instead.')">
    { ... }

sub 'infix:eq' is equiv('infix:==')
    is pir("    $I0 = cmp_str %0, %1\n    $I0 = iseq $I0, 0\n    %t = $I0")
    { ... }

sub 'infix:ne' is equiv('infix:==')
    is pir("    $I0 = cmp_str %0, %1\n    $I0 = isne $I0, 0\n    %t = $I0")
    { ... }

sub 'infix:lt' is equiv('infix:==')
    is pir("    $I0 = cmp_str %0, %1\n    $I0 = islt $I0, 0\n    %t = $I0")
    { ... }

sub 'infix:le' is equiv('infix:==')
    is pir("    $I0 = cmp_str %0, %1\n    $I0 = isle $I0, 0\n    %t = $I0")
    { ... }

sub 'infix:gt' is equiv('infix:==')
    is pir("    $I0 = cmp_str %0, %1\n    $I0 = isgt $I0, 0\n    %t = $I0")
    { ... }

sub 'infix:ge' is equiv('infix:==')
    is pir("    $I0 = cmp_str %0, %1\n    $I0 = isge $I0, 0\n    %t = $I0")
    { ... }

sub 'infix:=:=' is equiv('infix:==')
    { ... }

sub 'infix:===' is equiv('infix:==')
    { ... }


## tight and
sub 'infix:&&' is precedence('10=')
    is pasttype('cond') { ... }


## tight or
sub 'infix:||' is precedence('09=')
    is pasttype('cond') { ... }

sub 'infix:^^' is equiv('infix:||')
    is pasttype('cond') { ... }

sub 'infix://' is equiv('infix:||')
    is pasttype('cond') { ... }


## ternary
sub 'ternary:?? !!' is precedence('08=') is assoc('right')
    is pasttype('cond') { ... }


## assignment
sub 'infix:=' is precedence('07=') is assoc('right')
    is pir("    assign %0, %1") { ... }

sub 'infix::=' is equiv('infix:=') { ... }
sub 'infix:::=' is equiv('infix:=') { ... }
sub 'infix:+=' is equiv('infix:=') { ... }
sub 'infix:-=' is equiv('infix:=') { ... }
sub 'infix:**=' is equiv('infix:=') { ... }
## TODO: xx= => etc.


## list item separator
sub 'infix:,' is precedence('06=') is assoc('list')
   is nullterm
   is pir<"    %r = list()"> 
   { ... }
## TODO zip


## listop
sub 'infix:<==' is precedence('05=') is assoc('right') { ... }

sub 'prelist:' is equiv('infix:<==')
    is nullterm
    is parsed(&listop) { ... }

sub 'prefix:true' is equiv('infix:<==')
    is pir("    $I0 = istrue %0\n    %t = $I0") { ... }

sub 'prefix:not' is equiv('infix:<==')
    is pir("    $I0 = isfalse %0\n    %t = $I0") { ... }
## TODO print push any all XXX: do these really belong here? ~particle


## pipe forward
sub 'infix:==>' is precedence('04=') { ... }


## loose and
sub 'infix:and' is precedence('03=')
    is pasttype('cond') { ... }


## loose or
sub 'infix:or' is precedence('02=')
    is pasttype('cond') { ... }

sub 'infix:xor' is equiv('infix:or')
    is pasttype('cond') { ... }

sub 'infix:err' is equiv('infix:or')
    is pasttype('cond') { ... }


## expression terminator
sub 'infix:;' is precedence('01=')
    is nullterm
    is pir("    #")
    { ... }

