# $Id$

# arguments we want to run parrot with
PARROT_ARGS =

# places to look for things
BUILD_DIR     = @build_dir@
PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
PMC_DIR       = src/pmc

# Set up extensions
LOAD_EXT      = @load_ext@
O             = @o@
EXE           = @exe@

# Setup some commands
PERL          = @perl@
RM_F          = @rm_f@
PARROT        = ../../parrot$(EXE)
CAT           = $(PERL) -MExtUtils::Command -e cat
BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
PBC_TO_EXE    = $(BUILD_DIR)/pbc_to_exe$(EXE)

all: perl6.pbc

xmas: perl6$(EXE)

SOURCES = perl6.pir \
  src/gen_grammar.pir \
  src/gen_actions.pir \
  src/gen_builtins.pir \
  src/parser/expression.pir \
  src/parser/quote_expression.pir \
  $(PERL6_GROUP)

BUILTINS_PIR = \
  src/classes/Object.pir \
  src/classes/Any.pir \
  src/classes/Bool.pir \
  src/classes/Str.pir \
  src/classes/Num.pir \
  src/classes/Int.pir \
  src/classes/IO.pir \
  src/classes/List.pir \
  src/classes/Mapping.pir \
  src/classes/Range.pir \
  src/classes/Code.pir \
  src/classes/Junction.pir \
  src/classes/Failure.pir \
  src/classes/Role.pir \
  src/classes/Pair.pir \
  src/classes/Whatever.pir \
  src/classes/Capture.pir \
  src/classes/Subset.pir \
  src/classes/Grammar.pir \
  src/builtins/assign.pir \
  src/builtins/cmp.pir \
  src/builtins/control.pir \
  src/builtins/guts.pir \
  src/builtins/io.pir \
  src/builtins/match.pir \
  src/builtins/math.pir \
  src/builtins/misc.pir \
  src/builtins/named-unary.pir \
  src/builtins/op.pir \
  src/builtins/parrot.pir \
  src/builtins/range.pir \
  src/builtins/traits.pir \

$(PMC_DIR)/mutable.pmc : $(PMC_DIR)/mutable_pmc.template build/gen_mutable_pmc.pl
	$(PERL) build/gen_mutable_pmc.pl $(PMC_DIR)/mutable_pmc.template \
		$(PMC_DIR)/mutable.pmc

PMCS        = perl6str perl6bool mutable perl6scalar perl6array perl6hash
PMC_SOURCES = $(PMC_DIR)/perl6str.pmc $(PMC_DIR)/perl6bool.pmc \
		$(PMC_DIR)/mutable.pmc $(PMC_DIR)/perl6scalar.pmc \
		$(PMC_DIR)/perl6array.pmc $(PMC_DIR)/perl6hash.pmc
PERL6_GROUP = $(PMC_DIR)/perl6_group$(LOAD_EXT)

# targets for building a standalone perl6.
# (We're not quite ready to make this a default target.)
perl6$(EXE): perl6.pbc
	$(PBC_TO_EXE) perl6.pbc

# the default target
perl6.pbc: $(PARROT) $(SOURCES)
	$(PARROT) $(PARROT_ARGS) -o perl6.pbc perl6.pir

src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg src/parser/grammar-oper.pg
	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
	    --output=src/gen_grammar.pir \
	    src/parser/grammar.pg src/parser/grammar-oper.pg

src/gen_actions.pir: $(NQP) $(PCT) src/parser/actions.pm
	$(PARROT) $(PARROT_ARGS) $(NQP) --output=src/gen_actions.pir \
	    --encoding=fixed_8 --target=pir src/parser/actions.pm

src/gen_builtins.pir: $(BUILTINS_PIR)
	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir

$(PERL6_GROUP): $(PARROT) $(PMC_SOURCES)
	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)

# regenerate the Makefile
Makefile: config/makefiles/root.in config/makefiles/utils.in
	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=perl6

# This is a listing of all targets, that are meant to be called by users
help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  all:               perl6.pbc"
	@echo "                     This is the default."
	@echo "  perl6$(EXE):       Some want a pony, others are satisfied with an executable."
	@echo "  xmas:              Christmas is when Perl 6 is released. Alias of perl6$(EXE)."
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite."
	@echo "  testclean:         Clean up test results."
	@echo "  spectest:          Run the official Perl 6 tests."
	@echo "  spectest_regression:  Run the tests of the official test suite that are known to pass."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  realclean:         Removes also files generated by 'Configure.pl'."
	@echo "  distclean:         Removes also anything built, in theory."
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

test: all
	$(PERL) t/harness t/00-parrot t/01-sanity

# this target has nothing to do
testclean:

testtest: all test
	$(PERL) t/harness t/02-test-pm

# NOTE: eventually, we should remove --keep-exit-code and --fudge
#       as the goal is that all tests must pass without fudge
spectest: all t/spec
	cd t/spec && svn up
	$(PERL) t/harness --fudge --keep-exit-code t/spec

spectest_regression: all t/spec t/spectest_regression.data
	cd t/spec && svn up
	$(PERL) t/harness \
        --configfudge \
        --tests-from-file=t/spectest_regression.data \
        --keep-exit-code \
        t/spec/ \

fulltest: all testtest spectest

localtest: t/localtest.data
	$(PERL) t/harness \
        --configfudge \
        --tests-from-file=t/localtest.data \
        --keep-exit-code \
        t/spec/ \

t/localtest.data:
	$(PERL) -MExtUtils::Command -e test_f $@

t/spec:
	svn co http:////svn.pugscode.org//pugs//t//spec t/spec

CLEANUPS = \
  perl6.pbc \
  perl6.c \
  perl6$(O) \
  perl6$(EXE) \
  src/gen_grammar.pir \
  src/gen_actions.pir \
  src/gen_builtins.pir \
  $(PMC_DIR)/*.h \
  $(PMC_DIR)/*.c \
  $(PMC_DIR)/*.dump \
  $(PMC_DIR)/*$(O) \
  $(PMC_DIR)/*$(LOAD_EXT) \
  $(PMC_DIR)/*.exp \
  $(PMC_DIR)/*.ilk \
  $(PMC_DIR)/*.manifest \
  $(PMC_DIR)/*.pdb \
  $(PMC_DIR)/*.lib \
  $(PMC_DIR)/mutable.pmc \


clean:
	$(RM_F) $(CLEANUPS)

realclean: clean
	$(RM_F) src/utils/Makefile Makefile

distclean: realclean
