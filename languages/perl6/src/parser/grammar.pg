# Copyright (C) 2007, The Perl Foundation.
# $Id$

=begin Introduction

This is the rules portion of the grammar for the perl6 compiler,
an implementation of Perl 6 on Parrot.  This grammar is modeled
after the STD.pm grammar that Larry Wall and others are developing,
available from L<http://svn.pugscode.org/pugs/src/perl6/STD.pm>.

Our ultimate goal is to have this grammar and STD.pm converge
with each other, to form an "official" Perl 6 grammar.  But
there's a lot to do between here and that goal.  For one, Parrot
doesn't yet have a rules engine that understands all of the
constructs that appear in STD.pm, such as protoregexes .
Another challenge is that the language specification itself
changes from time to time as the various implementations progress.
So, we can't just blindly copy STD.pm .

When adding a new construct or feature to this grammar,
be sure to look at STD.pm first to see how it achieves the
result.  If STD.pm's approach can be copied directly, do that.
If not, then try to get a close as possible (e.g., by using
STD.pm's names).  And yes, there are times when STD.pm may
adopt things done here.  But we want to keep them as close
as we can.

In each of the rules below, the special notation C<{*}>
marks a point in the rule where a corresponding method
from Perl6::Grammar::Actions (F<src/parser/actions.pl>)
is invoked.  These actions will then construct the abstract
syntax tree nodes as the source program is being parsed.

The C<#=> markers at the ends of lines look like comments,
but they're used to distinguish multiple C<{*}> actions
within a rule.  (This is how STD.pm is organized, also.)
The value following any C<#=> marker is passed as a
'key' argument to the action method invoked by C<{*}>
earlier in the line.

Rules with only one action need no #= comment.

=end overview

grammar Perl6::Grammar is PCT::Grammar;

token TOP {
    <.MARK_STATEMENT_END>
    <statement_block>
    [ $ || <panic: Syntax error> ]
    {*}
}


####  whitespace, comments, pod ####

##  The <ws> token is used to match "whitespace", which includes
##  things like spaces, comments, and pod comments.  It also
##  memoizes the last whitespace token matched into C<$!ws>,
##  and short circuits if we are at the same position as the
##  last ws token matched.

token ws {
    ##  STD.pm: <?{ $¢.pos === $!ws_to }>
    {{  $P0 = get_global '$!ws'
        if null $P0 goto end
        $P1 = $P0.'to'()
        $P2 = match.'to'()
        if $P1 != $P2 goto end
        .return (1)
      end:
        set_global '$!ws', match
    }}
    <!ww>
    [
    | <.unsp>
    | \v+
    | <.unv>
    ]*
}

token unsp {
    \\ <.before [\s|'#']>
    [ \v | <.unv> ]*
}

token unv {
    || \h+
    || ^^ <.pod_comment>
    || '#' \N*
}

##  The <afterws> rule returns true if we're immediate after
##  a set of whitespace.

token afterws {
    ##  <?{ $¢ == $!ws_to != $!ws_from }>
    {{  $P0 = match.'to'()
        $P1 = get_global '$!ws'
        $P2 = $P1.'to'()
        if $P0 != $P2 goto end
        $P2 = $P1.'from'()
        if $P0 == $P1 goto end
        .return (1)
      end:
    }}
    <fail>
}

token pod_comment {
    ^^ '=' <.unsp>?
    [
    | begin <.ws> <ident> .*? \n
      '=' <.unsp>? 'end' <.ws> $<ident> \N*         {*}         #= block
    | \N*                                           {*}         #= misc
    ]
    {*}
}


##  STD.pm doesn't have a statement_block rule -- we have one
##  to distinguish lists of statements that produce blocks
##  from those that don't.

rule statement_block {
    {*}                                          #= open
    <statementlist>
    {*}                                          #= close
}


token lambda { '->' | '<->' }

token pblock { [ <lambda> <signature> ]? {*} <block> }


##  Blocks can also have an implied statement end if the
##  closing brace is the last non-ws thing on the line.

token block {
    '{'
    <statement_block>
    [ '}' || <panic: Missing '}'> ]
    [ \h* <.unv>? \n <.MARK_STATEMENT_END> ]?
    {*}
}


##  Here we deviate from STD.pm a fair bit on the handling of
##  statementlist and statement_end, if only because this
##  version (first prototyped in NQP) seems a bit more
##  straightforward.  We may discover that it won't work.

rule statementlist {
    [ <statement>
        [  <.statement_end> || <panic: Statement not terminated properly> ]
    ]*
    {*}
}

##  The statement_end rule detects when we're at a valid
##  statement termination point.  A semicolon always acts as
##  a valid statement end, as does the presence of any expression
##  terminator.  The MARK_STATEMENT_END subrule is used by other
##  rules to indicate a valid statement end when a terminator
##  isn't present -- e.g., a closing '}' at the end of a line
##  for a <block>.

token terminator { <[ } \] ) ]> | $ }

token statement_end {
    || ';'
    || <?before <terminator>>                    # FIXME: <?terminator>
    || {{ $P0 = get_global '$!endstmt'
          $P1 = get_global '$!ws'
          $P2 = $P1.'from'()
          if $P0 != $P2 goto end
          .return (1)
          end:
       }} <fail>                                 # FIXME: <!>
}

token MARK_STATEMENT_END {
    {{  $P0 = match.'to'()
        $P0 = clone $P0
        set_global '$!endstmt', $P0
    }}
    <.ws>
}


##  Parse a single statement, which may be either a bare block
##  or an expression.  Any statement termination is handled by
##  the calling rule.
rule statement {
    | <statement_control> {*}                    #= statement_control
    | $<expr>=<EXPR>
        [
        || <statement_mod_cond> {*}              #= statement_mod_cond
        || {*}                                   #= expr
        ]
}

rule statement_control {
    | <if_statement> {*}                         #= if_statement
    | <unless_statement> {*}                     #= unless_statement
    | <repeat_statement> {*}                     #= repeat_statement
    | <while_statement> {*}                      #= while_statement
    | <given_statement> {*}                      #= given_statement
    | <when_statement> {*}                       #= when_statement
    | <default_statement> {*}                    #= default_statement
    | <for_statement> {*}                        #= for_statement
    | <use_statement> {*}                        #= use_statement
    | <begin_statement> {*}                      #= begin_statement
    | <end_statement> {*}                        #= end_statement
}

rule if_statement {
    $<sym>=[if]
    <EXPR> <block>
    [ 'elsif' <EXPR> <block> ]*
    [ 'else' $<else>=<block> ]?
    {*}
}

rule unless_statement {
    $<sym>=[unless]
    <EXPR> <block>
    {*}
}

rule repeat_statement {
    $<sym>=[repeat]
    [ $<loop>=[while|until] <EXPR> <block>
    | <block> $<loop>=[while|until] <EXPR>
    ]
    {*}
}

rule while_statement {
    $<sym>=[while|until]
    <EXPR> <block>
    {*}
}

rule given_statement {
    $<sym>=[given]
    <EXPR> <block>
    {*}
}

rule when_statement {
    $<sym>=[when]
    <EXPR> <block>
    {*}
}

rule default_statement {
    $<sym>=[default]
    <block>
    {*}
}

rule for_statement {
    $<sym>=[for]
    <EXPR> <pblock>
    {*}
}

rule use_statement {
    $<sym>=[use] <name>
    [ '-' <ident> ]?     # e.g. 'v6-alpha'
    <EXPR>?
    {*}
}

rule begin_statement {
    $<sym>=[BEGIN]
    <block>
    {*}
}

rule end_statement {
    $<sym>=[END]
    <block>
    {*}
}

rule statement_mod_cond {
    $<sym>=[if|unless] <EXPR> {*}
}

rule statement_prefix {
    $<sym>=[do|try|gather|contend|async|lazy]
    <statement>
    {*}
}


#### Subroutine and method definitions ####

rule plurality_declarator {
    $<sym>=[multi|proto|only] <routine_declarator> {*}
}

token routine_declarator {
    | $<sym>='sub' <routine_def> {*}             #= sub
    | $<sym>='method' <method_def> {*}           #= method
}

rule routine_def {
    <ident>? <multisig>?
    <trait>*
    <block>
    {*}
}

rule method_def {
    <ident>? <multisig>?
    <trait>*
    <block>
    {*}
}

rule trait {
    | <trait_auxiliary>
    | <trait_verb>
}

rule trait_auxiliary {
    | $<sym>=[is] <ident><postcircumfix>?
    | $<sym>=[will] <ident> <block>
}

rule trait_verb {
    | $<sym>=[of|returns] <typename>
    | $<sym>=[handles] <EXPR>
}

rule multisig {
    '(' <signature> ')'
}

rule signature {
    ( <parameter> ( ',' | <?before ')' | '{'> ) )*
    {*}
}

rule type_declarator {
    'subset'
    <name>
    [ of <typename> ]? # XXX should be <fulltypename>
    where <EXPR>
    {*}
}

rule type_constraint {
    [
    | <value>
    | where <EXPR> # XXX <EXPR(%chaining)>
    ]
}

token parameter {
    <type_constraint>*
    [
    | [
        $<named>=[':'?]
        <param_var>
        $<quant>=[ <[ ? ! ]>? ]
      ] {*}                                      #= non-slurp
    | $<quant>=['*'?] <param_var> {*}            #= slurp
    ]
    <trait>*
}

token param_var {
    <sigil> <ident>
    {*}
}


#### Special variables ####

token special_variable {
    $<sym>=[ '$/' | '$!' | '$¢' ] <!before \w> {*}
}

#### Terms ####

token term {
    | <noun> <postfix>* {*}                      #= noun
    | <listop> {*}                               #= listop
    | <compiler_directive> {*}                   #= compiler_directive
    | '*' {*}                                    #= *
}


rule compiler_directive {
    $<sym>='#?perl6:' <term> {*}
}


token postfix {
    <!afterws>
    [
    | <methodop> {*}                             #= methodop
    | <postcircumfix> {*}                        #= postcircumfix
    ]
}


token methodop {
    '.'
    [
    | <ident>
    | <?before '$' | '@' > <variable>
    | <?before <[ ' " ]>> <quote>
#        { $<quote> ~~ /\W/ or .panic("Useless use of quotes") }
    ]
    [
    | <.unsp>? '(' <semilist> ')' {*}            #= semilist
    | ':' <?before \s> <arglist> {*}             #= arglist
    | {*}                                        #= null
    ]
}


token postcircumfix {
    | '(' <semilist> ')' {*}                          #= ( )
    | '[' <semilist> ']' {*}                          #= [ ]
    | '{' <semilist> '}' {*}                          #= { }
    | <?before '<' > <quote_expression: :w :q> {*}    #= < >
}


# XXX Note that 'self' and 'undef' in here should be a term, and that a term
# can be a noun too in STD.pm. However, at the moment that seems to lead us
# to infinite recursion.
token noun {
    | <package_declarator> {*}                   #= package_declarator
    | <scope_declarator> {*}                     #= scope_declarator
    | <plurality_declarator> {*}                 #= plurality_declarator
    | <routine_declarator> {*}                   #= routine_declarator
    | <circumfix> {*}                            #= circumfix
    | <variable> {*}                             #= variable
    | <subcall> {*}                              #= subcall
    | <methodop> {*}                             #= methodop
    | <value> {*}                                #= value
    | <statement_prefix> {*}                     #= statement_prefix
    | <regex_declarator> {*}                     #= regex_declarator
    | <type_declarator> {*}                      #= type_declarator
    | <colonpair> {*}                            #= colonpair
    | <fatarrow> {*}                             #= fatarrow
    | 'self' {*}                                 #= self
    | 'undef' {*}                                #= undef
}


rule package_declarator {
    $<sym>=[module|class|role|grammar]
    <name>
    <trait_or_does>* {*}                         #= open
    [
    || ';' <statement_block> {*}                 #= statement_block
    || <block> {*}                               #= block
    ]
}


# This rule does not appear in STD.pm, but I can't work out how 'does' on a
# class would be parsed by STD.pm, thus this rule for now.
rule trait_or_does {
    | <trait>
    | $<sym>=[does] <name>
}


token variable_decl {
    <variable>
    <trait>*
# XXX let EXPR handle this automatically until we can pass arguments
#    <.ws>
#    [ # XXX <EXPR(%item_assignment)>
#    | $<op>=['='|'.='] <.ws> <EXPR>
#    ]?
    {*}
}


rule scoped {
    <variable_decl> {*}
}

rule scope_declarator {
    $<declarator>=[my|our|state|constant|has]
    <scoped>
    {*}
}

token circumfix {
    | '(' <statementlist> ')' {*}                #= ( )
    | '[' <statementlist> ']' {*}                #= [ ]
    | <?before '{' | <lambda> > <pblock> {*}     #= { }
}

token variable {
    | <special_variable> {*}                     #= special_variable
    | <sigil> <twigil>? <name> {*}               #= $var
    | <sigil> $<matchidx>=[\d+] {*}              #= $0
    | <sigil> <?before '<' > <postcircumfix> {*} #= $<>
}

token sigil { '$' | '@' | '%' | '&' }

token twigil { <[.!^*+?=]> }

token name {
    | <ident> [ '::' <ident> ]*
}

token value {
    | <quote> {*}                                #= quote
    | <number> {*}                               #= number
    | <typename> {*}                             #= typename
}

##  Quoting is tricky -- the <quote_concat> subrule is in
##  F<src/parser/quote_expression.pir> .
token quote {
    [
    | <.before \'>   <quote_expression: :q>
    | <.before '"' > <quote_expression: :qq>
    | <.before '<' > <quote_expression: :w :q>
    # | <.before '«' > <quote_expression: :ww :qq>  FIXME: unicode
    | <.before '/'>  <quote_expression: :regex>
    ]
    {*}
}


token number {
    [ <dec_number> {*}                           #= dec_number
    | <integer> {*}                              #= integer
    | <rad_number> {*}                           #= rad_number
    ]
}

token integer {
    [
    | 0 [ b <[01]>+           [ _ <[01]>+ ]*
        | o <[0..7]>+         [ _ <[0..7]>+ ]*
        | x <[0..9a..fA..F]>+ [ _ <[0..9a..fA..F]>+ ]*
        | d \d+               [ _ \d+]*
        | \d+[_\d+]*
            {{ say "Leading 0 does not indicate octal in Perl 6" }}  # FIXME
        ]
    | \d+[_\d+]*
    ]
    {*}
}

token dec_number {
    \d+[_\d+]* [ '.' \d+[_\d+]* [ <[Ee]> <[+\-]>? \d+ ]? ]
    {*}
}

token radint {
    [
    | <integer> {*}                              #= integer
    | # this alternation is a subset of rad_number
      ':' $<radix>=[\d+] <.unsp>+
      ::  '<'
          $<intpart>=[<[0..9 a..z A..Z _]>]+
          [ '*' $<base>=<radint> '**' $<exp>=<radint> ]?
          '>'
      {*}                                        #= rad_number
    ]
}

token rad_number {
    ':' $<radix>=[\d+] <.unsp>?
    ::
    [
    ||  '<'
        $<intpart>=[<[0..9 a..z A..Z _]>]+
        $<fracpart>=[ '.' <[0..9 a..z A..Z _]>+ ]?
        [ '*' $<base>=<radint> '**' $<exp>=<radint> ]?
        '>'
    || <?before '['> <postcircumfix>
    || <?before '('> <postcircumfix>
    ]
    {*}
}

token typename {
    <?before <.upper> > <name>
    {*}
}

token name {
    <ident> [ '::' <ident> ]*
    {*}
}

token subcall {
    <ident> '.'? '(' <semilist> ')'
    {*}
}

# These regex rules are some way off STD.pm at the moment, but we'll work them
# closer to it over time.
rule regex_declarator {
    | <regex_declarator_regex> {*}          #= regex_declarator_regex
    | <regex_declarator_token> {*}          #= regex_declarator_token
    | <regex_declarator_rule> {*}           #= regex_declarator_rule
}

rule regex_declarator_regex {
    $<sym>='regex'
    <ident>?
    <before '{'> <quote_expression: :regex> {*}
}

rule regex_declarator_token {
    $<sym>='token'
    <ident>?
    <before '{'> <quote_expression: :regex :ratchet> {*}
}

rule regex_declarator_rule {
    $<sym>='rule'
    <ident>?
    <before '{'> <quote_expression: :regex :ratchet :sigspace> {*}
}

##  S05 shows semilist as being a list of statements, in order
##  to support multidimensional argument lists.  For now we
##  just handle a single-dimensional argument list.
rule semilist {
    <EXPR>?
    {*}
}

##  S05 has this as prefix:listop... but since the operand (arglist)
##  is part of the prefix token, PGE's operator precedence parser
##  is left without an argument to parse.  So, for now we treat
##  listop as the last (lowest priority) of the terms to be parsed.
token listop {
    $<sym>=<ident>
    [
    || \s <arglist> {*}                          #= arglist
    || {*}                                       #= noarg
    ]
}

token arglist {
    <EXPR>   # FIXME: need to parse only to list prefix priority
    {*}
}

token fatarrow {
    $<key>=<ident> \h* '=>' $<val>=<EXPR> # XXX should be EXPR(%item_assignment)
    {*}
}

token colonpair {
    ':'
    [
    | '!' <ident>                                        {*}    #= false
    | <ident> $<val>=[ <.unsp>? <postcircumfix> ]?       {*}    #= value
    | <postcircumfix>                                    {*}    #= structural
    | <sigil> <twigil>? <desigilname>                    {*}    #= varname
    ]
}

token desigilname {
    [
    | <?before '$' > <variable>
    | <name>
    ]
    {*}
}

#### expressions and operators ####

##  The EXPR rule is our entry point into the operator
##  precedence parser.  At the moment the operator
##  tokens are defined in F<src/parser/grammar-oper.pg>,
##  using a prototype function syntax (because PGE doesn't
##  yet support protoregexes).  When the operator precedence
##  parser needs a term, it gets it by calling the 'term'
##  token above.

rule EXPR is optable { ... }

proto 'term:' is precedence('z=')
    is parsed(&term)
    { ... }

proto 'prefix:' is precedence('e=')
    is parsed(&listop)
    { ... }
