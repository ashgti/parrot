/*
Copyright (C) 2005-2009, The Perl Foundation.
$Id$

=head1 NAME

pmc/luathread.pmc - Lua Thread

=head1 DESCRIPTION

C<LuaThread> extends C<LuaAny> to provide a class with the behaviour
of the Lua C<Thread> type.
This implementation is based on C<Parrot::Coroutine>.

=head2 Overloaded Methods

=over 4

=cut

*/

#include "lua_private.h"

#define t_val(pmc) (PARROT_LUATHREAD(pmc))->val
#define t_env(pmc) (PARROT_LUATHREAD(pmc))->env

static PMC* curr_func(PARROT_INTERP) {
    Parrot_Context * const ctx = CONTEXT(interp);
    return ctx->current_sub;
}

static PMC* getcurrenv(PARROT_INTERP) {
    PMC *env = NULL;
    PMC * const sub = curr_func(interp);
    if (sub) {
        env = PMC_metadata(sub);
    }
    return env;
}


pmclass LuaThread
    extends LuaAny
    dynpmc
    need_ext
    group lua_group
    hll lua {

    ATTR PMC    *val;
    ATTR PMC    *env;

/*

=item C<void init()>

Raises an exception. Use C<init_pmc()>.

=cut

*/
    VTABLE void init() {
        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
            "LuaThread init without sub");
    }

/*

=item C<void init_pmc(PMC *sub)>

=cut

*/
    VTABLE void init_pmc(PMC *sub) {
        PMC * const classobj = Parrot_oo_get_class_str(INTERP,
                          Parrot_str_new_constant(INTERP, "Parrot::Coroutine"));
        Parrot_LuaThread_attributes * const t = mem_allocate_zeroed_typed(Parrot_LuaThread_attributes);
        PMC *init_args;

        if (PMC_IS_NULL(classobj))
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_GLOBAL_NOT_FOUND,
                           "Parrot::Coroutine not found");

        PMC_data(SELF) = t;
        init_args = pmc_new(INTERP, enum_class_Hash);
        VTABLE_set_pmc_keyed_str(INTERP, init_args,
                                 Parrot_str_new_constant(INTERP, "initial_sub"), sub);
        t_val(SELF) = VTABLE_instantiate(INTERP, classobj, init_args);
        t_env(SELF) = getcurrenv(INTERP);
        PObj_custom_mark_destroy_SETALL(SELF);
    }

/*

=item C<void mark()>

Marks the Parrot::Coroutine as live.

=cut

*/
    VTABLE void mark() {
        if (t_val(SELF))
            pobject_lives(INTERP, (PObj *)t_val(SELF));
        if (t_env(SELF))
            pobject_lives(INTERP, (PObj *)t_env(SELF));
    }

/*

=item C<void destroy()>

Call finalizer and free the thread.

=cut

*/
    VTABLE void destroy() {
        Parrot_LuaThread_attributes *u = PARROT_LUATHREAD(SELF);
        if (u) {
            mem_sys_free(u);
            PMC_data(SELF) = NULL;
        }
    }

/*

=item C<STRING* name()>

Return the string "thread".

=cut

*/
    VTABLE STRING* name() {
        return Parrot_str_new_constant(INTERP, "thread");
    }

/*

=item C<PMC* clone()>

=cut

*/
    VTABLE PMC* clone() {
        return SELF;
    }

/*

=item C<PMC* get_attr_str(STRING *key)>

=cut

*/
    VTABLE PMC* get_attr_str(STRING *key) {
        return t_val(SELF);
    }

/*

=item C<STRING* get_string()>

=cut

*/
    VTABLE STRING* get_string() {
        return Parrot_sprintf_c(INTERP, "thread: %08X", SELF);
    }

/*

=item C<void set_pmc(PMC *value)>

=cut

*/
    VTABLE void set_pmc(PMC *value) {
        t_val(SELF) = t_val(value);
        t_env(SELF) = t_env(value);
    }

/*

=back

=head2 non-Vtable Methods

=over 4

=item C<INTVAL is_equal(PMC *value)>

=cut

*/
    MULTI INTVAL is_equal(LuaThread value) {
        return (SELF == value) ? (INTVAL)1 : (INTVAL)0;
    }

    MULTI INTVAL is_equal(DEFAULT value) {
        return (INTVAL)0;
    }

/*

=back

=head2 Specific Methods

=over 4

=item C<PMC *getfenv()>

=cut

*/
    METHOD PMC* getfenv() {
        PMC *retval = t_env(SELF);

        if (!retval)
            retval = pmc_new(INTERP, dynpmc_LuaNil);

        RETURN(PMC *retval);
    }

/*

=item C<PMC* rawequal(PMC *value)>

=cut

*/
    METHOD PMC* rawequal(PMC *value) {
        const INTVAL b = (PMC_type(SELF) == PMC_type(value) && SELF == value)
                         ? 1 : 0;
        PMC * const retval = pmc_new(INTERP, dynpmc_LuaBoolean);
        VTABLE_set_integer_native(INTERP, retval, b);
        RETURN(PMC *retval);
    }

/*

=item C<void setfenv(PMC *env)>

=cut

*/
    METHOD void setfenv(PMC *env) {
        t_env(SELF) = env;
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
