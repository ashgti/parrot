# Copyright (C) 2006-2007, The Perl Foundation.
# $Id$

=head1 NAME

PASTGrammar.tg - A grammar for transforming the output of a PGE parse
into an abstract syntax tree (PAST).

=head1 DESCRIPTION


=cut

grammar Lua::PAST::Grammar is TGE::Grammar;


transform past (ROOT) :language('PIR') {
    new $P0, 'Integer'
    set $P0, 0
    set_hll_global ['Lua::PAST'], '$looplevel', $P0
    new $P0, 'Boolean'
    set $P0, 1
    set_hll_global ['Lua::PAST'], '?vararg', $P0
    .local pmc symbtab
    new symbtab, 'Lua::Symbtab'
    symbtab.'push_scope'()
    set_hll_global ['Lua::PAST'], '$symbtab', symbtab
    .local pmc past
    $P0 = node['block']
    past = tree.'get'('past', $P0, 'Lua::Grammar::block')
    $I0 = symbtab
    if $I0 goto L1
    .local pmc arg
    arg = past.'new'('PAST::Var', 'node'=>node, 'name'=>'vararg', 'scope'=>'parameter', 'isslurpy'=>1)
    .return past.'new'('PAST::Block', arg, past, 'node'=>node, 'name'=>'&main')
  L1:
    $S1 = $I0
    $S0 = "symbol table (" . $S1
    $S0 .= ")"
    internal_error($S0)
}


transform past (Lua::Grammar::block) :language('PIR') {
    .local pmc past
    new past, 'PAST::Stmts'
    past.'init'('node'=>node)
    $P0 = node['statement']
    if null $P0 goto L1
    .local pmc iter, cpast
    new iter, 'Iterator', $P0
  L2:
    unless iter goto L1
    $P0 = shift iter
    cpast = tree.'get'('past', $P0, 'Lua::Grammar::statement')
    past.'push'(cpast)
    goto L2
  L1:
    $P0 = node['last_statement']
    if null $P0 goto L3
    $P0 = shift $P0
    cpast = tree.'get'('past', $P0, 'Lua::Grammar::statement')
    past.'push'(cpast)
  L3:
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    symbtab.'pop_scope'()
    .return (past)
}


transform past (Lua::Grammar::statement) :language('PIR') {
    $S0 = node.'find_key'()
    $P0 = node[$S0]
    $S0 = concat 'Lua::Grammar::', $S0
    .return tree.'get'('past', $P0, $S0)
}


transform past (Lua::Grammar::do_block) :language('PIR') {
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    symbtab.'push_scope'()
    $P0 = node['block']
    .return tree.'get'('past', $P0, 'Lua::Grammar::block')
}


transform past (Lua::Grammar::if_stat) :language('PIR') {
    .local pmc expr
    $P0 = node['expression']
    expr = tree.'get'('past', $P0, 'Lua::Grammar::expression')
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    symbtab.'push_scope'()
    .local pmc past, cpast, blk
    $P0 = node['block']
    blk = tree.'get'('past', $P0, 'Lua::Grammar::block')
    past = expr.'new'('PAST::Op', expr, blk, 'node'=>node, 'pasttype'=>'if')
    cpast = past
    $P0 = node['elseif_block']
    if null $P0 goto L1
    .local pmc iter
    new iter, 'Iterator', $P0
  L2:
    unless iter goto L1
    $P0 = shift iter
    $P1 = tree.'get'('past', $P0, 'Lua::Grammar::elseif_block')
    cpast.'push'($P1)
    cpast = $P1
    goto L2
  L1:
    $P0 = node['else_block']
    if null $P0 goto L3
    symbtab.'push_scope'()
    $P0 = shift $P0
    $P0 = $P0['block']
    blk = tree.'get'('past', $P0, 'Lua::Grammar::block')
    cpast.'push'(blk)
  L3:
    .return (past)
}


transform past (Lua::Grammar::elseif_block) :language('PIR') {
    .local pmc expr
    $P0 = node['expression']
    expr = tree.'get'('past', $P0, 'Lua::Grammar::expression')
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    symbtab.'push_scope'()
    .local pmc blk
    $P0 = node['block']
    blk = tree.'get'('past', $P0, 'Lua::Grammar::block')
    .return expr.'new'('PAST::Op', expr, blk, 'node'=>node, 'pasttype'=>'if')
}


transform past (Lua::Grammar::while_stat) :language('PIR') {
    .local pmc looplevel
    looplevel = get_hll_global ['Lua::PAST'], '$looplevel'
    inc looplevel
    .local pmc expr
    $P0 = node['expression']
    expr = tree.'get'('past', $P0, 'Lua::Grammar::expression')
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    symbtab.'push_scope'()
    .local pmc blk
    $P0 = node['block']
    blk = tree.'get'('past', $P0, 'Lua::Grammar::block')
    dec looplevel
    .return expr.'new'('PAST::Op', expr, blk, 'node'=>node, 'pasttype'=>'while')
}


transform past (Lua::Grammar::repeat_stat) :language('PIR') {
    .local pmc looplevel
    looplevel = get_hll_global ['Lua::PAST'], '$looplevel'
    inc looplevel
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    symbtab.'push_scope'()
    .local pmc blk
    $P0 = node['block']
    blk = tree.'get'('past', $P0, 'Lua::Grammar::block')
    .local pmc expr
    $P0 = node['expression']
    expr = tree.'get'('past', $P0, 'Lua::Grammar::expression')
    dec looplevel
    .return expr.'new'('PAST::Op', blk, expr, 'node'=>node, 'pasttype'=>'repeat')
}


transform past (Lua::Grammar::for_stat) :language('PIR') {
    .local pmc looplevel
    looplevel = get_hll_global ['Lua::PAST'], '$looplevel'
    inc looplevel
    .local pmc past
    $S0 = node.'find_key'()
    $P0 = node[$S0]
    $S1 = concat 'Lua::Grammar::', $S0
    past = tree.'get'('past', $P0, $S1)
    .local pmc blk
    $P0 = node['for_body']
    $P0 = $P0['block']
    blk = tree.'get'('past', $P0, 'Lua::Grammar::block')
    dec looplevel
    past.'push'(blk)
    .return (past)
}


transform past (Lua::Grammar::fornum) :language('PIR') {
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    symbtab.'push_scope'()
    $P0 = node['name']
    $S0 = $P0.'result_object'()
    .local pmc name
    new name, 'PAST::Var'
    $S1 = symbtab.'insert'($S0)
    name.'init'('node'=>node, 'name'=>$S1, 'scope'=>'lexical', 'ismy'=>1, 'islvalue'=>1)
    .local pmc explist
    new explist, 'ResizablePMCArray'
    $P0 = node['expression']
    $I0 = $P0
    .local pmc iter, expr
    new iter, 'Iterator', $P0
  L1:
    unless iter goto L2
    $P0 = shift iter
    expr = tree.'get'('past', $P0, 'Lua::Grammar::expression')
    push explist, expr
    goto L1
  L2:
    unless $I0 < 3 goto L3
    expr = name.'new'('PAST::Val', 'node'=>node, 'vtype'=>'LuaNumber', 'name'=>'1')
    push explist, expr
  L3:
    .return name.'new'('PAST::Op', name, explist, 'node'=>node, 'pasttype'=>'fornum')
}


transform past (Lua::Grammar::forlist) :language('PIR') {
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    symbtab.'push_scope'()
    .local pmc namelist
    new namelist, 'ResizablePMCArray'
    $P0 = node['name_list']
    $P0 = $P0['name']
    .local pmc iter, cpast
    new iter, 'Iterator', $P0
  L1:
    unless iter goto L2
    $P0 = shift iter
    $S0 = $P0.'result_object'()
    new cpast, 'PAST::Var'
    $S1 = symbtab.'insert'($S0)
    cpast.'init'('node'=>node, 'name'=>$S1, 'scope'=>'lexical', 'ismy'=>1, 'islvalue'=>1)
    push namelist, cpast
    goto L1
  L2:
    $P0 = node['expression_list']
    .local pmc explist
    explist = tree.'get'('explist', $P0, 'Lua::Grammar::expression_list')
    .local pmc past
    new past, 'PAST::Op'
    .return past.'init'(namelist, explist, 'node'=>node, 'pasttype'=>'forlist')
}


transform past (Lua::Grammar::local_stat) :language('PIR') {
    $S0 = node.'find_key'()
    $P0 = node[$S0]
    $S0 = concat 'Lua::Grammar::', $S0
    .return tree.'get'('past', $P0, $S0)
}


transform past (Lua::Grammar::local_declaration) :language('PIR') {
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    .local pmc explist
    $P0 = node['expression_list']
    if null $P0 goto L1
    $P0 = shift $P0
    explist = tree.'get'('explist', $P0, 'Lua::Grammar::expression_list')
  L1:
    unless null explist goto L2
    new explist, 'ResizablePMCArray'
  L2:
    $P0 = node['name']
    .local pmc namelist
    new namelist, 'ResizablePMCArray'
    .local pmc iter, cpast
    new iter, 'Iterator', $P0
  L3:
    unless iter goto L4
    $P0 = shift iter
    $S0 = $P0.'result_object'()
    new cpast, 'PAST::Var'
    $S1 = symbtab.'insert'($S0)
    cpast.'init'('node'=>node, 'name'=>$S1, 'scope'=>'lexical', 'ismy'=>1, 'islvalue'=>1)
    push namelist, cpast
    goto L3
  L4:
    .local pmc past
    new past, 'PAST::Op'
    .return past.'init'(namelist, explist, 'node'=>node, 'pasttype'=>'assignlist')
}


transform past (Lua::Grammar::local_function) :language('PIR') {
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    .local pmc var
    new var, 'PAST::Var'
    $P0 = node['name']
    $S0 = $P0.'result_object'()
    $S1 = symbtab.'insert'($S0)
    var.'init'('PAST::Var', 'node'=>$P0, 'name'=>$S1, 'scope'=>'lexical', 'ismy'=>1, 'islvalue'=>1)
    .local pmc past
    $P0 = node['function_body']
    past = tree.'get'('past', $P0, 'Lua::Grammar::function_body')
    past.'name'($S0)
    .return past.'new'('PAST::Op', var, past, 'node'=>node, 'pasttype'=>'assign')
}


transform past (Lua::Grammar::return_statement) :language('PIR') {
    .local pmc past
    new past, 'PAST::Op'
    $P0 = node['expression_list']
    if null $P0 goto L1
    .local pmc explist
    $P0 = shift $P0
    explist = tree.'get'('explist', $P0, 'Lua::Grammar::expression_list')
    .return past.'init'(explist :flat, 'node'=>node, 'pasttype'=>'return')
  L1:
    .return past.'init'('node'=>node, 'pasttype'=>'return')
}


transform past (Lua::Grammar::break_statement) :language('PIR') {
    .local pmc looplevel
    looplevel = get_hll_global ['Lua::PAST'], '$looplevel'
    if looplevel <= 0 goto L1
    .local pmc past
    new past, 'PAST::Op'
    .return past.'init'('node'=>node, 'pasttype'=>'break')
  L1:
    node.'syntaxerror'("no loop to break")
}


transform past (Lua::Grammar::expression_stat) :language('PIR') {
    $P0 = node['assignment']
    unless null $P0 goto L1
    $P0 = node['primary_expression']
    .return tree.'get'('past', $P0, 'Lua::Grammar::primary_expression')
  L1:
    .local pmc varlist, explist
    $P0 = shift $P0
    explist = tree.'get'('explist', $P0, 'Lua::Grammar::assignment')
    varlist = tree.'get'('varlist', $P0, 'Lua::Grammar::assignment')
    .local pmc expr
    $P0 = node['primary_expression']
    expr = tree.'get'('past', $P0, 'Lua::Grammar::primary_expression')
    expr.'islvalue'(1)
    unshift varlist, expr
    .local pmc past
    new past, 'PAST::Op'
    .return past.'init'(varlist, explist, 'node'=>node, 'pasttype'=>'assignlist')
}


transform varlist (Lua::Grammar::assignment) :language('PIR') {
    .local pmc varlist
    $P0 = node['expression_list']
    if null $P0 goto L1
    new varlist, 'ResizablePMCArray'
    .return (varlist)
  L1:
    $P0 = node['assignment']
    varlist = tree.'get'('varlist', $P0, 'Lua::Grammar::assignment')
    .local pmc expr
    $P0 = node['primary_expression']
    expr = tree.'get'('past', $P0, 'Lua::Grammar::primary_expression')
    expr.'islvalue'(1)
    unshift varlist, expr
    .return (varlist)
}


transform explist (Lua::Grammar::assignment) :language('PIR') {
    $P0 = node['expression_list']
    if null $P0 goto L1
    .return tree.'get'('explist', $P0, 'Lua::Grammar::expression_list')
  L1:
    $P0 = node['assignment']
    .return tree.'get'('explist', $P0, 'Lua::Grammar::assignment')
}


transform explist (Lua::Grammar::function_args) :language('PIR') {
    .local pmc explist, past
    $P0 = node['constructor']
    if null $P0 goto L1
    past = tree.'get'('past', $P0, 'Lua::Grammar::constructor')
    new explist, 'ResizablePMCArray'
    push explist, past
    .return (explist)
  L1:
    $P0 = node['string']
    if null $P0 goto L2
    past = tree.'get'('past', $P0, 'Lua::Grammar::string')
    new explist, 'ResizablePMCArray'
    push explist, past
    .return (explist)
  L2:
    $P0 = node['expression_list']
    unless null $P0 goto L3
    new explist, 'ResizablePMCArray'
    .return (explist)
  L3:
    $P0 = shift $P0
    .return tree.'get'('explist', $P0, 'Lua::Grammar::expression_list')
}


transform past (Lua::Grammar::function_stat) :language('PIR') {
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    .local pmc past, var
    $P0 = node['functionname']
    var = tree.'get'('past', $P0, 'Lua::Grammar::functionname')
    $S0 = $P0.'result_object'()
    $I0 = index $S0, ':'
    if $I0 < 0 goto L1
    new past, 'PAST::Var'
    $S1 = symbtab.'insert'('self')
    past.'init'('node'=>$P0, 'name'=>$S1, 'scope'=>'parameter')
    set_hll_global ['Lua::PAST'], '$?self', past
  L1:
    $S0 = tree.'get'('name', $P0, 'Lua::Grammar::functionname')
    $P0 = node['function_body']
    past = tree.'get'('past', $P0, 'Lua::Grammar::function_body')
    past.'name'($S0)
    .return past.'new'('PAST::Op', var, past, 'node'=>node, 'pasttype'=>'assign')
}


transform name (Lua::Grammar::functionname) :language('PIR') {
    .local string name
    name = ''
    $P0 = node['name']
    .local pmc iter
    new iter, 'Iterator', $P0
  L2:
    unless iter goto L1
    if name == '' goto L3
    name = concat '.'
  L3:
    $P0 = shift iter
    $S0 = $P0.'result_object'()
    name = concat $S0
    goto L2
  L1:
    .return (name)
}


transform past (Lua::Grammar::functionname) :language('PIR') {
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    .local pmc iter
    $P0 = node['name']
    new iter, 'Iterator', $P0
    $P0 = shift iter
    $S0 = $P0.'result_object'()
    .local pmc past
    new past, 'PAST::Var'
    ($I0, $S1) = symbtab.'lookup'($S0)
    unless $I0 goto L1
    past.'init'('node'=>node, 'name'=>$S1, 'scope'=>'lexical')
    goto L2
  L1:
    past.'init'('node'=>node, 'name'=>$S0, 'scope'=>'package')
  L2:
    unless iter goto L3
    $P0 = shift iter
    $S0 = $P0.'result_object'()
    .local pmc key
    key = past.'new'('PAST::Val', 'node'=>$P0, 'vtype'=>'key', 'name'=>$S0)
    past = past.'new'('PAST::Var', past, key, 'node'=>node, 'scope'=>'keyed')
    goto L2
  L3:
    past.'islvalue'(1)
    .return (past)
}


transform past (Lua::Grammar::function_body) :language('PIR') {
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    symbtab.'push_scope'()
    .local pmc parlist
    new parlist, 'ResizablePMCArray'
    .local pmc var
    var = get_hll_global ['Lua::PAST'], '$?self'
    if null var goto L1
    push parlist, var
    null var
    set_hll_global ['Lua::PAST'], '$?self', var
  L1:
    $P0 = node['parameter_list']
    if null $P0 goto L2
    $P1 = $P0['name_list']
    if null $P1 goto L3
    $P1 = $P1['name']
    .local pmc iter
    new iter, 'Iterator', $P1
  L4:
    unless iter goto L3
    $P1 = shift iter
    $S0 = $P1.'result_object'()
    new var, 'PAST::Var'
    $S1 = symbtab.'insert'($S0)
    var.'init'('node'=>$P1, 'name'=>$S1, 'scope'=>'parameter')
    push parlist, var
    goto L4
  L3:
    $P1 = $P0['vararg']
    $I0 = 0
    if null $P1 goto L2
    $P1 = shift $P1
    new var, 'PAST::Var'
    var.'init'('node'=>$P1, 'name'=>'vararg', 'scope'=>'parameter', 'isslurpy'=>1)
    push parlist, var
    $I0 = 1
    goto L5
  L2:
    new var, 'PAST::Var'
    var.'init'('node'=>$P0, 'name'=>'extra', 'scope'=>'parameter', 'isslurpy'=>1)
    push parlist, var
  L5:
    .local pmc has_vararg
    has_vararg = get_hll_global ['Lua::PAST'], '?vararg'
    new $P0, 'Boolean'
    set $P0, $I0
    set_hll_global ['Lua::PAST'], '?vararg', $P0
    .local pmc looplevel
    looplevel = get_hll_global ['Lua::PAST'], '$looplevel'
    new $P0, 'Integer'
    set $P0, 0
    set_hll_global ['Lua::PAST'], '$looplevel', $P0
    .local pmc past
    $P0 = node['block']
    past = tree.'get'('past', $P0, 'Lua::Grammar::block')
    set_hll_global ['Lua::PAST'], '$looplevel', looplevel
    set_hll_global ['Lua::PAST'], '?vararg', has_vararg
    .return past.'new'('PAST::Block', parlist :flat, past, 'node'=>node)
}


transform past (Lua::Grammar::constructor) :language('PIR') {
    .local pmc past
    new past, 'PAST::Val'
    past.'init'('node'=>node, 'vtype'=>'constructor')
    $P0 = node['tablefieldlist']
    if null $P0 goto L1
    $P0 = shift $P0
    $P0 = $P0['tablefield']
    .local pmc iter, field
    $I0 = 1
    new iter, 'Iterator', $P0
  L2:
    unless iter goto L1
    $P0 = shift iter
    $S0 = $P0.'find_key'()
    $P0 = $P0[$S0]
    unless $S0 == 'expression' goto L3
    field = tree.'get'('past', $P0, 'Lua::Grammar::expression')
    past.'push'(field)
    goto L2
  L3:
    $S0 = concat 'Lua::Grammar::', $S0
    field = tree.'get'('record', $P0, $S0)
    past.'push'(field)
    goto L2
  L1:
    .return (past)
}


transform record (Lua::Grammar::record_field) :language('PIR') {
    .local pmc record
    new record, 'FixedPMCArray'
    set record, 2
    $S0 = node.'find_key'()
    $P0 = node[$S0]
    $S0 = concat 'Lua::Grammar::', $S0
    $P1 = tree.'get'('key', $P0, $S0)
    record[0] = $P1
    $P0 = node['expression']
    $P1 = tree.'get'('past', $P0, 'Lua::Grammar::expression')
    record[1] = $P1
    .return (record)
}


transform key (Lua::Grammar::name) :language('PIR') {
    .local pmc past
    $S0 = node.'result_object'()
    new past, 'PAST::Val'
    .return past.'init'('node'=>node, 'vtype'=>'key', 'name'=>$S0)
}


transform key (Lua::Grammar::index) :language('PIR') {
    $P0 = node['expression']
    .return tree.'get'('past', $P0, 'Lua::Grammar::expression')
}


transform explist (Lua::Grammar::expression_list) :language('PIR') {
    .local pmc explist
    new explist, 'ResizablePMCArray'
    $P0 = node['expression']
    .local pmc iter, expr
    new iter, 'Iterator', $P0
  L1:
    unless iter goto L2
    $P0 = shift iter
    expr = tree.'get'('past', $P0, 'Lua::Grammar::expression')
    push explist, expr
    goto L1
  L2:
    .return (explist)
}


transform past (Lua::Grammar::expression) :language('PIR') {
    $P0 = node['expr']
    .return tree.'get'('past', $P0, 'Lua::Grammar::expr')
}


transform past (Lua::Grammar::expr) :language('PIR') {
    .local string type
    type = node['type']
    unless type == 'term:' goto L1
    $S0 = node.'find_key'()
    $P0 = node[$S0]
    $S0 = concat 'Lua::Grammar::', $S0
    .return tree.'get'('past', $P0, $S0)
  L1:
    .local pmc optable, optok
    .local string pirop
    optable = get_hll_global [ 'Lua::Grammar' ], '$optable'
    optok = optable[type]
    pirop = optok['pirop']
    .local pmc past
    new past, 'PAST::Op'
    if pirop == '' goto L2
    past.'init'('node'=>node, 'name'=>type, 'pasttype'=>'pirop', 'pirop'=>pirop)
    goto L3
  L2:
    $S0 = optok['past']
    past.'init'('node'=>node, 'name'=>type, 'pasttype'=>$S0)
  L3:
    $P0 = node.'get_array'()
    .local pmc iter, expr
    new iter, 'Iterator', $P0
  L5:
    unless iter goto L4
    $P0 = shift iter
    expr = tree.'get'('past', $P0, 'Lua::Grammar::expr')
    past.'push'(expr)
    goto L5
  L4:
    .return (past)
}


transform past (Lua::Grammar::simple_expression) :language('PIR') {
    $S0 = node.'find_key'()
    $P0 = node[$S0]
    $S0 = concat 'Lua::Grammar::', $S0
    .return tree.'get'('past', $P0, $S0)
}


transform past (Lua::Grammar::primary_expression) :language('PIR') {
    .local pmc past
    $P0 = node['prefix_expression']
    past = tree.'get'('past', $P0, 'Lua::Grammar::prefix_expression')
    $P0 = node['slice_expression']
    if null $P0 goto L1
    .local pmc iter, key, args
    new iter, 'Iterator', $P0
  L2:
    unless iter goto L1
    $P0 = shift iter
    $P1 = $P0['function_args']
    if null $P1 goto L3
    args = tree.'get'('explist', $P1, 'Lua::Grammar::function_args')
    $P1 = $P0['name']
    if null $P1 goto L4
    .local pmc meth, obj
    key = tree.'get'('key', $P1, 'Lua::Grammar::name')
    meth = past.'new'('PAST::Var', past, key, 'node'=>node, 'scope'=>'keyed')
    obj = clone past
    past = past.'new'('PAST::Op', meth, obj, args :flat, 'node'=>node, 'pasttype'=>'call')
    goto L2
  L4:
    past = past.'new'('PAST::Op', past, args :flat, 'node'=>node, 'pasttype'=>'call')
    goto L2
  L3:
    $P1 = $P0['name']
    if null $P1 goto L5
    key = tree.'get'('key', $P1, 'Lua::Grammar::name')
    past = past.'new'('PAST::Var', past, key, 'node'=>node, 'scope'=>'keyed')
    goto L2
  L5:
    $P1 = $P0['index']
    if null $P1 goto L6
    key = tree.'get'('key', $P1, 'Lua::Grammar::index')
    past = past.'new'('PAST::Var', past, key, 'node'=>node, 'scope'=>'keyed')
    goto L2
  L6:
    internal_error("primary expression")
  L1:
    .return (past)
}


transform past (Lua::Grammar::prefix_expression) :language('PIR') {
    $S0 = node.'find_key'()
    $P0 = node[$S0]
    $S0 = concat 'Lua::Grammar::', $S0
    .return tree.'get'('past', $P0, $S0)
}


transform past (Lua::Grammar::parenthesed_expression) :language('PIR') {
    .local pmc past
    $P0 = node['expression']
    past = tree.'get'('past', $P0, 'Lua::Grammar::expression')
    .return past.'new'('PAST::Op', past, 'node'=>node, 'pasttype'=>'parenthese')
}


transform past (Lua::Grammar::name) :language('PIR') {
    .local pmc symbtab
    symbtab = get_hll_global ['Lua::PAST'], '$symbtab'
    .local pmc past
    new past, 'PAST::Var'
    $S0 = node.'result_object'()
    ($I0, $S1) = symbtab.'lookup'($S0)
    unless $I0 goto L1
    .return past.'init'('node'=>node, 'name'=>$S1, 'scope'=>'lexical')
  L1:
    .return past.'init'('node'=>node, 'name'=>$S0, 'scope'=>'package')
}


transform past (Lua::Grammar::vararg) :language('PIR') {
    .local pmc has_vararg
    has_vararg = get_hll_global ['Lua::PAST'], '?vararg'
    unless has_vararg goto L1
    .local pmc past
    new past, 'PAST::Op'
    .return past.'init'('node'=>node, 'pasttype'=>'vararg')
  L1:
    node.'syntaxerror'("cannot use '...' outside a vararg function")
}


transform past (Lua::Grammar::nil) :language('PIR') {
    .local pmc past
    new past, 'PAST::Val'
    .return past.'init'('node'=>node, 'vtype'=>'LuaNil')
}


transform past (Lua::Grammar::true) :language('PIR') {
    .local pmc past
    new past, 'PAST::Val'
    .return past.'init'('node'=>node, 'vtype'=>'LuaBoolean', 'name'=>1)
}


transform past (Lua::Grammar::false) :language('PIR') {
    .local pmc past
    new past, 'PAST::Val'
    .return past.'init'('node'=>node, 'vtype'=>'LuaBoolean', 'name'=>0)
}


transform past (Lua::Grammar::number) :language('PIR') {
    $S0 = node.'result_object'()
    .local pmc past
    new past, 'PAST::Val'
    .return past.'init'('node'=>node, 'vtype'=>'LuaNumber', 'name'=>$S0)
}


transform past (Lua::Grammar::string) :language('PIR') {
    $S0 = node.'find_key'()
    $P0 = node[$S0]
    $S0 = $P0.'result_object'()
    .local pmc past
    new past, 'PAST::Val'
    .return past.'init'('node'=>node, 'vtype'=>'LuaString', 'name'=>$S0)
}

=head1 AUTHORS

Klaas-Jan Stol <parrotcode@gmail.com>

Francois Perrad

=cut

