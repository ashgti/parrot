# Copyright (C) 2007, The Perl Foundation.
# $Id$

=head1 NAME

POSTGrammar.tg - A grammar for transforming the abstract syntax tree (PAST)
into an opcode syntax tree (POST).

=head1 DESCRIPTION


=cut

grammar Lua::POST::Grammar is TGE::Grammar;


transform post (PAST::Block) :language('PIR') {
    .local string name
    name = node.'name'()
    if name != '' goto with_name
    name = node.unique('anon_')
  with_name:
    .local pmc endlabels
    endlabels = get_hll_global ['Lua::POST'], '@endlabels'
    $P0 = new .ResizablePMCArray
    set_hll_global ['Lua::POST'], '@endlabels', $P0
    .local pmc outerpost
    outerpost = get_hll_global ['Lua::POST'], '$?SUB'
    .local pmc post
    post = new 'POST::Sub'
    post.'init'('node'=>node, 'name'=>name, 'outer'=>outerpost, 'pragma'=>':anon :lex', 'blocktype'=>'declaration', 'result'=>'')
    set_hll_global ['Lua::POST'], '$?SUB', post
    post.'push_pirop'('inline', '    .local pmc subr')
    post.'push_pirop'('inline', '    subr = interpinfo .INTERPINFO_CURRENT_SUB')
    .local pmc iter
    iter = node.'iterator'()
  iter_loop:
    unless iter goto iter_end
    $P0 = shift iter
    $P1 = tree.'get'('post', $P0)
    post.'push'($P1)
    goto iter_loop
  iter_end:
    set_hll_global ['Lua::POST'], '$?SUB', outerpost
    set_hll_global ['Lua::POST'], '@endlabels', endlabels
  unless null outerpost goto no_chunk
    .local pmc start
    start = post.'new'('POST::Sub', 'name'=>'&start', 'pragma'=>':main', 'result'=>'')
    start.'push_pirop'('inline', '#    print "start\n"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luabasic.pbc"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luacoroutine.pir"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luapackage.pbc"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luastring.pir"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luatable.pbc"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luamath.pbc"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luaio.pbc"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luaos.pbc"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luadebug.pbc"')
    start.'push_pirop'('inline', '    .const .Sub main = "&main"')
    start.'push_pirop'('inline', '    $P0 = get_global "_G"')
    start.'push_pirop'('inline', '    main."setfenv"($P0)')
    start.'push_pirop'('inline', '    docall(main)')
    post.'init'('outer'=>start)
    .local pmc onload
    onload = post.'new'('POST::Sub', 'name'=>'&onload', 'pragma'=>':anon :init', 'result'=>'')
    onload.'push_pirop'('inline', '    .const .Sub main = "&main"')
    onload.'push_pirop'('inline', '#    print "onload\n"')
    .return post.'new'('Lua::POST::Chunk', post, onload, start, 'prologue'=><<'PIRCODE')
.include 'interpinfo.pasm'
.HLL "Lua", "lua_group"
PIRCODE
  no_chunk:
    .local pmc ops
    ops = post.'new'('POST::Ops', 'node'=>node)
    ops.'push'(post)
    $S0 = node.'unique'('fct_')
    $S1 = node.'escape'(name)
    ops.'push_pirop'('inline', '    .const .Sub %0 = %1', $S0, $S1)
    $P0 = ops.'push_pirop'('newclosure')
    $P0.'arglist'($P0, $S0)
    $P1= ops.'push_pirop'('callmethod', 'getfenv', 'subr')
    #ops.'push_pirop'('callmethod', 'setfenv', $P0, $P1, 'result'=>'')
    ops.'push_pirop'('callmethod', 'setfenv', $P0, $P1)
    ops.'result'($P0)
    .return (ops)
}


transform post (PAST::Stmts) :language('PIR') {
#    .local pmc ops
#    ops =  new 'POST::Ops'
#    ops.'init'('node'=>node)
#    .local pmc iter
#    iter = node.'iterator'()
#  iter_loop:
#    unless iter goto iter_end
#    $P0 = shift iter
#    $P1 = tree.'get'('post', $P0)
#    ops.'push'($P1)
#    goto iter_loop
#  iter_end:
#    .return (ops)
    .local pmc ops
    ops =  new 'POST::Ops'
    ops.'init'('node'=>node)
    .local pmc iter
    iter = node.'iterator'()
    unless iter goto end
  iter_loop:
    $P0 = shift iter
    $P1 = tree.'get'('post', $P0)
    ops.'push'($P1)
    if iter goto iter_loop
  iter_end:
    ops.'result'($P1)
  end:
    .return (ops)
}


transform post (PAST::Op) :language('PIR') {
    .local string pasttype
    pasttype = node.'pasttype'()
    if pasttype goto post_pasttype

  post_pirop:
    .local string pirop
    pirop = node.'pirop'()
    if pirop goto have_pirop
    node.'pirop'('call')
  have_pirop:
    .return tree.'get'('pirop', node)

  post_pasttype:
    .return tree.'get'(pasttype, node)
}


transform pirop (PAST::Op) :language('PIR') {
    .local string pirop
    .local pmc post
    pirop = node.'pirop'()
    post = new 'POST::Op'
    post.'init'('node'=>node, 'pirop'=>pirop)

    .local pmc pirtable
    .local string signature
    pirtable = get_hll_global ['POST'], '%pirtable'
    signature = pirtable[pirop]
    if signature > '' goto have_signature
    signature = '%uppppppppppppp'                          # FIXME:
  have_signature:
    .local pmc arglist, iter
    .local int aindex
    aindex = 2
    arglist = new .ResizablePMCArray
    iter = node.'iterator'()
  iter_loop:
    unless iter goto iter_end
    .local pmc cpast, cpost
    cpast = shift iter
    $S0 = substr signature, aindex, 1
    cpast.'atype'($S0)
    cpost = tree.'get'('post', cpast)
    post.'push'(cpost)
    push arglist, cpost
    inc aindex
    goto iter_loop
  iter_end:
    .local int argresult
    argresult = 1

    if pirop == 'call' goto pirop_call
    if pirop == 'callmethod' goto pirop_call
    if pirop == 'inline' goto pirop_inline
    goto pirop_result

  pirop_call:
    .local string name
    argresult = 0
    name = node.'name'()
    unless name goto pirop_result
    name = node.'escape'(name)
    unshift arglist, name
    goto pirop_result

  pirop_inline:
    .local string inline
    argresult = 0
    inline = node.'inline'()
    unless inline goto pirop_result
    unshift arglist, inline
    signature = inline
    goto pirop_result

  pirop_result:
    $I0 = index signature, '%v'
    if $I0 >= 0 goto pirop_void
    $I0 = index signature, '%r'
    if $I0 >= 0 goto pirop_reg
    .local string returns
    returns = '.LuaNil'
    $S0 = node.'returns'()
    unless $S0 goto pirop_returns
    returns = $S0
  pirop_returns:
    $P0 = post.'push_new'('POST::Op', 'pirop'=>'new')
    $P0.'arglist'($P0, returns)
    post.'result'($P0)
    goto pirop_reg
  pirop_void:
    $P0 = post[0]
    post.'result'($P0)
    argresult = 0
  pirop_reg:
    unless argresult goto have_result
    unshift arglist, post
  have_result:
    post.'arglist'(arglist :flat)
    .return (post)
}


transform call (PAST::Op) :language('PIR') {
    node.'pirop'('call')
    .return tree.'get'('pirop', node)
}


transform callmethod (PAST::Op) :language('PIR') {
    node.'pirop'('callmethod')
    .return tree.'get'('pirop', node)
}


transform len (PAST::Op) :language('PIR') {
    node.'pirop'('callmethod')
    node.'name'('len')
    .return tree.'get'('pirop', node)
}


transform inline (PAST::Op) :language('PIR') {
    node.'pirop'('inline')
    .return tree.'get'('pirop', node)
}


transform vararg (PAST::Op) :language('PIR') {
    .local pmc post
    post = new 'POST::Op'
    post.'init'('node'=>node, 'pirop'=>'call')
    post.'arglist'('mkarg', 'vararg')
    .return (post)
}


transform if (PAST::Op) :language('PIR') {
    .local pmc ops, expr, then, else
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)
    .local pmc thenlabel, endlabel
    $S0 = node.'unique'('if_')
    thenlabel = ops.'new'('POST::Label', 'result'=>$S0)
    $S0 = concat $S0, '_end'
    endlabel = ops.'new'('POST::Label', 'result'=>$S0)
    $P0 = node[0]
    expr = tree.'get'('post', $P0)
    ops.'push'(expr)
    ops.'push_pirop'('if', expr, thenlabel)
    $P0 = node[2]
    $I0 = defined $P0
    if $I0 == 0 goto else_done
    else = tree.'get'('post', $P0)
    ops.'push'(else)
  else_done:
    ops.'push_pirop'('goto', endlabel)
    ops.'push'(thenlabel)
    $P0 = node[1]
    $I0 = defined $P0
    if $I0 == 0 goto then_done
    then = tree.'get'('post', $P0)
    ops.'push'(then)
  then_done:
    ops.'push'(endlabel)
    .return (ops)
}


transform while (PAST::Op) :language('PIR') {
    .local pmc endlabels
    endlabels = get_hll_global ['Lua::POST'], '@endlabels'
    .local pmc ops, expr, blk
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)
    .local pmc looplabel, endlabel
    $S0 = node.'unique'('while_')
    looplabel = ops.'new'('POST::Label', 'result'=>$S0)
    $S0 = concat $S0, '_end'
    endlabel = ops.'new'('POST::Label', 'result'=>$S0)
    unshift endlabels, endlabel
    ops.'push'(looplabel)
    $P0 = node[0]
    expr = tree.'get'('post', $P0)
    ops.'push'(expr)
    ops.'push_pirop'('unless', expr, endlabel)
    $P0 = node[1]
    blk = tree.'get'('post', $P0)
    ops.'push'(blk)
    ops.'push_pirop'('goto', looplabel)
    ops.'push'(endlabel)
    $P0 = shift endlabels
    .return (ops)
}


transform repeat (PAST::Op) :language('PIR') {
    .local pmc endlabels
    endlabels = get_hll_global ['Lua::POST'], '@endlabels'
    .local pmc ops, expr, blk
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)
    .local pmc looplabel, endlabel
    $S0 = node.'unique'('repeat_')
    looplabel = ops.'new'('POST::Label', 'result'=>$S0)
    $S0 = concat $S0, '_end'
    endlabel = ops.'new'('POST::Label', 'result'=>$S0)
    unshift endlabels, endlabel
    ops.'push'(looplabel)
    $P0 = node[0]
    blk = tree.'get'('post', $P0)
    ops.'push'(blk)
    $P0 = node[1]
    expr = tree.'get'('post', $P0)
    ops.'push'(expr)
    ops.'push_pirop'('if', expr, endlabel)
    ops.'push_pirop'('goto', looplabel)
    ops.'push'(endlabel)
    $P0 = shift endlabels
    .return (ops)
}


transform fornum (PAST::Op) :language('PIR') {
    .local pmc endlabels
    endlabels = get_hll_global ['Lua::POST'], '@endlabels'
    .local pmc ops, e_var, e_limit, e_step, blk, zero
    .local string var, limit, step
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)
    $P0 = node[1]
    $P1 = $P0[0]
    e_var = tree.'get'('post', $P1)
    ops.'push'(e_var)
    $P1 = $P0[1]
    e_limit = tree.'get'('post', $P1)
    ops.'push'(e_limit)
    $P1 = $P0[2]
    e_step = tree.'get'('post', $P1)
    ops.'push'(e_step)
    var = ops.'unique'('$P')
    limit = ops.'unique'('$P')
    step = ops.'unique'('$P')
    ops.'push_pirop'('inline', '    (%0, %1, %2) = checkforloop(%3, %4, %5)', var, limit, step, e_var, e_limit, e_step)
    .local string v
    $P0 = node[0]
    $S0 = $P0.'name'()
    v = node.'escape'($S0)
    $P1 = tree.'get'('post', $P0)
    ops.'push'($P1)
    zero = ops.'push_pirop'('new')
    zero.'arglist'(zero, '.LuaNumber')
    ops.'push_pirop'('set', zero, '0.0')
    .local pmc looplabel, endlabel, orlabel, blklabel
    $S0 = node.'unique'('fornum_')
    looplabel = ops.'new'('POST::Label', 'result'=>$S0)
    $S1 = concat $S0, '_or'
    orlabel = ops.'new'('POST::Label', 'result'=>$S1)
    $S1 = concat $S0, '_blk'
    blklabel = ops.'new'('POST::Label', 'result'=>$S1)
    $S1 = concat $S0, '_end'
    endlabel = ops.'new'('POST::Label', 'result'=>$S1)
    unshift endlabels, endlabel
    ops.'push'(looplabel)
    ops.'push_pirop'('inline', '    unless %0 > %1 goto %2', step, zero, orlabel)
    ops.'push_pirop'('inline', '    unless %0 <= %1 goto %2', var, limit, endlabel)
    ops.'push_pirop'('goto', blklabel)
    ops.'push'(orlabel)
    ops.'push_pirop'('inline', '    unless %0 >= %1 goto %2', var, limit, endlabel)
    ops.'push'(blklabel)
    ops.'push_pirop'('store_lex', v, var)
    $P0 = node[2]
    blk = tree.'get'('post', $P0)
    ops.'push'(blk)
    ops.'push_pirop'('add', var, step)
    ops.'push_pirop'('goto', looplabel)
    ops.'push'(endlabel)
    $P0 = shift endlabels
    .return (ops)
}


transform forlist (PAST::Op) :language('PIR') {
    internal_error("not implemented (forlist)")
    .local pmc endlabels
    endlabels = get_hll_global ['Lua::POST'], '@endlabels'
    .local pmc ops, blk, nil
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)


    nil = ops.'push_pirop'('new')
    nil.'arglist'(nil, '.LuaNil')
    .local pmc looplabel, endlabel
    $S0 = node.'unique'('forlist_')
    looplabel = ops.'new'('POST::Label', 'result'=>$S0)
    $S0 = concat $S0, '_end'
    endlabel = ops.'new'('POST::Label', 'result'=>$S0)
    unshift endlabels, endlabel
    ops.'push'(looplabel)

    $P0 = node[2]
    blk = tree.'get'('post', $P0)
    ops.'push'(blk)
    ops.'push_pirop'('goto', looplabel)
    ops.'push'(endlabel)
    $P0 = shift endlabels
    .return (ops)
}


transform return (PAST::Op) :language('PIR') {
    .local pmc ops, var, limit, step, blk
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)
    $S0 = ''
    .local pmc iter
    iter = node.'iterator'()
  iter_loop:
    unless iter goto iter_end
    $P0 = shift iter
    $P1 = tree.'get'('post', $P0)
    ops.'push'($P1)
    $S1 = $P1.'result'()
    if $S0 == '' goto first
    $S0 = concat ', '
  first:
    $S0 = concat $S1
    goto iter_loop
  iter_end:
    ops.'push_pirop'('inline', '    .return (%0)', $S0)
    .return (ops)
}


transform break (PAST::Op) :language('PIR') {
    .local pmc endlabels
    endlabels = get_hll_global ['Lua::POST'], '@endlabels'
    .local pmc post
    post = new 'POST::Op'
    post.'init'('node'=>node, 'pirop'=>'goto')
    $P0 = endlabels[0]
    post.'arglist'($P0)
    .return (post)
}


transform assign (PAST::Op) :language('PIR') {
    .local pmc lpost, rpost, ops
    $P0 = node[1]
    rpost = tree.'get'('post', $P0)
    $P0 = node[0]
    lpost = tree.'get'('post', $P0)
#    ops = lpost.'new'('POST::Ops', rpost, lpost, 'node'=>node, 'result'=>lpost)
    ops = lpost.'new'('POST::Ops', rpost, lpost, 'node'=>node)
    ops.'push_pirop'('set', lpost, rpost)
    .return (ops)
}


transform assignlist (PAST::Op) :language('PIR') {
    .local pmc lpost, rpost, ops
    ops =  new 'POST::Ops'
    ops.'init'('node'=>node)
    .local pmc namelist, explist
    namelist = node[0]
    explist = node[1]
    $I0 = namelist
    unless $I0 == 1 goto L1
    $P1 = explist[0]
    unless $P1 goto L2
    rpost = tree.'get'('post', $P1)
    ops.'push'(rpost)
    goto L3
  L2:
    rpost = ops.'push_pirop'('new')
    rpost.'arglist'(rpost, '.LuaNil')
  L3:
    $P0 = namelist[0]
    lpost = tree.'get'('post', $P0)
    ops.'push'(lpost)
    ops.'push_pirop'('set', lpost, rpost)
    .return (ops)
  L1:
    .local pmc iter, tmp
    new tmp, .ResizablePMCArray
    new iter, .Iterator, explist
  L4:
    unless iter goto L5
    $P0 = shift iter
    rpost = tree.'get'('post', $P0)
    ops.'push'(rpost)
    $P1 = ops.'push_pirop'('set')
    $P1.'arglist'($P1, rpost)
    push tmp, $P1
    goto L4
  L5:
    new iter, .Iterator, namelist
  L6:
    unless iter goto L7
    $P0 = shift iter
    unless tmp goto L8
    rpost = shift tmp
    goto L9
  L8:
    rpost = ops.'push_pirop'('new')
    rpost.'arglist'(rpost, '.LuaNil')
  L9:
    lpost = tree.'get'('post', $P0)
    ops.'push'(lpost)
    ops.'push_pirop'('set', lpost, rpost)
    goto L6
  L7:
    .return (ops)
}


transform post (PAST::Val) :language('PIR') {
    .local string vtype, ctype, name
    vtype = node.'vtype'()
    ctype = node.'ctype'()
    name = node.'name'()

    $I0 = index ctype, '~'
    if $I0 < 0 goto skip_escape
    name = node.'escape'(name)
  skip_escape:

    .local pmc ops, val
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)
    val = ops.'push_pirop'('new')
    val.'arglist'(val, vtype)
    if name == '' goto init
    val = ops.'push_pirop'('set', val, name, 'result'=>val)
  init:
    ops.'result'(val)

    unless vtype == '.LuaTable' goto end
    .local pmc iter, kpost, vpost
    .local string key
    .local int i
    i = 1
    iter = node.'iterator'()
  iter_loop:
    unless iter goto iter_end
    $P0 = shift iter
    $I0 = does $P0, 'array'
    if $I0 goto rec_field
    vpost = tree.'get'('post', $P0)
    kpost = ops.'new'('POST::Ops', 'node'=>node)
    $P0 = kpost.'push_pirop'('new')
    $P0.'arglist'($P0, '.LuaNumber')
    $S0 = i
    inc i
    kpost.'push_pirop'('set', $P0, $S0)
    kpost.'result'($P0)
    goto end_rec_field
  rec_field:
    $P1 = $P0[0]
    kpost = tree.'get'('post', $P1)
    $P1 = $P0[1]
    vpost = tree.'get'('post', $P1)
  end_rec_field:
    ops.'push'(kpost)
    ops.'push'(vpost)
    key = val.'result'()
    key = concat key, '['
    $S0 = kpost.'result'()
    key .= $S0
    key .= ']'
    ops.'push_pirop'('set', key, vpost)
    goto iter_loop
  iter_end:

  end:
    .return (ops)
}


transform post (PAST::Var) :language('PIR') {
    .local pmc ops
    .local pmc keypost, basepost
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)

    .local string scope, name, key, fetchop, storeop
    scope = node.'scope'()
    if scope == 'keyed' goto scope_keyed
    $S0 = node.'name'()
    name = node.'escape'($S0)
    if scope == 'lexical' goto scope_lexical
    if scope == 'parameter' goto scope_parameter
  scope_package:
    basepost = ops.'push_pirop'('callmethod', 'getfenv', 'subr')
    keypost = ops.'push_pirop'('new')
    keypost.'arglist'(keypost, '.LuaString')
    ops.'push_pirop'('set', keypost, name)
    goto have_scope

  scope_keyed:
    $P0 = node[0]
    basepost = tree.'get'('post', $P0)
    ops.'push'(basepost)
    $P0 = node[1]
    keypost = tree.'get'('post', $P0)
    ops.'push'(keypost)
    goto have_scope

  scope_lexical:
    .local pmc vivipost
    vivipost = ops.'new'('POST::Op', 'pirop'=>'new')
    vivipost.'arglist'(vivipost, '.LuaNil')
    $I0 = node.'ismy'()
    if $I0 == 0 goto L1
    ops.'push'(vivipost)
    ops.'push_pirop'('.lex', name, vivipost)
    ops.'result'(vivipost)
    .return (ops)
  L1:
    $I0 = node.'islvalue'()
    unless $I0 goto L2
    ops.'push_pirop'('store_lex', name, ops)
    ops.'result'(ops)
    .return (ops)
  L2:
    ops.'push_pirop'('find_lex', vivipost, name)
    ops.'result'(vivipost)
    .return (ops)

  scope_parameter:
    .local pmc subpost
    subpost = get_hll_global ['Lua::POST'], '$?SUB'
    $I0 = node.'isslurpy'()
    unless $I0 goto no_slurpy
    $S0 = node.'name'()
    subpost.'push_param'('pmc', $S0, ':slurpy')
    .return (ops)
  no_slurpy:
    .local string pname
    pname = ops.'unique'('param_')
    subpost.'push_param'('pmc', pname, ':optional')
    ops.'push_pirop'('.lex', name, pname)
    .local pmc vivilabel
    vivilabel = ops.'new'('POST::Label', 'name'=>'vivify_')
    ops.'push_pirop'('unless_null', pname, vivilabel)
    ops.'push_pirop'('new', pname, '.LuaNil')
    ops.'push'(vivilabel)
    ops.'result'(pname)
    .return (ops)

  have_scope:
    key = basepost.'result'()
    key = concat key, '['
    $S0 = keypost.'result'()
    key .= $S0
    key .= ']'
    ops.'result'(key)
    $I0 = node.'islvalue'()
    if $I0 goto done_lvalue
    $P0 = ops.'push_pirop'('set')
    $P0.'arglist'($P0, key)
    ops.'result'($P0)
  done_lvalue:
    .return (ops)
}


=head1 HISTORY

Mostly taken from F<compilers/past-pm/POST/Grammar.tg>.

=head1 AUTHORS

Francois Perrad

=cut

