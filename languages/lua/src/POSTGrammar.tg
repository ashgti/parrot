# Copyright (C) 2007, The Perl Foundation.
# $Id$

=head1 NAME

POSTGrammar.tg - A grammar for transforming the abstract syntax tree (PAST)
into an opcode syntax tree (POST).

=head1 DESCRIPTION


=cut

grammar Lua::POST::Grammar is TGE::Grammar;


transform post (PAST::Block) :language('PIR') {
    .local string name, pragma, blocktype
    name = node.'name'()
    if name != '' goto with_name
    name = node.unique('_block')
  with_name:
    pragma = node.'pragma'()
    blocktype = node.'blocktype'()
    .local pmc outerpost
    outerpost = get_hll_global ['Lua::POST'], '$?SUB'
    .local pmc post
    post = new 'POST::Sub'
    post.'init'('node'=>node, 'name'=>name, 'outer'=>outerpost, 'pragma'=>pragma, 'blocktype'=>blocktype, 'result'=>'')
    set_hll_global ['Lua::POST'], '$?SUB', post
    .local pmc iter
    iter = node.'iterator'()
  iter_loop:
    unless iter goto iter_end
    $P0 = shift iter
    $P1 = tree.'get'('post', $P0)
    post.'push'($P1)
    goto iter_loop
  iter_end:
    set_hll_global ['Lua::POST'], '$?SUB', outerpost
  unless null outerpost goto no_chunk
    .local pmc start
    start = post.'new'('POST::Sub', 'name'=>'__start', 'pragma'=>':main', 'result'=>'')
    start.'push_pirop'('inline', '#    print "start\n"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luabasic.pbc"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luacoroutine.pir"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luapackage.pbc"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luastring.pir"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luatable.pbc"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luamath.pbc"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luaio.pbc"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luaos.pbc"')
    start.'push_pirop'('inline', '    load_bytecode "languages/lua/lib/luadebug.pbc"')
    start.'push_pirop'('inline', '    .const .Sub main = "_main"')
    start.'push_pirop'('inline', '    $P0 = get_global "_G"')
    start.'push_pirop'('inline', '    main."setfenv"($P0)')
    start.'push_pirop'('inline', '    docall(main)')
    post.'init'('outer'=>start)
    .local pmc onload
    onload = post.'new'('POST::Sub', 'name'=>'__onload', 'pragma'=>':anon :init', 'result'=>'')
    onload.'push_pirop'('inline', '    .const .Sub main = "_main"')
    onload.'push_pirop'('inline', '#    print "onload\n"')
    post = post.'new'('Lua::POST::Chunk', post, onload, start, 'prologue'=>'.HLL "Lua", "lua_group"')
  no_chunk:
    .return (post)
}


transform post (PAST::Stmts) :language('PIR') {
#    .local pmc ops
#    ops =  new 'POST::Ops'
#    ops.'init'('node'=>node)
#    .local pmc iter
#    iter = node.'iterator'()
#  iter_loop:
#    unless iter goto iter_end
#    $P0 = shift iter
#    $P1 = tree.'get'('post', $P0)
#    ops.'push'($P1)
#    goto iter_loop
#  iter_end:
#    .return (ops)
    .local pmc ops
    ops =  new 'POST::Ops'
    ops.'init'('node'=>node)
    .local pmc iter
    iter = node.'iterator'()
    unless iter goto end
  iter_loop:
    $P0 = shift iter
    $P1 = tree.'get'('post', $P0)
    ops.'push'($P1)
    if iter goto iter_loop
  iter_end:
    ops.'result'($P1)
  end:
    .return (ops)
}


transform post (PAST::Op) :language('PIR') {
    .local string pasttype
    pasttype = node.'pasttype'()
    if pasttype goto post_pasttype

  post_pirop:
    .local string pirop
    pirop = node.'pirop'()
    if pirop goto have_pirop
    node.'pirop'('call')
  have_pirop:
    .return tree.'get'('pirop', node)

  post_pasttype:
    .return tree.'get'(pasttype, node)
}


transform pirop (PAST::Op) :language('PIR') {
    .local string pirop
    .local pmc post
    pirop = node.'pirop'()
    post = new 'POST::Op'
    post.'init'('node'=>node, 'pirop'=>pirop)

    .local pmc pirtable
    .local string signature
    pirtable = get_hll_global ['POST'], '%pirtable'
    signature = pirtable[pirop]
    if signature > '' goto have_signature
    signature = '%uppppppppppppp'                          # FIXME:
  have_signature:
    .local pmc arglist, iter
    .local int aindex
    aindex = 2
    arglist = new .ResizablePMCArray
    iter = node.'iterator'()
  iter_loop:
    unless iter goto iter_end
    .local pmc cpast, cpost
    cpast = shift iter
    $S0 = substr signature, aindex, 1
    cpast.'atype'($S0)
    cpost = tree.'get'('post', cpast)
    post.'push'(cpost)
    push arglist, cpost
    inc aindex
    goto iter_loop
  iter_end:
    .local int argresult
    argresult = 1

    if pirop == 'call' goto pirop_call
    if pirop == 'callmethod' goto pirop_call
    if pirop == 'inline' goto pirop_inline
    goto pirop_result

  pirop_call:
    .local string name
    argresult = 0
    name = node.'name'()
    unless name goto pirop_result
    name = node.'escape'(name)
    unshift arglist, name
    goto pirop_result

  pirop_inline:
    .local string inline
    argresult = 0
    inline = node.'inline'()
    unless inline goto pirop_result
    unshift arglist, inline
    signature = inline
    goto pirop_result

  pirop_result:
    $I0 = index signature, '%v'
    if $I0 >= 0 goto pirop_void
    $I0 = index signature, '%r'
    if $I0 >= 0 goto pirop_reg
    .local string returns
    returns = '.LuaNil'
    $S0 = node.'returns'()
    unless $S0 goto pirop_returns
    returns = $S0
  pirop_returns:
    $P0 = post.'push_new'('POST::Op', 'pirop'=>'new')
    $P0.'arglist'($P0, returns)
    post.'result'($P0)
    goto pirop_reg
  pirop_void:
    $P0 = post[0]
    post.'result'($P0)
    argresult = 0
  pirop_reg:
    unless argresult goto have_result
    unshift arglist, post
  have_result:
    post.'arglist'(arglist :flat)
    .return (post)
}


transform call (PAST::Op) :language('PIR') {
    node.'pirop'('call')
    .return tree.'get'('pirop', node)
}


transform callmethod (PAST::Op) :language('PIR') {
    node.'pirop'('callmethod')
    .return tree.'get'('pirop', node)
}


transform len (PAST::Op) :language('PIR') {
    node.'pirop'('callmethod')
    node.'name'('len')
    .return tree.'get'('pirop', node)
}


transform inline (PAST::Op) :language('PIR') {
    node.'pirop'('inline')
    .return tree.'get'('pirop', node)
}


transform if (PAST::Op) :language('PIR') {
    .local pmc ops, expr, then, else
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)
    .local pmc thenlabel, endlabel
    $S0 = node.'unique'('if_')
    thenlabel = ops.'new'('POST::Label', 'result'=>$S0)
    $S0 = concat $S0, '_end'
    endlabel = ops.'new'('POST::Label', 'result'=>$S0)
    $P0 = node[0]
    expr = tree.'get'('post', $P0)
    ops.'push'(expr)
    ops.'push_pirop'('if', expr, thenlabel)
    $P0 = node[2]
    $I0 = defined $P0
    if $I0 == 0 goto else_done
    else = tree.'get'('post', $P0)
    ops.'push'(else)
  else_done:
    ops.'push_pirop'('goto', endlabel)
    ops.'push'(thenlabel)
    $P0 = node[1]
    $I0 = defined $P0
    if $I0 == 0 goto then_done
    then = tree.'get'('post', $P0)
    ops.'push'(then)
  then_done:
    ops.'push'(endlabel)
    .return (ops)
}


transform while (PAST::Op) :language('PIR') {
    .local pmc ops, expr, blk
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)
    .local pmc looplabel, endlabel
    $S0 = node.'unique'('while_')
    looplabel = ops.'new'('POST::Label', 'result'=>$S0)
    $S0 = concat $S0, '_end'
    endlabel = ops.'new'('POST::Label', 'result'=>$S0)
    ops.'push'(looplabel)
    $P0 = node[0]
    expr = tree.'get'('post', $P0)
    ops.'push'(expr)
    ops.'push_pirop'('unless', expr, endlabel)
    $P0 = node[1]
    blk = tree.'get'('post', $P0)
    ops.'push'(blk)
    ops.'push_pirop'('goto', looplabel)
    ops.'push'(endlabel)
    .return (ops)
}


transform repeat (PAST::Op) :language('PIR') {
    .local pmc ops, expr, blk
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)
    .local pmc looplabel, endlabel
    $S0 = node.'unique'('repeat_')
    looplabel = ops.'new'('POST::Label', 'result'=>$S0)
    $S0 = concat $S0, '_end'
    endlabel = ops.'new'('POST::Label', 'result'=>$S0)
    ops.'push'(looplabel)
    $P0 = node[1]
    blk = tree.'get'('post', $P0)
    ops.'push'(blk)
    $P0 = node[0]
    expr = tree.'get'('post', $P0)
    ops.'push'(expr)
    ops.'push_pirop'('if', expr, endlabel)
    ops.'push_pirop'('goto', looplabel)
    ops.'push'(endlabel)
    .return (ops)
}


transform fornum (PAST::Op) :language('PIR') {
    internal_error("not implemented (fornum)")
    .local pmc ops, var, limit, step, blk
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)

    $P0 = node[1]
    $P1 = $P0[0]
    $P2 = tree.'get'('post', $P1)
    ops.'push'($P2)
    var = ops.'push_pirop'('new')
    var.'arglist'(var, '.LuaNil')
#    ops.'push_pirop'('set', var, $P2)

    $P1 = $P0[1]
    $P2 = tree.'get'('post', $P1)
    ops.'push'($P2)
    limit = ops.'push_pirop'('new')
    limit.'arglist'(limit, '.LuaNil')
#    ops.'push_pirop'('set', limit, $P2)

    $P1 = $P0[2]
    if $P1 goto L1
    goto L2
    $P2 = ops.'push_pirop'('new')
    $P2.'arglist'($P2, '.LuaNumber')
    $P2 = ops.'push_pirop'('set', $P2, '1', 'result'=>$P2)
    #ops.'result'($P2)
  L1:
    $P2 = tree.'get'('post', $P1)
    ops.'push'($P2)
  L2:
    step = ops.'push_pirop'('new')
    step.'arglist'(step, '.LuaNil')
#    ops.'push_pirop'('set', step, $P2)

    .local pmc looplabel, endlabel
    $S0 = node.'unique'('fornum_')
    looplabel = ops.'new'('POST::Label', 'result'=>$S0)
    $S0 = concat $S0, '_end'
    endlabel = ops.'new'('POST::Label', 'result'=>$S0)
    ops.'push'(looplabel)

    ops.'push'(endlabel)
    .return (ops)
}


transform forlist (PAST::Op) :language('PIR') {
    internal_error("not implemented (forlist)")
    .local pmc ops, var, limit, step, blk
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)

    .local pmc looplabel, endlabel
    $S0 = node.'unique'('forlist_')
    looplabel = ops.'new'('POST::Label', 'result'=>$S0)
    $S0 = concat $S0, '_end'
    endlabel = ops.'new'('POST::Label', 'result'=>$S0)
    ops.'push'(looplabel)

    ops.'push'(endlabel)
    .return (ops)
}


transform assign (PAST::Op) :language('PIR') {
    .local pmc lpost, rpost, ops
    $P0 = node[1]
    rpost = tree.'get'('post', $P0)
    $P0 = node[0]
    lpost = tree.'get'('post', $P0)
#    ops = lpost.'new'('POST::Ops', rpost, lpost, 'node'=>node, 'result'=>lpost)
    ops = lpost.'new'('POST::Ops', rpost, lpost, 'node'=>node)
    ops.'push_pirop'('set', lpost, rpost)
    .return (ops)
}


transform assignlist (PAST::Op) :language('PIR') {
    .local pmc lpost, rpost, ops
    ops =  new 'POST::Ops'
    ops.'init'('node'=>node)
    .local pmc namelist, explist
    namelist = node[0]
    explist = node[1]
    $I0 = namelist
    unless $I0 == 1 goto L1
    $P1 = explist[0]
    unless $P1 goto L2
    rpost = tree.'get'('post', $P1)
    ops.'push'(rpost)
    goto L3
  L2:
    rpost = ops.'push_pirop'('new')
    rpost.'arglist'(rpost, '.LuaNil')
  L3:
    $P0 = namelist[0]
    lpost = tree.'get'('post', $P0)
    ops.'push'(lpost)
    ops.'push_pirop'('set', lpost, rpost)
    .return (ops)
  L1:
    .local pmc iter
    new iter, .Iterator, namelist
  L4:
    unless iter goto L5
    $P0 = shift iter
    unless explist goto L6
    $P1 = shift explist
    rpost = tree.'get'('post', $P1)
    ops.'push'(rpost)
    goto L7
  L6:
    rpost = ops.'push_pirop'('new')
    rpost.'arglist'(rpost, '.LuaNil')
  L7:
    lpost = tree.'get'('post', $P0)
    ops.'push'(lpost)
    ops.'push_pirop'('set', lpost, rpost)
    goto L4
  L5:
    .return (ops)
}


transform post (PAST::Val) :language('PIR') {
    .local string vtype, ctype, name
    vtype = node.'vtype'()
    ctype = node.'ctype'()
    name = node.'name'()

    $I0 = index ctype, '~'
    if $I0 < 0 goto skip_escape
    name = node.'escape'(name)
  skip_escape:

    .local pmc ops, val
    ops = new 'POST::Ops'
    ops.'init'('node'=>node)
    val = ops.'push_pirop'('new')
    val.'arglist'(val, vtype)
    if name == '' goto init
    val = ops.'push_pirop'('set', val, name, 'result'=>val)
  init:
    ops.'result'(val)

    unless vtype == '.LuaTable' goto end
    .local pmc iter, kpost, vpost
    .local string key
    .local int i
    i = 1
    iter = node.'iterator'()
  iter_loop:
    unless iter goto iter_end
    $P0 = shift iter
    $I0 = does $P0, 'array'
    if $I0 goto rec_field
    vpost = tree.'get'('post', $P0)
    kpost = ops.'new'('POST::Ops', 'node'=>node)
    $P0 = kpost.'push_pirop'('new')
    $P0.'arglist'($P0, '.LuaNumber')
    $S0 = i
    inc i
    kpost.'push_pirop'('set', $P0, $S0)
    kpost.'result'($P0)
    goto end_rec_field
  rec_field:
    $P1 = $P0[0]
    kpost = tree.'get'('post', $P1)
    $P1 = $P0[1]
    vpost = tree.'get'('post', $P1)
  end_rec_field:
    ops.'push'(kpost)
    ops.'push'(vpost)
    key = val.'result'()
    key = concat key, '['
    $S0 = kpost.'result'()
    key .= $S0
    key .= ']'
    ops.'push_pirop'('set', key, vpost)
    goto iter_loop
  iter_end:

  end:
    .return (ops)
}


transform vivipost (PAST::Var) :language('PIR') {
    .local pmc vivipost
    .local string viviself
    viviself = node.'viviself'()
    if viviself goto have_viviself
    viviself = '.LuaNil'
  have_viviself:
    vivipost = new 'POST::Op'
    vivipost.'init'('node'=>node, 'pirop'=>'new', 'result'=>vivipost)
    vivipost.'arglist'(vivipost, viviself)
    .return (vivipost)
}


transform post (PAST::Var) :language('PIR') {
    .local pmc vivipost, vivilabel, post
    .local pmc keypost, basepost
    vivipost = tree.'get'('vivipost', node)
    post = vivipost.'new'('POST::Ops', 'node'=>node, 'result'=>vivipost)
    vivilabel = post.'new'('POST::Label', 'name'=>'vivify_')

    .local string scope, name, key, fetchop, storeop
    scope = node.'scope'()
    if scope == 'keyed' goto scope_keyed
    name = node.'name'()
    name = node.'escape'(name)
    if scope == 'lexical' goto scope_lexical
    if scope == 'parameter' goto scope_parameter
  scope_package:
    basepost = post.'push_pirop'('get_global')
    basepost.'arglist'(basepost, '"_G"')
    keypost = post.'push_pirop'('new')
    keypost.'arglist'(keypost, '.LuaString')
    post.'push_pirop'('set', keypost, name)
    goto have_scope

  scope_keyed:
    $P0 = node[0]
    basepost = tree.'get'('post', $P0)
    post.'push'(basepost)
    $P0 = node[1]
    keypost = tree.'get'('post', $P0)
    post.'push'(keypost)
    goto have_scope

  scope_lexical:
    $I0 = node.'ismy'()
    if $I0 == 0 goto L1
    post.'push'(vivipost)
    post.'push_pirop'('.lex', name, vivipost)
    .return (post)
  L1:
    $I0 = node.'islvalue'()
    unless $I0 goto L2
    post.'push_pirop'('store_lex', name, post)
    .return (post)
  L2:
    post.'push_pirop'('find_lex', vivipost, name)
    post.'result'(post)
    .return (post)

  scope_parameter:
    post = new 'POST::Op'
    post.'pirop'('.lex')
    .local string pname
    pname = post.'unique'('param_')
    post.'arglist'(name, pname)
    post.'result'(pname)
    .local pmc subpost
    subpost = get_hll_global ['Lua::POST'], '$?SUB'
    $I0 = node.'isslurpy'()
    unless $I0 goto no_slurpy
    subpost.'push_param'('pmc', pname, ':slurpy')
    .return (post)
  no_slurpy:
    subpost.'push_param'('pmc', pname, ':optional')
    .return (post)

  have_scope:
    key = basepost.'result'()
    key = concat key, '['
    $S0 = keypost.'result'()
    key .= $S0
    key .= ']'
    post.'result'(key)
    $I0 = node.'islvalue'()
    if $I0 goto done_lvalue
    $P0 = post.'push_pirop'('set')
    $P0.'arglist'($P0, key)
    post.'result'($P0)
  done_lvalue:
    .return (post)
}


=head1 HISTORY

Mostly taken from F<compilers/past-pm/POST/Grammar.tg>.

=head1 AUTHORS

Francois Perrad

=cut

