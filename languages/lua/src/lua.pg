=head1 NAME

lua.pg - a Lua grammar in PGE

=head1 GRAMMAR RULES

The grammar rules are according to the original Lua parser as defined lparser.c
in the lua distribution.

=cut

grammar Lua::Grammar;

token TOP {
  ^ <block> $
}

rule block {
  [ <statement> <';'>? ]* [ <last_statement> <';'>? ]?
}

rule statement {
  | <if_stat>
  | <while_stat>
  | <do_block>
  | <for_stat>
  | <repeat_stat>
  | <local_stat>
  | <expression_stat>
  | <function_stat>
}

rule function_stat {
  <'function'> <functionname> <function_body>
}

rule last_statement {
  | (<'return'>) <expression_list>?
  | (<'break'>)
}

rule do_block {
  <'do'> <block> <?end>
}

rule local_stat {
  <local_function> | <local_declaration>
}

rule expression_stat {
  <primary_expression> <assignment>?
}

rule assignment {
  | <','> <primary_expression> <assignment>
  | <'='> <expression_list>
}

rule while_stat {
  <'while'> <expression> <?do> <block> <?end>
}

rule repeat_stat {
  <'repeat'> <block> <?until> <expression>
}

rule for_body {
  <?do> <block> <?end>
}

rule fornum {
  <name> <'='> <expression> <?comma> <expression> [ <','> <expression> ]?
}

rule forlist {
  <name_list> <?in> <expression_list>
}

rule for_stat {
  <'for'> [ <fornum> | <forlist> ] <for_body>
}

rule if_stat {
  <'if'> <expression> <?then> <block> <elseif_block>* <else_block>? <?end>
}

rule elseif_block {
  <'elseif'> <expression> <?then> <block>
}

rule else_block {
  <'else'> <block>
}

rule local_declaration {
  <'local'> <name> [ <','> <name> ]* [ <'='> <expression_list> ]?
}

rule local_function {
  <'local'> <'function'> <name> <function_body>
}

rule functionname {
  <name> [ <'.'> <name> ]* [ <':'> <name> ]?
}

rule index {
  <'['> <expression> <?closebracket>
}

rule record_field {
  [ <name> | <index> ] <?assign> <expression>
}

rule constructor {
  <'{'> <tablefieldlist>? <?closebrace>
}

rule tablefieldlist {
  <tablefield> [ <?fieldsep> <tablefield> ]* <?fieldsep>?
}

rule fieldsep {
  <','> | <';'>
}

rule tablefield {
  [ <record_field> | <expression> ]*
}

rule parameter_list {
  | <name_list> [ <','> <'...'> ]?
  | <'...'>
}

rule function_body {
  <'('> <parameter_list>? <?closeparen> <block> <?end>
}

rule expression_list {
  <expression> [ <','> <expression> ]*
}

rule name_list {
  <name> [ <','> <name> ]*
}

rule function_args {
  | <'('> <expression_list>? <?closeparen>
  | <constructor>
  | <string>
}

rule prefix_expression {
  | <name>
  | <'('> <expression> <?closeparen>
}

rule primary_expression {
  <prefix_expression>
  [ <'.'> <name>
  | <index>
  | <':'> <name> <function_args>
  | <function_args>
  ]*
}

rule simple_expression {
  | <number>
  | <string>
  | <'nil'>
  | <'true'>
  | <'false'>
  | <'...'>
  | <constructor>
  | <'function'> <function_body>
  | <primary_expression>
}


=head1 EXPRESSIONS

Operator precedence is implemented using an optable.

=cut

rule 'expression'   is optable { ... }

proto 'term:'       is precedence('=')      is parsed(&simple_expression) { ... }

proto 'infix:^'     is looser('term:')
                    is assoc('right')           { ... }

proto 'prefix:not'  is looser('infix:^')    is pirop('not')      { ... }
proto 'prefix:#'    is equiv('prefix:not')  is pirop('elements') { ... } # does this work?? it needs an I register
proto 'prefix:-'    is equiv('prefix:not')  is pirop('neg')      { ... }

proto 'infix:*'     is looser('prefix:not') is pirop('mul') { ... }
proto 'infix:/'     is equiv('infix:*')     is pirop('div') { ... }
proto 'infix:%'     is equiv('infix:*')     is pirop('mod') { ... }

proto 'infix:+'     is looser('infix:*')    is pirop('add') { ... }
proto 'infix:-'     is equiv('infix:+')     is pirop('sub') { ... }

proto 'infix:..'    is looser('infix:+')    is pirop('concat')
                    is assoc('right')           { ... }

proto 'infix:<'     is looser('infix:..')       { ... }
proto 'infix:>'     is equiv('infix:<')         { ... }
proto 'infix:<='    is equiv('infix:<')         { ... }
proto 'infix:>='    is equiv('infix:<')         { ... }
proto 'infix:~='    is equiv('infix:<')         { ... }
proto 'infix:=='    is equiv('infix:<')         { ... }

proto 'infix:and'   is looser('infix:<')        { ... }

proto 'infix:or'    is looser('infix:and')      { ... }


=head1 HELPER RULES

Helper rules will match a specific token, otherwise a syntax error is generated.
These rules make the grammar more readable, so the calls to syntax_error() are
not all over the grammar, but only in these rules.

=cut

rule do {
  <'do'> | <syntax_error: 'do' expected>
}

rule then {
  <'then'> | <syntax_error: 'then' expected>
}

rule end {
  <'end'> | <syntax_error: 'end' expected>
}

rule until {
  <'until'> | <syntax_error: 'until' expected>
}

rule comma {
  <','> | <syntax_error: ',' expected>
}

rule in {
  <'in'> | <syntax_error: 'in' expected>
}

rule assign {
  <'='>  | <syntax_error: '=' expected>
}

rule closebracket {
  <']'>  | <syntax_error: ']' expected>
}

rule closebrace {
  <'}'> | <syntax_error: '}' expected>
}

rule closeparen {
  <')'> | <syntax_error: ')' expected>
}


=head1 TOKENS

=head2 Name

an identifier MUST start on a word boundary. If the \b is removed,
this is allowed: a=1b=2, which of course should be an error.

=cut

token name {
  <!keyword> \b <ident>
}


=head2 Strings

A string can be either a single-quoted, double-quoted or a long string.
Long strings are parsed using a custom parsing method.

=cut

token string {
  | \" <quoted_literal: "> \"
  | \' <quoted_literal: '> \'
  | <long_string>
}


token number {
  |  0 <[Xx]> <xdigit>+
  | [ <digit>+ [ \. <digit>* ]? | \. <digit>+ ]
    [ <[Ee]> <[+\-]>? <digit>+ ]?
}


token ws {
    [ \s+
    | <'--'> <long_comment>
    | <'--'> \N*
    ]*
}

=head2 Keywords

Lua keywords may B<not> be used as identifiers. To make sure the longest
identifier is matched, so that identifiers that B<start> with a keyword
is still an identifier, a keyword should end at a word boundary.
This way, for instance, the identifier C<format> is not read as C<for>.

=cut

token keyword {
  [  <'and'>     | <'break'>  | <'do'>    | <'elseif'>
  | <'else'>     | <'end'>    | <'false'> | <'for'>
  | <'function'> | <'if'>     | <'in'>    | <'local'>
  | <'nil'>      | <'not'>    | <'or'>    | <'repeat'>
  | <'return'>   | <'then'>   | <'true'>  | <'until'>
  | <'while'>    ] \b
}

