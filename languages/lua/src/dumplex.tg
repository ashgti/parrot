# Copyright (C) 2006-2007, The Perl Foundation.
# $Id$

=head1 NAME

src/dumplex.tg - a grammar for testing lexico

=head1 DESCRIPTION

Just print node.

Used by F<languages/lua/test_lex.pir>.

=cut

grammar Lua::DumpLex is TGE::Grammar;

transform past (ROOT) :language('PIR') {
    .local pmc past
    new past, 'PAST::Block'
    past.'init'('node'=>node, 'name'=>'anon')
    .local pmc past_stmts
    new past_stmts, 'PAST::Stmts'
    past_stmts.'init'('node'=>node)
    $P0 = node['token']
    if null $P0 goto L1
    .local pmc iter
    new iter, .Iterator, $P0
L2:
    unless iter goto L1
    $P0 = shift iter
    $P1 = tree.'get'('past', $P0, 'Lua::TestLex::token')
    past_stmts.'push'($P1)
    goto L2
L1:
    past.'push'(past_stmts)
    .return (past)
}

transform past (Lua::TestLex::token) :language('PIR') {
    .local pmc past, arg
    new past, 'PAST::Op'
    past.'init'('node'=>node, 'name'=>'println')
    $I0 = defined node['Name']
    unless $I0 goto L1
    $P1 = node['Name']
    arg = tree.get('past', $P1, 'Lua::TestLex::Name')
    goto L9
L1:
    $I0 = defined node['keyword']
    unless $I0 goto L2
    $P1 = node['keyword']
    arg = tree.get('past', $P1, 'Lua::TestLex::keyword')
    goto L9
L2:
    $I0 = defined node['String']
    unless $I0 goto L3
    $P1 = node['String']
    arg = tree.get('past', $P1, 'Lua::TestLex::String')
    goto L9
L3:
    $I0 = defined node['Number']
    unless $I0 goto L4
    $P1 = node['Number']
    arg = tree.get('past', $P1, 'Lua::TestLex::Number')
    goto L9
L4:
    $I0 = defined node['punctuator']
    unless $I0 goto L5
    $P1 = node['punctuator']
    arg = tree.get('past', $P1, 'Lua::TestLex::punctuator')
    goto L9
L5:
L9:
    past.'push'(arg)
    .return (past)
}

transform past (Lua::TestLex::keyword) :language('PIR') {
    .local pmc past
    new past, 'PAST::Val'
    $S0 = node
    $S0 = concat "keyword:\t", $S0
    past.'init'('node'=>node, 'vtype'=>'.String', 'name'=>$S0, 'ctype'=>'s~')
    .return (past)
}

transform past (Lua::TestLex::punctuator) :language('PIR') {
    .local pmc past
    new past, 'PAST::Val'
    $S0 = node
    $S0 = concat "punct:\t", $S0
    past.'init'('node'=>node, 'vtype'=>'.String', 'name'=>$S0, 'ctype'=>'s~')
    .return (past)
}

transform past (Lua::TestLex::Name) :language('PIR') {
    .local pmc past
    new past, 'PAST::Val'
    $S0 = node
    $S0 = concat "Name:\t", $S0
    past.'init'('node'=>node, 'vtype'=>'.String', 'name'=>$S0, 'ctype'=>'s~')
    .return (past)
}

transform past (Lua::TestLex::String) :language('PIR') {
    .local pmc past
    new past, 'PAST::Val'
    $I0 = defined node['quoted_literal']
    unless $I0 goto L1
    $P0 = node['quoted_literal']
    $S0 = $P0
    $S0 = concat "String:\t", $S0
    goto L2
L1:
    $I0 = defined node['long_string']
    unless $I0 goto L2
    $P0 = node['long_string']
    $S0 = $P0
    $S0 = concat "LongString:\t", $S0
L2:
    past.'init'('node'=>node, 'vtype'=>'.String', 'name'=>$S0, 'ctype'=>'s~')
    .return (past)
}

transform past (Lua::TestLex::Number) :language('PIR') {
    .local pmc past
    new past, 'PAST::Val'
    $S0 = node
    $S0 = concat "Number:\t", $S0
    past.'init'('node'=>node, 'vtype'=>'.String', 'name'=>$S0, 'ctype'=>'s~')
    .return (past)
}

=head1 AUTHOR

Francois Perrad

=cut

