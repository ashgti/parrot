/*
Copyright (C) 2005-2008, The Perl Foundation.
$Id$

=head1 NAME

pmc/luauserdata.pmc - Lua Userdata

=head1 DESCRIPTION

C<LuaUserdata> extends C<LuaAny> to provide a class with the behaviour of
the Lua C<Userdata> type.

=head2 Overloaded Methods

=over 4

=cut

*/

#include "lua_private.h"

typedef struct {
    PMC * val;
    PMC * env;
} userdata_t;

#define u_val(pmc) (PMC_data_typed((pmc), userdata_t *))->val
#define u_env(pmc) (PMC_data_typed((pmc), userdata_t *))->env

pmclass LuaUserdata
    extends LuaAny
    does scalar
    dynpmc
    need_ext
    group lua_group
    hll Lua {

/*

=item C<void init()>

Initializes the userdata.

=cut

*/
    void init() {
        userdata_t *u = mem_allocate_zeroed_typed(userdata_t);
        PMC_data(SELF) = u;
        PMC_metadata(SELF) = NULL;
        PObj_custom_mark_destroy_SETALL(SELF);
    }

/*

=item C<void mark()>

Marks the userdata as live.

=cut

*/
    void mark() {
        if (u_val(SELF))
            pobject_lives(INTERP, (PObj *)u_val(SELF));
        if (u_env(SELF))
            pobject_lives(INTERP, (PObj *)u_env(SELF));
        if (PMC_metadata(SELF))
            pobject_lives(INTERP, (PObj *)PMC_metadata(SELF));
    }

/*

=item C<void destroy()>

Call finalizer and free the userdata.

=cut

*/
    void destroy() {
        userdata_t *u = PMC_data_typed(SELF, userdata_t *);
        PMC* meth = find_meth(INTERP, SELF, "__gc");
        if (meth != NULL) {
            (void)Parrot_runops_fromc_args(INTERP, meth, "vP", SELF);
        }
        if (u) {
            mem_sys_free(u);
            PMC_data(SELF) = NULL;
        }
    }

/*

=item C<STRING* get_string()>

=cut

*/
    STRING* get_string() {
        return Parrot_sprintf_c(INTERP, "userdata: %08X", SELF);
    }

/*

=item C<STRING* name()>

Return the string "userdata".

=cut

*/
    STRING* name() {
        return const_string(INTERP, "userdata");
    }

/*

=item C<PMC* clone()>

=cut

*/
    PMC* clone() {
        return SELF;
    }

/*

=item C<void set_pmc(PMC *value)>

=cut

*/
    void set_pmc(PMC *value) {
        u_val(SELF) = u_val(value);
        u_env(SELF) = u_env(value);
        PMC_metadata(SELF) = PMC_metadata(value);
    }

/*

=item C<PMC* get_attr_str(STRING* key)>

=cut

*/
    PMC* get_attr_str(STRING* key) {
        return u_val(SELF);
    }

/*

=item C<void set_attr_str(STRING* key, PMC* value)>

=cut

*/
    void set_attr_str(STRING* key, PMC* value) {
        u_val(SELF) = value;
    }

/*

=back

=head2 non-Vtable Methods

=over 4

=item C<INTVAL is_equal(PMC* value)>

The C<==> operation. Compares reference (not in depth).

=cut

*/
    INTVAL is_equal(PMC* value) {
MMD_LuaUserdata: {
            PMC *meth = find_meth(INTERP, SELF, "__eq");
            if (meth != NULL) {
                PMC *retval = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                       SELF, value);
                if (PMC_IS_NULL(retval)) {
                    return (INTVAL)0;
                }
                return VTABLE_get_bool(INTERP, retval);
            }
            if (SELF == value)
                return (INTVAL)1;
            else
                return (INTVAL)0;
        }
MMD_DEFAULT: {
            return (INTVAL)0;
        }
    }

/*

=item C<INTVAL cmp(PMC *value)>

=cut

*/
    INTVAL cmp(PMC* value) {
MMD_LuaUserdata: {
            real_exception(INTERP, NULL, ILL_INHERIT,
                    "attempt to compare two userdata values");
            return (INTVAL)0;
        }
MMD_DEFAULT: {
            real_exception(INTERP, NULL, ILL_INHERIT,
                    "attempt to compare userdata with %s",
                    string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            return (INTVAL)0;
        }
    }

/*

=back

=head2 Specific Methods

=over 4

=item C<PMC *getfenv()>

=cut

*/
    METHOD PMC* getfenv() {
        PMC *retval = u_env(SELF);
        if (retval != NULL)
            return retval;
        else
            return pmc_new(INTERP, dynpmc_LuaNil);
    }

/*

=item C<PMC *get_metatable()>

=cut

*/
    METHOD PMC* get_metatable() {
        PMC *retval = PMC_metadata(SELF);
        if (NULL == retval)
            retval = pmc_new(INTERP, dynpmc_LuaNil);
        return retval;
    }

/*

=item C<PMC* rawequal(PMC* value)>

=cut

*/
    METHOD PMC* rawequal(PMC* value) {
        PMC* retval = pmc_new(INTERP, dynpmc_LuaBoolean);
        if (PMC_type(SELF) == PMC_type(value)
         && u_val(SELF) == u_val(value)
         && u_env(SELF) == u_env(value))
            PMC_int_val(retval) = 1;
        else
            PMC_int_val(retval) = 0;
        return retval;
    }

/*

=item C<void setfenv(PMC *env)>

=cut

*/
    METHOD void setfenv(PMC *env) {
        u_env(SELF) = env;
    }

/*

=item C<void set_metatable(PMC *meta)>

=cut

*/
    METHOD void set_metatable(PMC *meta) {
        if (dynpmc_LuaNil == PMC_type(meta)) {
            PMC_metadata(SELF) = NULL;
        }
        else {
            PMC_metadata(SELF) = meta;
        }
    }

}

/*

=back

=head1 AUTHORS

Francois Perrad.

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
