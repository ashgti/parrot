/*
Copyright: 2005-2006 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

pmc/luauserdata.pmc - Lua Userdata

=head1 DESCRIPTION

C<LuaUserdata> extends C<LuaBase> to provide a class with the behaviour of
the Lua C<Userdata> type.

=head2 Overloaded Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

static STRING *luauserdata_name;
static INTVAL dynpmc_LuaBoolean;
static INTVAL dynpmc_LuaNil;
static INTVAL dynpmc_LuaString;


pmclass LuaUserdata 
    extends LuaBase
    does scalar
    dynpmc 
    group lua_group 
    hll Lua {

/* Class initialization. Caches constant strings that will be used later.
*/
    void class_init() {
        if (pass) {
            PMC *meth;

            Parrot_LuaBase_super_init(INTERP, NULL);
            luauserdata_name = const_string(INTERP, "userdata");
            dynpmc_LuaBoolean = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaBoolean", 0));
            dynpmc_LuaNil = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaNil", 0));
            dynpmc_LuaString = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaString", 0));
        }
    }

/*

=item C<void init()>

Initializes the userdata.

=cut

*/
    void init () {
        PMC_pmc_val(SELF) = NULL;
        PMC_struct_val(SELF) = NULL;
    }

/*

=item C<void init_pmc(PMC *value)>

Initializes the userdata.

=cut

*/
    void init_pmc (PMC* value) {
        PMC_pmc_val(SELF) = value;
        PMC_struct_val(SELF) = NULL;
        PObj_custom_mark_SET(SELF);
    }

/*

=item C<void mark()>

Marks the userdata as live.

=cut

*/
    void mark () {
        if(PMC_pmc_val(SELF))
            pobject_lives(INTERP, (PObj *)PMC_pmc_val(SELF));
    }

/*

=item C<STRING* get_string()>

=cut

*/
    STRING* get_string () {
        return Parrot_sprintf_c(INTERP, "userdata: %08X", SELF);
    }

/*

=item C<PMC* get_pmc_keyed (PMC* key)>

=cut

*/
    PMC* get_pmc_keyed (PMC* key) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__index", 0));
        if (metamethod != NULL) {
            return VTABLE_get_pmc_keyed(INTERP, metamethod, key);
        }
        return pmc_new(INTERP, dynpmc_LuaNil);
    }

/*

=item C<STRING* name()>

Return the string "userdata".

=cut

*/
    STRING* name () {
        return luauserdata_name;
    }

/*

=item C<PMC* clone()>

=cut

*/
    PMC* clone() {
        return SELF;
    }

/*

=item C<PMC* get_attr(INTVAL idx)>

=cut

*/
    PMC* get_attr(INTVAL idx) {
        return PMC_pmc_val(SELF);
    }

/*

=item C<void set_attr(INTVAL idx, PMC *val)>

=cut

*/
    void set_attr(INTVAL idx, PMC* value) {
        PMC_pmc_val(SELF) = value;
    }

/*

=back

=head2 non-Vtable Methods

=over 4

=item C<INTVAL is_equal (PMC* value)>

The C<==> operation. Compares reference (not in depth).

=cut

*/
    INTVAL is_equal (PMC* value) {
MMD_LuaUserdata: {
            PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                    string_from_const_cstring(INTERP, "__eq", 0));
            if (metamethod != NULL) {
                PMC *retval = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
                if (NULL == retval) {
                    return (INTVAL)0;
                }
                return VTABLE_get_bool(INTERP, retval);
            }
            if (SELF == value)
                return (INTVAL)1;
            else 
                return (INTVAL)0;
        }
MMD_DEFAULT: {
            return (INTVAL)0;
        }
    }

/*

=item C<INTVAL cmp (PMC *value)>

=cut

*/
    INTVAL cmp (PMC* value) {
MMD_LuaUserdata: {
            real_exception(INTERP, NULL, ILL_INHERIT,
                    "attempt to compare two userdata values");
            return (INTVAL)0;
        }
MMD_DEFAULT: {
            real_exception(INTERP, NULL, ILL_INHERIT,
                    "attempt to compare userdata with %s",
                    string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            return (INTVAL)0;
        }
    }

/*

=back

=head2 Specific Methods

=over 4

=item C<PMC* rawequal (PMC* value)>

=cut

*/
    METHOD PMC* rawequal (PMC* value) {
        PMC *retval;
       
        retval = pmc_new(INTERP, dynpmc_LuaBoolean);
        if (SELF->vtable->base_type == value->vtable->base_type
         && SELF == value)
            PMC_int_val(retval) = 1;
        else
            PMC_int_val(retval) = 0;
        return retval;
    }

/*

=item C<void set_metatable(PMC *meta)>

=cut

*/
    METHOD void set_metatable(PMC *meta) {
        if (dynpmc_LuaNil == meta->vtable->base_type) {
            PMC_struct_val(SELF) = NULL;
        } else {
            PMC_struct_val(SELF) = meta;
        }
    }

}

/*

=back

=head1 AUTHORS

Francois Perrad.

=cut

*/
