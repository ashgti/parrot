/*
Copyright: 2005 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/luastring.pmc - Lua String

=head1 DESCRIPTION

C<LuaString> extends C<String> to provide a class with the behaviour of
the Lua C<String> type.

=head2 Overloaded Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

static STRING *luastring_name;
static INTVAL dynpmc_LuaNil;
static INTVAL dynpmc_LuaNumber;

pmclass LuaString
    extends String
    does string
    dynpmc
    group lua_group
    hll Lua maps String {

/* Class initialization. Caches constant strings that will be used later.
*/
    void class_init() {
        if (pass) {
            PMC *meth;

            luastring_name = const_string(INTERP, "string");
            dynpmc_LuaNil = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaNil", 0));
            dynpmc_LuaNumber = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaNumber", 0));

            /* namespace hack */
            meth = Parrot_find_global(INTERP,
                const_string(INTERP, "LuaString"),
                const_string(INTERP, "tostring"));
            Parrot_store_global(INTERP,
                const_string(INTERP, "string"),
                const_string(INTERP, "tostring"),
                meth);
            meth = Parrot_find_global(INTERP,
                const_string(INTERP, "LuaString"),
                const_string(INTERP, "tonumber"));
            Parrot_store_global(INTERP,
                const_string(INTERP, "string"),
                const_string(INTERP, "tonumber"),
                meth);
            meth = Parrot_find_global(INTERP,
                const_string(INTERP, "LuaString"),
                const_string(INTERP, "tobase"));
            Parrot_store_global(INTERP,
                const_string(INTERP, "string"),
                const_string(INTERP, "tobase"),
                meth);
        }           
    }

/*

=item C<STRING* name()>

Return the string "string".

=cut

*/
    STRING* name () {
        return luastring_name;
    }

/*

=item C<INTVAL get_bool()>

In Lua, both C<nil> and C<false> make a condition false; any other values
makes it true.

So return always true.

=cut

*/
    INTVAL get_bool () {
        return 1;
    }

/*

=item C<PMC* new_from_string(STRING *rep, INTVAL flags)>

Allow :

    .const .LuaString s = "Hello World!"

=cut

*/
    PMC* new_from_string (STRING *rep, INTVAL flags) {
        INTVAL type;
        PMC *res;

        type = SELF->vtable->base_type;
        if (flags & PObj_constant_FLAG)
            res = constant_pmc_new(INTERP, type);
        else
            res = pmc_new(INTERP, type);

        PMC_str_val(res) = string_copy(INTERP, rep);
        return res;
    }

/*

=item C<INTVAL is_equal(PMC* value)>

Compares the string with C<value>; returns true if
they match.

=cut

*/
    INTVAL is_equal (PMC* value) {
MMD_String: {
            STRING *s = PMC_str_val(SELF);
            STRING *v = VTABLE_get_string(INTERP, value);
            return (INTVAL)(0 == string_equal(INTERP, s, v));
        }
MMD_DEFAULT: {
            return (INTVAL)0;
        }
    }

/*

=item C<INTVAL cmp(PMC* value)>

Compares the string with C<value>; returns -1 if the
string is smaller, 0 if they are equal, and 1 if C<value>
is smaller.

Throws an exception unless C<value> is a LuaString.
                                          
=cut

*/
    INTVAL cmp (PMC* value) {
MMD_String: {
            STRING *s = PMC_str_val(SELF);
            STRING *v = VTABLE_get_string(INTERP, value);
            return string_compare(INTERP, s, v);
        }
MMD_DEFAULT: {
            real_exception(INTERP, NULL, ILL_INHERIT,
                    "attempt to compare string with %s",
                    string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            return (INTVAL)0;
        }
    }

/*

=back

=head2 Specific Methods

=over 4

=item C<PMC* tonumber()>

=item C<PMC* tobase(INTVAL base)>

=cut

*/
    METHOD PMC* tonumber() {
        PMC *retval;
        STRING *rep;
        FLOATVAL d;
        char *s1;
        char *s2;

        rep = VTABLE_get_string(INTERP, SELF);
        s1 = string_to_cstring(INTERP, rep);
        d = strtod(s1, &s2);
        if (s1 != s2) {  /* at least one valid digit? */
            while (isspace((unsigned char)(*s2))) s2++;  /* skip trailing spaces */
            if (*s2 == '\0') {  /* no invalid trailing characters? */
                retval = pmc_new(INTERP, dynpmc_LuaNumber);
                PMC_num_val(retval) = d;
                return retval;
            }
        }
        retval = pmc_new(INTERP, dynpmc_LuaNil);
        return retval;
    }

    METHOD PMC* tobase(INTVAL base) {
        PMC *retval;
        STRING *rep;
        unsigned long n;
        char *s1;
        char *s2;

        rep = VTABLE_get_string(INTERP, SELF);
        s1 = string_to_cstring(INTERP, rep);
        n = strtoul(s1, &s2, base);
        if (s1 != s2) {  /* at least one valid digit? */
            while (isspace((unsigned char)(*s2))) s2++;  /* skip trailing spaces */
            if (*s2 == '\0') {  /* no invalid trailing characters? */
                retval = pmc_new(INTERP, dynpmc_LuaNumber);
                PMC_num_val(retval) = n;
                return retval;
            }
        }
        retval = pmc_new(INTERP, dynpmc_LuaNil);
        return retval;
    }

/*

=item C<PMC* tostring()>

=cut

*/
    METHOD PMC* tostring() {
        PMC *retval;

        retval = VTABLE_clone(INTERP, SELF); 
        return retval;
    }

}

/*

=back

=head1 AUTHORS

Original code by Klaas-Jan Stol.

=cut

*/
