/*
Copyright (C) 2006, The Perl Foundation.
$Id: luabase.pmc 11478 2006-02-09 08:26:19Z fperrad $

=head1 NAME

pmc/luabase.pmc - Lua abstract base class

=head1 DESCRIPTION

C<LuaBase> provides an abstract base class for some Lua types.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

static INTVAL dynpmc_LuaBoolean;
static INTVAL dynpmc_LuaNil;
static INTVAL dynpmc_LuaString;
static INTVAL dynpmc_LuaTable;
static INTVAL dynpmc_LuaUserdata;


pmclass LuaBase
    abstract
    dynpmc
    group lua_group {
/*

=item C<void morph(INTVAL type)>

Morphs the scalar to the specified type.

=cut

*/
    void morph (INTVAL type) {
        if (SELF->vtable->base_type == type)
            return;
        pmc_reuse(INTERP, SELF, type, 0);
    }

/*

=item C<PMC *clone()>

Creates and returns a clone of the scalar.

=cut

*/
    PMC* clone () {
        PMC* dest = pmc_new(INTERP, SELF->vtable->base_type);
        memcpy(&PMC_union(dest), &PMC_union(SELF), sizeof(UnionVal));
        return dest;
    }

/*

=item C<INTVAL get_bool()>

Returns C<true>.

=cut

*/
    INTVAL get_bool () {
        return 1;
    }

/*

=item C<PMC* get_pmc_keyed (PMC* key)>

Throws an exception.

=cut

*/
    PMC* get_pmc_keyed (PMC* key) {
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to index a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
        return NULL;
    }

/*

=item C<void set_bool(INTVAL value)>

=cut

*/
    void set_bool (INTVAL value) {
        VTABLE_morph(INTERP, SELF, dynpmc_LuaBoolean);
        VTABLE_set_bool(INTERP, SELF, value);
    }

/*

=item C<void set_pmc_keyed (PMC* key, PMC* value)>

Throws an exception.

=cut

*/
    void set_pmc_keyed (PMC* key, PMC* value) {
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to index a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
    }

/*

=item C<PMC* neg (PMC *dest)>

=item C<void i_neg()>

Throws an exception.

=cut

*/
    PMC* neg (PMC* dest) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__unm", 0));
        if (metamethod != NULL) {
            dest = Parrot_runops_fromc_args(INTERP, metamethod, "PP", SELF);
            if (NULL == dest) {
                dest = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return dest;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
        return NULL;
    }

    void i_neg() {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__unm", 0));
        if (metamethod != NULL) {
            SELF = Parrot_runops_fromc_args(INTERP, metamethod, "PP", SELF);
            if (NULL == SELF) {
                SELF = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
    }

/*

=item C<PMC* logical_not(PMC *dest)>

Common implementation (use C<get_bool> & C<set_bool>)

=cut

*/
    PMC* logical_not (PMC* dest) {
        if (!dest)
            dest = pmc_new(INTERP, SELF->vtable->base_type);
        VTABLE_set_bool(INTERP, dest, ! DYNSELF.get_bool());
        return dest;
    }

/*

=item C<INTVAL defined()>

Always returns true.

=cut

*/
    INTVAL defined () {
        return 1;
    }

/*

=item C<void* invoke(void* next)>

Throws an exception.

=cut

*/
    void* invoke(void* next) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__call", 0));
        if (metamethod != NULL) {
            /* fix me */
            PMC *retval = Parrot_runops_fromc_args(INTERP, metamethod, "PP", SELF);
            if (NULL == retval) {
                retval = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return retval;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to call a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
        return NULL;
    }

/*

=back

=head2 non-Vtable Methods

=over 4

=item C<void add(PMC *value, PMC *dest)>

=item C<void i_add (PMC *value)>

=item C<void subtract(PMC *value, PMC *dest)>

=item C<void i_substract (PMC *value)>

=item C<void multiply(PMC *value, PMC *dest)>

=item C<void i_multiply (PMC *value)>

=item C<void divide(PMC *value, PMC *dest)>

=item C<void i_divide (PMC *value)>

=item C<PMC* modulus (PMC* value, PMC* dest)>

=item C<void i_modulus (PMC *value)>

=item C<PMC* pow (PMC* value, PMC* dest)>

=item C<void i_pow (PMC *value)>

=item C<PMC* concatenate (PMC *value, PMC *dest)>

=item C<void i_concatenate (PMC *value)>

Throws an exception.

=cut

*/
    PMC* add (PMC* value, PMC* dest) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__add", 0));
        if (metamethod != NULL) {
            dest = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == dest) {
                dest = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return dest;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
        return NULL;
    }

    void i_add (PMC* value) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__add", 0));
        if (metamethod != NULL) {
            SELF = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == SELF) {
                SELF = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
    }

    PMC* subtract (PMC* value, PMC* dest) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__sub", 0));
        if (metamethod != NULL) {
            dest = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == dest) {
                dest = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return dest;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
        return NULL;
    }

    void i_subtract (PMC* value) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__sub", 0));
        if (metamethod != NULL) {
            SELF = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == SELF) {
                SELF = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
    }

    PMC* multiply (PMC* value, PMC* dest) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__mul", 0));
        if (metamethod != NULL) {
            dest = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == dest) {
                dest = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return dest;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
        return NULL;
    }

    void i_multiply (PMC* value) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__mul", 0));
        if (metamethod != NULL) {
            SELF = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == SELF) {
                SELF = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
    }

    PMC* divide (PMC* value, PMC* dest) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__div", 0));
        if (metamethod != NULL) {
            dest = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == dest) {
                dest = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return dest;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
        return NULL;
    }

    void i_divide (PMC* value) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__div", 0));
        if (metamethod != NULL) {
            SELF = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == SELF) {
                SELF = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
    }

    PMC* modulus (PMC* value, PMC* dest) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__mod", 0));
        if (metamethod != NULL) {
            dest = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == dest) {
                dest = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return dest;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
        return NULL;
    }

    void i_modulus (PMC* value) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__mod", 0));
        if (metamethod != NULL) {
            SELF = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == SELF) {
                SELF = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
    }

    PMC* pow (PMC* value, PMC* dest) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__pow", 0));
        if (metamethod != NULL) {
            dest = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == dest) {
                dest = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return dest;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
        return NULL;
    }

    void i_pow (PMC* value) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__pow", 0));
        if (metamethod != NULL) {
            SELF = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == SELF) {
                SELF = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to perform arithmetic on a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
    }

    PMC* concatenate (PMC* value,  PMC* dest) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__concat", 0));
        if (metamethod != NULL) {
            dest = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == dest) {
                dest = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return dest;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to concatenate a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
        return NULL;
    }

    void i_concatenate (PMC* value) {
        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__concat", 0));
        if (metamethod != NULL) {
            SELF = Parrot_runops_fromc_args(INTERP, metamethod, "PPP", SELF, value);
            if (NULL == SELF) {
                SELF = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to concatenate a %s value",
                string_to_cstring(INTERP, DYNSELF.name()));
    }

/*

=back

=head2 Specific Methods

=over 4

=item C<PMC* len()>


=cut

*/
    METHOD PMC* len () {
        PMC *retval;

        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__len", 0));
        if (metamethod != NULL) {
            PMC *retval = Parrot_runops_fromc_args(INTERP, metamethod, "PP", SELF);
            if (NULL == retval) {
                retval = pmc_new(INTERP, dynpmc_LuaNil);
            }
            return retval;
        }
        real_exception(INTERP, NULL, ILL_INHERIT,
                "attempt to get length of a %s value",
                string_to_cstring(INTERP, VTABLE_name(INTERP, SELF)));
        return NULL;
    }

/*

=item C<PMC* tonumber()>

Returns C<nil>.

=cut

*/
    METHOD PMC* tonumber () {
        return pmc_new(INTERP, dynpmc_LuaNil);
    }

/*

=item C<PMC* tostring()>

Return a Lua C<string>.

Common implementation (use C<__tostring> or C<get_string>).

=cut

*/
    METHOD PMC* tostring () {
        PMC *retval;

        PMC *metamethod = Parrot_LuaBase_find_metamethod(INTERP, SELF,
                string_from_const_cstring(INTERP, "__tostring", 0));
        if (metamethod != NULL) {
            retval = Parrot_runops_fromc_args(INTERP, metamethod, "PP", SELF);
            if (NULL == retval) {
                retval = pmc_new(INTERP, dynpmc_LuaNil);
            }
        } else {
            retval = pmc_new(INTERP, dynpmc_LuaString);
            PMC_str_val(retval) = VTABLE_get_string(INTERP, SELF);
        }
        return retval;
    }

/*

=item C<PMC *find_metamethod(STRING *method_name)>

Looks up the method for C<*method_name>.

=cut

*/
    METHOD PMC* find_metamethod(STRING* method_name) {
        PMC *metatable = Parrot_LuaBase_get_metatable(INTERP, SELF);
        if (dynpmc_LuaTable == metatable->vtable->base_type) {
            PMC *method;
            PMC *key;
       
            key = pmc_new(interpreter, dynpmc_LuaString);
            PMC_str_val(key) = method_name;
            method = VTABLE_get_pmc_keyed(INTERP, metatable, key);
            if (dynpmc_LuaNil != method->vtable->base_type) {
                return method;
            }
        }
        return NULL;
    }

/*

=item C<PMC *get_metatable()>

=cut

*/
    METHOD PMC* get_metatable() {
        PMC *retval;

        if (dynpmc_LuaTable == SELF->vtable->base_type) {
            retval = VTABLE_getprop(INTERP, SELF,
                    string_from_const_cstring(INTERP, "__metatable", 0));
            if (dynpmc_LuaTable == retval->vtable->base_type)
                return retval;
        }
        else if (dynpmc_LuaUserdata == SELF->vtable->base_type) {
            retval = PMC_struct_val(SELF);
            if (retval != NULL) 
                return retval;
        }
        else if (dynpmc_LuaString == SELF->vtable->base_type) {
            retval = Parrot_find_global(INTERP,
                    NULL,
                    const_string(INTERP, "mt_string"));
            if (retval != NULL)
                return retval;
        }
        return pmc_new(INTERP, dynpmc_LuaNil);
    }

    METHOD void super_init () {
            dynpmc_LuaBoolean = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaBoolean", 0));
            dynpmc_LuaNil = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaNil", 0));
            dynpmc_LuaString = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaString", 0));
            dynpmc_LuaTable = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaTable", 0));
            dynpmc_LuaUserdata = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaUserdata", 0));
    }

}

/*

=back

=head1 AUTHORS

Francois Perrad.

=cut

*/

