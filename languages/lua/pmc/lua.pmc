/*
Copyright (C) 2006, The Perl Foundation.
$Id$

=head1 NAME

pmc/lua.pmc - Lua native runtime

=head1 DESCRIPTION

This singleton PMC holds some static methods.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

extern INTVAL dynpmc_LuaNil;
extern INTVAL dynpmc_LuaNumber;
extern INTVAL dynpmc_LuaString;

static PMC * Lua_PMC;


pmclass Lua
    singleton
    dynpmc
    group lua_group {

/*

=item C<void* get_pointer()>

=item C<void set_pointer(void *ptr)>

These two functions are part of the singleton creation interface. For more
information see F<src/pmc.c>.

=cut

*/
    void* get_pointer() {
        return Lua_PMC;
    }

    void set_pointer(void* ptr) {
        Lua_PMC = (PMC*) ptr;
    }

/*

=item C<PMC* frexp(PMC* x)>

=cut

*/
    METHOD PMC* frexp(PMC* x) {
        PMC *y;
        PMC *expn;
        PMC *retval;
        int e;

        y = pmc_new(INTERP, dynpmc_LuaNumber);
        expn = pmc_new(INTERP, dynpmc_LuaNumber);
        VTABLE_set_number_native(INTERP, y,
                                 frexp(VTABLE_get_number(INTERP, x), &e));
        VTABLE_set_integer_native(INTERP, expn, e);
        retval = pmc_new(INTERP, enum_class_Array);
        VTABLE_set_integer_native(INTERP, retval, 2);
        VTABLE_set_pmc_keyed_int(INTERP, retval, 0, y);
        VTABLE_set_pmc_keyed_int(INTERP, retval, 1, expn);
        return retval;
    }

/*

=item C<PMC* ldexp(PMC* x, PMC* expn)>

=cut

*/
    METHOD PMC* ldexp(PMC* x, PMC* expn) {
        PMC *retval = pmc_new(INTERP, dynpmc_LuaNumber);
        VTABLE_set_number_native(INTERP, retval,
                                 ldexp(VTABLE_get_number(INTERP, x),
                                       VTABLE_get_integer(INTERP, expn)));
        return retval;
    }

/*

=item C<PMC* modf(PMC* x)>

=cut

*/
    METHOD PMC* modf(PMC* x) {
        PMC *y;
        PMC *d;
        PMC *retval;
        FLOATVAL _d;

        y = pmc_new(INTERP, dynpmc_LuaNumber);
        d = pmc_new(INTERP, dynpmc_LuaNumber);
        VTABLE_set_number_native(INTERP, y,
                                 modf(VTABLE_get_number(INTERP, x), &_d));
        VTABLE_set_number_native(INTERP, d, _d);
        retval = pmc_new(INTERP, enum_class_Array);
        VTABLE_set_integer_native(INTERP, retval, 2);
        VTABLE_set_pmc_keyed_int(INTERP, retval, 0, d);
        VTABLE_set_pmc_keyed_int(INTERP, retval, 1, y);
        return retval;
    }

/*

=item C<STRING* strftime(STRING* fmt, PMC* tm)>

=cut

*/
    METHOD STRING* strftime(STRING* fmt, PMC* tm) {
        PMC *retval = NULL;
        struct tm stm;
        char b[200];
        size_t reslen;
        const char *s = string_to_cstring(INTERP, fmt);

        stm.tm_sec   = VTABLE_get_integer_keyed_int(INTERP, tm, 0);
        stm.tm_min   = VTABLE_get_integer_keyed_int(INTERP, tm, 1);
        stm.tm_hour  = VTABLE_get_integer_keyed_int(INTERP, tm, 2);
        stm.tm_mday  = VTABLE_get_integer_keyed_int(INTERP, tm, 3);
        stm.tm_mon   = VTABLE_get_integer_keyed_int(INTERP, tm, 4) - 1;
        stm.tm_year  = VTABLE_get_integer_keyed_int(INTERP, tm, 5) - 1900;
        stm.tm_wday  = VTABLE_get_integer_keyed_int(INTERP, tm, 6);
        stm.tm_yday  = VTABLE_get_integer_keyed_int(INTERP, tm, 7);
        stm.tm_isdst = VTABLE_get_integer_keyed_int(INTERP, tm, 8);

        reslen = strftime(b, sizeof b, s, &stm);
        return string_from_cstring(INTERP, b, reslen);
    }

}

/*

=back

=head1 AUTHORS

Francois Perrad

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
