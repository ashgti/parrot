/*
Copyright: 2005-2006 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/luanumber.pmc - Lua Number

=head1 DESCRIPTION

C<LuaNumber> extends C<Float> to provide a class with the behaviour of
the Lua C<Number> type.

=head2 Overloaded Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

static STRING *luanumber_name;
static INTVAL dynpmc_LuaString;

pmclass LuaNumber
    extends Float
    does float
    dynpmc
    group lua_group
    hll Lua maps Float {

/* Class initialization. Caches constant strings that will be used later.
*/
    void class_init() {
        if (pass) {
            PMC *meth;

            luanumber_name = const_string(INTERP, "number");
            dynpmc_LuaString = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaString", 0));

            /* namespace hack */
            meth = Parrot_find_global(INTERP,
                const_string(INTERP, "LuaNumber"),
                const_string(INTERP, "tostring"));
            Parrot_store_global(INTERP,
                const_string(INTERP, "number"),
                const_string(INTERP, "tostring"),
                meth);
            meth = Parrot_find_global(INTERP,
                const_string(INTERP, "LuaNumber"),
                const_string(INTERP, "tonumber"));
            Parrot_store_global(INTERP,
                const_string(INTERP, "number"),
                const_string(INTERP, "tonumber"),
                meth);
        }
    }

/*

=item C<STRING* name()>

Return the string "number".

=cut

*/
    STRING* name () {
        return luanumber_name;
    }

/*

=item C<INTVAL get_bool()>

In Lua, both C<nil> and C<false> make a condition false; any other values
makes it true.

So return always true.

=cut

*/
    INTVAL get_bool () {
        return 1;
    }

/*

=item C<void set_integer_native(INTVAL value)>

=cut

*/
    void set_integer_native (INTVAL value) {
        PMC_num_val(SELF) = (FLOATVAL)value;
    }

/*

=item C<PMC* new_from_string(STRING *rep, INTVAL flags)>

Return a LuaNumber PMC created from a string (Implementation
is based on new_from_string() from Integer PMC).

Allow :

    .const .LuaNumber n = "12.34"

=cut

*/
    PMC* new_from_string(STRING *rep, INTVAL flags) {
        INTVAL type;
        PMC *res;

        type = SELF->vtable->base_type;
        if (flags & PObj_constant_FLAG)
            res = constant_pmc_new(INTERP, type);
        else
            res = pmc_new(INTERP, type);

        PMC_num_val(res) = string_to_num(INTERP, rep);
        return res;
    }

/*

=item C<INTVAL is_equal(PMC* value)>

=cut

*/
    INTVAL is_equal (PMC* value) {
MMD_Float: {
            return (INTVAL)(PMC_num_val(SELF) == PMC_num_val(value));
        }
MMD_DEFAULT: {
            return (INTVAL)0;
        }
    }

/*

=item C<INTVAL cmp(PMC* value)>

=cut

*/
    INTVAL cmp(PMC* value) {
MMD_Float: {
            FLOATVAL diff;
            diff = PMC_num_val(SELF) - PMC_num_val(value);
            return diff > 0 ? 1 : diff < 0 ? -1 : 0;
        }
MMD_DEFAULT: {
            real_exception(INTERP, NULL, ILL_INHERIT,
                    "attempt to compare number with %s",
                    string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            return (INTVAL)0;
        }
    }

/*

=back

=head2 Specific Methods

=over 4

=item C<PMC* tonumber()>

=cut

*/
    METHOD PMC* tonumber() {
        PMC *retval;

        retval = VTABLE_clone(INTERP, SELF); 
        return retval;
    }

/*

=item C<PMC* tostring()>

=cut

*/
    METHOD PMC* tostring() {
        PMC *retval;
        STRING *rep;

        retval = pmc_new(INTERP, dynpmc_LuaString);
        rep = VTABLE_get_string(INTERP, SELF);
        PMC_str_val(retval) = rep;
        return retval;
    }

}

/*

=back

=head1 AUTHORS

Original code by Klaas-Jan Stol.

=cut

*/
