/*
Copyright (C) 2005-2007, The Perl Foundation.
$Id$

=head1 NAME

pmc/luanumber.pmc - Lua Number

=head1 DESCRIPTION

C<LuaNumber> extends C<LuaAny> to provide a class with the behaviour of
the Lua C<Number> type.

=head2 Overloaded Methods

=over 4

=cut

*/

#include "lua_private.h"
#include "pmc_luastring.h"

#define LUA_NUMBER_FMT          "%.14g"


pmclass LuaNumber
    extends LuaAny
    does scalar
    does float
    dynpmc
    group lua_group
    hll Lua
    maps Float {

/*

=item C<void init()>

Initializes the number to zero.

=cut

*/
    void init() {
        PMC_num_val(SELF) = 0.0;
    }

/*

=item C<PMC* new_from_string(STRING *rep, INTVAL flags)>

Return a LuaNumber PMC created from a string (Implementation
is based on new_from_string() from Integer PMC).

Allow :

    .const .LuaNumber n = "12.34"

=cut

*/
    PMC* new_from_string (STRING *rep, INTVAL flags) {
        PMC *res;
        INTVAL type = PMC_type(SELF);
        if (flags & PObj_constant_FLAG)
            res = constant_pmc_new(INTERP, type);
        else
            res = pmc_new(INTERP, type);
        PMC_num_val(res) = string_to_num(INTERP, rep);
        return res;
    }

/*

=item C<STRING* name()>

Return the string "number".

=cut

*/
    STRING* name () {
        return const_string(INTERP, "number");
    }

/*

=item C<PMC *clone()>

Creates and returns a clone of the scalar.

=cut

*/
    PMC* clone () {
        PMC* dest = pmc_new(INTERP, PMC_type(SELF));
        STRUCT_COPY(&PMC_union(dest), &PMC_union(SELF));
        return dest;
    }

/*

=item C<INTVAL get_integer()>

Returns an integer representation of the number (by casting).

=cut

*/
   INTVAL get_integer () {
        return (INTVAL) PMC_num_val(SELF);
   }

/*

=item C<FLOATVAL get_number()>

Returns the value of the number.

=cut

*/
    FLOATVAL get_number () {
        return PMC_num_val(SELF);
    }

/*

=item C<STRING* get_string()>

Returns a Parrot string representation of the number.

=cut

*/
    STRING* get_string () {
        FLOATVAL f = PMC_num_val(SELF);
        return Parrot_sprintf_c(INTERP, LUA_NUMBER_FMT, f);
    }

/*

=item C<void set_integer_native(INTVAL value)>

=cut

*/
    void set_integer_native (INTVAL value) {
        PMC_num_val(SELF) = (FLOATVAL)value;
    }

/*

=item C<void set_number_native(FLOATVAL value)>

=cut

*/
    void set_number_native (FLOATVAL value) {
        PMC_num_val(SELF) = value;
    }

/*

=item C<VOID set_string_native(STRING* value)>

=cut

*/
    void set_string_native (STRING *value) {
        DYNSELF.morph(dynpmc_LuaString);
        DYNSELF.set_string_native(value);
    }

/*

=item C<void set_pmc(PMC *value)>

Sets the value of the number to the value in C<*value>.

=cut

*/
    void set_pmc(PMC *value) {
        PMC_num_val(SELF) = VTABLE_get_number(INTERP, value);
    }

/*

=item C<void increment()>

Increments the number.

=cut

*/
    void increment () {
        PMC_num_val(SELF) ++;
    }

/*

=item C<void decrement()>

Decrements the number.

=cut

*/
    void decrement () {
        PMC_num_val(SELF) --;
    }

/*

=item C<PMC* neg (PMC * dest)>

=cut

*/
    PMC* neg (PMC * dest) {
        FLOATVAL a = - SELF.get_number();
        dest = pmc_new(INTERP, dynpmc_LuaNumber);
        VTABLE_set_number_native(INTERP, dest, a);
        return dest;
    }

/*

=item C<void i_neg ()>

=cut

*/
    void i_neg () {
        FLOATVAL a = - SELF.get_number();
        SELF.set_number_native(a);
    }

/*

=back

=head2 non-Vtable Methods

=over 4

=item C<PMC* add (PMC* value, PMC* dest)>

=cut

*/
    PMC* add (PMC* value, PMC* dest) {
MMD_LuaNumber: {
            dest = pmc_new(INTERP, dynpmc_LuaNumber);
            VTABLE_set_number_native(INTERP, dest,
                    SELF.get_number() + VTABLE_get_number(INTERP, value));
            return dest;
        }
MMD_LuaString: {
            PMC* n = LuaString.value.tonumber();
            if (PMC_type(n) == dynpmc_LuaNumber) {
                return Parrot_LuaNumber_add_LuaNumber(INTERP, SELF, n, dest);
            }
            else {
                real_exception(INTERP, NULL, ILL_INHERIT,
                      "attempt to perform arithmetic on a %s value",
                      string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
                return NULL;
            }
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__add");
            if (meth != NULL) {
                dest = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (PMC_IS_NULL(dest)) {
                    dest = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return dest;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to perform arithmetic on a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            return NULL;
        }
    }

/*

=item C<void i_add (PMC* value)>

=cut

*/
    void i_add (PMC* value) {
MMD_LuaNumber: {
            FLOATVAL n = SELF.get_number()
                         + VTABLE_get_number(INTERP, value);
            SELF.set_number_native(n);
        }
MMD_LuaString: {
            PMC* n = LuaString.value.tonumber();
            if (PMC_type(n) == dynpmc_LuaNumber) {
                Parrot_LuaNumber_i_add_LuaNumber(INTERP, SELF, n);
            }
            else {
                real_exception(INTERP, NULL, ILL_INHERIT,
                      "attempt to perform arithmetic on a %s value",
                      string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            }
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__add");
            if (meth != NULL) {
                SELF = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (NULL == SELF) {
                    SELF = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to perform arithmetic on a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
        }
    }

/*

=item C<PMC* subtract (PMC* value, PMC* dest)>

=cut

*/
    PMC* subtract (PMC* value, PMC* dest) {
MMD_LuaNumber: {
            dest = pmc_new(INTERP, dynpmc_LuaNumber);
            VTABLE_set_number_native(INTERP, dest,
                    SELF.get_number() - VTABLE_get_number(INTERP, value));
            return dest;
        }
MMD_LuaString: {
            PMC* n = LuaString.value.tonumber();
            if (PMC_type(n) == dynpmc_LuaNumber) {
                return Parrot_LuaNumber_subtract_LuaNumber(INTERP, SELF,
                                                           n, dest);
            }
            else {
                real_exception(INTERP, NULL, ILL_INHERIT,
                      "attempt to perform arithmetic on a %s value",
                      string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            }
            return NULL;
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__sub");
            if (meth != NULL) {
                dest = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (PMC_IS_NULL(dest)) {
                    dest = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return dest;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to perform arithmetic on a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            return NULL;
        }
    }

/*

=item C<void i_subtract (PMC* value)>

=cut

*/
    void i_subtract (PMC* value) {
MMD_LuaNumber: {
            FLOATVAL n = SELF.get_number()
                         - VTABLE_get_number(INTERP, value);
            SELF.set_number_native(n);
        }
MMD_LuaString: {
            PMC* n = LuaString.value.tonumber();
            if (PMC_type(n) == dynpmc_LuaNumber) {
                Parrot_LuaNumber_i_subtract_LuaNumber(INTERP, SELF, n);
            }
            else {
                real_exception(INTERP, NULL, ILL_INHERIT,
                      "attempt to perform arithmetic on a %s value",
                      string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            }
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__sub");
            if (meth != NULL) {
                SELF = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (NULL == SELF) {
                    SELF = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to perform arithmetic on a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
        }
    }

/*

=item C<PMC* multiply (PMC* value, PMC* dest)>

=cut

*/
    PMC* multiply (PMC* value, PMC* dest) {
MMD_LuaNumber: {
            dest = pmc_new(INTERP, dynpmc_LuaNumber);
            VTABLE_set_number_native(INTERP, dest,
                    SELF.get_number() * VTABLE_get_number(INTERP, value));
            return dest;
        }
MMD_LuaString: {
            PMC* n = LuaString.value.tonumber();
            if (PMC_type(n) == dynpmc_LuaNumber) {
                return Parrot_LuaNumber_multiply_LuaNumber(INTERP, SELF,
                                                           n, dest);
            }
            else {
                real_exception(INTERP, NULL, ILL_INHERIT,
                      "attempt to perform arithmetic on a %s value",
                      string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
                return NULL;
            }
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__mul");
            if (meth != NULL) {
                dest = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (PMC_IS_NULL(dest)) {
                    dest = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return dest;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to perform arithmetic on a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            return NULL;
        }
    }

/*

=item C<void i_multiply (PMC* value)>

=cut

*/
    void i_multiply (PMC* value) {
MMD_LuaNumber: {
            FLOATVAL n = SELF.get_number()
                         * VTABLE_get_number(INTERP, value);
            SELF.set_number_native(n);
        }
MMD_LuaString: {
            PMC* n = LuaString.value.tonumber();
            if (PMC_type(n) == dynpmc_LuaNumber) {
                Parrot_LuaNumber_i_multiply_LuaNumber(INTERP, SELF, n);
            }
            else {
                real_exception(INTERP, NULL, ILL_INHERIT,
                      "attempt to perform arithmetic on a %s value",
                      string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            }
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__mul");
            if (meth != NULL) {
                SELF = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (NULL == SELF) {
                    SELF = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to perform arithmetic on a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
        }
    }

/*

=item C<PMC* divide (PMC* value, PMC* dest)>

=cut

*/
    PMC* divide (PMC* value, PMC* dest) {
MMD_LuaNumber: {
            dest = pmc_new(INTERP, dynpmc_LuaNumber);
            VTABLE_set_number_native(INTERP, dest,
                    SELF.get_number() / VTABLE_get_number(INTERP, value));
            return dest;
        }
MMD_LuaString: {
            PMC* n = LuaString.value.tonumber();
            if (PMC_type(n) == dynpmc_LuaNumber) {
                return Parrot_LuaNumber_divide_LuaNumber(INTERP, SELF,
                                                         n, dest);
            }
            else {
                real_exception(INTERP, NULL, ILL_INHERIT,
                      "attempt to perform arithmetic on a %s value",
                      string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
                return NULL;
            }
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__div");
            if (meth != NULL) {
                dest = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (PMC_IS_NULL(dest)) {
                    dest = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return dest;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to perform arithmetic on a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            return NULL;
        }
    }

/*

=item C<void i_divide (PMC* value)>

=cut

*/
    void i_divide (PMC* value) {
MMD_LuaNumber: {
            FLOATVAL n = SELF.get_number()
                         / VTABLE_get_number(INTERP, value);
            SELF.set_number_native(n);
        }
MMD_LuaString: {
            PMC* n = LuaString.value.tonumber();
            if (PMC_type(n) == dynpmc_LuaNumber) {
                Parrot_LuaNumber_i_divide_LuaNumber(INTERP, SELF, n);
            }
            else {
                real_exception(INTERP, NULL, ILL_INHERIT,
                      "attempt to perform arithmetic on a %s value",
                      string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            }
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__div");
            if (meth != NULL) {
                SELF = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (NULL == SELF) {
                    SELF = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to perform arithmetic on a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
        }
    }

/*

=item C<PMC* modulus (PMC* value, PMC* dest)>

=cut

*/
    PMC* modulus (PMC* value, PMC* dest) {
MMD_LuaNumber: {
            FLOATVAL a = SELF.get_number();
            FLOATVAL b = VTABLE_get_number(INTERP, value);
            dest = pmc_new(INTERP, dynpmc_LuaNumber);
            VTABLE_set_number_native(INTERP, dest, a - floor(a/b)*b);
            return dest;
        }
MMD_LuaString: {
            PMC* n = LuaString.value.tonumber();
            if (PMC_type(n) == dynpmc_LuaNumber) {
                return Parrot_LuaNumber_modulus_LuaNumber(INTERP, SELF,
                                                          n, dest);
            }
            else {
                real_exception(INTERP, NULL, ILL_INHERIT,
                      "attempt to perform arithmetic on a %s value",
                      string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
                return NULL;
            }
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__mod");
            if (meth != NULL) {
                dest = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (PMC_IS_NULL(dest)) {
                    dest = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return dest;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to perform arithmetic on a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            return NULL;
        }
    }

/*

=item C<void i_modulus (PMC* value)>

=cut

*/
    void i_modulus (PMC* value) {
MMD_LuaNumber: {
            FLOATVAL a = SELF.get_number();
            FLOATVAL b = VTABLE_get_number(INTERP, value);

            SELF.set_number_native(a - floor(a/b)*b);
        }
MMD_LuaString: {
            PMC* n = LuaString.value.tonumber();
            if (PMC_type(n) == dynpmc_LuaNumber) {
                Parrot_LuaNumber_i_modulus_LuaNumber(INTERP, SELF, n);
            }
            else {
                real_exception(INTERP, NULL, ILL_INHERIT,
                      "attempt to perform arithmetic on a %s value",
                      string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            }
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__mod");
            if (meth != NULL) {
                SELF = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (NULL == SELF) {
                    SELF = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to perform arithmetic on a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
        }
    }

/*

=item C<PMC* pow (PMC* value, PMC* dest)>

=cut

*/
    PMC* pow (PMC* value, PMC* dest) {
MMD_LuaNumber: {
            dest = pmc_new(INTERP, dynpmc_LuaNumber);
            VTABLE_set_number_native(INTERP, dest,
                  pow(SELF.get_number(), VTABLE_get_number(INTERP, value)));
            return dest;
        }
MMD_LuaString: {
            PMC* n = LuaString.value.tonumber();
            if (PMC_type(n) == dynpmc_LuaNumber) {
                return Parrot_LuaNumber_pow_LuaNumber(INTERP, SELF, n, dest);
            }
            else {
                real_exception(INTERP, NULL, ILL_INHERIT,
                      "attempt to perform arithmetic on a %s value",
                      string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
                return NULL;
            }
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__pow");
            if (meth != NULL) {
                dest = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (PMC_IS_NULL(dest)) {
                    dest = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return dest;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to perform arithmetic on a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            return NULL;
        }
    }

/*

=item C<void i_pow (PMC* value)>

=cut

*/
    void i_pow (PMC* value) {
MMD_LuaNumber: {
            FLOATVAL n = pow(SELF.get_number(),
                             VTABLE_get_number(INTERP, value));
            SELF.set_number_native(n);
        }
MMD_LuaString: {
            PMC* n = LuaString.value.tonumber();
            if (PMC_type(n) == dynpmc_LuaNumber) {
                Parrot_LuaNumber_i_pow_LuaNumber(INTERP, SELF, n);
            }
            else {
                real_exception(INTERP, NULL, ILL_INHERIT,
                    "attempt to perform arithmetic on a %s value",
                    string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            }
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__pow");
            if (meth != NULL) {
                SELF = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (NULL == SELF) {
                    SELF = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to perform arithmetic on a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
        }
    }

/*

=item C<INTVAL is_equal (PMC* value)>

=cut

*/
    INTVAL is_equal (PMC* value) {
MMD_LuaNumber: {
            return (INTVAL)(PMC_num_val(SELF) == PMC_num_val(value));
        }
MMD_DEFAULT: {
            return (INTVAL)0;
        }
    }

/*

=item C<INTVAL cmp (PMC* value)>

=cut

*/
    INTVAL cmp (PMC* value) {
MMD_LuaNumber: {
            FLOATVAL diff;
            diff = PMC_num_val(SELF) - PMC_num_val(value);
            return diff > 0 ? (INTVAL)1 : diff < 0 ? (INTVAL)-1 : (INTVAL)0;
        }
MMD_DEFAULT: {
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to compare number with %s",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            return (INTVAL)0;
        }
    }

/*

=item C<PMC* concatenate (PMC *value, PMC *dest)>

=cut

*/
    PMC* concatenate (PMC* value,  PMC* dest) {
MMD_LuaNumber: {
            STRING* s = string_concat(INTERP,
                SELF.get_string(),
                LuaNumber.value.get_string(), 0);
            dest = pmc_new(INTERP, dynpmc_LuaNumber);
            VTABLE_set_string_native(INTERP, dest, s);
            return dest;
        }
MMD_LuaString: {
            STRING* s = string_concat(INTERP,
                SELF.get_string(),
                LuaString.value.get_string(), 0);
            dest = pmc_new(INTERP, dynpmc_LuaNumber);
            VTABLE_set_string_native(INTERP, dest, s);
            return dest;
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__concat");
            if (meth != NULL) {
                dest = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (PMC_IS_NULL(dest)) {
                    dest = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return dest;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to concatenate a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
            return NULL;
        }
    }

/*

=item C<void i_concatenate (PMC* value)>

=cut

*/
    void i_concatenate (PMC* value) {
MMD_LuaNumber: {
            STRING* s = SELF.get_string();
            STRING* v = LuaNumber.value.get_string();
            SELF.set_string_native(string_append(INTERP, s, v));
        }
MMD_LuaString: {
            STRING* s = SELF.get_string();
            STRING* v = LuaString.value.get_string();
            SELF.set_string_native(string_append(INTERP, s, v));
        }
MMD_DEFAULT: {
            PMC *meth = find_meth(INTERP, value, "__concat");
            if (meth != NULL) {
                SELF = Parrot_runops_fromc_args(INTERP, meth, "PPP",
                                                SELF, value);
                if (NULL == SELF) {
                    SELF = pmc_new(INTERP, dynpmc_LuaNil);
                }
                return;
            }
            real_exception(INTERP, NULL, ILL_INHERIT,
                  "attempt to concatenate a %s value",
                  string_to_cstring(INTERP, VTABLE_name(INTERP, value)));
        }
    }

/*

=back

=head2 Specific Methods

=over 4

=item C<PMC* rawequal (PMC* value)>

=cut

*/
    METHOD PMC* rawequal (PMC* value) {
        PMC *retval = pmc_new(INTERP, dynpmc_LuaBoolean);
        if (PMC_type(SELF) == PMC_type(value)
         && PMC_num_val(SELF) == PMC_num_val(value))
            PMC_int_val(retval) = 1;
        else
            PMC_int_val(retval) = 0;
        return retval;
    }

/*

=item C<PMC* tonumber()>

=cut

*/
    METHOD PMC* tonumber() {
        return SELF.clone();
    }

}

/*

=back

=head1 AUTHORS

Francois Perrad.

Klaas-Jan Stol.

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
