/*
Copyright: 2005 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/luaboolean.pmc - Lua Boolean

=head1 DESCRIPTION

C<LuaBoolean> extends C<Boolean> to provide a class with the behaviour of
the Lua C<Boolean> type.

The value is stored as an Integer.

=head2 Overloaded Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

static STRING *false_string;
static STRING *true_string;
static STRING *luaboolean_name;
static INTVAL dynpmc_LuaNil;
static INTVAL dynpmc_LuaString;


pmclass LuaBoolean
    extends Boolean
    does boolean
    does integer
    dynpmc
    group lua_group
    hll Lua maps Integer {

/* Class initialization. Caches constant strings that will be used later.
*/
    void class_init() {
        if (pass) {
            PMC *meth;

            false_string = const_string(INTERP, "false");
            true_string = const_string(INTERP, "true");
            luaboolean_name = const_string(INTERP, "boolean");
            dynpmc_LuaNil = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaNil", 0));
            dynpmc_LuaString = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaString", 0));

            /* namespace hack */
            meth = Parrot_find_global(INTERP,
                const_string(INTERP, "LuaBoolean"),
                const_string(INTERP, "tostring"));
            Parrot_store_global(INTERP,
                const_string(INTERP, "boolean"),
                const_string(INTERP, "tostring"),
                meth);
            meth = Parrot_find_global(INTERP,
                const_string(INTERP, "LuaBoolean"),
                const_string(INTERP, "tonumber"));
            Parrot_store_global(INTERP,
                const_string(INTERP, "boolean"),
                const_string(INTERP, "tonumber"),
                meth);
        }
    }

/*

=item C<STRING* name()>

Return the string "boolean".

=cut

*/
    STRING* name () {
        return luaboolean_name;
    }

/*

=item C<STRING* get_string ()>

Return the string "true" or "false".

=cut

*/
    STRING* get_string () {
        if (PMC_int_val(SELF))
            return true_string;
        else
            return false_string;
    }

/*

=back

=head2 Specific Methods

=over 4

=item C<PMC* tonumber()>

=cut

*/
    METHOD PMC* tonumber() {
        PMC *retval;

        retval = pmc_new(INTERP, dynpmc_LuaNil);
        return retval;
    }

/*

=item C<PMC* tostring()>

=cut

*/
    METHOD PMC* tostring() {
        PMC *retval;
        STRING *rep;

        retval = pmc_new(INTERP, dynpmc_LuaString);
        rep = VTABLE_get_string(INTERP, SELF);
        PMC_str_val(retval) = rep;
        return retval;
    }

}

/*

=back

=head1 AUTHORS

Original code by Klaas-Jan Stol.

=cut

*/

