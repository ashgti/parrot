/*
Copyright: 2005 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/luafunction.pmc - Lua Function

=head1 DESCRIPTION

C<LuaFunction> extends C<Parrot Sub> to provide a class with the behaviour
of the Lua C<Function> type.

=head2 Overloaded Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

static STRING *luafunction_name;
static INTVAL dynpmc_LuaBoolean;
static INTVAL dynpmc_LuaNil;
static INTVAL dynpmc_LuaString;


pmclass LuaFunction
    extends Sub
    does sub
    dynpmc
    group lua_group
    hll Lua maps Sub {

/* Class initialization. Caches constant strings that will be used later.
*/
    void class_init() {
        if (pass) {
            PMC *meth;

            luafunction_name = const_string(INTERP, "function");
            dynpmc_LuaBoolean = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaBoolean", 0));
            dynpmc_LuaNil = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaNil", 0));
            dynpmc_LuaString = pmc_type(INTERP,
              string_from_const_cstring(INTERP, "LuaString", 0));

            /* namespace hack */
            meth = Parrot_find_global(INTERP,
                const_string(INTERP, "LuaFunction"),
                const_string(INTERP, "rawequal"));
            Parrot_store_global(INTERP,
                const_string(INTERP, "function"),
                const_string(INTERP, "rawequal"),
                meth);
            meth = Parrot_find_global(INTERP,
                const_string(INTERP, "LuaFunction"),
                const_string(INTERP, "tostring"));
            Parrot_store_global(INTERP,
                const_string(INTERP, "function"),
                const_string(INTERP, "tostring"),
                meth);
            meth = Parrot_find_global(INTERP,
                const_string(INTERP, "LuaFunction"),
                const_string(INTERP, "tonumber"));
            Parrot_store_global(INTERP,
                const_string(INTERP, "function"),
                const_string(INTERP, "tonumber"),
                meth);
        }
    }

/*

=item C<STRING* name()>

Return the string "function".

=cut

*/
    STRING* name () {
        return luafunction_name;
    }

/*

=item C<STRING* get_string()>

=cut

*/
    STRING* get_string () {
        return Parrot_sprintf_c(INTERP, "function: %08X", SELF);
    }

/*

=item C<INTVAL get_bool()>

In Lua, both C<nil> and C<false> make a condition false; any other values
makes it true.

So return always true.

=cut

*/
    INTVAL get_bool () {
        return 1;
    }

/*

=item C<PMC logical_not(PMC *dest)>

Return always false.

=cut

*/
    PMC* logical_not (PMC* dest) {
        if (!dest)
            dest = pmc_new(INTERP, pmc_type(INTERP, 
              string_from_const_cstring(INTERP, "LuaBoolean", 0)));
        VTABLE_set_integer_native(INTERP, dest, 0);
        return dest;
    }

/*

=back

=head2 Specific Methods

=over 4

=item C<PMC* rawequal (PMC* value)>

=cut

*/
    METHOD PMC* rawequal (PMC* value) {
        PMC *retval;
       
        retval = pmc_new(INTERP, dynpmc_LuaBoolean);
        if (SELF->vtable->base_type == value->vtable->base_type
         && SELF == value)
            PMC_int_val(retval) = 1;
        else
            PMC_int_val(retval) = 0;
        return retval;
    }

/*

=item C<PMC* tonumber()>

=cut

*/
    METHOD PMC* tonumber() {
        PMC *retval;

        retval = pmc_new(INTERP, dynpmc_LuaNil);
        return retval;
    }

/*

=item C<PMC* tostring()>

=cut

*/
    METHOD PMC* tostring() {
        PMC *retval;
        STRING *rep;

        retval = pmc_new(INTERP, dynpmc_LuaString);
        rep = VTABLE_get_string(INTERP, SELF);
        PMC_str_val(retval) = rep;
        return retval;
    }

}

/*

=back

=head1 AUTHORS

Francois Perrad

=cut

*/
