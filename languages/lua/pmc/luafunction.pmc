/*
Copyright (C) 2005-2007, The Perl Foundation.
$Id$

=head1 NAME

pmc/luafunction.pmc - Lua Function

=head1 DESCRIPTION

C<LuaFunction> extends C<Parrot Sub> and C<LuaAny> to provide a class
with the behaviour of the Lua C<Function> type.
C<LuaFunction> is used by standard libraries
written in PIR.

See also: F<languages/lua/pmc/luaclosure.pmc>

=head2 Overloaded Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

static STRING *luafunction_name;
extern INTVAL dynpmc_LuaBoolean;
extern INTVAL dynpmc_LuaNil;


pmclass LuaFunction
    extends Sub
    extends LuaAny
    does scalar
    does sub
    dynpmc
    need_ext
    group lua_group
    hll Lua
    maps Sub {

/* Class initialization. Caches constant strings that will be used later.
*/
    void class_init() {
        if (pass) {
            luafunction_name = const_string(INTERP, "function");
        }
    }

/*

=item C<STRING* name()>

Return the string "function".

=cut

*/
    STRING* name () {
        return luafunction_name;
    }

/*

=item C<PMC *clone()>

=cut

*/
    PMC* clone() {
        struct Parrot_sub * sub;
        PMC* const ret = pmc_new_noinit(INTERP, SELF->vtable->base_type);
        /*
         * we have to mark it ourselves
         */
        PObj_custom_mark_destroy_SETALL(ret);
        sub = mem_sys_allocate(sizeof (struct Parrot_sub));
        /* first set the sub struct, string_copy may cause GC */
        PMC_struct_val(ret) = sub;
        PMC_pmc_val(ret) = NULL;
        memcpy(sub, PMC_sub(SELF), sizeof (struct Parrot_sub));
        sub->name = string_copy(INTERP, sub->name);
        PMC_metadata(ret) = PMC_metadata(SELF);
        return ret;
    }

/*

=item C<STRING* get_string()>

=cut

*/
    STRING* get_string () {
        return Parrot_sprintf_c(INTERP, "function: %08X", SELF);
    }

/*

=item C<INTVAL is_equal (PMC* value)>

=cut

*/
    INTVAL is_equal (PMC* value) {
MMD_LuaFunction: {
            return (PMC_sub(SELF))->start_offs == (PMC_sub(value))->start_offs
                && (PMC_sub(SELF))->seg == (PMC_sub(value))->seg;
        }
MMD_DEFAULT: {
            return (INTVAL)0;
        }
    }

/*

=back

=head2 Specific Methods

=over 4

=item C<PMC *getfenv()>

=cut

*/
    METHOD PMC* getfenv() {
        PMC *retval = PMC_metadata(SELF);
        if (retval != NULL)
            return retval;
        else
            return pmc_new(INTERP, dynpmc_LuaNil);
    }

/*

=item C<PMC* rawequal (PMC* value)>

=cut

*/
    METHOD PMC* rawequal (PMC* value) {
        PMC *retval;

        retval = pmc_new(INTERP, dynpmc_LuaBoolean);
        if ( SELF->vtable->base_type == value->vtable->base_type
         && (PMC_sub(SELF))->start_offs == (PMC_sub(value))->start_offs
         && (PMC_sub(SELF))->seg == (PMC_sub(value))->seg )
            PMC_int_val(retval) = 1;
        else
            PMC_int_val(retval) = 0;
        return retval;
    }

/*

=item C<void setfenv(PMC *env)>

=cut

*/
    METHOD void setfenv(PMC *env) {
        PMC_metadata(SELF) = env;
    }

}

/*

=back

=head1 AUTHORS

Francois Perrad

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
