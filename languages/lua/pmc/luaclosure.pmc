/*
Copyright (C) 2006, The Perl Foundation.
$Id$

=head1 NAME

classes/luaclosure.pmc - Lua Closure

=head1 DESCRIPTION

C<LuaClosure> extends C<Parrot Closure> and C<LuaAny> to provide a class
with the behaviour of the Lua C<Function> type.
C<LuaClosure> is used by function written in Lua.

=head2 Overloaded Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

static STRING *luafunction_name;
static INTVAL dynpmc_LuaBoolean;


pmclass LuaClosure
    extends Closure
    extends LuaAny
    does scalar
    does sub
    dynpmc
    group lua_group
    hll Lua maps Closure {

/* Class initialization. Caches constant strings that will be used later.
*/
    void class_init() {
        if (pass) {
            luafunction_name = const_string(INTERP, "function");
            dynpmc_LuaBoolean = pmc_type(INTERP,
              const_string(INTERP, "LuaBoolean"));
        }
    }

/*

=item C<STRING* name()>

Return the string "function".

=cut

*/
    STRING* name () {
        return luafunction_name;
    }

/*

=item C<STRING* get_string()>

=cut

*/
    STRING* get_string () {
        return Parrot_sprintf_c(INTERP, "function: %08X", SELF);
    }

/*

=item C<INTVAL is_equal (PMC* value)>

=cut

*/
    INTVAL is_equal (PMC* value) {
MMD_LuaClosure: {
            return (PMC_sub(SELF))->start_offs == (PMC_sub(value))->start_offs
                && (PMC_sub(SELF))->seg == (PMC_sub(value))->seg;
        }
MMD_DEFAULT: {
            return (INTVAL)0;
        }
    }

/*

=back

=head2 Specific Methods

=over 4

=item C<PMC* rawequal (PMC* value)>

=cut

*/
    METHOD PMC* rawequal (PMC* value) {
        PMC *retval;

        retval = pmc_new(INTERP, dynpmc_LuaBoolean);
        if ( SELF->vtable->base_type == value->vtable->base_type
         && (PMC_sub(SELF))->start_offs == (PMC_sub(value))->start_offs
         && (PMC_sub(SELF))->seg == (PMC_sub(value))->seg )
            PMC_int_val(retval) = 1;
        else
            PMC_int_val(retval) = 0;
        return retval;
    }

}

/*

=back

=head1 AUTHORS

Francois Perrad

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
