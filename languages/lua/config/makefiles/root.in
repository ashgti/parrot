RM_F    = @rm_f@
PERL    = @perl@
PARROT  = ../../parrot@exe@
PBC_MERGE = ../../pbc_merge@exe@
PGE      = $(PARROT) ../../compilers/pge/pgc.pir
TGE      = $(PARROT) ../../compilers/tge/tgc.pir

LIBPATH  = lib
BUILD    = $(PERL) @build_dir@/tools/build/dynpmc.pl
O        = @o@
CLASSDIR = pmc
LOAD_EXT = @load_ext@
PARROT_DYNEXT = @build_dir@/runtime/parrot/dynext

PMCS = \
 lua \
 luabase \
 luaboolean \
 luaclosure \
 luafunction \
 luanil \
 luanumber \
 luastring \
 luatable \
 luauserdata

PBCS = \
 $(LIBPATH)/thread.pbc \
 $(LIBPATH)/luaaux.pbc \
 $(LIBPATH)/luabasic.pbc \
 $(LIBPATH)/luacoroutine.pbc \
 $(LIBPATH)/luapackage.pbc \
 $(LIBPATH)/luastring.pbc \
 $(LIBPATH)/luatable.pbc \
 $(LIBPATH)/luamath.pbc \
 $(LIBPATH)/luaio.pbc \
 $(LIBPATH)/luaos.pbc \
 $(LIBPATH)/luadebug.pbc

GEN_PIR = \
 src/lua51_grammar_gen.pir \
 src/lua51_testlex_gen.pir \
 src/dumplex_gen.pir

GEN_PBC = \
 src/Lua51.pbc \
 src/Lua51TestLex.pbc \
 src/LuaDumpLex.pbc

all: pmcs $(PBCS) $(GEN_PBC) Lua/parser.pm

src/lua51_grammar_gen.pir: src/lua51.pg
	$(PGE) --output=src/lua51_grammar_gen.pir src/lua51.pg

src/Lua51.pbc: src/Lua51.pir src/lua51_grammar_gen.pir src/parse.pir
	$(PARROT) -o src/Lua51.pbc --output-pbc src/Lua51.pir


src/lua51_testlex_gen.pir: src/lua51_testlex.pg
	$(PGE) --output=src/lua51_testlex_gen.pir src/lua51_testlex.pg

src/Lua51TestLex.pbc: src/lua51_testlex_gen.pir
	$(PARROT) -o src/Lua51TestLex.pbc --output-pbc src/lua51_testlex_gen.pir

src/dumplex_gen.pir: src/dumplex.tg
	$(TGE) --output=src/dumplex_gen.pir src/dumplex.tg

src/LuaDumpLex.pbc: src/dumplex_gen.pir
	$(PARROT) -o src/LuaDumpLex.pbc --output-pbc src/dumplex_gen.pir


pmcs:
	@cd $(CLASSDIR) && $(BUILD) generate $(PMCS)
	@cd $(CLASSDIR) && $(BUILD) compile $(PMCS)
	@cd $(CLASSDIR) && $(BUILD) linklibs $(PMCS)
	@cd $(CLASSDIR) && $(BUILD) copy "--destination=$(PARROT_DYNEXT)" $(PMCS)

$(LIBPATH)/thread.pbc: $(LIBPATH)/thread.pir
	$(PARROT) --output=$(LIBPATH)/thread.pbc $(LIBPATH)/thread.pir

$(LIBPATH)/luaaux.pbc: $(LIBPATH)/luaaux.pir
	$(PARROT) --output=$(LIBPATH)/luaaux.pbc $(LIBPATH)/luaaux.pir

$(LIBPATH)/luabasic.pbc: $(LIBPATH)/luabasic.pir
	$(PARROT) --output=$(LIBPATH)/luabasic.pbc $(LIBPATH)/luabasic.pir

$(LIBPATH)/luacoroutine.pbc: $(LIBPATH)/luacoroutine.pir
	$(PARROT) --output=$(LIBPATH)/luacoroutine.pbc $(LIBPATH)/luacoroutine.pir

$(LIBPATH)/luapackage.pbc: $(LIBPATH)/luapackage.pir
	$(PARROT) --output=$(LIBPATH)/luapackage.pbc $(LIBPATH)/luapackage.pir

$(LIBPATH)/luastring.pbc: $(LIBPATH)/luastring.pir
	$(PARROT) --output=$(LIBPATH)/luastring.pbc $(LIBPATH)/luastring.pir

$(LIBPATH)/luatable.pbc: $(LIBPATH)/luatable.pir
	$(PARROT) --output=$(LIBPATH)/luatable.pbc $(LIBPATH)/luatable.pir

$(LIBPATH)/luamath.pbc: $(LIBPATH)/luamath.pir
	$(PARROT) --output=$(LIBPATH)/luamath.pbc $(LIBPATH)/luamath.pir

$(LIBPATH)/luaio.pbc: $(LIBPATH)/luaio.pir
	$(PARROT) --output=$(LIBPATH)/luaio.pbc $(LIBPATH)/luaio.pir

$(LIBPATH)/luaos.pbc: $(LIBPATH)/luaos.pir
	$(PARROT) --output=$(LIBPATH)/luaos.pbc $(LIBPATH)/luaos.pir

$(LIBPATH)/luadebug.pbc: $(LIBPATH)/luadebug.pir
	$(PARROT) --output=$(LIBPATH)/luadebug.pbc $(LIBPATH)/luadebug.pir

Lua/parser.pm: Lua/lua51.yp
	yapp -s -v -m Lua::parser -o Lua/parser.pm Lua/lua51.yp

help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  all:"
	@echo "                     This is the default."
	@echo "Testing:"
	@echo "  test:              Run the test suite."
	@echo "  testclean:         Clean up test results."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
	@echo "  distclean:         Removes also anything built, in theory"
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

test:
	cd .. && $(PERL) t/harness --languages=lua

TEST_CLEANERS = \
 "t/pmc/*.pir" \
 "t/*.pir" \
 "t/*.lua" \
 "t/*.orig_out" \
 "t/*.parrot_out"

testclean:
	$(RM_F) $(TEST_CLEANERS)

BUILD_CLEANERS = \
 $(GEN_PIR) \
 "src/*.pbc" \
 "$(CLASSDIR)/*.dump" \
 "$(CLASSDIR)/*.c" \
 "$(CLASSDIR)/*.h" \
 "$(CLASSDIR)/*$(LOAD_EXT)" \
 "$(CLASSDIR)/*$(O)" \
 "$(LIBPATH)/*.pbc"

clean:
	$(RM_F) $(BUILD_CLEANERS) $(TEST_CLEANERS)

distclean: clean
	$(RM_F) Makefile
