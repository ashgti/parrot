/*
Copyright: 2005-2006 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/luanumber.pmc - Lua Number

=head1 DESCRIPTION

C<LuaNumber> extends C<Float> to provide a class with the behaviour of
the Lua C<Number> type.

=head2 Overloaded Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

static STRING *luanumber_name;

pmclass LuaNumber
    extends Float
    does float
    dynpmc
    group lua_group
    hll Lua maps Float {

/* Class initialization. Caches constant strings that will be used later.
*/
    void class_init() {
        if (pass) {
            luanumber_name = const_string(INTERP, "number");
        }
    }

/*

=item C<STRING* name()>

Return the string "number".

=cut

*/
    STRING* name () {
        return luanumber_name;
    }

/*

=item C<INTVAL get_bool()>

In Lua, both C<nil> and C<false> make a condition false; any other values
makes it true.

So return always true.

=cut

*/
    INTVAL get_bool () {
        return 1;
    }

/*

=item C<PMC* new_from_string(STRING *rep, INTVAL flags)>

Return a LuaNumber PMC created from a string (Implementation
is based on new_from_string() from Integer PMC).

Allow :

    .const .LuaNumber n = "12.34"

=cut

*/
    PMC* new_from_string(STRING *rep, INTVAL flags) {
        INTVAL type;
        PMC *res;

        type = SELF->vtable->base_type;
        if (flags & PObj_constant_FLAG)
            res = constant_pmc_new(INTERP, type);
        else
            res = pmc_new(INTERP, type);

        PMC_num_val(res) = string_to_num(INTERP, rep);
        return res;
    }

}

/*

=back

=head1 AUTHORS

Original code by Klaas-Jan Stol.

=cut

*/
