#!/usr/bin/perl -w
#
# jakoc - compile a Jako source file Parrot assembly file.
#
# by Gregor N. Purdy <gregor@focusresearch.com>
#
# Copyright (C) 2001-2003 Gregor N. Purdy. All rights reserved.
# This program is free software. It is subject to the same license
# as Perl itself.
#
# $Id$
#

use strict;

use Carp;

use Jako::Compiler::Message; # $file, $line, $debug
use Jako::Parser::Block;
use Jako::Parser::Identifier;
use Jako::Lexer;

our @CARP_NOT = qw(Jako::Compiler::Message);

use FileHandle;

$debug = 1;

$|++ if $debug;

use Data::Dumper;
$Data::Dumper::Useqq  = 1;
$Data::Dumper::Terse  = 1;
$Data::Dumper::Indent = 0;

use Getopt::Std;

my %opts;
getopts('t', \%opts);

die "$0: usage: $0 <source>\n" unless @ARGV == 1;
$file = shift @ARGV;


#
# Global variables:
#

my %ident;   # Identifiers

my %reg_count = ( # Registers
  I => 0,
  N => 0,
  P => 0,
  S => 0
);

sub temp_reg { my $type = shift; return '$$' . $type . $reg_count{$type}++; }
sub temp_int { return temp_reg('I'); }
sub temp_num { return temp_reg('N'); }
sub temp_str { return temp_reg('S'); }

my %type_name = (
  'I' => 'int',
  'N' => 'num',
  'P' => 'obj',
  'S' => 'str',
);

my %type_code = (
  'int' => 'I',
  'num' => 'N',
  'obj' => 'P',
  'str' => 'S'
);

my %imcc_type_name = (
  I => 'int',
  N => 'float',
  P => 'PMC',
  S => 'string'
);


###############################################################################
###############################################################################
##
## The Block Stack
##
##   $block_count         The total number of blocks begun (used for labels)
##   @block_stack         The stack of active blocks. We keep a block on the
##                          stack for the file scope.
##
## NOTE: Do NOT access the block stack directly. Access it via routines in
## this section of code.
##
###############################################################################
###############################################################################

my $anon_block_count = 0;
my $block_count      = 0;
my @block_stack;

my $root_block = Jako::Parser::Block->new(
  undef,  # No parent
  'file', # File scope
  undef,  # No return type
  undef   # No prefix
);

push @block_stack, $root_block;


#
# block_depth()
#
# Block depth zero is when the only block on the block stack is the file
# scope block. Therefore, we return one less than the number of blocks on
# the stack.
#

sub block_depth
{
  return scalar(@block_stack - 1);
}


#
# current_block()
#
# Returns the block on the top of the block stack.
#

sub current_block
{
  INTERNAL_ERROR("Attempt to reference top block with empty block stack!")
    if @block_stack == 0;

  return  $block_stack[-1];
}


#
# push_block()
#
# Push a block on the top of the block stack.
#

sub push_block
{
  push @block_stack, shift;
}


#
# pop_block()
#
# Pop the top block off the block stack and return it. Bounds checks the block
# stack to make sure we don't pop off the file scope block.
#

sub pop_block
{
  INTERNAL_ERROR("Attempt to pop file-scope block off block stack!")
    if @block_stack == 1;

  return pop @block_stack;
}


#
# find_ident()
#
# Scans through the block stack, from the top down, looking for the identifier.
# If it is found, returns a hashref containing the number of levels away the
# identifier is declared and the definition of the identifier.
#

sub find_ident
{
  my ($name) = @_;

  my $count = 0;

  foreach my $block (reverse @block_stack) {
    my $ident = $block->identifier($name);
    return { LEVELS => $count, IDENT => $ident } if $ident;
    $count++;
  }

  return undef;
}


#
# find_block()
#
# Scans through the block stack, from the top down, looking for a block of
# the appropriate kind (and, if label is given, with a matching label. If
# it is found, returns a hashref containing the number of levels away the
# block was found and the block info hashref. If it is not found, then
# undef is returned.
#

sub find_block
{
  my ($kind, $label) = @_;

  my $count = 0;

  foreach my $block (reverse @block_stack) {
    next unless $block->kind eq $kind;
    next unless !defined($label) or $block->prefix eq $label;
 
    return { LEVELS => $count, BLOCK => $block };
  }

  return undef;
}


###############################################################################
###############################################################################
##
## Miscellany
##
###############################################################################
###############################################################################

my %subs;

my %void_functions = (

);

my %assign_funcs = (
  acos   => [ 'N',    1, '[IN]'     ],
  and    => [ 'I',    2, 'II'       ],
  asec   => [ 'N',    1, '[IN]'     ],
  asin   => [ 'N',    1, '[IN]'     ],
  atan   => [ 'N',    1, '[IN]'     ],
  atan2  => [ 'N',    2, '[IN][IN]' ],
  cos    => [ 'N',    1, '[IN]'     ],
  cosh   => [ 'N',    1, '[IN]'     ],
  exp    => [ 'N',    1, '[IN]'     ],
  ln     => [ 'N',    1, '[IN]'     ],
  log10  => [ 'N',    1, '[IN]'     ],
  log2   => [ 'N',    1, '[IN]'     ],
  not    => [ 'I',    1, 'I'        ],
  or     => [ 'I',    2, 'II'       ],
  pow    => [ 'N',    2, '[IN][IN]' ],
  sec    => [ 'N',    1, '[IN]'     ],
  sech   => [ 'N',    1, '[IN]'     ],
  sin    => [ 'N',    1, '[IN]'     ],
  sinh   => [ 'N',    1, '[IN]'     ],
  substr => [ 'S',    3, 'SII'      ],
  tan    => [ 'N',    1, '[IN]'     ],
  tanh   => [ 'N',    1, '[IN]'     ],
  time   => [ '[IN]', 0             ],
  xor    => [ 'I',    2, 'II'       ],
);


#
# Regular Expressions:
#
# NOTE: These are not in use right now.
#

my $t_ident   = qr{[A-Za-z][A-Za-z0-9_]*};
my $t_integer = qr{-?\d+};
my $t_string  = qr{\"[^\\\"]*(?:\\.[^\\\"]*)*\"};
my $t_number  = qr{-?\d+\.\d+};


###############################################################################
###############################################################################
##
## Assembly Code Output
##
###############################################################################
###############################################################################


#
# push_label()
#
# Used to push a label onto a stack of labels that will get
# printed at the beginning of the next emit_code() call.
#
# Actually, pushes as many labels as there are arguments.
#

my @label_stack = ( );

sub push_label
{
  push @label_stack, grep { defined $_ and $_ ne '' } @_;
}


#
# push_comment()
#
# Used to push a comment onto a stack of comments that will get
# printed at the beginning of the next emit_code() call.
#
# Actually, pushes as many comments as there are arguments.
#

my @comment_stack = ( );

sub push_comment
{
  push @comment_stack, grep { defined $_ and $_ ne '' } @_;
}


#
# push_source()
#
# Used to push source code comments. This allows them to be
# indented.
#

sub push_source
{
  my $block_indent = '  ' x block_depth();
  push_comment map { $block_indent . $_ } @_;
}


#
# emit_code()
#
# emit_code LABEL
# emit_code LABEL OP
# emit_code LABEL OP ARGS
# emit_code LABEL OP ARGS COMMENT
#
# Label can be undef.
#

my $last_op = 'noop';

sub emit_code
{
  my ($op, $args, $comment) = @_;

  #
  # Incorporate any comments into the comment stack:
  #

  push_comment($comment) if defined $comment and $comment ne '';
  $comment = undef;

  #
  # Complain about any undefined arguments:
  #

  if (defined $args and grep { !defined $_ } @$args) {
    INTERNAL_ERROR("Undefined arguments to emit_code()!");
    return;
  }

  #
  # Print out all but the last comment, each on a line by itself:
  #
  # NOTE: As of 2001-09-20, the assembler doesn't handle lines with
  # only a label and a comment. So, we write these out separately.
  #

  $comment = pop @comment_stack if @comment_stack;

  foreach my $comment (@comment_stack) {
    printf "%-16s %-8s %-25s # %s\n", '', '', '', $comment;
  }

  @comment_stack = ( );

  #
  # Print out all but the last label, each on a line by itself:
  #

#  my $label = pop @label_stack if @label_stack;
  my $label = undef;

  foreach my $label (@label_stack) {
    print "$label:\n";
  }

  @label_stack = ( );

  #
  # Print out the label for the actual code line (if any):
  #

  if (defined $label and $label ne '') {
    printf "%-16s ", "$label:";
  } else {
    printf "%-16s ", '';
  }

  #
  # Print out the op mnemonic, if any:
  #

  if (defined $op) {
    printf "%-8s", $op;
    $last_op = $op;
  } else {
    printf "%-8s", '';
  }

  #
  # Print out the arguments, if any:
  #

  if (defined $args and @$args) {
    printf " %-25s", join(", ", map { s/^\$//; $_ } @$args);
  } else {
    printf " %-25s", '';
  }

  #
  # Print out the comment, if any:
  #

  if (defined $comment) {
    printf(" # %s", $comment) if defined $comment;
  }

  #
  # End the line like a good text generator:
  #

  print "\n";
}


###############################################################################
###############################################################################
##
## Typing Predicates
##
## These are used throughout the code to check the type of an argument.
##
###############################################################################
###############################################################################


#
# int_lit_q()
#

sub int_lit_q
{
  my ($value) = @_;

  return 'dec' if $value =~ m/^-?\d+$/;
  return 'hex' if $value =~ m/^0x[0-9a-f]+$/i;
  return 'oct' if $value =~ m/^0[0-7]+$/;
  return 'bin' if $value =~ m/^0b[01]+$/;

  return undef;
}


#
# num_lit_q()
#

sub num_lit_q
{
  my ($value) = @_;
  return $value =~ m/^-?\d+\.\d+$/;
}


#
# int_or_num_lit_q()
#

sub int_or_num_lit_q
{
  my ($value) = @_;
  return int_lit_q($value) || num_lit_q($value);
}


#
# str_lit_q()
#

sub str_lit_q
{
  my ($value) = @_;
  return $value =~ m/^"/;
}


#
# lit_q()
#

sub lit_q
{
  my ($value) = @_;
  return str_lit_q($value) || int_lit_q($value) || num_lit_q($value);
}


#
# int_reg_q()
#

sub int_reg_q
{
  my ($value) = @_;
  return $value =~ m/^(\$\$)?I\d+$/;
}


#
# num_reg_q()
#

sub num_reg_q
{
  my ($value) = @_;
  return $value =~ m/^(\$\$)?N\d+$/;
}


#
# obj_reg_q()
#

sub obj_reg_q
{
  my ($value) = @_;
  return $value =~ m/^(\$\$)?P\d+$/;
}


#
# str_reg_q()
#

sub str_reg_q
{
  my ($value) = @_;
  return $value =~ m/^(\$\$)?S\d+$/;
}


#
# reg_q()
#

sub reg_q
{
  my ($value) = @_;
  return $value =~ m/^(\$\$)?[INPS]\d+$/;
}


#
# var_q()
#

sub var_q
{
  my ($value) = @_;
  return $value =~ m/^\$[^\$]/;
}



#
# class_of()
#

sub class_of
{
  my $value = shift;

  return 'reg' if reg_q($value);
  return 'var' if var_q($value);
  return 'lit' if lit_q($value);

  INTERNAL_ERROR("Cannot determine class of '$value'!");
}


#
# type_of()
#

sub type_of
{
  my $value = shift;

  return substr($value, 2, 1) if reg_q($value);

  if ($value =~ m/^\$\$([INPS])\d+$/) { # IMCC "VIRTUAL" REGISTERS ($$I99 to jakoc, $I99 to imcc)
    return $1;
  }

  return 'S' if str_lit_q($value);
  return 'N' if num_lit_q($value);
  return 'I' if int_lit_q($value);

  if ($value =~ m/^[a-zA-Z_][a-zA-Z0-9_]*$/) {
    my $block = current_block();
    my $ident = $block->find_identifier($value);
    INTERNAL_ERROR("Cannot find identifier '$value' to determine type!") unless defined $ident;
    return $ident->type;
  }

  INTERNAL_ERROR("Cannot determine type of '$value'!");
}

sub int_q { return type_of(shift) eq 'I'; }
sub num_q { return type_of(shift) eq 'N'; }
sub str_q { return type_of(shift) eq 'S'; }

sub int_or_num_q { my $type = type_of(shift); return $type eq 'I' or $type eq 'N'; }


###############################################################################
###############################################################################
##
## Operation Support
##
###############################################################################
###############################################################################


#
# op_comp()
#
# There are three kinds of entries in the %comp_ops hash:
#
#   * Perl expressions to optimize all-constant ops to branches.
#
#   * Entries to map source tokens to the op name. This is used
#     in parsing conditionals.
#
#   * Entries to determine the opposite comparison operator if
#     we need to reverse the sense of the operator as it appears
#     in the source.
#
# TODO: Handle numeric comparisons, too!
#

my %comp_ops = (
  'eq' => sub { $_[0] == $_[1] },
  'ne' => sub { $_[0] != $_[1] },
  'le' => sub { $_[0] <= $_[1] },
  'lt' => sub { $_[0] <  $_[1] },
  'ge' => sub { $_[0] >= $_[1] },
  'gt' => sub { $_[0] >  $_[1] },

  '==' => 'eq',
  '!=' => 'ne',
  '<=' => 'le',
  '<'  => 'lt',
  '>=' => 'ge',
  '>'  => 'gt',

  '!eq' => 'ne',
  '!ne' => 'eq',
  '!le' => 'gt',
  '!lt' => 'ge',
  '!ge' => 'lt',
  '!gt' => 'le',
);

sub op_comp
{
  my ($type, $op, $a, $b, $true, $false) = @_;

  $op = $comp_ops{$op} unless ref $comp_ops{$op}; # Map, e.g., '>=' to 'ge'

  #
  # OPTIMIZE const-const comparisons to unconditional branches:
  #

  if (int_or_num_lit_q($a) and int_or_num_lit_q($b)) {
    if (&{$comp_ops{$op}}($a, $b)) {
      emit_code('branch', [$true]);
    } else {
      emit_code('branch', [$false]);
    }

    return;
  }

  #
  # CONVERT const-reg comparisons to reg-const comparisons:
  #
  # We do this by reversing the operand order and inverting the comparison.
  #

  if (int_or_num_lit_q($a) and reg_q($b)) {
    ($a, $op, $b) = ($b, $comp_ops{"!$op"}, $a);
  }

  #
  # CONVERT num-int and int-num comparisons to num-num comparisons:
  #

  my $a_type = type_of($a);
  my $b_type = type_of($b);

  if (int_or_num_lit_q($b)) {
    #
    # reg-const comparisons:
    #
    # NOTE: We count on the assembler to promote the integer constant
    # in the case of num-reg-to-int-const comparisons.
    #

    if ($a_type eq 'I' and num_q($b)) {
      my $temp = temp_num();
      emit_code('set', [$temp, $a]);
      $a = $temp;
    }
  } else {
    #
    # reg-reg comparisons:
    #

    if ($a_type ne $b_type) {
      if ($a_type eq 'I') {
        my $temp = temp_num();
        emit_code('set', [$temp, $a]);
        $a = $temp;
      } elsif ($b_type eq 'I') {
        my $temp = temp_num();
        emit_code('set', [$temp, $b]);
        $b = $temp;
      } else {
        INTERNAL_ERROR("Expected to have to use iton op.");
      }
    }
  }

  #
  # EMIT code:
  #

  if (defined $true) {
    emit_code($op, [$a, $b, $true]);
    if (defined $false) {
      emit_code('branch', [$false]);
    }
  } else {
    if (defined $false) {
      op_comp($type, $comp_ops{"!$op"}, $a, $b, $false, $true);
    } else {
      INTERNAL_ERROR("op_comp called without any destinations!");
    }
  }
}


#
# op_eq()
#
# Handle a 'eq' op. This includes pseudo-ops for cases that aren't covered in
# by Parrot, such as comparing a register to constant.
#
# eq_i_i    # TRUE op
# eq_i_ic   # PSEUDO op
# eq_ic_i   # PSEUDO op
# eq_ic_ic  # OPTIMIZED to non-conditional branch
#
# TODO: Handle numeric and string comparisons
#

sub op_eq
{
  my ($label, $a, $b, $le, $gt) = @_;
  push_label($label);
  op_comp(undef, 'eq', $a, $b, $le, $gt);
}


#
# op_ne()
#
# Handle a 'ne' op. This includes pseudo-ops for cases that aren't covered in
# by Parrot, such as comparing a register to constant.
#
# ne_i_i    # TRUE op
# ne_i_ic   # PSEUDO op
# ne_ic_i   # PSEUDO op
# ne_ic_ic  # OPTIMIZED to non-conditional branch
#
# TODO: Handle numeric and string comparisons
#

sub op_ne
{
  my ($label, $a, $b, $le, $gt) = @_;
  push_label($label);
  op_comp(undef, 'ne', $a, $b, $le, $gt);
}


#
# op_le()
#
# Handle a 'le' op. This includes pseudo-ops for cases that aren't covered in
# by Parrot, such as comparing a register to constant.
#
# le_i_i    # TRUE op
# le_i_ic   # PSEUDO op
# le_ic_i   # PSEUDO op
# le_ic_ic  # OPTIMIZED to non-conditional branch
#
# TODO: Handle numeric and string comparisons
#

sub op_le
{
  my ($label, $a, $b, $le, $gt) = @_;
  push_label($label);
  op_comp(undef, 'le', $a, $b, $le, $gt);
}


#
# op_lt()
#
# Handle a 'lt' op. This includes pseudo-ops for cases that aren't covered in
# by Parrot, such as comparing a register to constant.
#
# lt_i_i    # TRUE op
# lt_i_ic   # PSEUDO op
# lt_ic_i   # PSEUDO op
# lt_ic_ic  # OPTIMIZED to non-conditional branch
#
# TODO: Handle numeric and string comparisons
#

sub op_lt
{
  my ($label, $a, $b, $le, $gt) = @_;
  push_label($label);
  op_comp(undef, 'lt', $a, $b, $le, $gt);
}


#
# op_ge()
#
# Handle a 'ge' op. This includes pseudo-ops for cases that aren't covered in
# by Parrot, such as comparing a register to constant.
#
# ge_i_i    # TRUE op
# ge_i_ic   # PSEUDO op
# ge_ic_i   # PSEUDO op
# ge_ic_ic  # OPTIMIZED to non-conditional branch
#
# TODO: Handle numeric and string comparisons
#

sub op_ge
{
  my ($label, $a, $b, $le, $gt) = @_;
  push_label($label);
  op_comp(undef, 'ge', $a, $b, $le, $gt);
}


#
# op_gt()
#
# Handle a 'gt' op. This includes pseudo-ops for cases that aren't covered in
# by Parrot, such as comparing a register to constant.
#
# gt_i_i    # TRUE op
# gt_i_ic   # PSEUDO op
# gt_ic_i   # PSEUDO op
# gt_ic_ic  # OPTIMIZED to non-conditional branch
#
# TODO: Handle numeric and string comparisons
#

sub op_gt
{
  my ($label, $a, $b, $le, $gt) = @_;
  push_label($label);
  op_comp(undef, 'gt', $a, $b, $le, $gt);
}



###############################################################################
###############################################################################
##
## Identifier Declarations
##
###############################################################################
###############################################################################


#
# declare_var()
#
# Assign a register to the identifier within the scope of the current block.
#
# Access is one of 'const', 'var' or 'arg'.
#

sub declare_var
{
  my ($name, $type, $access) = @_;

  #
  # Check for a few bad conditions.
  #
  # NOTE: These are compiler internal consistency checks. They really should not be
  # triggered in normal operation, even with bad source code as input.
  #

  my $type_name = $type_name{$type};

  INTERNAL_ERROR("Variable declaration involves undefined access!")
    unless defined $access;

  INTERNAL_ERROR("Variable declaration involves undefined type code!")
    unless defined $type;

  INTERNAL_ERROR("Variable declaration involves undefined type name!")
    unless defined $type_name;

  INTERNAL_ERROR("Variable declaration involves undefined variable name!")
    unless defined $name;

  #
  # Lookup the identifier:
  #

  my $block = current_block();

  my $ident = $block->find_identifier($name);

  #
  # If the identifier is already defined at this lexical scope, we want to complain
  # about the redefinition. Otherwise, we assume the programmer wanted to shadow the
  # previous definition.
  #

  if (defined $ident and $ident->block eq $block) {
    SYNTAX_ERROR("Redeclaration of identifier '%s'. Previous declaration on line %d.",
      $name, $ident->line);
  }

  #
  # Now that we've decided to actually declare the variable, we will place its
  # definition into the block at the top of the block stack. First, we assign
  # it a register number, then we fill in the IDENT entry within the block,
  # and then we link the register to the identifier and the block.
  #

  $ident = Jako::Parser::Identifier->new(
    $block,
    $access,
    $type,
    $name,
    $file,
    $line,
    "\$$name"     # IMCC Name
  );

  $block->identifier($name, $ident);

  #
  # Push the source comment about the variable declaration.
  #

  my $imcc_type = $imcc_type_name{$type};

  if ($access eq 'arg') {
    push_comment "(argument " . $name . ")";
    emit_code '.param', [ "$imcc_type $name" ];
  }
  elsif ($access eq 'const') {
    push_source "const $type_name{$type} $name = ...";
    emit_code(".local", [ "$imcc_type $name" ]); # TODO: A better IMCC way?
  }
  elsif ($access eq 'var') {
    push_source "var $type_name{$type} $name;";
    emit_code(".local", [ "$imcc_type $name" ]);
  }
  else {
    INTERNAL_ERROR("Unrecognized access '$access' for identifier '$name'");
  }

  return 1;
}


#
# declare_const()
#

sub declare_const
{
  my ($name, $type, $value) = @_;

  #
  # Check for a few bad conditions.
  #
  # NOTE: These are compiler internal consistency checks. They really should not be
  # triggered in normal operation, even with bad source code as input.
  #

  my $type_name = $type_name{$type};

  INTERNAL_ERROR("Constant definition involves undefined type code!")
    unless defined $type;

  INTERNAL_ERROR("Constant definition involves undefined type name!")
    unless defined $type_name;

  INTERNAL_ERROR("Constant definition involves undefined constant name!")
    unless defined $name;

  INTERNAL_ERROR("Constant definition involves undefined value!")
    unless defined $value;

  #
  # Lookup the identifier:
  #
  # NOTE: This lookup doesn't give the info itself, but rather a hashref with
  # the LEVELS away the definition was found, and IDENT with the actual info
  # about the identifier.
  #

  my $block = current_block();

  my $ident = $block->find_identifier($name);

  #
  # If the identifier is already defined at this lexical scope, we want to complain
  # about the redefinition. Otherwise, we assume the programmer wanted to shadow the
  # previous definition.
  #

  if (defined $ident and $ident->block eq $block) {
    SYNTAX_ERROR("Redeclaration of identifier '%s'. Previous declaration on line %d.",
      $name, $ident->line);
  }

  #
  # Now that we've decided to actually declare the constant, we will place its
  # definition into the block at the top of the block stack. We fill in the
  # IDENT entry within the block.
  #

  $ident = Jako::Parser::Identifier->new(
    $block,
    'const',
    $type,
    $name,
    $file,
    $line
  );

  $block->identifier($name, $ident);

  #
  # Push the source comment about the constant definition and
  # emit the code to assign a value.
  #

  push_source "const $type_name $name = $value;";

  my %imcc_types = ( I => 'int', N => 'float', P => 'PMC', S => 'string');
  my $imcc_type = $imcc_types{$type};

  emit_code(".local", [ "$imcc_type $name" ]);
  emit_code("$name =", [ $value ]);

  return 1;
}


###############################################################################
###############################################################################
##
## Variable Assignments
##
###############################################################################
###############################################################################


#
# assign_var()
#

sub assign_var
{
  my ($name, $type, $value) = @_;

  #
  # Lookup the identifier:
  #
  # NOTE: This lookup doesn't give the info itself, but rather a hashref with
  # the LEVELS away the definition was found, and IDENT with the actual info
  # about the identifier.
  #

  my $block = current_block();

  my $ident = $block->find_identifier($name);

  #
  # Reject cases where LHS isn't declared:
  #

  SYNTAX_ERROR("Assignment to undeclared variable '%s'.", $ident)
    unless defined $ident;

  #
  # Now that we've confirmed we could find the identifier, we make sure it is
  # bound to a variable, not a constant.
  #

  SYNTAX_ERROR("Cannot assign to constant '%s'.", $name)
    unless $ident->is_variable;

  #
  # Remember the source code:
  #

  push_source "$name = $value;";

  #
  # Handle var-const (for manifest constants) assignments:
  #
  # int_var = 1;
  # num_var = 2.0;
  # str_var = "foo";
  #

  if ($ident->type eq $type or (($ident->type eq 'N' or $ident->type eq 'I') and ($type eq 'N' or $type = 'I'))) {
    emit_code("$name =", [ $value ]);
    return;
  }

  #
  # Catch incompatible assigns:
  #

  SYNTAX_ERROR("Assignment of '%s' variable from '%s' value not allowed.", $ident->type, $type)
    if $type ne '*';

  #
  # If what remains is not an identifier we've seen, we've got trouble:
  #

  my $value_ident = $block->find_identifier($value);

  SYNTAX_ERROR("Assignment from undeclared identifier '%s'.", $value)
    unless defined $value_ident;

  INTERNAL_ERROR("Undefined name for identifier (%s)!", join(", ", %$value_ident))
    unless defined $value_ident->name;

  #
  # Emit code if the types are the same:
  #

  if ($ident->type eq $value_ident->type) {
    emit_code("$name =", [ $value_ident->name ]);
    return;
  }

  #
  # Handle conversion cases:
  #

  if ($ident->type eq "N" and $value_ident->type eq "I") {
    emit_code("$name =", [ $value_ident->name ]);
  } elsif ($ident->type eq "I" and $value_ident->type eq "N") {
    emit_code("$name =", [ $value_ident->name ]);
  } else {
    SYNTAX_ERROR("Cannot assign type '%s' to type '%s'.", $value_ident->type, $ident->type);
  }

  return;
}


#
# new_obj()
#

sub new_obj
{
  my ($ident, $class) = @_;

  #
  # Lookup the identifier:
  #
  # NOTE: This lookup doesn't give the info itself, but rather a hashref with
  # the LEVELS away the definition was found, and IDENT with the actual info
  # about the identifier.
  #

  my $ident_info = find_ident($ident);

  #
  # Reject cases where LHS isn't a variable (either it is undeclared or a constant):
  #

  unless (defined $ident_info) {
    SYNTAX_ERROR("Assignment to undeclared variable '%s'.", $ident);
  }

  $ident_info = $ident_info->{IDENT};

  #
  # Now that we've confirmed we could find the identifier, we make sure it is
  # bound to a variable, not a constant.
  #

  if ($ident_info->{CLASS} eq 'const') {
    SYNTAX_ERROR("Cannot assign to constant '%s'.", $ident);
  }

  #
  # Now that we've confirmed its not a constant, we make sure it is an object
  # type
  #

  if ($ident_info->{TYPE} ne 'P') {
    SYNTAX_ERROR("Cannot store new object in non-object variable '%s'.", $ident);
  }

  #
  # Remember the source code:
  #

  push_source "$ident = new $class";

  #
  # Emit the new code:
  #

  emit_code('new', [$ident_info->{VALUE}, $class]);

  return;
}


###############################################################################
###############################################################################
##
## Argument Handling
##
###############################################################################
###############################################################################


#
# map_args()
#

sub map_args
{
  my (@args) = @_;
  my @result;

  foreach my $arg (@args) {
    INTERNAL_ERROR("map_args(): Undefined argument in array!") unless defined $arg;

    $arg =~ s/^\s+//;
    $arg =~ s/\s+$//;

    if (lit_q($arg)) {
      push @result, $arg;
    }
    elsif (reg_q($arg)) {
      push @result, substr($arg, 1, );
    }
    else {
      my $arg_ident_info = find_ident($arg);

      if (defined $arg_ident_info) {
        $arg_ident_info = $arg_ident_info->{IDENT};

        INTERNAL_ERROR("Unable to fetch value for identifier '$arg'!")
          unless defined $arg_ident_info->{VALUE};

        push @result, $arg_ident_info->{VALUE};
      } else {
        INTERNAL_ERROR("Unrecognized argument '%s'.", $arg);
      }
    }
  }

  return @result;
}


###############################################################################
###############################################################################
##
## Function Calls
##
###############################################################################
###############################################################################


#
# void_func()
#

sub void_func
{
  my ($name, @args) = @_;

  push_source "$name(...);";

  @args = map { str_lit_q($_) ? interpolate_string($_) : $_ } @args;

  if ($name eq 'print') {
    foreach my $arg (@args) {
      emit_code('print', [$arg]);
    }
  } elsif ($name eq 'sleep') {
    emit_code('sleep', [ shift @args ]); # TODO: Really need to complain if > 1 arg.
  } elsif (exists $subs{$name}) {
    #
    # First, we make sure everything is in order for the call:
    #

    WARNING("Call to non-void function %s in void context.", $name)
      if defined $subs{$name}{RETURN};

    #
    # Now, we have to push (save) the arguments onto the stack in reverse
    # order. That way they can be pulled off by the subroutine in declaration
    # order, which will be convenient later for handling variable argument
    # subroutines.
    #

    foreach my $arg (reverse @args) {
      emit_code('.arg', [ $arg ]);
    }

    emit_code "call", [ "_$name" ];

  } else {
    SYNTAX_ERROR("Call to unrecognized void function '%s' (Not in {%s}).",
      $name, join(", ", sort keys %subs));
  }
}


#
# assign_func()
#

sub assign_func
{
  my ($dest, $name, @args) = @_;

  push_source "$dest = $name(" . join(", ", @args) . ");";

#  ($dest, @args) = map_args($dest, @args);

  if ($assign_funcs{$name}) {
    emit_code($name, [$dest, @args]);
  } elsif (exists $subs{$name}) {
    #
    # First, we make sure everything is in order for the call:
    #

    WARNING("Call to void function %s in non-void context.", $name)
      unless defined $subs{$name}{RETURN};

    my $dest_type   = type_of($dest);
    my $return_type = uc $subs{$name}{RETURN};

    WARNING("Type mismatch in destination type (%s) and call to %s (returns %s).", $dest_type, $name, $return_type)
      if $dest_type ne $return_type;

    #
    # Now, we have to push (save) the arguments onto the stack in reverse
    # order. That way they can be pulled off by the subroutine in declaration
    # order, which will be convenient later for handling variable argument
    # subroutines.
    #
    # Arguments that are already in registers are easy. Constant arguments
    # have to be placed in the appropriate zero (temporary) register and then
    # saved.
    #

    foreach my $arg (reverse @args) {
      emit_code('.arg', [ $arg ]);
    }

    #
    # Now, we can jump to the subroutine's entry point:
    #

    emit_code('call', [ "_$name" ]);

    #
    # Our calling convention dictates that upon return from the subroutine,
    # the result will be on the top of the stack.
    #

    emit_code('.result', [ $dest ]);
  } else {
    SYNTAX_ERROR("Call to unrecognized assign function '%s' (Not in {%s}).",
      $name, join(", ", sort keys %assign_funcs));
  }
}


###############################################################################
###############################################################################
##
## Block Handling
##
###############################################################################
###############################################################################


#
# begin_cond_block()
#

sub begin_cond_block
{
  my ($block, $prefix, $type, $left, $op, $right) = @_;

#  my $next   = $block_types{$type}{NEXT};
#  my $redo   = $block_types{$type}{REDO};
#  my $last   = $block_types{$type}{LAST};

  push_source "$prefix: $type ($left $op $right) {";

  push_label "${prefix}_" . uc $type;

  if ($type eq 'while') {
    push_label "${prefix}_NEXT";
  } elsif ($type eq 'if') {
    push_label "${prefix}_TEST";
  } else {
    INTERNAL_ERROR("Unrecognized conditional block type '$type'");
  }

  if ($type eq 'while') {
    op_comp($type, $op, $left, $right, undef, "${prefix}_LAST");
  } elsif ($type eq 'if') {
    op_comp($type, $op, $left, $right, undef, "${prefix}_ELSE");
  }

  push_label "${prefix}_REDO";
}


#
# begin_sub_block()
#

sub begin_sub_block
{
  my ($block, $name, $return_type, @formal_args) = @_;

  #
  # Flush any pending comments or labels.
  #

  emit_code();

  #
  # Generate the source code comment for the assembly listing.
  #

  my $arg_source = join(', ', map({ join(' ', @$_) } @formal_args));

  if (defined $return_type) {
    push_source "sub $type_name{$return_type} $name ($arg_source) {";
  } else {
    push_source "sub $name ($arg_source) {";
  }

  #
  # Emit code to jump over the subroutine.
  #
  # NOTE: We do this because we don't have a calling convention for starting
  # the program anywhere other than the first byte code op. Therefore, since
  # subroutines have to be defined before being called, the main program
  # will be at the end of the file, and we need to jump over the subroutines
  # to get there.
  #
  # This also implies that we can actually have code interspersed with
  # subroutine definitions just like Perl.
  #

  push_label "${name}_BEFORE";
  emit_code 'branch', [ "${name}_AFTER" ];

  #
  # Here we have the actual subroutine entry point:
  #

  push_label "_$name";
  push_label "${name}_ENTER";
  emit_code();

  #
  # Record the subroutine information.
  #
  # We track the line number of definition, the return type, and the info
  # about the formal arguments.
  #

  $subs{$name} = {
    LINE   => $line,
    RETURN => $return_type,
    ARGS   => \@formal_args
  };

  $block->{RETURN}    = $return_type;

  #
  # Declare the formal arguments as variables:
  #
  # We need to have registers assigned to the formal arguments just like we do
  # for any other variable, and they need to go out of scope at the end of the
  # subroutine, so we put them through the standard variable declaration
  # procedure.
  #
  # TODO: When we make declared variables auto-initialize to zero, this will
  # be inefficient, since we are going to grab the value from the stack as
  # our next step. So eventually, we'll want an internal way to declare the
  # variable uninitialized without having it auto initialize to zero.
  #

  foreach my $formal_arg (@formal_args) {
    my ($arg_type, $arg_name) = @$formal_arg;

    declare_var($arg_name, uc substr($arg_type, 0, 1), 'arg');
  }
}


#
# begin_block()
#
# return_type is used by subroutines.
#

my %block_types = (
  'while'    => { PREFIX => "_W", NEXT => 'CONT', REDO => 'REDO', LAST => 'LAST' },
  'if'       => { PREFIX => "_I", NEXT => 'TEST', REDO => 'THEN', LAST => 'ELSE' },
  'sub'      => { PREFIX => "_S", NEXT => 'TEST', REDO => 'THEN', LAST => 'ELSE' }, # TODO: fix these
);

my %block_names = ( );

sub begin_block
{
  my ($prefix, $kind, $cond, $type, @formal_args) = @_;
  
  my ($left, $op, $right) = @$cond if $cond;

  $block_count++;

  if (defined $prefix) {
    if ($block_names{$prefix} and $kind ne 'sub') {
      SYNTAX_ERROR("Loop named '%s' already defined at line %d (previously defined at line %d)!",
        $prefix, $line, $block_names{$prefix});
    }
  } else {
    INTERNAL_ERROR("Undefined prefix for $kind blocks")
      unless defined $block_types{$kind}{PREFIX};

    $prefix = $block_types{$kind}{PREFIX} . "$block_count";
  }

  $block_names{$prefix} = $line;

  my $parent = current_block();

  my $block = Jako::Parser::Block->new(
    $parent,
    $kind,
    $type,
    $prefix
  );

  push_block($block);

  emit_code(".namespace", [ $kind eq 'sub' ? "_$prefix" : $prefix ]);

  if ($kind eq 'if') {
    begin_cond_block($block, $prefix, $kind, $left, $op, $right);
  } elsif ($kind eq 'while') {
    begin_cond_block($block, $prefix, $kind, $left, $op, $right);
  } elsif ($kind eq 'sub') {
    begin_sub_block($block, $prefix, $type, @formal_args);
  } else {
    INTERNAL_ERROR("Unknown block kind '$kind' in begin_block()!");
  }
}


#
# end_block()
#
# TODO: else (and elsif?) blocks.
#

sub end_block
{
  my ($continue) = @_;

  #
  # If we are not currently 'inside' a block, then we've got no business
  # seeing a close-brace.
  #

  SYNTAX_ERROR("Closing brace without open block.")
    unless block_depth();

  #
  # Pop the block info off the block stack and cache its prefix for use
  # in what follows. At this point we are no longer 'inside' a block.
  # Although, we may re-enter the block in certain cases (see below).
  #

  my $block  = pop_block();
  my $prefix = $block->{PREFIX};

  #
  # 'while' blocks:
  #
  # When we are ending the 'while' block, we might be beginning the
  # 'continue' block, so we check for that case. The while block and
  # the continue block form one logical block, with the identifiers
  # delcared in the former available in the latter. This means that
  # semantically, the 'continue' block is really like a 'continue'
  # label, since control falls through the 'while' block into the
  # 'continue' block by default, and we get to the 'continue' block
  # via a 'next' statement in the 'while' block's body, which is
  # essentially a 'goto my_continue' statement.
  #
  # NOTE: This is different from some languages. Some languages
  # treat the continue block as a truly separate block, and the
  # identifiers declared in the 'while' portion are *not* available
  # in the 'continue' portion.
  #

  if ($block->kind eq 'while') {
    if (defined $continue) {
      if (defined $block->cont) {
        SYNTAX_ERROR("No more than one continue block allowed.");
      } else {
        $block->cont($line);
      }

      push_label "${prefix}_CONT";
      push_source "} continue {";

      push_block($block);        # Push it back on for a minute...
      undef $block;              # ... and forget about it.
    } else {
      push_source "}";
      push_label "${prefix}_CONT" unless defined $block->cont;
      emit_code('branch', ["${prefix}_NEXT"]);
      push_label "${prefix}_LAST";
    }
  }

  #
  # 'if' blocks:
  #
  # Continuation of 'if' blocks happens by $continue being 'else'. In that
  # case, we push the block back on the stack.
  #

  elsif ($block->kind eq 'if') {
    if (defined $continue) { # for 'else'
      if (defined $block->else) {
        SYNTAX_ERROR("No more than one else block allowed.");
      } else {
        $block->else($line);
      }

      emit_code("branch", [ "${prefix}_LAST" ]); # Jump over the 'else'.
      push_label "${prefix}_ELSE";
      push_source "} else {";

      #
      # We push the block back onto the block stack, since we are
      # ending up still in a block.
      #
      # NOTE: We are not doing 'undef $block' here because we want
      # the code below to undeclare the variables from the 'if' block.
      #
      # TODO: Should we really be allocating a whole new block? Its
      # nice to reuse this one (and we set ELSE in it to know we
      # can't have *another* else continuation).
      #

      push_block($block);
    } else {
      push_source "}";
      emit_code();
      push_label "${prefix}_ELSE" unless defined $block->{ELSE};
      push_label "${prefix}_LAST";
    }
  }

  #
  # Handle the ending of subroutine blocks:
  #

  elsif ($block->kind eq 'sub') {
    push_source "}";
    push_label "${prefix}_LEAVE";

    #
    # TODO: Complain if we haven't seen 'return' statement in a
    # subroutine that returns results (else we are going to be
    # very unhappy later...)
    #

    #
    # Now, actually return.
    #

    emit_code "ret", [ ];

    push_label "${prefix}_AFTER";
#    emit_code('noop'); # XXX: Needed by IMCC
  }

  #
  # If there is any other kind of block, we have an internal compiler error.
  #

  else {
    INTERNAL_ERROR("End of unknown kind of block " . $block->kind . "!");
  }

  #
  # If $block is still defined, then we didn't push it back on the block
  # stack and we are ending the scope.
  #

  if (defined $block) {
    emit_code(".endnamespace", [ $block->kind eq 'sub' ? "_$prefix" : $prefix ]);
 
    if ($continue) { # Reopen the namespace for 'else'
      emit_code(".namespace", [ $block->kind eq 'sub' ? "_$prefix" : $prefix ]);
    }
  }
}


###############################################################################
###############################################################################
##
## Flow Control Statements
##
###############################################################################
###############################################################################


#
# do_loop_control()
#

sub do_loop_control
{
  my ($control_op, $loop_label, $cond, $left, $test, $right) = @_;

  my $type = 'while';

  #
  # Locate the block we'll be applying the control statement to:
  #

  my $block = find_block($type, $loop_label);

  unless (defined $block) {
    if (defined $loop_label) {
      SYNTAX_ERROR("No loop '%s' in loop control.", $loop_label);
    } else {
      SYNTAX_ERROR("No loop active in loop control.");
    }

    emit_code('err');
  }

  $block = $block->{BLOCK};

  #
  # Generate the code:
  #

  my $prefix = $block->{PREFIX};
  my $which  = $block_types{$type}{uc $control_op};

  if (defined $cond) {
    push_source "$control_op ${prefix} $cond ($left $test $right)";
  } else {
    push_source "$control_op ${prefix}";
  }

  if (defined $block->{CONT} and $control_op eq 'next') {
    $which = $block_types{$type}{NEXT};      # Hard-coded to NEXT in continue { ... }
  }

  my $label = "${prefix}_$which";

  if (!defined $cond) {
    emit_code('branch', [ $label ]);
  } else {
    op_comp $cond, $test, $left, $right, $label, undef;
  }
}


#
# do_return()
#

sub do_return
{
  my ($arg) = @_;

  my $arg_type = defined $arg ? type_of($arg) : undef;

  if (defined $arg) {
    push_source "return $arg";
  } else {
    push_source "return";
  }

  #
  # Find the enclosing subroutine block:
  #

  my $block = find_block('sub');

  unless (defined $block) {
    SYNTAX_ERROR("Cannot use 'return' outside of subroutine.");
  }

  $block = $block->{BLOCK}; # find_block() returns a hash with LEVELS and BLOCK

  #
  # Generate code:
  #

  my $prefix = $block->prefix;
  my $return = $block->type;

  if (defined $return and not defined $arg_type) {
    SYNTAX_ERROR("'return' without argument in subroutine that returns a value.");
  }

  if (not defined $return and defined $arg_type) {
    SYNTAX_ERROR("'return' with argument in subroutine that does not return a value.");
  }

  #
  # Determine the type of the return value.
  #

  if (defined $arg_type and $arg_type eq '*') {
    $arg_type = type_of($arg);
  }

  #
  # Make sure what we are returning is of the appropriate type.
  #

  if (defined $return and defined $arg_type and uc $return ne uc $arg_type) {
    SYNTAX_ERROR("'return' with argument of incorrect type (got '%s', but expected '%s').",
      $arg_type, $return);
  }

  #
  # According to our calling conventions, the return value ends up on the
  # stack, below the return address so the caller can restore it off.
  #

  if (defined $return) {
     emit_code('.return', [ $arg ]);
  }

  #
  # The *_LEAVE label for the subroutine is where the assembly code to
  # actually complete the return portion of the calling convention lives.
  #

  emit_code('branch', ["${prefix}_LEAVE"]);
}


###############################################################################
###############################################################################
##
## Arithmetic Operations
##
###############################################################################
###############################################################################


#
# do_arith()
#

sub do_arith
{
  my ($dest, $a, $op, $b) = @_;

  push_source "$dest = $a $op $b;";

  #
  # Determine the type to use to calculate the result:
  #

  SYNTAX_ERROR("Cannot perform arithmetic on strings")
    if grep { $_ eq 'S' } map { type_of($_) } ($dest, $a, $b);

  my $calc_type = 'I';

  $calc_type = 'N' if grep { $_ eq 'N' } map { type_of($_) } ($dest, $a, $b);
  $calc_type = 'P' if grep { $_ eq 'P' } map { type_of($_) } ($dest, $a, $b);

  my $dest_type = type_of($dest);

  #
  # Convert the operands into the calculation type:
  #
  
  if (type_of($a) ne $calc_type) {
    my $temp = temp_reg($calc_type);
    emit_code('set', [$temp, $a]);
    $a = $temp;
  }
  
  if (type_of($b) ne $calc_type) {
    my $temp = temp_reg($calc_type);
    emit_code('set', [$temp, $b]);
    $b = $temp;
  }

  #
  # Perform the calculation:
  #

  if ($dest_type eq $calc_type) {
    emit_code("$dest =", [ "$a $op $b" ]);
  }
  else {
    my $temp = temp_reg($calc_type);
    emit_code("$temp =", [ "$a $op $b" ]);
    emit_code("$dest =", [ "$temp" ]);
  }
}


#
# do_add()
#

sub do_add
{
  my ($dest, $a, $b) = @_;
  do_arith($dest, $a, '+', $b);
}


#
# do_inc()
#

sub do_inc
{
  my ($dest, $amount) = @_;

  $amount = 1 unless defined $amount;

  if (defined $amount) {
    if (int_q($amount)) {
      push_source "$dest += $amount;";
#      ($dest, $amount) = map_args($dest, $amount);
      emit_code('add', [$dest, $amount]);
    } else {
      do_add($dest, $dest, $amount);
    }
  } else {
    push_source "$dest++;";
#    ($dest, $amount) = map_args($dest);
    emit_code('inc', [$dest]);
  }
}


#
# do_sub()
#

sub do_sub
{
  my ($dest, $a, $b) = @_;

  push_source "$dest = $a - $b;";

  ($dest, $a, $b) = map_args($dest, $a, $b);

  if (int_or_num_lit_q($a)) {
    if (int_or_num_lit_q($b)) {
      my $temp = $a - $b;
      $temp .= ".0" if (num_q($a) or num_q($b)) and not $temp =~ m/\./;
      emit_code('set', [$dest, $temp]);
    } elsif (reg_q($b) or var_q($b)) {
      if ($dest eq $b && int_q($a)) {
        emit_code('sub', [$dest, $a]);
      } else {
        my $temp = int_q($a) ? temp_int() : temp_num();
        emit_code('set', [$temp, $a]);
        emit_code('sub', [$dest, $temp, $b]);
      }
    } else {
      SYNTAX_ERROR("Can't determine type of '$b' in subtraction.");
    }
  } elsif (reg_q($a) or var_q($a)) {
    if (int_or_num_lit_q($b)) {
      if ($dest eq $a && int_q($b)) {
        emit_code('sub', [$dest, $b]);
      } else {
        my $temp = int_q($b) ? temp_int() : temp_num();
        emit_code('set', [$temp, $b]);
        emit_code('sub', [$dest, $a, $temp]);
      }
    } elsif (reg_q($b) or var_q($b)) {
      emit_code('sub', [$dest, $a, $b]);
    } else {
      SYNTAX_ERROR("Can't determine type of '$b' in subtraction.");
    }
  } else {
    SYNTAX_ERROR("Can't determine type of '$a' in subtraction.");
  }
}


#
# do_dec()
#

sub do_dec
{
  my ($dest, $amount) = @_;

  if (defined $amount) {
    if (int_q($amount)) {
      push_source "$dest -= $amount;";
#      ($dest, $amount) = map_args($dest, $amount);
      emit_code('sub', [$dest, $amount]);
    } else {
      do_sub($dest, $dest, $amount);
    }
  } else {
    push_source "$dest--;";
#    ($dest, $amount) = map_args($dest);
    emit_code('dec', [$dest]);
  }
}


#
# do_mul()
#

sub do_mul
{
  my ($dest, $a, $b) = @_;

  push_source "$dest = $a * $b;";

  ($dest, $a, $b) = map_args($dest, $a, $b);

  if (int_or_num_lit_q($a)) {
    if (int_or_num_lit_q($b)) {
      my $temp = $a * $b;
      $temp .= ".0" if (num_q($a) or num_q($b)) and not $temp =~ m/\./;
      emit_code('set', [$dest, $temp]);
    } elsif (reg_q($b) or var_q($b)) {
      my $temp = int_q($a) ? temp_int() : temp_num();
      emit_code('set', [$temp, $a]);
      emit_code('mul', [$dest, $temp, $b]);
    } else {
      SYNTAX_ERROR("Can't determine type of '$b' in multiplication.");
    }
  } elsif (reg_q($a) or var_q($a)) {
    if (int_or_num_lit_q($b)) {
      my $temp = int_q($b) ? temp_int() : temp_num();
      emit_code('set', [$temp, $b]);
      emit_code('mul', [$dest, $a, $temp]);
    } elsif (reg_q($b) or var_q($b)) {
      emit_code('mul', [$dest, $a, $b]);
    } else {
      SYNTAX_ERROR("Can't determine type of '$b' in multiplication.");
    }
  } else {
    SYNTAX_ERROR("Can't determine type of '$a' in multiplication.");
  }
}


#
# do_div()
#

sub do_div
{
  my ($dest, $a, $b) = @_;

  push_source "$dest = $a / $b;";

  ($dest, $a, $b) = map_args($dest, $a, $b);

  my $dest_type = type_of($dest);
  my $a_type    = type_of($a);
  my $b_type    = type_of($b);

  if ($dest_type ne $a_type) {
    my $temp = temp_reg($dest_type);
    emit_code('set', [$temp, $a]);
    $a = $temp;
    $a_type = $dest_type;
  }

  if ($dest_type ne $b_type) {
    my $temp = int_q($dest) ? temp_int() : temp_num();
    emit_code('set', [$temp, $b]);
    $b = $temp;
    $b_type = $dest_type;
  }

  #
  # TODO: Should we really do the calculation in N if a or b is N,
  # then convert that to I if dest is I?
  #

  if (int_or_num_lit_q($a)) {
    if (int_or_num_lit_q($b)) {
      my $temp = $a / $b;
      $temp .= ".0" if (num_q($dest) and not $temp =~ m/\./);
      emit_code('set', [$dest, $temp]);
    } elsif (reg_q($b) or var_q($b)) {
      emit_code('div', [$dest, $a, $b]);
    } else {
      SYNTAX_ERROR("Can't determine type of '$b' in division.");
    }
  } elsif (reg_q($a) or var_q($a)) {
    if (int_or_num_lit_q($b)) {
      emit_code('div', [$dest, $a, $b]);
    } elsif (reg_q($b) or var_q($b)) {
      emit_code('div', [$dest, $a, $b]);
    } else {
      SYNTAX_ERROR("Can't determine type of '$b' in division.");
    }
  } else {
    SYNTAX_ERROR("Can't determine type of '$a' in division.");
  }
}


#
# do_mod()
#
# a =  b % c
# a =  b % 4
# a = 17 % c
# a = 17 % 4
#

sub do_mod
{
  my ($dest, $a, $b) = @_;

  push_source "$dest = $a % $b;";

  ($dest, $a, $b) = map_args($dest, $a, $b);

  if (int_lit_q($a)) {
    if (int_lit_q($b)) {
      emit_code('set', [$dest, $a % $b]);
    } elsif (reg_q($b) or var_q($b)) {
      my $temp = temp_int();
      emit_code('set', [$temp, $a]);
      emit_code('mod', [$dest, $temp, $b]);
    } else {
      SYNTAX_ERROR("Can't determine type of '$b' in modulo.");
    }
  } elsif (reg_q($a) or var_q($a)) {
    if (int_lit_q($b)) {
      my $temp = temp_int();
      emit_code('set', [$temp, $b]);
      emit_code('mod', [$dest, $a, $temp]);
    } elsif (reg_q($b) or var_q($b)) {
      emit_code('mod', [$dest, $a, $b]);
    } else {
      SYNTAX_ERROR("Can't determine type of '$b' in modulo.");
    }
  } else {
    SYNTAX_ERROR("Can't determine type of '$a' in modulo.");
  }
}


#
# do_bit_and()
#

sub do_bit_and
{
  my ($dest, $a, $b) = @_;
  emit_code("band", [$dest, $a, $b]);
}


#
# do_bit_or()
#

sub do_bit_or
{
  my ($dest, $a, $b) = @_;
  emit_code("bor", [$dest, $a, $b]);
}


#
# do_shift()
#

sub do_shift
{
  my $dir = shift;
  my ($dest, $a, $amount) = @_;
  emit_code("sh$dir", [$dest, $a, $amount]);
}


###############################################################################
###############################################################################
##
## Argument Handling
##
###############################################################################
###############################################################################


#
# interpolate_string()
#
# Converts a single string argument:
#
#     "Foo $a ${b}ar\n"
#
# to multiple arguments:
#
#     "Foo ", a, " ", b, "ar ", b, "\n"
#
# to effect string interpolation.
#

sub interpolate_string
{
  my ($string) = @_;

  return $string unless $string =~ m/(^"|^".*?[^\\])\$/; # Double-quote with an unescaped '$'.

  $string = substr($string, 1, -1); # Without the surrounding double quotes.

  my $temp = temp_str();          # Allocate and clear a temporary string register
  emit_code("set", [ $temp, '""' ]);

  while (1) {
    last unless defined $string and
      $string =~ m/(^|^.*?[^\\])\$((([A-Za-z][A-Za-z0-9_]*)\b)|({[A-Za-z][A-Za-z0-9_]*}))(.*)$/;

    emit_code("concat", [ $temp, '"' . $1 . '"' ])
      if defined $1 and $1 ne '';

    my $interp = $2;
    $interp =~ s/^{(.*)}$/$1/; # Strip '{' and '}'.

    if (type_of($interp) ne 'S') {
      my $temp2 = temp_str();
      emit_code("set", [ $temp2, $interp ]);
      $interp = $temp2;
    }

    emit_code("concat", [ $temp, $interp ]);

    $string = $6;
  }

  emit_code("concat", [ $temp, '"' . $string . '"' ])
    if defined $string and $string ne '';

  return $temp;
}


#
# parse_args()
#

sub parse_args
{
  my ($args) = @_;
  my @args;

  while ($args ne '') {
    $args =~ s/^\s+//;

    if ($args =~ m/^(\"[^\\\"]*(?:\\.[^\\\"]*)*\")\s*(,\s*(.*))?$/) {
      $args = $3 || '';
      push @args, interpolate_string($1);
    } elsif ($args =~ m/^([^,]+)\s*(,\s*(.*))?$/) {
      push @args, $1;
      $args = $3 || '';
    } else {
      SYNTAX_ERROR("Cannot parse argument list '$args'");
    }
  }

  return @args;
}


###############################################################################
###############################################################################
##
## MAIN PROGRAM
##
###############################################################################
###############################################################################


#
# Tokenize the input, and possibly dump the tokens.
#

my $lexer = Jako::Lexer->new;

$lexer->scan_file($file);

if ($opts{t}) {
  $lexer->dump;

  exit 0;
}


#
# Compile.
#

emit_code('.sub', [ "__MODULE__" ]);

my $last_token = $lexer->at(-1);
my $token      = $lexer->at(-1);

while(1) {
  $token      = $lexer->forth;
  $last_token = $lexer->get(-1);

  last if $token->is_eof;

  #
  # Labels:
  #
  #   <label>:
  #

  if ($token->is_label) {
    push_label($token->text);
    next;
  }

  #
  # Variable declarations:
  #
  #   var <type> <ident>;
  #   var <type> <ident> = <value>;
  #   var <type> <ident>, <ident>, ...;
  #   var <type> <ident>, <ident>, ... = <value>;
  #
  #   const <type> <ident> = <value>;               # TODO: SHOULD BE LIMITED TO LITERAL?
  #   const <type> <ident>, <ident>, ... = <value>; # TODO: SHOULD BE LIMITED TO LITERAL?
  #

  if ($token->is_var or $token->is_const) {
    my $access = $token->text; # 'const' or 'var'.

    my $type_token = $lexer->require_type;
    my $type       = $type_token->text;
    my $type_code  = $type_code{$type};

    INTERNAL_ERROR("Text of type token is undefined") unless defined $type;

    SYNTAX_ERROR("Cannot declare constants of type '%s'.", $type)
      if ($access eq 'const' and $type eq 'obj');

    my @identifiers = ();

    while (1) {
      my $ident_token = $lexer->require_ident;
      push @identifiers, $ident_token->text;
      last unless $lexer->skip_comma;
    }

    my $value;

    if ($lexer->skip_assign) {
      my $literal_token = $lexer->require_literal;

      $value = $literal_token->text;

      $value = interpolate_string($value)
        if type_of($value) eq 'S';
    }

    $lexer->require_semicolon;

    SYNTAX_ERROR("Cannot declare constant without assigning a value.")
      if ($access eq 'const' and not defined $value);

    foreach my $ident (@identifiers) {
      if ($access eq 'var') {
        declare_var($ident, $type_code, $access);
        assign_var($ident, $type_code, $value) if defined $value;
      }
      elsif ($access eq 'const') {
        declare_const($ident, $type_code, $value);
      }
      else {
        INTERNAL_ERROR("Unexpected data declaration access '$access'.");
      }
    }

    next;
  }

  #
  # Bare Blocks:
  #
  #   <label>: {
  #   {
  #
 
  if ($token->is_open_brace) {
    my $label = $last_token->text
      if $last_token->is_label;
    
    begin_block($label, 'bare', undef);

    next;
  }

  #
  # Subroutines:
  #
  #   sub        <ident> (<arg>, <arg>, ...) {
  #   sub <type> <ident> (<arg>, <arg>, ...) {
  #

  if ($token->is_sub) {
    my $type_token = $lexer->skip_type;

    my $type;
    $type = $type_token->type if $type_token;

    my $ident_token = $lexer->require_ident;
    my $name = $ident_token->text;

    $lexer->require_open_paren;

    my @formal_args;

    unless ($lexer->skip_close_paren) {
      while (1) {
        my $arg_type_token = $lexer->require_type;
        my $arg_type = $arg_type_token->type;

        my $arg_name_token = $lexer->require_ident;
        my $arg_name = $arg_name_token->text;

        push @formal_args, [ $arg_type, $arg_name ];

        last if $lexer->skip_close_paren;

        $lexer->require_comma;
      }
    }

    $lexer->require_open_brace;

    begin_block($name, 'sub', undef, $type, @formal_args);
    next;
  }

  #
  # Loops:
  #
  #   <label>: until (<value> <op> <value>) {
  #            until (<value> <op> <value>) {
  #
  #   <label>: while (<value> <op> <value>) {
  #            while (<value> <op> <value>) {
  #
 
  if ($token->is_until or $token->is_while) {
    my $kind = $token->text;

    my $prefix;

    if ($last_token->is_label) {
      $prefix = $last_token->text;
    }

    $lexer->require_open_paren;

    my $left  = $lexer->require_value->text;
    my $op    = $lexer->require_infix_rel->text;
    my $right = $lexer->require_value->text;

    $lexer->require_close_paren;
    $lexer->require_open_brace;

    begin_block($prefix, $kind, [$left, $op, $right]);
    next;
  }

  #
  # Increment and Decrement:
  #
  #   <var> <op>;
  #

  if ($token->is_ident and $lexer->get(1)->is_exfix_arith) {
    my $ident = $token->text;
    my $op    = $lexer->forth->text;

    $lexer->require_semicolon;

    if ($op eq '++') {
      do_inc($ident);
    }
    else {
      do_dec($ident);
    }

    next;
  }

  #
  # Arithmetic assigns:
  #
  #   <var> <op> <value>;
  #

  if ($token->is_ident and $lexer->get(1)->is_arith_assign) {
    my $ident = $token->text;
    my $op    = substr($lexer->forth->text, 0, 1);
    my $value = $lexer->forth->text;

    $lexer->require_semicolon;

    do_arith($ident, $ident, $op, $value);
    next;
  }

  #
  # Bitwise assigns:
  #
  #   <var> <op> <value>;
  #

  if ($token->is_ident and $lexer->get(1)->is_bit_assign) {
    my $ident = $token->text;
    my $op    = $lexer->forth->text;
    my $value = $lexer->forth->text;

    $lexer->require_semicolon;

    if ($op eq '<<=' or $op eq '>>=') {
      push_source "$ident $op $value";
      do_bit_shift($op eq '<<=' ? 'l' : 'r', $ident, $ident, $value);
    }
    elsif ($op eq '|=') {
      push_source "$ident |= $value";
      do_bit_or($ident, $ident, $value);
    }
    elsif ($op eq '&=') {
      push_source "$ident |= $value";
      do_bit_and($ident, $ident, $value);
    }
    else {
      INTERNAL_ERROR("Unrecognized bitwise op '$op'");
    }

    next;
  }

  #
  # Block Termination:
  #
  #   }
  #   } continue {
  #   } else {
  #
 
  if ($token->is_close_brace) {
    my $cont;
    
    if ($lexer->get(1)->is_continue or $lexer->get(1)->is_else) {
      $cont = $lexer->forth->text;
      $lexer->require_open_brace;
    }

    end_block($cont);

    next;
  }

  #
  # Arithmetic Operators:
  #
  #   <var> = <value> <op> <value>;
  #
  # TODO: Can't really support shift amount as arg until sh[lr]_i_i ops are implemented.
  # TODO: Should we really be allowing the shift constant to be negative?
  #

  if ($token->is_ident
    and $lexer->get(1)->is_assign
    and $lexer->get(2)->is_value
    and $lexer->get(3)->is_infix_arith
    and $lexer->get(4)->is_value
  ) {
    my $ident = $token->text;

    $lexer->require_assign;

    my $left  = $lexer->forth->text;
    my $op    = $lexer->forth->text;
    my $right = $lexer->forth->text;

    $lexer->require_semicolon;

    do_arith($ident, $left, $op, $right);
    next;
  }

  #
  # Bitwise Operators:
  #
  #   a = b << 4;
  #   a = b & c;
  #   a = b | c;
  #

  if ($token->is_ident
    and $lexer->get(1)->is_assign
    and $lexer->get(2)->is_value
    and $lexer->get(3)->is_infix_bit
    and $lexer->get(4)->is_value
  ) {
    my $ident = $token->text;

    $lexer->require_assign;

    my $left  = $lexer->forth->text;
    my $op    = $lexer->forth->text;
    my $right = $lexer->forth->text;

    $lexer->require_semicolon;

    if ($op eq '<<' or $op eq '>>') {
      do_shift($op eq '<<' ? 'l' : 'r', $ident, $left, $right);
    }
    elsif ($op eq '&') {
      push_source "$ident = $left \& $right";
      do_bit_and($ident, $left, $right);
    }
    elsif ($op eq '|') {
      push_source "$ident = $left | $right";
      do_bit_or($ident, $left, $right);
    }
    else {
      INTERNAL_ERROR("Unrecognized bitwise op '$op'");
    }

    next;
  }

  #
  # Subroutine Calls:
  #
  #     <ident>(<arg>, <arg>, ...);
  #
 
  if ($token->is_ident and $lexer->get(1)->is_open_paren) {
    my $sub_name = $token->text;

    $lexer->require_open_paren;

    my @args = ();

    unless ($lexer->get(1)->is_close_paren) {
      while (1) {
        push @args, $lexer->require_value->text;
        last if $lexer->get(1)->is_close_paren;
        $lexer->require_comma;
      }
    }

    $lexer->require_close_paren;
    $lexer->require_semicolon;

    void_func($sub_name, @args);
    
    next;
  }

  #
  # Function Calls:
  #
  # a = foo(...);
  #

  if ($token->is_ident
    and $lexer->get(1)->is_assign
    and $lexer->get(2)->is_ident
    and $lexer->get(3)->is_open_paren
  ) {
    my $left = $token->text;

    $lexer->require_assign;

    my $func_name = $lexer->require_ident->text;

    $lexer->require_open_paren;

    my @args = ();

    unless ($lexer->get(1)->is_close_paren) {
      while (1) {
        push @args, $lexer->require_value->text;
        last if $lexer->get(1)->is_close_paren;
        $lexer->require_comma;
      }
    }

    $lexer->require_close_paren;
    $lexer->require_semicolon;
     
    assign_func($left, $func_name, @args);
    next;
  }

  #
  # Variable Assignments:
  #
  #   <ident> = <value>;
  #   <ident> = <ident> = ... = <value>;
  #
 
  if ($token->is_ident and $lexer->get(1)->is_assign) {
    my @left = ($token->text);

    $lexer->require_assign;

    while ($lexer->get()->is_ident and $lexer->get(1)->is_assign) {
      push @left, $lexer->get()->text;
      $lexer->require_assign;
    }

    my $right = $lexer->require_value->text;

    $lexer->require_semicolon;

    foreach my $left (@left) {
      assign_var($left, type_of($right), $right);
    }
    next;
  }

  #
  # Subroutine Return Statements:
  #
  #   return;
  #   return <value>;
  #

  if ($token->is_return) {
    my $value_token = $lexer->skip_value;
    my $value = $value_token->text if defined $value_token;

    $lexer->require_semicolon;

    do_return($value);
    next;
  }

  #
  # Goto Statements:
  #
  #   goto <label>;
  #   goto <label> if (<value> <op> <value>);
  #   goto <label> unless (<value> <op> <value>);
  #

  if ($token->is_goto) {
    my $target = $lexer->require_ident->text;

    my ($cond, $left, $op, $right);

    if ($lexer->get(1)->is_if or $lexer->get(1)->is_unless) {
      $cond = $lexer->forth->text;

      $lexer->require_open_paren;
      $left  = $lexer->require_value->text;
      $op    = $lexer->require_infix_rel->text;
      $right = $lexer->require_value->text;
      $lexer->require_close_paren;
    }

    $lexer->require_semicolon;

    if ($cond) {
      push_source "goto $target $cond ($left $op $right);";
      op_comp $cond, $op, $left, $right, $target, undef;
    }
    else {
      push_source "goto $target;";
      emit_code('branch', [ $target ]);
    }
    
    next;
  }

  #
  # Loop Control Statements:
  #
  #   next;
  #   next if     (<value> <op> <value>);
  #   next unless (<value> <op> <value>);
  #
  #   next <label>;
  #   next <label> if     (<value> <op> <value>);
  #   next <label> unless (<value> <op> <value>);
  #
  #   last;
  #   last if     (<value> <op> <value>);
  #   last unless (<value> <op> <value>);
  #
  #   last <label>;
  #   last <label> if     (<value> <op> <value>);
  #   last <label> unless (<value> <op> <value>);
  #
  #   redo;
  #   redo if     (<value> <op> <value>);
  #   redo unless (<value> <op> <value>);
  #
  #   redo <label>;
  #   redo <label> if     (<value> <op> <value>);
  #   redo <label> unless (<value> <op> <value>);
  #

  if ($token->is_loop_control) {
    my $control = $token->text;

    my $target_token = $lexer->skip_ident;

    my $target;
    $target = $target_token->text if $target_token;

    my ($cond, $left, $op, $right);

    if ($lexer->get(1)->is_if or $lexer->get(1)->is_unless) {
      $cond = $lexer->forth->text;

      $lexer->require_open_paren;
      $left  = $lexer->require_value->text;
      $op    = $lexer->require_infix_rel->text;
      $right = $lexer->require_value->text;
      $lexer->require_close_paren;
    }

    $lexer->require_semicolon;

    do_loop_control($control, $target, $cond, $left, $op, $right);
    next;
  }

  #
  # Conditionals Blocks:
  #
  #   if     (<value> <op> <value>) {
  #   unless (<value> <op> <value>) {
  #

  if ($token->is_if or $token->is_unless) {
    my $kind = $token->text;

    $lexer->require_open_paren;

    my $left  = $lexer->require_value->text;
    my $op    = $lexer->require_infix_rel->text;
    my $right = $lexer->require_value->text;

    $lexer->require_close_paren;
    $lexer->require_open_brace;

    begin_block(undef, $kind, [$left, $op, $right]);
    next;
  }

  #
  # Conditional Continuations:
  #
  #   } elsif (<value> <op> <value>) {
  #

=no

  if (m/^}\s*(elsif)\s*\(\s*(.*)\s*\)\s*{$/) {
    begin_block(undef, $1, $2);
    # TODO
    next;
  }

=cut




  #
  # TODO: Implement other stuff and put it before this.
  #

  SYNTAX_ERROR("Don't know what to do with token '%s'.", $token->text);




  #
  # Object Construction:
  #
  # a = new Foo;
  #

  if (m/^([A-Za-z][A-Za-z0-9_]*)\s*=\s*new\s+([A-Za-z][A-Za-z0-9_]*)$/) {
    new_obj($1, $2);
    next;
  }

  #
  # Miscellany:
  #

  if (m/^end$/) {
    emit_code('end');
    next;
  }

  PARSE_ERROR("Unparsable line.");
}

emit_code('end') unless $last_op eq 'end';

emit_code(".end");

exit 0;

#
# End of file.
#
