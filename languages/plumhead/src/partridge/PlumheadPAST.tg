# $Id$

grammar Plumhead::PAST::Grammar is TGE::Grammar;

# Generate PAST-pm from Plumhead parse tree

transform past (ROOT) :language('PIR') {

    node = node['program']
    .local pmc past
    past = new 'PAST::Block'
    past.'init'( 'node' => node, 'name'=>'plumhead' )
    
    .local pmc cpast
    cpast = tree.'get'('past', node, 'Plumhead::Grammar::program')
    past.'push'(cpast)

    .return (past)
}

transform past (Plumhead::Grammar::program) :language('PIR') {

    .local pmc past
    past = new 'PAST::Stmts'
    past.'init'('node'=>node)

    $P0 = node['sea']
    .local pmc past_sea
    past_sea = tree.'get'('past', $P0, 'Plumhead::Grammar::sea')
    past.'push'(past_sea)
handled_sea:

    $P0 = node['code']
    if null $P0 goto handled_code
    .local pmc iter
    iter = new .Iterator, $P0
  iter_loop:
    unless iter goto iter_end
    .local pmc cnode, cnode2, cpast
    cnode = shift iter
    cpast = tree.'get'('past', cnode, 'Plumhead::Grammar::code')
    if null cpast goto iter_loop
    past.'push'(cpast)
    goto iter_loop
  iter_end:
handled_code:

    .return (past)
}

transform past (Plumhead::Grammar::sea) :language('PIR') {

    .local pmc past_val
    past_val = new 'PAST::Val'                             
    .local string val
    val = node
    .local pmc code_string
    code_string = new 'PGE::CodeString'
    ( val ) = code_string.'escape'( val )
    past_val.'init'( 'name' => val, 'vtype' => '.Undef' )                              

    .local pmc past                                                  
    past = new 'PAST::Op'
    past.'init'( past_val, 'node'=> node, 'pirop' => 'print' )  

    .return (past)
}

transform past (Plumhead::Grammar::code) :language('PIR') {

    .local pmc past
    past = new 'PAST::Stmts'
    past.'init'('node'=>node)

    $P0 = node['statement']
    if null $P0 goto handled_statement
    .local pmc iter
    iter = new .Iterator, $P0
  iter_loop:
    unless iter goto iter_end
    .local pmc cnode, cnode2, cpast
    cnode = shift iter
    if null cnode goto iter_loop
    $P1 = cnode['string']
    if null $P1 goto iter_loop
    cpast = tree.'get'('past', $P1, 'Plumhead::Grammar::string')
    if null cpast goto iter_loop
    past.'push'(cpast)
    goto iter_loop
  iter_end:

    handled_statement:

    .return (past)
}


transform past (Plumhead::Grammar::string) :language('PIR') {

    .local pmc past_val
    past_val = new 'PAST::Val'                             
    .local string val
    val = node
    .local pmc code_string
    past_val.'init'( 'name' => val, 'vtype' => '.Undef' )                              

    .local pmc past                                                  
    past = new 'PAST::Op'
    past.'init'( past_val, 'node'=> node, 'pirop' => 'print' )  

    .return (past)
}

