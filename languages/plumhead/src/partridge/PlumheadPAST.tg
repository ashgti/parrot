# Copyright (C) 2006-2007, The Perl Foundation.
# $Id$

grammar Plumhead::PAST::Grammar is TGE::Grammar;

# Generate PAST-pm from Plumhead parse tree

transform past (ROOT) :language('PIR') {

    node = node['program']
    .local pmc past
    past = new 'PAST::Block'
    past.'init'( 'node' => node, 'name'=>'plumhead' )
    
    .local pmc past_program
    past_program = tree.'get'('past', node, 'Plumhead::Grammar::program')
    past.'push'(past_program)

    .return (past)
}

# TODO: handle multiple code and sea blocks
transform past (Plumhead::Grammar::program) :language('PIR') {

    .local pmc past
    past = new 'PAST::Stmts'
    past.'init'( 'node' => node )

    $P0 = node['SEA']
    if null $P0 goto handled_sea
        .local pmc past_sea
        past_sea = tree.'get'('past', $P0, 'Plumhead::Grammar::SEA')
        past.'push'(past_sea)
    handled_sea:

    $P0 = node['code']
    if null $P0 goto handled_code
        .local pmc past_code
        past_code = tree.'get'('past', $P0, 'Plumhead::Grammar::code')
        past.'push'(past_code)
    handled_code:

    .return (past)
}

transform past (Plumhead::Grammar::SEA) :language('PIR') {

    .local string val
    val = node
    .local pmc code_string
    code_string = new 'PGE::CodeString'
    ( val ) = code_string.'escape'( val )

    .local pmc past_val
    past_val = new 'PAST::Val'                             
    past_val.'init'( 'name' => val, 'vtype' => '.Undef' )                              

    .local pmc past                                                  
    past = new 'PAST::Op'
    past.'init'( past_val, 'node'=> node, 'pirop' => 'print' )  

    .return (past)
}

transform past (Plumhead::Grammar::code) :language('PIR') {

    .local pmc past
    past = new 'PAST::Stmts'
    past.'init'( 'node' => node )

    $P0 = node['statement']
    if null $P0 goto handled_statement
        .local pmc statement_iter
        statement_iter = new .Iterator, $P0
        iter_loop:
            unless statement_iter goto iter_end
            .local pmc cnode, past_else_block, past_condition, past_expression, past_var, past_array_elem, past_assign, past_rel_expression, past_echo, past_var_dump, past_if, past_if_block, past_sea
            cnode = shift statement_iter
            if null cnode goto iter_loop

                 $P1 = cnode['ECHO']
                 if null $P1 goto no_echo
                     $P2 = cnode['expression']
                     if null $P2 goto iter_loop
                         past_expression = tree.'get'('past', $P2, 'Plumhead::Grammar::expression')
                         if null past_expression goto iter_loop
                         past_echo = new 'PAST::Op'
                         past_echo.'init'( past_expression, 'node'=> node, 'name' => 'print' )  
                         past.'push'(past_echo)
                         goto iter_loop
                 no_echo:

                 $P1 = cnode['VAR_DUMP']
                 if null $P1 goto no_var_dump
                     $P2 = cnode['expression']
                     if null $P2 goto iter_loop
                         past_expression = tree.'get'('past', $P2, 'Plumhead::Grammar::expression')
                         if null past_expression goto iter_loop
                         past_var_dump = new 'PAST::Op'
                         past_var_dump.'init'( past_expression, 'node'=> node, 'name' => 'var_dump' )  
                         past.'push'(past_var_dump)
                         goto iter_loop
                 no_var_dump:

                 $P1 = cnode['IF']
                 if null $P1 goto no_if
                     # an 'IF' always comes along a 'relational_expression', which always contains an 'expression'
                     $P3 = cnode['relational_expression']
                     $P2 = $P3['expression']
                     $P4 = $P3['rel_op_clause']
                     if null $P4 goto no_rel_op_clause
                         .local string name
                         $P5  = $P4[0]
                         $P6  = $P5['REL_OP']
                         name = $P6
                         name = 'infix:' . name
                         past_expression     = tree.'get'('past', $P2, 'Plumhead::Grammar::expression')
                         past_rel_expression = tree.'get'('past', $P5, 'Plumhead::Grammar::expression')
                         past_condition = new 'PAST::Op'
                         past_condition.'init'( past_expression, past_rel_expression, 'node'=> node, 'name' => name )
                         goto got_past_condition
                     no_rel_op_clause:
                         past_condition = tree.'get'('past', $P2, 'Plumhead::Grammar::expression')
                         goto got_past_condition
                     got_past_condition:
                     if null past_condition goto iter_loop
                     # past_if_block takes care of the <statement>
                     past_if_block = tree.'get'('past', cnode, 'Plumhead::Grammar::code')
                     past_if = new 'PAST::Op'
                     past_if.'init'( past_condition, past_if_block, 'node'=> node, 'pasttype' => 'if' )  
                     $P3 = cnode['else_clause']
                     if null $P3 goto no_else_clause
                         $P4 = $P3[0]
                         past_else_block = tree.'get'('past', $P4, 'Plumhead::Grammar::code')
                         past_if.'push'(past_else_block)
                     no_else_clause:
                     past.'push'(past_if)
                     goto iter_loop
                 no_if:

                 $P1 = cnode['inline_sea']
                 if null $P1 goto no_inline_sea
                     $P2 = $P1['SEA']
                     past_sea = tree.'get'('past', $P2, 'Plumhead::Grammar::SEA')
                     past.'push'(past_sea)
                     goto iter_loop
                 no_inline_sea:

                 $P1 = cnode['scalar_assign']
                 if null $P1 goto no_scalar_assign
                     $P2 = $P1['var']
                     $P3 = $P1['expression']
                     if null $P2 goto iter_loop
                         past_var     = tree.'get'('past', $P2, 'Plumhead::Grammar::expression')
                         past_expression = tree.'get'('past', $P3, 'Plumhead::Grammar::expression')
                         past_assign = new 'PAST::Op'
                         past_assign.'init'( past_var, past_expression, 'node'=> node, 'name' => 'infix:=', 'pasttype' => 'assign' )  
                         past.'push'(past_assign)
                         goto iter_loop
                 no_scalar_assign:

                 $P1 = cnode['array_assign']
                 if null $P1 goto no_array_assign
                     $P2 = $P1['array_elem']
                     $P3 = $P1['expression']
                     if null $P2 goto iter_loop
                         past_array_elem     = tree.'get'('past', $P1, 'Plumhead::Grammar::expression')
                         past_expression = tree.'get'('past', $P3, 'Plumhead::Grammar::expression')
                         past_assign = new 'PAST::Op'
                         past_assign.'init'( past_array_elem, past_expression, 'node'=> node, 'name' => 'infix:=', 'pasttype' => 'assign' )  
                         past.'push'(past_assign)
                         goto iter_loop
                 no_array_assign:

                 # unknown statements are ignored
                 goto iter_loop
         iter_end:

    handled_statement:

    .return (past)
}

transform past (Plumhead::Grammar::expression) :language('PIR') {

    .local pmc past

    $P0 = node['expression']
    if null $P0 goto no_expression_1
        .local pmc dummy_1, dummy_2
        dummy_1 = node['array_elem']
        unless null dummy_1 goto no_expression_1
        dummy_2 = node['VAR_NAME']
        if null dummy_2 goto no_var_name_1
            .local string var
            var = dummy_1
            past = new 'PAST::Var'
            .local pmc past_expression_1
            past_expression_1 = tree.'get'('past', $P0, 'Plumhead::Grammar::expression')
            past.'init'( past_expression_1, 'name' => var, 'viviself' => '.Hash', 'islvalue' => 1 )
            goto handled_expression
        no_var_name_1:
            past = tree.'get'('past', $P0, 'Plumhead::Grammar::expression')
            goto handled_expression
    no_expression_1:

    $P0 = node['array_elem']
    if null $P0 goto no_array_elem_1
        $P1 = $P0['VAR_NAME']
        $P2 = $P0['array_key']
        .local string var
        var = $P1
        .local pmc past_key, past_var_name
        past_var_name = tree.'get'('past', $P0, 'Plumhead::Grammar::expression')
        past_var_name.'attr'('viviself', '.Hash', 1 )
        past_key      = tree.'get'('past', $P2, 'Plumhead::Grammar::expression')
        past = new 'PAST::Var'
        past.'init'( past_var_name, past_key, 'scope' => 'keyed', 'viviself' => '.Undef', 'islvalue' => 1 )                              
        goto handled_expression
    no_array_elem_1:

    $P0 = node['DOUBLEQUOTE_STRING']
    if null $P0 goto no_DOUBLEQUOTE_STRING
        past = tree.'get'('past', $P0, 'Plumhead::Grammar::DOUBLEQUOTE_STRING')
        goto handled_expression
    no_DOUBLEQUOTE_STRING:

    $P0 = node['SINGLEQUOTE_STRING']
    if null $P0 goto no_SINGLEQUOTE_STRING
        past = tree.'get'('past', $P0, 'Plumhead::Grammar::SINGLEQUOTE_STRING')
        goto handled_expression
    no_SINGLEQUOTE_STRING:

    $P0 = node['NUMBER']
    if null $P0 goto no_NUMBER
        past = tree.'get'('past', $P0, 'Plumhead::Grammar::NUMBER')
        goto handled_expression
    no_NUMBER:

    $P0 = node['INTEGER']
    if null $P0 goto no_INTEGER
        past = tree.'get'('past', $P0, 'Plumhead::Grammar::INTEGER')
        goto handled_expression
    no_INTEGER:

    $P0 = node['bitwise_expression']
    if null $P0 goto no_bitwise_expression
        .local pmc past_adding, bitwise_tail, bitwise_tail_0, past_bitwise_tail_0
        bitwise_tail = $P0['bitwise_tail']
        if null bitwise_tail goto no_bitwise_tail
            past_adding = tree.'get'('past', $P0, 'Plumhead::Grammar::expression')
            bitwise_tail_0 = bitwise_tail[0]
            .local string op
            op = bitwise_tail_0['BITWISE_OP']
            if op != '&' goto not_and
                op = '+&'
            not_and:
            if op != '|' goto not_or
                op = '+|'
            not_or:
            if op != '^' goto not_xor
                op = '+^'
            not_xor:
            op = 'infix:' . op 
            past_bitwise_tail_0 = tree.'get'('past', bitwise_tail_0, 'Plumhead::Grammar::expression')
            past = new 'PAST::Op'
            past.init( past_adding, past_bitwise_tail_0, 'name' => op )
            goto handled_expression
        no_bitwise_tail:
        past = tree.'get'('past', $P0, 'Plumhead::Grammar::expression')
    goto handled_expression
    no_bitwise_expression:

    $P0 = node['adding_expression']
    if null $P0 goto no_adding_expression
        .local pmc adding_tail_iter, past_mult, past_prev, adding_tail 
        past = tree.'get'('past', $P0, 'Plumhead::Grammar::expression')
        adding_tail = $P0['adding_tail']
        if null adding_tail goto handled_expression
            .local pmc past_prev, cnode 
            adding_tail_iter = new .Iterator, adding_tail
            iter_loop:
                unless adding_tail_iter goto iter_end
                .local pmc cnode
                cnode = shift adding_tail_iter
                past_mult = tree.'get'('past', cnode, 'Plumhead::Grammar::expression')
                past_prev = past
                .local string add_op, pirop
                pirop = 'n_add'
                add_op = cnode['ADD_OP']
                if add_op != '-' goto not_minus
                    pirop = 'n_sub'
                not_minus:
                add_op = 'infix:' . add_op 
                past = new 'PAST::Op'
                past.init( past_prev, past_mult, 'name' => add_op, 'pirop' => pirop )
                goto iter_loop
            iter_end:
            goto handled_expression
    no_adding_expression:

    $P0 = node['multiplying_expression']
    if null $P0 goto no_multiplying_expression
        .local pmc past_unary, multiplicand, multiplicand_0, past_multiplicand_0
        multiplicand = $P0['multiplicand']
        if null multiplicand goto no_multiplicand
            past_unary = tree.'get'('past', $P0, 'Plumhead::Grammar::expression')
            multiplicand_0 = multiplicand[0]
            .local string mul_op, pirop
            pirop = 'n_mul'
            mul_op = multiplicand_0['MUL_OP']
            if mul_op != '/' goto not_div
                pirop = 'n_div'
            not_div:
            if mul_op != '%' goto not_mod
                pirop = 'n_mod'
            not_mod:
            mul_op = 'infix:' . mul_op 
            past_multiplicand_0 = tree.'get'('past', multiplicand_0, 'Plumhead::Grammar::expression')
            past = new 'PAST::Op'
            past.init( past_unary, past_multiplicand_0, 'name' => mul_op, 'pirop' => pirop )
            goto handled_expression
        no_multiplicand:
        past = tree.'get'('past', $P0, 'Plumhead::Grammar::expression')
    goto handled_expression
    no_multiplying_expression:

    $P0 = node['unary_expression']
    if null $P0 goto no_unary_expression
        $P1 = $P0['postfix_expression']
        if null $P1 goto handled_expression
            $P2 = $P0['UNARY_MINUS']
            if null $P2 goto no_minus
                past = new 'PAST::Op'
                .local pmc past_expression
                past_expression = tree.'get'('past', $P1, 'Plumhead::Grammar::expression')
                past.init( past_expression, 'node' => $P0, 'name' => 'prefix:-' )
                goto handled_expression
            no_minus:
            $P2 = $P1['expression']
            if null $P2 goto no_expression
                past = tree.'get'('past', $P2, 'Plumhead::Grammar::expression')
                goto handled_expression
            no_expression:
            past = tree.'get'('past', $P0, 'Plumhead::Grammar::expression')
            goto handled_expression
    no_unary_expression:

    $P0 = node['postfix_expression']
    if null $P0 goto no_postfix_expression
        past = tree.'get'('past', $P0, 'Plumhead::Grammar::expression')
        goto handled_expression
    no_postfix_expression:

    $P0 = node['var']
    if null $P0 goto no_var
        past = tree.'get'('past', $P0, 'Plumhead::Grammar::expression')
        goto handled_expression
    no_var:

    $P0 = node['VAR_NAME']
    if null $P0 goto no_var_name
        .local string var
        var = $P0
        past = new 'PAST::Var'
        past.'init'( 'name' => var, 'viviself' => '.Undef', 'islvalue' => 1 )                              
        goto handled_expression
    no_var_name:

    handled_expression:

    .return (past)
}


transform past (Plumhead::Grammar::DOUBLEQUOTE_STRING) :language('PIR') {

    .local pmc past
    past= new 'PAST::Val'                             
    .local string val
    val = node
    .local pmc code_string
    past.'init'( 'name' => val, 'vtype' => '.Undef' )                              

    .return (past)
}


transform past (Plumhead::Grammar::SINGLEQUOTE_STRING) :language('PIR') {

    .local pmc past
    past = new 'PAST::Val'                             
    .local string val
    val = node
    .local pmc code_string
    past.'init'( 'name' => val, 'vtype' => '.Undef' )                              

    .return (past)
}

transform past (Plumhead::Grammar::NUMBER) :language('PIR') {

    .local pmc past
    past = new 'PAST::Val'                             
    .local string val
    val = node
    past.'init'( 'name' => val, 'vtype' => '.Float', 'ctype' => 'n+' )                              
    .return (past)
}

transform past (Plumhead::Grammar::INTEGER) :language('PIR') {

    .local pmc past
    past = new 'PAST::Val'                             
    .local string val
    val = node
    past.'init'( 'name' => val, 'vtype' => '.Integer', 'ctype' => 'i+' )                              
    .return (past)
}

