// $ANTLR 3.0.1 src/antlr3/GenPastNqp.g 2008-05-17 10:21:41

  import java.util.regex.*;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

public class GenPastNqp extends TreeParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "PROGRAM", "NOQUOTE_STRING", "STMTS", "SCALAR", "ARRAY", "FUNCTION", "PREFIX", "SEA", "CODE_START", "CODE_END", "WS", "DOUBLEQUOTE_STRING", "SINGLEQUOTE_STRING", "ECHO", "VAR_DUMP", "PAREN_OPEN", "PAREN_CLOSE", "IDENT", "VAR_NAME", "DIGITS", "INTEGER", "NUMBER", "MINUS", "PLUS", "MUL_OP", "BITWISE_OP", "ASSIGN_OP", "REL_OP", "IF", "ELSE", "';'", "'{'", "'}'", "'['", "']'"
    };
    public static final int FUNCTION=9;
    public static final int INTEGER=24;
    public static final int PREFIX=10;
    public static final int CODE_START=12;
    public static final int PAREN_CLOSE=20;
    public static final int BITWISE_OP=29;
    public static final int DIGITS=23;
    public static final int ELSE=33;
    public static final int NUMBER=25;
    public static final int STMTS=6;
    public static final int MINUS=26;
    public static final int EOF=-1;
    public static final int VAR_NAME=22;
    public static final int IF=32;
    public static final int ASSIGN_OP=30;
    public static final int CODE_END=13;
    public static final int ECHO=17;
    public static final int WS=14;
    public static final int REL_OP=31;
    public static final int NOQUOTE_STRING=5;
    public static final int DOUBLEQUOTE_STRING=15;
    public static final int SCALAR=7;
    public static final int VAR_DUMP=18;
    public static final int SINGLEQUOTE_STRING=16;
    public static final int IDENT=21;
    public static final int PROGRAM=4;
    public static final int PLUS=27;
    public static final int PAREN_OPEN=19;
    public static final int SEA=11;
    public static final int ARRAY=8;
    public static final int MUL_OP=28;

        public GenPastNqp(TreeNodeStream input) {
            super(input);
        }
        

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "src/antlr3/GenPastNqp.g"; }


      // used for generating unique register names, TODO: remove
      public static int reg_num = 200;



    // $ANTLR start gen_past_nqp
    // src/antlr3/GenPastNqp.g:27:1: gen_past_nqp : ^( PROGRAM ( node[\"past_stmts\"] )* ) ;
    public final void gen_past_nqp() throws RecognitionException {
        try {
            // src/antlr3/GenPastNqp.g:28:3: ( ^( PROGRAM ( node[\"past_stmts\"] )* ) )
            // src/antlr3/GenPastNqp.g:28:5: ^( PROGRAM ( node[\"past_stmts\"] )* )
            {

                  System.out.println( 
                      "#!/usr/bin/env parrot                                                  \n"
                    + "                                                                       \n"
                    + "# Do not edit this file.                                               \n"
                    + "# This file has been generated by GenPastNqp.g                         \n"
                    + "                                                                       \n"
                    + "sub php_entry ()                                                       \n"
                    + "{                                                                      \n"
                    + "    PAST::Block.new(                                                   \n"
                    + "        PAST::Stmts.new(                                               \n"
                    + "                                                                       \n"
                    + "               PAST::Op.new(                                           \n"
                    + "                 :name( 'echo' ),                                      \n"
                    + "                                                                       \n"
                    + "                     PAST::Op.new(                                     \n"
                    + "                     :pirop( 'n_mod' ),                                \n"
                    + "                     :name( 'infix:%' ),                               \n"
                    + "                                                                       \n"
                    + "                           PAST::Val.new(                              \n"
                    + "                         :returns( 'Integer' ),                        \n"
                    + "                         :value( '2' ),                                \n"
                    + "                     ),                                                \n"
                    + "                                                                       \n"
                    + "                           PAST::Val.new(                              \n"
                    + "                         :returns( 'Integer' ),                        \n"
                    + "                         :value( '2' ),                                \n"
                    + "                     ),                                                \n"
                    + "                                                                       \n"
                    + "                     ),                                                \n"
                    + "                                                                       \n"
                    + "               ),                                                      \n"
                    + "                                                                       \n"
                    + "               PAST::Op.new(                                           \n"
                    + "                 :name( 'echo' ),                                      \n"
                    + "                                                                       \n"
                    + "                     PAST::Val.new(                                    \n"
                    + "                     :returns( 'String' ),                             \n"
                    + "                     :value( decode_base64( 'Cg==' ) ),                \n"
                    + "                 ),                                                    \n"
                    + "                                                                       \n"
                    + "               ),                                                      \n"
                    + "                                                                       \n"
                    + "                                                                       \n"
                    + "        )                                                              \n"
                    + "    );                                                                 \n"
                  );
                
            match(input,PROGRAM,FOLLOW_PROGRAM_in_gen_past_nqp74); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // src/antlr3/GenPastNqp.g:76:16: ( node[\"past_stmts\"] )*
                loop1:
                do {
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( ((LA1_0>=NOQUOTE_STRING && LA1_0<=ARRAY)||LA1_0==PREFIX||(LA1_0>=DOUBLEQUOTE_STRING && LA1_0<=VAR_DUMP)||(LA1_0>=INTEGER && LA1_0<=IF)) ) {
                        alt1=1;
                    }


                    switch (alt1) {
                	case 1 :
                	    // src/antlr3/GenPastNqp.g:76:16: node[\"past_stmts\"]
                	    {
                	    pushFollow(FOLLOW_node_in_gen_past_nqp76);
                	    node("past_stmts");
                	    _fsp--;


                	    }
                	    break;

                	default :
                	    break loop1;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }

                  System.out.println( 
                      "                                                                       \n"
                    + "}                                                                      \n"
                  );
                

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end gen_past_nqp


    // $ANTLR start node
    // src/antlr3/GenPastNqp.g:85:1: node[String reg_mother] : ( ^( ECHO node[\"past_echo\"] ) | ^( VAR_DUMP node[\"past_var_dump\"] ) | NOQUOTE_STRING | SINGLEQUOTE_STRING | DOUBLEQUOTE_STRING | NUMBER | INTEGER | ^(infix= ( PLUS | MINUS | MUL_OP | BITWISE_OP ) node[reg] node[reg] ) | ^(prefix= PREFIX node[reg] ) | ^( REL_OP node[reg] node[reg] ) | ^( IF node[\"past_if_op\"] node[\"past_if_op\"] ( node[\"past_if_op\"] )? ) | ^( STMTS ( node[reg_stmts] )* ) | ^( ASSIGN_OP node[reg_assign] node[reg_assign] ) | SCALAR | ^( ARRAY node[reg_array] ) );
    public final void node(String reg_mother) throws RecognitionException {
        CommonTree infix=null;
        CommonTree prefix=null;
        CommonTree NOQUOTE_STRING1=null;
        CommonTree SINGLEQUOTE_STRING2=null;
        CommonTree DOUBLEQUOTE_STRING3=null;
        CommonTree REL_OP4=null;

        try {
            // src/antlr3/GenPastNqp.g:86:3: ( ^( ECHO node[\"past_echo\"] ) | ^( VAR_DUMP node[\"past_var_dump\"] ) | NOQUOTE_STRING | SINGLEQUOTE_STRING | DOUBLEQUOTE_STRING | NUMBER | INTEGER | ^(infix= ( PLUS | MINUS | MUL_OP | BITWISE_OP ) node[reg] node[reg] ) | ^(prefix= PREFIX node[reg] ) | ^( REL_OP node[reg] node[reg] ) | ^( IF node[\"past_if_op\"] node[\"past_if_op\"] ( node[\"past_if_op\"] )? ) | ^( STMTS ( node[reg_stmts] )* ) | ^( ASSIGN_OP node[reg_assign] node[reg_assign] ) | SCALAR | ^( ARRAY node[reg_array] ) )
            int alt4=15;
            switch ( input.LA(1) ) {
            case ECHO:
                {
                alt4=1;
                }
                break;
            case VAR_DUMP:
                {
                alt4=2;
                }
                break;
            case NOQUOTE_STRING:
                {
                alt4=3;
                }
                break;
            case SINGLEQUOTE_STRING:
                {
                alt4=4;
                }
                break;
            case DOUBLEQUOTE_STRING:
                {
                alt4=5;
                }
                break;
            case NUMBER:
                {
                alt4=6;
                }
                break;
            case INTEGER:
                {
                alt4=7;
                }
                break;
            case MINUS:
            case PLUS:
            case MUL_OP:
            case BITWISE_OP:
                {
                alt4=8;
                }
                break;
            case PREFIX:
                {
                alt4=9;
                }
                break;
            case REL_OP:
                {
                alt4=10;
                }
                break;
            case IF:
                {
                alt4=11;
                }
                break;
            case STMTS:
                {
                alt4=12;
                }
                break;
            case ASSIGN_OP:
                {
                alt4=13;
                }
                break;
            case SCALAR:
                {
                alt4=14;
                }
                break;
            case ARRAY:
                {
                alt4=15;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("85:1: node[String reg_mother] : ( ^( ECHO node[\"past_echo\"] ) | ^( VAR_DUMP node[\"past_var_dump\"] ) | NOQUOTE_STRING | SINGLEQUOTE_STRING | DOUBLEQUOTE_STRING | NUMBER | INTEGER | ^(infix= ( PLUS | MINUS | MUL_OP | BITWISE_OP ) node[reg] node[reg] ) | ^(prefix= PREFIX node[reg] ) | ^( REL_OP node[reg] node[reg] ) | ^( IF node[\"past_if_op\"] node[\"past_if_op\"] ( node[\"past_if_op\"] )? ) | ^( STMTS ( node[reg_stmts] )* ) | ^( ASSIGN_OP node[reg_assign] node[reg_assign] ) | SCALAR | ^( ARRAY node[reg_array] ) );", 4, 0, input);

                throw nvae;
            }

            switch (alt4) {
                case 1 :
                    // src/antlr3/GenPastNqp.g:86:5: ^( ECHO node[\"past_echo\"] )
                    {

                          System.out.println( 
                              "                                                                  \n"
                          );
                        
                    match(input,ECHO,FOLLOW_ECHO_in_node108); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_node_in_node110);
                    node("past_echo");
                    _fsp--;


                    match(input, Token.UP, null); 

                          System.out.println( 
                              "                                                                  \n"
                          );
                        

                    }
                    break;
                case 2 :
                    // src/antlr3/GenPastNqp.g:97:5: ^( VAR_DUMP node[\"past_var_dump\"] )
                    {

                          System.out.println( 
                              "                                                                  \n"
                          );
                        
                    match(input,VAR_DUMP,FOLLOW_VAR_DUMP_in_node133); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_node_in_node135);
                    node("past_var_dump");
                    _fsp--;


                    match(input, Token.UP, null); 

                          System.out.println( 
                              "                                                                  \n"
                          );
                        

                    }
                    break;
                case 3 :
                    // src/antlr3/GenPastNqp.g:108:5: NOQUOTE_STRING
                    {
                    NOQUOTE_STRING1=(CommonTree)input.LT(1);
                    match(input,NOQUOTE_STRING,FOLLOW_NOQUOTE_STRING_in_node150); 

                          String noquote = NOQUOTE_STRING1.getText();
                          noquote = noquote.replace( "\n", "\\n" );
                          System.out.println( 
                              "                                                                  \n"
                          );
                        

                    }
                    break;
                case 4 :
                    // src/antlr3/GenPastNqp.g:116:5: SINGLEQUOTE_STRING
                    {
                    SINGLEQUOTE_STRING2=(CommonTree)input.LT(1);
                    match(input,SINGLEQUOTE_STRING,FOLLOW_SINGLEQUOTE_STRING_in_node162); 

                          String singlequote = SINGLEQUOTE_STRING2.getText();
                          singlequote = singlequote.replace( "\n", "\\n" );
                          System.out.println( 
                              "                                                                  \n"
                          );
                        

                    }
                    break;
                case 5 :
                    // src/antlr3/GenPastNqp.g:124:5: DOUBLEQUOTE_STRING
                    {
                    DOUBLEQUOTE_STRING3=(CommonTree)input.LT(1);
                    match(input,DOUBLEQUOTE_STRING,FOLLOW_DOUBLEQUOTE_STRING_in_node174); 

                          String doublequote = DOUBLEQUOTE_STRING3.getText();
                          doublequote = doublequote.replace( "\n", "\\n" );
                          System.out.println( 
                              "                                                                  \n"
                          );
                        

                    }
                    break;
                case 6 :
                    // src/antlr3/GenPastNqp.g:132:5: NUMBER
                    {
                    match(input,NUMBER,FOLLOW_NUMBER_in_node186); 

                          System.out.println( 
                              "                                                                  \n"
                          );
                        

                    }
                    break;
                case 7 :
                    // src/antlr3/GenPastNqp.g:138:5: INTEGER
                    {
                    match(input,INTEGER,FOLLOW_INTEGER_in_node198); 

                          System.out.println( 
                              "                                                                  \n"
                          );
                        

                    }
                    break;
                case 8 :
                    // src/antlr3/GenPastNqp.g:144:5: ^(infix= ( PLUS | MINUS | MUL_OP | BITWISE_OP ) node[reg] node[reg] )
                    {

                          reg_num++;
                          String reg = "reg_" + reg_num;
                          System.out.print( 
                              "                                                                   \n"
                          );
                        
                    infix=(CommonTree)input.LT(1);
                    if ( (input.LA(1)>=MINUS && input.LA(1)<=BITWISE_OP) ) {
                        input.consume();
                        errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse =
                            new MismatchedSetException(null,input);
                        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_node220);    throw mse;
                    }


                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_node_in_node238);
                    node(reg);
                    _fsp--;

                    pushFollow(FOLLOW_node_in_node241);
                    node(reg);
                    _fsp--;


                    match(input, Token.UP, null); 

                          // Todo. This is not nice, handle pirops in Plumhead.g
                          String op = infix.getText();
                          String pirop = "";
                          if      ( op.equals( "+" ) )  { pirop = "n_add"; }
                          else if ( op.equals( "-" ) )  { pirop = "n_sub"; }
                          else if ( op.equals( "/" ) )  { pirop = "n_div"; }
                          else if ( op.equals( "*" ) )  { pirop = "n_mul"; }
                          else if ( op.equals( "%" ) ) { pirop = "n_mod"; }
                          
                          String name = op;
                          if      ( op.equals( "&" ) )  { name = "+&"; }
                          else if ( op.equals( "|" ) )  { name = "+|"; }
                          else if ( op.equals( "^" ) )  { name = "+^"; }
                          name = "infix:" + name;

                          System.out.print(  " " ); 
                        

                    }
                    break;
                case 9 :
                    // src/antlr3/GenPastNqp.g:170:5: ^(prefix= PREFIX node[reg] )
                    {

                          reg_num++;
                          String reg = "reg_" + reg_num;
                          System.out.print( 
                              "                                                                   \n"
                          );
                        
                    prefix=(CommonTree)input.LT(1);
                    match(input,PREFIX,FOLLOW_PREFIX_in_node266); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_node_in_node268);
                    node(reg);
                    _fsp--;


                    match(input, Token.UP, null); 

                          // Todo. This is not nice, handle pirops in Plumhead.g
                          String op = prefix.getText();
                          
                          String name = op;
                          name = "prefix:" + name;

                          System.out.print( 
                              "                                                                   \n"
                          );
                        

                    }
                    break;
                case 10 :
                    // src/antlr3/GenPastNqp.g:189:5: ^( REL_OP node[reg] node[reg] )
                    {

                          reg_num++;
                          String reg = "reg_" + reg_num;
                          System.out.print( 
                              "                                                                   \n"
                          );
                        
                    REL_OP4=(CommonTree)input.LT(1);
                    match(input,REL_OP,FOLLOW_REL_OP_in_node291); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_node_in_node293);
                    node(reg);
                    _fsp--;

                    pushFollow(FOLLOW_node_in_node296);
                    node(reg);
                    _fsp--;


                    match(input, Token.UP, null); 

                          // Todo. This is not nice, handle pirops in Plumhead.g
                          String name = REL_OP4.getText();
                          if      ( name.equals( "==" ) )  { name = "eq"; }
                          else if ( name.equals( "!=" ) )  { name = "ne"; }
                          name = "infix:" + name;
                          
                          System.out.print( 
                              "  " + reg + ".'attr'( 'name', '" + name + "' , 1 )               \n"
                          );
                        

                    }
                    break;
                case 11 :
                    // src/antlr3/GenPastNqp.g:208:5: ^( IF node[\"past_if_op\"] node[\"past_if_op\"] ( node[\"past_if_op\"] )? )
                    {

                          reg_num++;
                          String reg_exp   = "reg_expression_" + reg_num;
                          System.out.print( 
                              "                                                                   \n"
                          );
                        
                    match(input,IF,FOLLOW_IF_in_node319); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_node_in_node321);
                    node("past_if_op");
                    _fsp--;

                    pushFollow(FOLLOW_node_in_node324);
                    node("past_if_op");
                    _fsp--;

                    // src/antlr3/GenPastNqp.g:215:49: ( node[\"past_if_op\"] )?
                    int alt2=2;
                    int LA2_0 = input.LA(1);

                    if ( ((LA2_0>=NOQUOTE_STRING && LA2_0<=ARRAY)||LA2_0==PREFIX||(LA2_0>=DOUBLEQUOTE_STRING && LA2_0<=VAR_DUMP)||(LA2_0>=INTEGER && LA2_0<=IF)) ) {
                        alt2=1;
                    }
                    switch (alt2) {
                        case 1 :
                            // src/antlr3/GenPastNqp.g:215:49: node[\"past_if_op\"]
                            {
                            pushFollow(FOLLOW_node_in_node327);
                            node("past_if_op");
                            _fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 

                          System.out.print( 
                              "                                                                   \n"
                          );
                        

                    }
                    break;
                case 12 :
                    // src/antlr3/GenPastNqp.g:221:5: ^( STMTS ( node[reg_stmts] )* )
                    {

                          reg_num++;
                          String reg_stmts = "reg_stmts_" + reg_num;
                          System.out.print( 
                              "                                                                   \n"
                          );
                        
                    match(input,STMTS,FOLLOW_STMTS_in_node351); 

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); 
                        // src/antlr3/GenPastNqp.g:228:14: ( node[reg_stmts] )*
                        loop3:
                        do {
                            int alt3=2;
                            int LA3_0 = input.LA(1);

                            if ( ((LA3_0>=NOQUOTE_STRING && LA3_0<=ARRAY)||LA3_0==PREFIX||(LA3_0>=DOUBLEQUOTE_STRING && LA3_0<=VAR_DUMP)||(LA3_0>=INTEGER && LA3_0<=IF)) ) {
                                alt3=1;
                            }


                            switch (alt3) {
                        	case 1 :
                        	    // src/antlr3/GenPastNqp.g:228:14: node[reg_stmts]
                        	    {
                        	    pushFollow(FOLLOW_node_in_node353);
                        	    node(reg_stmts);
                        	    _fsp--;


                        	    }
                        	    break;

                        	default :
                        	    break loop3;
                            }
                        } while (true);


                        match(input, Token.UP, null); 
                    }

                          System.out.print( " " ); 
                        

                    }
                    break;
                case 13 :
                    // src/antlr3/GenPastNqp.g:232:5: ^( ASSIGN_OP node[reg_assign] node[reg_assign] )
                    {

                          reg_num++;
                          String reg_assign = "reg_assign_" + reg_num;
                          System.out.print( 
                              "                                                                   \n"
                          );
                        
                    match(input,ASSIGN_OP,FOLLOW_ASSIGN_OP_in_node377); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_node_in_node379);
                    node(reg_assign);
                    _fsp--;

                    pushFollow(FOLLOW_node_in_node382);
                    node(reg_assign);
                    _fsp--;


                    match(input, Token.UP, null); 

                          System.out.println( 
                              "                                                                  \n"
                          );
                        

                    }
                    break;
                case 14 :
                    // src/antlr3/GenPastNqp.g:245:5: SCALAR
                    {
                    match(input,SCALAR,FOLLOW_SCALAR_in_node397); 

                          System.out.println( 
                              "                                                                  \n"
                          );
                        

                    }
                    break;
                case 15 :
                    // src/antlr3/GenPastNqp.g:251:5: ^( ARRAY node[reg_array] )
                    {

                          reg_num++;
                          String reg_array = "reg_array_" + reg_num;
                          System.out.print( 
                              "                                                                  \n"
                          );
                        
                    match(input,ARRAY,FOLLOW_ARRAY_in_node417); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_node_in_node419);
                    node(reg_array);
                    _fsp--;


                    match(input, Token.UP, null); 

                          System.out.println( 
                              "                                                                  \n"
                          );
                        

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end node


 

    public static final BitSet FOLLOW_PROGRAM_in_gen_past_nqp74 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_node_in_gen_past_nqp76 = new BitSet(new long[]{0x00000001FF0785E8L});
    public static final BitSet FOLLOW_ECHO_in_node108 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_node_in_node110 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VAR_DUMP_in_node133 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_node_in_node135 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOQUOTE_STRING_in_node150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLEQUOTE_STRING_in_node162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLEQUOTE_STRING_in_node174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_node186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_in_node198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_node220 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_node_in_node238 = new BitSet(new long[]{0x00000001FF0785E0L});
    public static final BitSet FOLLOW_node_in_node241 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PREFIX_in_node266 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_node_in_node268 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_REL_OP_in_node291 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_node_in_node293 = new BitSet(new long[]{0x00000001FF0785E0L});
    public static final BitSet FOLLOW_node_in_node296 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IF_in_node319 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_node_in_node321 = new BitSet(new long[]{0x00000001FF0785E0L});
    public static final BitSet FOLLOW_node_in_node324 = new BitSet(new long[]{0x00000001FF0785E8L});
    public static final BitSet FOLLOW_node_in_node327 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STMTS_in_node351 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_node_in_node353 = new BitSet(new long[]{0x00000001FF0785E8L});
    public static final BitSet FOLLOW_ASSIGN_OP_in_node377 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_node_in_node379 = new BitSet(new long[]{0x00000001FF0785E0L});
    public static final BitSet FOLLOW_node_in_node382 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SCALAR_in_node397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ARRAY_in_node417 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_node_in_node419 = new BitSet(new long[]{0x0000000000000008L});

}