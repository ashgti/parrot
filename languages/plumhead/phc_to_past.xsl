<?xml version='1.0'?>
<xsl:stylesheet  xmlns:phc="http://www.phpcompiler.org/phc-1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

<!--

$Id$

This transformation takes as abstract syntax tree that is generated 
by phc from a PHP source. It generates a script in PIR that creates
a PAST and runs the PAST with help of the parrot compiler tools.

-->

<xsl:output method='text' />

<xsl:template match="/">
  <xsl:apply-templates select="phc:AST_php_script" />
</xsl:template>

<xsl:template match="phc:AST_php_script">
# Do not edit this file.                                          
# This file has been generated by phc_to_past.xsl
                                                                  
# start of AST_php_script

  <xsl:apply-templates select="phc:AST_class_def_list" />

# helpers

.sub _slurp_file                                                  
  .param string filename                                          
                                                                  
  .local pmc filehandle                                             
  .local string content                                             
  filehandle = open filename, '&lt;'                                 
  unless filehandle goto ERR_NO_FILE                              
  content = read filehandle, 65535                                
  close filehandle                                                
                                                                  
  .return ( content )                                             
                                                                  
  ERR_NO_FILE:                                                    
    print 'Unable to open file: '                                 
    say filename                                                  
    end                                                           
                                                                  
.end                                                              
                                                                  
# end of AST_php_script

</xsl:template>

<xsl:template match="phc:AST_class_def_list">
  <xsl:apply-templates select="phc:AST_class_def" />
</xsl:template>

<xsl:template match="phc:AST_class_def">
</xsl:template>
<xsl:template match="phc:AST_class_def[phc:Token_class_name[phc:value='%MAIN%']]">
  <xsl:apply-templates select="phc:AST_member_list" />
</xsl:template>

<xsl:template match="phc:AST_member_list">
  <xsl:apply-templates select="phc:AST_method" />
</xsl:template>

<xsl:template match="phc:AST_method">
</xsl:template>
<xsl:template match="phc:AST_method[phc:AST_signature[phc:Token_method_name[phc:value='%run%']]]">
                                                                  
.sub plumhead :main                                                     

  load_bytecode 'PAST.pbc'                                        
  load_bytecode 'languages/punie/lib/POST.pir'                    
  load_bytecode 'languages/punie/lib/OSTGrammar.pir'              
  load_bytecode 'MIME/Base64.pbc'              
                                                                  
  .local pmc dec_sub
  dec_sub = get_global [ "MIME"; "Base64" ], 'decode_base64'
    
  # The root node of PAST
  .local pmc past_stmts                                                  
  past_stmts = new 'PAST::Stmts'                                       
  
  # Build up the PAST                                                                 
  <xsl:apply-templates select="phc:AST_statement_list" >
    <xsl:with-param name="parent" select="'past_stmts'" />
  </xsl:apply-templates>

  # say 'AST tree dump:'                                          
  # past_stmts.dump()                                                  
                                                                  
  # Compile the abstract syntax tree                              
  # down to an opcode syntax tree                                 
  .local string ost_tg_src                                          
  .local pmc tge_compiler                                           
  .local pmc ost_grammar, ost_builder, ost                          
  tge_compiler = new 'TGE::Compiler'                              
  ost_tg_src = _slurp_file('languages/punie/lib/OSTGrammar.tg')   
  ost_grammar = tge_compiler.'compile'(ost_tg_src)                
  ost_builder = ost_grammar.apply(past_stmts)                          
  ost = ost_builder.get('result')                                 
  unless ost goto ERR_NO_OST                                      
                                                                  
  # Compile the OST down to PIR                                   
  .local string pir_tg_src                                          
  .local pmc pir_grammar, pir_builder, pir                          
  pir_tg_src = _slurp_file('languages/punie/lib/PIRGrammar.tg')   
  pir_grammar = tge_compiler.'compile'(pir_tg_src)                
  pir_builder = pir_grammar.apply(ost)                            
  pir = pir_builder.get('result')                                 
  unless pir goto ERR_NO_PIR                                      
                                                                  
  # execute                                                       
  .local pmc pir_compiler, pir_compiled                             
  pir_compiler = compreg 'PIR'                                    
  pir_compiled = pir_compiler( pir )                              
  pir_compiled()                                                  
  say ''                                                          
  goto CLEANUP                                                    
                                                                  
  ERR_NO_OST:                                                     
    say 'Unable to construct OST.'                                
    goto CLEANUP                                                  
                                                                  
  ERR_NO_PIR:                                                     
    say 'Unable to construct PIR.'                                
    goto CLEANUP                                                  
                                                                  
  CLEANUP:                                                        
.end                                                              
                                                                  
</xsl:template>

<xsl:template match="phc:AST_statement_list">
  <xsl:param name='parent' />
  <xsl:apply-templates select="phc:AST_eval_expr" >
    <xsl:with-param name="parent" select="$parent" />
  </xsl:apply-templates>
  <xsl:apply-templates select="phc:AST_if" >
    <xsl:with-param name="parent" select="$parent" />
  </xsl:apply-templates>
</xsl:template>

<xsl:template match="phc:AST_eval_expr">
  <xsl:param name='parent' />
  <xsl:apply-templates select="phc:AST_method_invocation" >
    <xsl:with-param name="parent" select="$parent" />
  </xsl:apply-templates>
</xsl:template>

<xsl:template match="phc:AST_method_invocation">
  <xsl:param name='parent' />
  <xsl:apply-templates select="phc:AST_actual_parameter_list" >
    <xsl:with-param name="parent" select="$parent" />
  </xsl:apply-templates>
</xsl:template>

<xsl:template match="phc:AST_actual_parameter_list">
  <xsl:param name='parent' />
  <xsl:apply-templates select="phc:AST_actual_parameter" >
    <xsl:with-param name="parent" select="$parent" />
  </xsl:apply-templates>
</xsl:template>

<xsl:template match="phc:AST_actual_parameter">
  <xsl:param name='parent' />
  <xsl:apply-templates select="phc:Token_string" >
    <xsl:with-param name="parent" select="$parent" />
  </xsl:apply-templates>
</xsl:template>

<xsl:template match="phc:Token_string">
  <xsl:param name='parent' />
  <xsl:apply-templates select="phc:value" >
    <xsl:with-param name="parent" select="$parent" />
  </xsl:apply-templates>
</xsl:template>

<xsl:template match="phc:value">
  <xsl:param name='parent' />
                                                                  
  # entering 'PRINT node'                                         
    .local pmc past_stmt                                    
    past_stmt = new 'PAST::Stmt'                        
        .local pmc past_op                                           
        past_op = new 'PAST::Op'                             
        past_op.'op'( 'print' )                              
          .local pmc past_exp                                     
          past_exp = new 'PAST::Exp'                    
                                                                   
# entering 'STRING'                                                
            .local string decoded
            decoded = dec_sub( "<xsl:value-of select="." />" )
            decoded = escape decoded
            .local pmc past_val                                               
            past_val = new 'PAST::Val'                             
            past_val.value( decoded ) 
            past_val.valtype( 'strqq' )                            
          past_exp.'add_child'( past_val )         
# leaving 'STRING'                                                 
                                                                   
      past_op.'add_child'( past_exp )               
    past_stmt.'add_child'( past_op )       
  <xsl:value-of select="$parent" />.'add_child'( past_stmt )      
  # leaving 'PRINT node'                                           

</xsl:template>

<xsl:template match="phc:AST_if">
  <xsl:param name='parent' />

  # entering 'AST_if node'                                         
    .local pmc past_stmt                                    
    past_stmt = new 'PAST::Stmt'                        
        .local pmc past_op                                           
        past_op = new 'PAST::Op'                             
        past_op.'op'( 'print' )                              
          .local pmc past_exp                                     
          past_exp = new 'PAST::Exp'                    
                                                                   
# entering 'STRING'                                                
            .local pmc past_val                                               
            past_val = new 'PAST::Val'                             
            past_val.value( '    &lt;strong&gt;Condition is true.&lt;/strong&gt;\n  ' )
            past_val.valtype( 'strqq' )                            
          past_exp.'add_child'( past_val )         
# leaving 'STRING'                                                 
                                                                   
      past_op.'add_child'( past_exp )               
    past_stmt.'add_child'( past_op )       
  <xsl:value-of select="$parent" />.'add_child'( past_stmt )      
  # leaving 'AST_if node'                                           
</xsl:template>

</xsl:stylesheet>
