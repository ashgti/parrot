# $Id$

# Set up extensions
LOAD_EXT      = @load_ext@
O             = @o@
EXE           = @exe@

# Set up directories
BUILD_DIR     = @build_dir@
LIBRARY_DIR   = $(BUILD_DIR)/runtime/parrot/library
INCLUDE_DIR   = $(BUILD_DIR)/include
PMCDIR        = src/pmc
PIPPDIR       = $(BUILD_DIR)/languages/pipp
HASHDIR       = $(PIPPDIR)/src
PARROT_DYNEXT = @build_dir@/runtime/parrot/dynext

# Set up commands
PARROT        = $(BUILD_DIR)/parrot@exe@
PERL          = @perl@
RM_F          = @rm_f@
RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
PMCBUILD      = $(PERL) @build_dir@/tools/build/dynpmc.pl
NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
PBC_TO_EXE    = $(BUILD_DIR)/pbc_to_exe$(EXE)
CC            = @cc@
#copy/pasta from CFLAGS in config/gen/makefiles/dynpmc_pl.in
CFLAGS        = @ccflags@ @cc_shared@ @cc_debug@ @ccwarn@ @cc_hasjit@ @cg_flag@ @gc_flag@
TOUCH         = @touch@

PMCS = \
 php \
 phparray \
 phpboolean \
 phpfloat \
 phpinteger \
 phpresource \
 phpstring \
 phpundef

PMC_SOURCES = \
 $(PMCDIR)/php.pmc \
 $(PMCDIR)/phparray.pmc \
 $(PMCDIR)/phpboolean.pmc \
 $(PMCDIR)/phpfloat.pmc \
 $(PMCDIR)/phpinteger.pmc \
 $(PMCDIR)/phpresource.pmc \
 $(PMCDIR)/phpstring.pmc \
 $(PMCDIR)/phpundef.pmc

HASH_SOURCES = $(HASHDIR)/pipp_hash.c

HASH_H = $(HASHDIR)/pipp_hash.h

HASH_OBJS = $(HASHDIR)/pipp_hash$(O)

PHP_GROUP=$(PMCDIR)/php_group$(LOAD_EXT)

PHP_SRC_STD_EXT= \
  src/common/php_API.pir \
  src/common/php_array.pir \
  src/common/php_assert.pir \
  src/common/php_base64.pir \
  src/common/php_basic.pir \
  src/common/php_builtin.pir \
  src/common/php_browscap.pir \
  src/common/php_crc32.pir \
  src/common/php_crypt.pir \
  src/common/php_cyr_convert.pir \
  src/common/php_datetime.pir \
  src/common/php_dir.pir \
  src/common/php_dl.pir \
  src/common/php_dns.pir \
  src/common/php_exec.pir \
  src/common/php_file.pir \
  src/common/php_filestat.pir \
  src/common/php_formatted_print.pir \
  src/common/php_fsock.pir \
  src/common/php_ftok.pir \
  src/common/php_head.pir \
  src/common/php_html.pir \
  src/common/php_http.pir \
  src/common/php_image.pir \
  src/common/php_info.pir \
  src/common/php_iptc.pir \
  src/common/php_lcg.pir \
  src/common/php_levenshtein.pir \
  src/common/php_link.pir \
  src/common/php_mail.pir \
  src/common/php_math.pir \
  src/common/php_md5.pir \
  src/common/php_metaphone.pir \
  src/common/php_microtime.pir \
  src/common/php_pack.pir \
  src/common/php_pageinfo.pir \
  src/common/php_proc_open.pir \
  src/common/php_quot_print.pir \
  src/common/php_rand.pir \
  src/common/php_reg.pir \
  src/common/php_sha1.pir \
  src/common/php_soundex.pir \
  src/common/php_streamsfuncs.pir \
  src/common/php_string.pir \
  src/common/php_syslog.pir \
  src/common/php_type.pir \
  src/common/php_uniqid.pir \
  src/common/php_url.pir \
  src/common/php_user_filters.pir \
  src/common/php_uuencode.pir \
  src/common/php_var.pir \
  src/common/php_versioning.pir

PHP_EXT= \
  src/common/php_ctype.pbc \
  src/common/php_gmp.pbc \
  src/common/php_pcre.pbc

# default
all: build

# This is a listing of all targets, that are meant to be called by users
help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "Building:"
	@echo "  all:               Build pipp.pbc"
	@echo "                     This is the default."
	@echo "  pipp$(EXE):        A fancy executable."
	@echo "  build              Same as 'all'."
	@echo "  build-all          Build all three variants"
	@echo "  build-pct          Same as 'build', which is same as 'all'."
	@echo "  build-phc          Build support for variant 'Pipp phc'."
	@echo "                     Current this has nothing to do."
	@echo "  build-antlr3       Build support for variant 'Pipp antlr3'."
	@echo "                     Needs javac and a proper CLASSPATH."
	@echo "  pmc                Build all PMCs."
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite for 'Pipp pct'."
	@echo "  test-all:          Run the test suite for the reference and all variants."
	@echo "  test-php:          Run the test suite for the reference implementation."
	@echo "  test-phc:          Run the test suite for 'Pipp phc'."
	@echo "  test-antlr3:       Run the test suite for 'Pipp antlr3'."
	@echo "  test-pct:          Run the test suite for 'Pipp pct'."
	@echo "  test-pmc:          Run the test suite for Pipp's PMCs."
	@echo "  smolder_test:      Run the PCT test suite and send report to the smolder server" 
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Clean up."
	@echo "  clean-test:        Clean up temporary files from testing."
	@echo "  clean-pmc:         Clean up temporary files from the PMC build process."
	@echo "  realclean:         Clean and remove Makefile."
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""
	@echo "Only for maintainer:"
	@echo "  maintain:          Maintainance for 'Pipp antlr3'."
	@echo "                     The other variants need no maintainance."
	@echo "  maintain-antlr3:   Generate Java source files with ANTLR 3."
	@echo ""

# regenerate the Makefile
Makefile: config/makefiles/root.in
	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=pipp

maintain: maintain-antlr3

maintain-antlr3: src/antlr3/Pipp.g src/antlr3/GenPastNqp.g
	@echo 'Be sure to set CLASSPATH first, see docs/antlr3.pod'
	java org.antlr.Tool src/antlr3/Pipp.g
	java org.antlr.Tool -lib src/antlr3 src/antlr3/GenPastNqp.g

build:           build-pct

build-all:       build-pct build-phc build-antlr3

build-common:    pmc src/common/pipplib.pbc pipp.pbc $(PHP_EXT)

build-pct:       build-common

build-phc:       build-common

build-antlr3:    build-common
	@echo 'Be sure to have set CLASSPATH as laid out in docs/antlr3.pod'
	javac src/antlr3/*.java

# Target for building a standalone Pipp.
pipp$(EXE): build-common
	$(PBC_TO_EXE) pipp.pbc

src/common/pipplib.pbc: src/common/builtins.pir src/common/php_standard.pir $(PHP_SRC_STD_EXT) src/common/php_API.pir src/common/php_MACRO.pir
	$(PARROT) -o src/common/pipplib.pbc src/common/builtins.pir

src/common/php_ctype.pbc: src/common/php_ctype.pir src/common/php_MACRO.pir
	$(PARROT) -o src/common/php_ctype.pbc src/common/php_ctype.pir

src/common/php_gmp.pbc: src/common/php_gmp.pir src/common/php_MACRO.pir
	$(PARROT) -o src/common/php_gmp.pbc src/common/php_gmp.pir

src/common/php_pcre.pbc: src/common/php_pcre.pir src/common/php_MACRO.pir
	$(PARROT) -o src/common/php_pcre.pbc src/common/php_pcre.pir

src/pct/gen_grammar.pir: $(LIBRARY_DIR)/PGE/Perl6Grammar.pir src/pct/grammar.pg
	$(PARROT) $(LIBRARY_DIR)/PGE/Perl6Grammar.pir \
            --output=src/pct/gen_grammar.pir src/pct/grammar.pg

src/pct/gen_actions.pir: $(NQP) $(PCT) src/pct/actions.pm
	$(PARROT) $(NQP) --output=src/pct/gen_actions.pir \
  --target=pir src/pct/actions.pm

pipp.pbc: \
    src/common/pipp.pir \
    src/pct/gen_grammar.pir \
    src/pct/gen_actions.pir \
    src/pct/quote_expression.pir
	$(PARROT) -o pipp.pbc src/common/pipp.pir

pmc: $(HASH_OBJS) $(PHP_GROUP)

#Any change to the hash code means phparray needs to be relinked too.
#Recompiling is close enough for now.
$(HASH_OBJS): $(HASH_SOURCES) $(HASH_H)
	$(TOUCH) $(PMCDIR)/phparray.pmc
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) $(HASH_SOURCES) -c -g -o $(HASH_OBJS)

export DYNPMC_INCLUDE=$(PIPPDIR)
export DYNPMC_LINK=$(HASH_OBJS)

$(PHP_GROUP): $(PARROT) $(PMC_SOURCES)
	@cd $(PMCDIR) && $(PMCBUILD) generate $(PMCS)
	@cd $(PMCDIR) && $(PMCBUILD) compile $(PMCS)
	@cd $(PMCDIR) && $(PMCBUILD) linklibs $(PMCS)
	@cd $(PMCDIR) && $(PMCBUILD) copy "--destination=$(PARROT_DYNEXT)" $(PMCS)

test:     all test-pct

test-all: all test-php test-phc test-antlr3 test-pct test-pmc

test-php:
	- $(PERL) t/harness --with-php

test-phc:
	- $(PERL) t/harness --with-phc

test-antlr3:
	- $(PERL) t/harness --with-antlr3

test-pct:
	- $(PERL) t/harness --with-pct

# run the test suite, create a TAP archive and send it off to smolder
smolder_test : build
	- $(PERL) t/harness --with-pct --archive --send-to-smolder


# make sure debugging output is disabled while running the tests
export PMCDEBUG=

test-pmc: pmc
	@ prove -I../../lib t/pmc

# this does not work yet
test-pcc-testsuite: all t/pcc-testsuite
	cd t/pcc-testsuite && svn up
	cd t/pcc-testsuite && php dotest.php -d .

t/pcc-testsuite:
	svn co http:////code.roadsend.com//svn//pcc//trunk//pcc-testsuite t/pcc-testsuite

clean: clean-common clean-pct clean-antlr3 clean-test clean-hash

clean-common: clean-pmc
	$(RM_F) \
  src/common/pipplib.pbc \
  src/common/*.pbc \
  pipp.pbc \
  pipp.c pipp.o pipp

clean-pmc:
	$(RM_F) "$(PMCDIR)/*dump" "$(PMCDIR)/*.c" "$(PMCDIR)/pmc_*h" "$(PMCDIR)/php_group.h" "$(PMCDIR)/*$(O)" "$(PMCDIR)/*$(LOAD_EXT)"

clean-pct:
	$(RM_F) \
  src/pct/gen_grammar.pir \
  src/pct/gen_actions.pir

clean-antlr3:
	$(RM_F) \
  src/antlr3/*.class \
  src/antlr3/GenPastNqp.tokens \
  src/antlr3/Pipp.tokens \
  src/antlr3/Pipp__.g

clean-test:
	$(RM_F) \
  t/php/*.php \
  t/php/*.pir \
  t/php/*.out \
  t/pmc/*.pir \
  pipp_phc_ast.xml pipp_phc_past.xml pipp_phc_past.nqp pipp_phc_past.pir \
  pipp_antlr_past.nqp  pipp_antlr_past.pir

clean-hash:
	$(RM_F) "$(HASHDIR)/pipp_hash$(O)"

realclean: clean
	$(RM_F) Makefile

# Local variables:
# mode: makefile
# ex: ft=make
# End:
