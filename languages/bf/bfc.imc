# $Id$
# A Brainfuck compiler
# By Leon Brocard <acme@astray.com>
#
# See http://www.catseye.mb.ca/esoteric/bf/
# for more information on this silly language
.sub _main
  .local int pc
  .local int maxpc
  .local int label
  .local string labelstr
  .local string code
  .local string filename
  .local string file
  .local string line
  .local string program
  .local string char

  program = P5[0]
  # check argc
  I0 = P5
  if I0 < 2 goto usage
  # Get the filename
  filename = P5[1]
  if filename goto SOURCE
usage:
  print "usage: ../../parrot "
  print program
  print " file.bf\n"
  end

  # Read the file into S1
SOURCE:
  open P1, filename, "<"
  defined I0, P1
  if I0, SOURCE_LOOP
  print filename
  print " not found\n"
  branch usage
SOURCE_LOOP:
  read line, P1, 1024
  file = file . line
  if line goto SOURCE_LOOP
  close P1

  length maxpc, file

  # Initialise
  code =      "set I0, 0          # pc\n"
  concat code,  "new P0, .PerlArray # memory\n"
  concat code,  "set I1, 0          # pointer\n"
  concat code,  "getstdin P30\n"

  pc    = 0    # pc
  label = 0    # label count

  # The main compiler loop
INTERP:
  substr_r char, file, pc, 1
  concat code,  "\nSTEP"
  labelstr = pc
  concat code,  labelstr
  concat code,  ": # "
  concat code,  char
  concat code,  "\n"

  if char != "+" goto NOTPLUS
  concat code,  "set I2, P0[I1]\n"
  concat code,  "inc I2\n"
  concat code,  "band I2, 0xff\n"
  concat code,  "set P0[I1], I2\n"
  goto NEXT

NOTPLUS:
  if char != "-" goto NOTMINUS
  concat code,  "set I2, P0[I1]\n"
  concat code,  "dec I2\n"
  concat code,  "band I2, 0xff\n"
  concat code,  "set P0[I1], I2\n"
  goto NEXT

NOTMINUS:
  if char != ">" goto NOTGT
  concat code,  "inc I1\n"
  goto NEXT

NOTGT:
  if char != "<" goto NOTLT
  concat code,  "dec I1\n"
  goto NEXT

NOTLT:
  if char != "[" goto NOTOPEN

  I2 = 0 # "depth"

  label = pc
OPEN_LOOP:
  inc label
  substr S2, file, label, 1
  if S2 != "[" goto OPEN_NOTOPEN
  inc I2
  goto OPEN_LOOP
OPEN_NOTOPEN:
  if S2 != "]" goto OPEN_LOOP
  if I2 == 0 goto OPEN_NEXT
  dec I2
  goto OPEN_LOOP
OPEN_NEXT:
  inc label
  labelstr = label
  concat code,  "set I2, P0[I1]\n"
  concat code,  "unless I2, STEP"
  concat code,  labelstr
  concat code,  "\n"

  goto NEXT

NOTOPEN:
  if char != "]" goto NOTCLOSE

  label = pc
  I2 = 0 # "height"

CLOSE_LOOP:
  dec label
  substr S2, file, label, 1
  if S2 != "]" goto CLOSE_NOTCLOSE
  inc I2
  goto CLOSE_LOOP
CLOSE_NOTCLOSE:
  if S2 != "[" goto CLOSE_LOOP
  if I2 == 0 goto CLOSE_NEXT
  dec I2
  goto CLOSE_LOOP

CLOSE_NEXT:
  labelstr = label
  concat code,  "branch STEP"
  concat code,  labelstr
  concat code,  "\n"

  goto NEXT

NOTCLOSE:
  if char != "." goto NOTDOT
  concat code,  "set I2, P0[I1]\n"
  concat code,  "chr S31, I2\n"
  concat code,  "print S31\n"
  goto NEXT

NOTDOT:
  if char != "," goto NEXT
  labelstr = pc
  concat code,  "read S31, P30, 1\n"
  concat code,  "if S31, no_eof"
  concat code,  labelstr
  concat code,  "\n"
  concat code,  "null I2\n"
  concat code,  "branch eof"
  concat code,  labelstr
  concat code,  "\n"
  concat code,  "no_eof"
  concat code,  labelstr
  concat code,  ":\n"
  concat code,  "ord I2, S31\n"
  concat code,  "eof"
  concat code,  labelstr
  concat code,  ":\n"
  concat code,  "set P0[I1], I2\n"
  goto NEXT

NEXT:
  inc pc

  if pc < maxpc goto INTERP
  concat code,  "end\n"

#  print code
#  print "\n"

  # Now actually run it
  compreg P1, "PASM"
  compile P0, P1, code
 # invoke
  end
.end
