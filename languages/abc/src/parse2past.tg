transform root (ROOT) :language('PIR') {
    .local pmc past
    past = new 'PAST::Block'
    past.'init'('node'=>node, 'name'=>'anon')
    .local pmc cpast
    cpast = tree.'get'('past', node, 'ABC::Grammar::statement')
    past.'push'(cpast)
    .return (past)
}


transform past (ABC::Grammar::statement) :language('PIR') {
  if_statement:
    $P0 = node['if_statement']
    if null $P0 goto expression
    .return tree.'get'('past', $P0, 'ABC::Grammar::if_statement')
  expression:
    $P0 = node['expression']
    .local pmc cpast, past
    cpast = tree.'get'('past', $P0, 'ABC::Grammar::expression')
    past = cpast.'new'('PAST::Op', cpast, 'node'=>node, 'pirop'=>'say')
    .return (past)
}


transform past (ABC::Grammar::if_statement) :language('PIR') {
    .local pmc exprnode, thennode, elsenode
    exprnode = node['expression']
    $P0 = node['statement']
    thennode = $P0[0]
    elsenode = $P0[1]

    .local pmc past
    past = new 'PAST::Op'
    past.'init'('node'=>node, 'pasttype'=>'if')
    .local pmc exprpast, thenpast, elsepast
    exprpast = tree.'get'('past', exprnode, 'ABC::Grammar::expression')
    past.'push'(exprpast)
    thenpast = tree.'get'('past', thennode, 'ABC::Grammar::statement')
    past.'push'(thenpast)
    $I0 = defined elsenode
    if $I0 == 0 goto done_else
    elsepast = tree.'get'('past', elsenode, 'ABC::Grammar::statement')
    past.'push'(elsepast)
  done_else:
    .return (past)
}


transform past (ABC::Grammar::expression) :language('PIR') {
    $P0 = node['expr']
    .return tree.'get'('past', $P0, 'ABC::Grammar::expr')
}


transform past (ABC::Grammar::expr) :language('PIR') {
    .local string type
    type = node['type']
    if type == 'term:' goto past_term

    .local pmc optable, optok
    .local string pasttype, pirop, returns
    optable = get_hll_global [ 'ABC::Grammar' ], '$optable'
    optok = optable[type]
    pasttype = optok['past']
    pirop = optok['pirop']
    returns = optok['returns']

    .local pmc past, iter
    past = new 'PAST::Op'
    past.'init'('node'=>node, 'name'=>type, 'pasttype'=>pasttype, 'pirop'=>pirop, 'returns'=>returns)

    $P0 = node.'get_array'()
    if null $P0 goto iter_end
    iter = new .Iterator, $P0
  iter_loop:
    unless iter goto iter_end
    .local pmc cnode, cpast
    cnode = shift iter
    cpast = tree.'get'('past', cnode, 'ABC::Grammar::expr')
    if null cpast goto iter_loop
    past.'push'(cpast)
    goto iter_loop
  iter_end:
    .return (past)

  past_term:
    .return tree.'get'('past_term', node, 'ABC::Grammar::expr')
}


transform past_term (ABC::Grammar::expr) :language('PIR') {
    .local pmc past
    $I0 = node
    past = new 'PAST::Val'
    past.'init'('node'=>node, 'vtype'=>'.Integer', 'name'=>node, 'ctype'=>'n')
    .return (past)
}

