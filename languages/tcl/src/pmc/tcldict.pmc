/* TclDict.pmc
 *  Copyright (C) 2001-2003, The Perl Foundation.
 *  SVN Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the TclDict base class
 *  Data Structure and Algorithms:
 *  History:
 *  Notes:
 *  References:

=head1 NAME

pmc/tcldict.pmc - Tcl Dict PMC

=head1 DESCRIPTION

This is the Dictionary PMC for the Tcl implementation (for use with [dict])

=head2 Functions

=over 4

=cut

 */

#include "parrot/parrot.h"

pmclass TclDict
    need_ext
    dynpmc
    extends Hash
    provides    hash
    group   tcl_group
    hll     Tcl
    maps    Hash
{

/*

=item C<void assign_pmc(PMC *other)>

Copy the contents of other to self.

=cut

*/

    void set_pmc(PMC *other) {
        SELF.assign_pmc(other);
    }

    void assign_pmc(PMC *other) {
        STRING *hash   = string_from_cstring(INTERP, "hash", 4);
        STRING *undef  = string_from_cstring(INTERP, "Undef", 5);

        if (VTABLE_does(INTERP, other, hash))
        {
            PMC *iter = pmc_new_init(INTERP, enum_class_Iterator, other);

            pmc_reuse(INTERP, SELF, SELF->vtable->base_type, 0);
            while (VTABLE_get_bool(INTERP, iter))
            {
                STRING *key   = VTABLE_shift_string(INTERP, iter);
                PMC    *value = VTABLE_get_pmc_keyed_str(INTERP, other, key);
                VTABLE_set_pmc_keyed_str(INTERP, SELF, key, value);
            }
        }
        else if (VTABLE_isa(INTERP, other, undef))
        {
            pmc_reuse(INTERP, SELF, other->vtable->base_type, 0);
        }
        else
        {
            real_exception(INTERP, NULL, E_TypeError,
                           "unable to assign self to this TclDict");
        }
    }

/*

=item C<STRING *get_string()>

Returns the dict as a string

=cut

*/

    STRING* get_string() {
        PMC *dictToString, *namespace;
        STRING *_tcl_namespace, *sub;

        _tcl_namespace = string_from_cstring(INTERP, "_tcl", 4);
        sub            = string_from_cstring(INTERP, "__dictToString", 14);

        namespace = INTERP->root_namespace;
        namespace = VTABLE_get_pmc_keyed_str(INTERP, namespace, _tcl_namespace);
        dictToString = VTABLE_get_pmc_keyed_str(INTERP, namespace, sub);

        CONTEXT(INTERP->ctx)->constants =
          PMC_sub(dictToString)->seg->const_table->constants;
        return (STRING *)Parrot_runops_fromc_args(INTERP, dictToString, "SP", SELF);

    }
}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
