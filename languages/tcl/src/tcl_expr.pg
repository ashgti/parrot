grammar _Tcl::Grammar::Expr;

# The expression token is the top level expression - it is defined in 
# XXX-NAME-OF-SUB in XXX-NAME-OF-FILE, which in turn invokes the
# opcode parser from src/tcl_expr_optok.pg.

token term {
    [
    | <command>
    | <quoted>
    | <number>
    | <integer>
    | <function>
    ]
}

token command  { \[ (.*?) \] }
token quoted   { " ([\\.|<-["]>]*) : " }

token number  { [<[0..9]>+|0+]\.<[0..9]>* }
token decimal { [<[1..9]><[0..9]>*] }
token octal   { 0<[0..7]>*: }
token hex     { 0<[xX]><[0..9A..Fa..f]>+ }
token integer { [<decimal> | <octal> | <hex> ] }

token nullary_function { rand }

token unary_function { 
 abs    | acos   | asin   | atan   | ceil   | cosh?  | double | exp    |
 floor  | int    | log    | log10  | round  | sinh?  | sqrt   | srand  |
 tanh?  | wide
}

token binary_function { atan2 | fmod | hypot | pow }

token function { 
  [ <nullary_function> \( \)
  | <unary_function>   \( <expression: > \)
  | <binary_function>  \( <expression: > , <expression: > \)
  ] 
}
