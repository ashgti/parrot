###
# var_subst
#
# Given a string, return the starting point of the substitution,
# the length of the string being removed, and a string containing
# the replacement string, where the original string is:
#

#
# XXX - expr also has a way to get at variables. Before we add ANY
# other types of variables, these two bits of code need to be
# merged into a single bit. Non trivial at the moment.
#

# $var
#
# and the replacement string is the value of $var
#
# A len of -1 indicates that there was nothing to do.
#
# TODO:
#   support $array(foo)
#   support lexical scopes
#   support ${variable} syntax
#   remove ords, just use raw ascii

.sub __var_subst
  .param string arg
  .local string word

  # Need to make a copy, presumably because arg is REALLY a PerlString
  # that we munge.
  clone word, arg

  .include "languages/tcl/lib/macros/debug.imc"
  .const int debug = 0

  .debug("var_subst:called with word=")
  .debug(word)
  .debug("\n")

  .local int start_pos
  .local int replace_len
  .local string replace_str

  .local int ii
  .local int temppos
  .local string varname
  .local string sigil

  # .local string varindex  -- not currently used
  start_pos = 0
  replace_len = -1
  replace_str = ""

outer:
 .debug("var_subst:outer\n")


  sigil = "$"
  index start_pos, word, sigil
  .debug("var_subst:start_pos=")
  .debug(start_pos)
  .debug("\n")
  if start_pos == -1 goto done
  temppos = start_pos

inner:
  
  inc temppos

  # get last index pos
  length ii, word
  dec ii

  if temppos > ii goto inner_done

  ord ii, word, temppos

  # A
  if ii < 65 goto check2 
  # Z
  if ii <= 90 goto inner

check2:
  # a
  if ii < 97  goto check3
  # z
  if ii <= 122  goto inner

check3:
  # 0
  if ii < 48  goto check4
  # 9
  if ii <= 57 goto inner

check4:
  if ii == 95  goto inner

inner_done:

  # Once we get here, we could also have a () to deal with..

  # I'm not particularly happy with the way tcl matches up these ()'s...
  # It appears to grab the last possible ), regardless of where in the word
  # It may occur.
  if ii != 40 goto gotword
  print "This looks like an array variable. Barfing!\n"
  #index $I1, word, ")", -1


gotword:
  .debug("var_subst:gotword\n")
  # get the varname
  replace_len = temppos - start_pos

  # the name of the var is one shorter than the $...
  dec replace_len 
  inc start_pos

#
#  print "VARSUBSTR3\n" 
   .local string tmp_str
   substr tmp_str, word, start_pos, replace_len, ""

  .local PerlArray temp_array
  temp_array = new PerlArray 
  temp_array[0] = tmp_str

  (ii,replace_str) = __cmd_set(temp_array) 
  $P1 = new PerlArray
  $P1[0] =  replace_str

#  concat output, $S2
#
#  goto outer

  # now fixup the replace_len/start_pos to include the extra chars.
  dec start_pos
  inc replace_len
done:

  #concat output, word

  .debug ("var_subst:start_pos=")
  .debug (start_pos)
  .debug("\n")
  .debug ("var_subst:replace_len=")
  .debug (replace_len)
  .debug("\n")
  .debug ("var_subst:replace_str=")
  .debug (replace_str)
  .debug("\n")


  .pcc_begin_return
  .return start_pos
  .return replace_len
  .return replace_str
  .pcc_end_return

.end
