###
# [while]

.namespace [ "Tcl" ]

.sub "while"
  .param pmc cond_p
  .param pmc body_p

  .local pmc retval
  retval = new String

  # XXX no bad arg handling...

  .local pmc parsed_code
  .local int return_type

  .local pmc parser
  .local pmc interpret
  .local pmc expression_p
  .local pmc expression_i
  parser = find_global "_Tcl", "parser"
  interpret = find_global "_Tcl", "__interpret"
  expression_p = find_global "_Tcl", "__expression_parse"
  expression_i = find_global "_Tcl", "__expression_interpret"

  .local pmc zero
  zero = new Integer
  zero = 0 
while_loop:
  parsed_code = parser."parse"(body_p,zero,zero)
  (return_type,retval) = expression_p(cond_p)
  if return_type == TCL_ERROR goto done_done
  (return_type,retval) = expression_i(retval)
  if return_type == TCL_ERROR goto done_done
  unless retval goto done
  (return_type,retval) = interpret(parsed_code)
  if return_type == TCL_BREAK goto done
  if return_type == TCL_RETURN goto done

  goto while_loop

done:
  if return_type == TCL_RETURN goto done_cleaned
  if return_type == TCL_ERROR  goto done_cleaned
  retval = ""
  return_type = TCL_OK
  goto done_done

done_cleaned:
  retval = $S0 

done_done:
  # while always returns "", regardless of the code it may have executed
  # XXX - (unless there's an error)

  .return(return_type,retval)
.end
