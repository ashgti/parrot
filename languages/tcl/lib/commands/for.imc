###
# [for]

.sub __cmd_for
  .param PerlArray argv
 
  .local int argc 
  argc = argv

  # XXX no bad arg handling...

  .local string start
  .local string test
  .local string next
  .local string body
  .local pmc start_parsed
  .local pmc next_parsed
  .local pmc body_parsed
  .local int return_type

  start = argv[0]
  test  = argv[1]
  next  = argv[2]
  body  = argv[3]

  # Parse the bits that are code.
  start_parsed = __parse(start)
  next_parsed  = __parse(next)
  body_parsed  = __parse(body)

  # first, execute start.
  (return_type,$S0) = __interpret(start_parsed)
  if return_type != TCL_OK goto done

for_loop:
  # then execute body
  (return_type,$S0) = __interpret(body_parsed)
  if return_type == TCL_CONTINUE goto continue
  if return_type != TCL_OK goto done

continue:
  # then execute next
  (return_type,$S0) = __interpret(next_parsed)
  if return_type != TCL_OK goto done
  
  # then check condition
  $P0 = __expression(test)
  $S0 = $P0[1]
  $I0 = __expr_boolean($S0)
  if $I0 == 1 goto for_loop

done:
  # Propogate an error out, but not a break or continue.
  if return_type == TCL_RETURN goto done_cleansed
  if return_type == TCL_ERROR goto done_cleansed
  return_type = TCL_OK

done_cleansed:
  # for always returns "", regardless of the code it may have executed

  .pcc_begin_return
  .return 0
  .return ""
  .pcc_end_return
.end
