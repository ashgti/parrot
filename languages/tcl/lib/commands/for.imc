###
# [for]

.namespace [ "Tcl" ]

.sub "for"
  .param pmc start_p
  .param pmc test_p
  .param pmc next_p
  .param pmc body_p

  if I3 != 4 goto bad_args

  .local string start
  .local string next
  .local string body
  .local pmc start_parsed
  .local pmc next_parsed
  .local pmc body_parsed
  .local pmc retval
  retval = new String
  .local int return_type

  .local pmc joe # just a placeholder, not saved.

  .local pmc parser
  .local pmc interpret
  .local pmc expression_p
  .local pmc expression_i
  parser = find_global "_Tcl", "parser"
  interpret = find_global "_Tcl", "__interpret"
  expression_p = find_global "_Tcl", "__expression_parse"
  expression_i = find_global "_Tcl", "__expression_interpret"

  # Parse the bits that are code.
  $S0 = start_p
  start_parsed = parser."parse"($S0,0,0)
  $S0 = next_p
  next_parsed  = parser."parse"($S0,0,0)
  $S0 = body_p
  body_parsed  = parser."parse"($S0,0,0)

  # first, execute start.
  (return_type,joe) = interpret(start_parsed)
  if return_type != TCL_OK goto done

for_loop:
  # then execute body
  (return_type,joe) = interpret(body_parsed)
  if return_type == TCL_CONTINUE goto continue
  if return_type != TCL_OK goto done

continue:
  # then execute next
  (return_type,joe) = interpret(next_parsed)
  if return_type != TCL_OK goto done
  
  # then check condition
  (return_type,retval) = expression_p(test_p)
  if return_type == TCL_ERROR goto done_cleansed
  (return_type,retval) = expression_i(retval)
  if return_type == TCL_ERROR goto done_cleansed
  if retval goto for_loop
  goto done

bad_args:
  retval = "wrong # args: should be \"for start test next command\"\n"
  return_type = TCL_ERROR
  goto done_cleansed

done:
  retval = new String
  retval = ""
  # Propogate an error out, but not a break or continue.
  if return_type == TCL_RETURN goto done_cleansed
  if return_type == TCL_ERROR goto done_cleansed
  return_type = TCL_OK

done_cleansed:
  .return(return_type,retval)
.end
