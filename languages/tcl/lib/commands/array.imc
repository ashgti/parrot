###
# [array]

.namespace [ "Tcl" ]

.sub _array
  .local pmc argv
  argv = foldup

  .local int argc 
  argc = argv
  
  .local int TclArray
  TclArray = find_type "TclArray"

  .local int return_type
  return_type = TCL_OK
  .local pmc retval

  if argc < 2 goto error
  .local string array_name
  .local pmc the_array
  .local int is_array

  array_name = argv[1]

  .local pmc ignore
  newsub ignore, .Exception_Handler, catch

  set_eh ignore
    find_lex the_array, -1, array_name
  clear_eh

  isnull the_array, array_no 
  typeof $I0, the_array
  if $I0 != TclArray goto array_no

  is_array = 1
  goto subcommand

array_no:
  is_array = 0

subcommand:

  .local string subcommand
  subcommand = argv[0]

  #if subcommand == "anymore" goto NOTDONEYET
  #if subcommand == "donesearch" goto NOTDONEYET
  if subcommand == "exists" goto exists
  #if subcommand == "get" goto NOTDONEYET
  #if subcommand == "names" goto NOTDONEYET
  #if subcommand == "nextelement" goto NOTDONEYET
  if subcommand == "set" goto set
  if subcommand == "size" goto size
  #if subcommand == "startsearch" goto NOTDONEYET
  #if subcommand == "statistics" goto NOTDONEYET
  #if subcommand == "unset" goto NOTDONEYET

  goto error

# Is this really an array?
exists:
  retval = new Integer
  retval = is_array
  goto done

size:
  retval = new Integer
  if is_array == 0 goto size_none
  $I0 = the_array
  retval = $I0
  goto done
size_none:
  retval = 0
  goto done

set:
  retval = new String
  retval = ""
  # even only..
  $I0 = argc % 2
  if $I0 == 1 goto set_bad_args
  if argc == 3 goto set_bad_args
  
  # starting at argv[3]/argv[4], pull out all the key/value pairs and
  # set them.
  .local int loop 
  loop = 2
  .local string key
  .local string val
set_loop:
  key = argv[loop]
  inc loop
  val = argv[loop]
  inc loop
  the_array[key] = val
  if loop >= argc goto set_loop_done
  goto set_loop

set_loop_done:
  goto done

set_bad_args:
 return_type = TCL_ERROR
 retval = new String
 retval = "wrong # args: should be array set arrayName list" 
 goto done

error:
  # XXX - this isn't the right error message.
  print "Bad call to array: \n"
  goto done

done:
  .return(return_type,retval)

catch:
  P4 = P5["_invoke_cc"]
  invoke P4

.end
