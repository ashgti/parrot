###
# [append]

#
# append var [...]

.namespace [ "Tcl" ]

.sub "append"
  .local pmc argv
  argv = foldup

  .local int argc 
  argc = argv

  .local int return_type
  return_type = TCL_OK

  .local int call_level
  $P0 = find_global "_Tcl", "call_level"
  call_level = $P0

  .local pmc value
  .local int looper
 
  if argc == 0 goto error
  looper = 1

  $S1 = argv[0] 
if call_level goto find_lexical
  $P1 = find_global "Tcl", $S1
  goto found_variable
find_lexical:
  $P1 = find_lex call_level, $S1
found_variable:
  value = clone $P1 

loop:
  if looper == argc goto loop_done

  $S2 = argv[looper]
  concat value, $S2
  inc looper
  goto loop

loop_done:
  # clone so that the return value won't change if the stored
  # lexical/global is changed
  $P1 = clone value
if call_level goto set_lexical
  store_global "Tcl", $S1, $P1
  goto done
set_lexical:
  store_lex call_level, $S1, $P1

  goto done 

  # fall through to a bad call.

error:
  return_type = TCL_ERROR
  value = new TclString
  value = "wrong # args: should be \"append varName ?value value ...?\""

done:
  .return(return_type, value)
.end
