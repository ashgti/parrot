###
# [if]

.namespace [ "Tcl" ]

.sub _if
  .local pmc argv 
  argv = foldup
 
  .local int argc 
  argc = argv

  .local pmc elseifs
  elseifs = new PerlArray
  .local pmc retval
  .local string code
  .local pmc condition
  .local string body
  .local string else
  .local int return_type

  .local int counter

  .local pmc parse
  .local pmc interpret
  .local pmc expression
  .local pmc expr_boolean
  parse = find_global "_Tcl", "__parse"
  interpret = find_global "_Tcl", "__interpret"
  expression = find_global "_Tcl", "__expression"
  expr_boolean = find_global "_Tcl", "__expr_boolean"
 
  .local string temp_str
  temp_str ="" 

  # XXX each one of this argv[counter] sets should be protected
  # against getting past the end of the input array... 
 
  counter = 0
  condition = argv[counter]
  inc counter
  body = argv[counter]
  inc counter
  if body != "then" goto get_elseifs 
  body = argv[counter]
  inc counter
get_elseifs:
  if counter >= argc goto get_final
  temp_str = argv[counter]
  if temp_str != "elseif" goto get_else
  $P1 = new PerlArray
  inc counter
  $P2 = argv[counter]
  $P1[0] = $P2
  inc counter
  $P2 = argv[counter]
  $P1[1] = $P2
  push elseifs, $P1
  inc counter
  goto get_elseifs
get_else:
  temp_str = argv[counter]
  if temp_str != "else" goto get_final
  inc counter
  temp_str = argv[counter]
get_final:
  else = temp_str

  $P0 = expression(condition)
  # XXX happy case.
  temp_str = $P0[1]
  $I0 = expr_boolean(temp_str)

  if $I0 == 0 goto do_elseifs 
  code = body 
  goto done
 
do_elseifs:
  $I1 = elseifs
  if $I1 == 0 goto do_else
  $I2 = 0
elseif_loop:
  if $I2 == $I1 goto do_else
  $P1 = elseifs[$I2]
  condition = $P1[0]
  $P0 = expression(condition)
  #XXX happy case
  temp_str = $P0[1]
  $I0 = expr_boolean(temp_str)
  if $I0 == 1 goto done_elseifs
  inc $I2
  goto elseif_loop  

done_elseifs:
  code = $P1[1]
  goto done

do_else:
  code = else

done:
  #print "CODE='"
  #print code
  #print "'\n"
  $P1 = parse(code,0,0)
  (return_type,retval) = interpret($P1)

  .pcc_begin_return
    .return return_type
    .return retval
  .pcc_end_return
.end
