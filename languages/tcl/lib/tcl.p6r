grammar _TclRules;

rule command  { \[ (.*?) \] }
rule quotes   { " ([\\.|<-["]>]*) : " }

rule float   { [<[0..9]>+|0+]\.<[0..9]>* }
rule decimal { <[1..9]><[0..9]>*] }
rule octal   { 0<[0..7]>*: }
rule hex     { 0<[xX]><[0..9A..Fa..f]>+ }
rule number  { [<float> | <decimal> | <octal> | <hex> ] }

rule unaryop { <[\-+~!]> }

rule expr    {:w <logor> | <logor> \? <logor> : <logor> }
rule logor   {:w <logand>    [ (\|\|)          <logand>    ]* }
rule logand  {:w <bitor>     [ (&&)            <bitor>     ]* }
rule bitor   {:w <bitxor>    [ (\|)            <bitxor>    ]* }
rule bitxor  {:w <bitand>    [ (\^)            <bitand>    ]* }
rule bitand  {:w <listin>    [ (&)             <listin>    ]* }
rule listin  {:w <streq>     [ (in|ni)         <streq>     ]* }
rule streq   {:w <equals>    [ (eq|ne)         <equals>    ]* }
rule equals  {:w <compare>   [ (\==|\!=)       <compare>   ]* }
rule compare {:w <shifted>   [ (\<|\>|\<=|\>=) <shifted>   ]* }
rule shifted {:w <sum>       [ (\<\<|\>\>)     <sum>       ]* }
rule sum     {:w <term>      [ (<[+\-]>)       <term>      ]* }
rule term    {:w <power>     [ (<[*/%]>)       <power>     ]* }
rule power   {:w <unary>     [ (\*\*)          <unary>     ]* }
rule unary   {:w <unaryop>* <operand> }

rule operand { <number> | \( <expr> \) | <function> | <command> | <quotes> }

rule nullary_functions { rand }

rule unary_functions { 
  abs | acos | asin | atan | ceil | cosh? | double | exp | floor | int |
  log | log10 | round | sinh? | sqrt | srand | tanh? | wide
}

rule binary_functions { atan2 | fmod | hypot | pow }

rule function {
  <nullary_functions> \( \) |
  <unary_functions>   \( <expr> \) |
  <binary_functions>  \( <expr> , <expr> \)
}
