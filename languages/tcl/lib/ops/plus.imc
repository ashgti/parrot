# [expr +]

.sub __operand_plus
  .param pmc argv

  # requires 2 args, numeric only

  .local pmc result 
  result = new PerlArray


  # XXX assuming numeric

  # XXX also assuming 2 args.
  pop $P0, argv
  pop $P1, argv

  # XXX There has to be a better way to handle this proliferation of types.
  $I0 = $P0[0]
  $I1 = $P1[0]

  # XXX still ignoring strings.
  if $I0==FLOAT goto floats
  if $I1==FLOAT goto floats

integers:
  $I0 = $P0[1]
  $I1 = $P1[1]

  $I2 = $I0 + $I1

  result[0] = INTEGER
  result[1] = $I2 
  
  goto done

floats:
  $N0 = $P0[1]
  $N1 = $P1[1]

  $N2 = $N0 + $N1

  result[0] = FLOAT
  result[1] = $N2 

done:
  push argv, result
  .local int return_type
  return_type = result[0] 
  
  # should probably reverse these to be consistent-ish with return codes.
  .pcc_begin_return
  .return argv
  .return return_type
  .pcc_end_return   
.end
