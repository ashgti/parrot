/* TclArray.pmc
 *  Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
 *  CVS Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the TclArray base class
 *  Data Structure and Algorithms:
 *  History:
 *  Notes:
 *     Please remove unneeded entries.
 *  References:

=head1 NAME

dynclasses/tclarray.pmc - Tcl Array PMC

=head1 DESCRIPTION

This is the Array PMC for the Tcl implementation.

=head2 Functions

=over 4

=cut

 */

#include "parrot/parrot.h"

static INTVAL dynclass_TclInt;

/*

=item C<static STRING* make_hash_key(Interp *interpreter, PMC *key)>

Returns a Parrot string for C<*key>.

=cut

*/

static STRING* make_hash_key(Interp* interpreter, PMC * key)
{
    if (key == NULL) {
        internal_exception(OUT_OF_BOUNDS,
        "Cannot use NULL key for TclArray!");
        return NULL;
    }
    return key_string(interpreter, key);
}


pmclass TclArray extends Hash need_ext does hash dynpmc group tcl_group {

/*

=item C<void class_init()>

Initializes variables needed by the class.

=cut

*/

    void class_init () {
        if (pass) {
            dynclass_TclInt = Parrot_PMC_typenum(INTERP,"TclInt");
        }
    }

/*

=item C<PMC *get_pmc_keyed(PMC *key)>

Returns the PMC value for the element at C<*key>.

XXX - Why is Hash's implementation insufficient here??

=cut

*/


    PMC* get_pmc_keyed (PMC* key) {
        STRING* keystr = make_hash_key(INTERP, key);
        HashBucket *b = hash_get_bucket(INTERP, (Hash*) PMC_struct_val(SELF),
                                        keystr);
        PMC* nextkey;
        if (b == NULL) {
            return NULL;
        }
        nextkey = key_next(INTERP, key);
        if (!nextkey)
            return b->value;
        return VTABLE_get_pmc_keyed(INTERP, (PMC*)b->value, nextkey);
    }
}

/*

=back

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
