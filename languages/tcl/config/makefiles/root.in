RM_F    = @rm_f@
PERL    = @perl@
PARROT  = ../../parrot@exe@

C_BUILTIN = src/builtin
TCL_LIB   = library
PMCBUILD  = $(PERL) @build_dir@/tools/build/dynpmc.pl
OPSBUILD  = $(PERL) @build_dir@/tools/build/dynoplibs.pl
DESTDIR   = @build_dir@/runtime/parrot/dynext
O         = @o@
PMCDIR    = src/pmc
OPSDIR    = src/ops
CLASSDIR  = src/class
LOAD_EXT  = @load_ext@

PGE_DIR  = ../../compilers/pge
TGE_DIR  = ../../compilers/tge

OPSLIBS   = tcl

# can't use $(wildcard) and friends for PMCS, as these have to be in 
# dependency order; with no duplicates. 
PMCS = \
 tclobject \
 tclstring \
 tclint \
 tclfloat \
 tcllist \
 tclarray

GENERATED_INLINES = \
 $(C_BUILTIN)/break.pir \
 $(C_BUILTIN)/eof.pir \
 $(C_BUILTIN)/exit.pir \
 $(C_BUILTIN)/for.pir \
 $(C_BUILTIN)/incr.pir \
 $(C_BUILTIN)/join.pir \
 $(C_BUILTIN)/llength.pir \
 $(C_BUILTIN)/lrange.pir \
 $(C_BUILTIN)/pwd.pir \
 $(C_BUILTIN)/set.pir \
 $(C_BUILTIN)/time.pir \
 $(C_BUILTIN)/while.pir

RUNTIME_PIR = $(addprefix runtime/builtin/,$(notdir $(wildcard languages/tcl/runtime/builtin/*.pir)))

DEPS = \
$(C_BUILTIN)/auto_execok.pir \
$(C_BUILTIN)/auto_load.pir \
$(C_BUILTIN)/cd.pir \
$(C_BUILTIN)/close.pir \
$(C_BUILTIN)/continue.pir \
$(C_BUILTIN)/exec.pir \
$(C_BUILTIN)/expr.pir \
$(C_BUILTIN)/fconfigure.pir \
$(C_BUILTIN)/flush.pir \
$(C_BUILTIN)/glob.pir \
$(C_BUILTIN)/interp.pir \
$(C_BUILTIN)/list.pir \
$(C_BUILTIN)/lsearch.pir \
$(C_BUILTIN)/return.pir \
$(C_BUILTIN)/trace.pir \
$(C_BUILTIN)/update.pir \
runtime/conversions.pir \
runtime/list_to_string.pir \
runtime/string_to_list.pir \
runtime/variables.pir \
runtime/options.pir \
src/macros.pir \
src/returncodes.pir \
src/grammar/expr/expression.pir \
src/grammar/expr/functions.pir \
src/grammar/expr/parse.pir \
src/grammar/expr/operators.pir \
src/grammar/expr/past2pir.pir \
src/grammar/expr/pge2past.pir \
$(TCL_LIB)/parray.tcl \
$(RUNTIME_PIR)

all: tcl.pbc

tcl.pbc: $(PARROT) pmcs ops runtime/tcllib.pbc src/tclsh.pir
	$(PARROT) --output=tcl.pbc src/tclsh.pir

$(GENERATED_INLINES) : tools/gen_inline.pl

.SUFFIXES : .pir .tmt .pg .tg .tcl

.tmt.pir :
	$(PERL) tools/gen_inline.pl $< > $@

.tg.pir :
	$(PARROT) $(TGE_DIR)/tgc.pir --output=$@ $<

.pg.pir :
	$(PARROT) $(PGE_DIR)/pgc.pir --output=$@ $<

.pir.pbc :
    $(PARROT) --output=$@ $<

.tcl.pir :
	$(PARROT) tcl.pbc $< --pir > $@

CLASSES = \
  $(CLASSDIR)/tclconst.pir

pmcs:
	@cd $(PMCDIR) && $(PMCBUILD) generate $(PMCS)
	@cd $(PMCDIR) && $(PMCBUILD) compile $(PMCS)
	@cd $(PMCDIR) && $(PMCBUILD) linklibs $(PMCS)
	@cd $(PMCDIR) && $(PMCBUILD) copy "--destination=$(DESTDIR)" $(PMCS)

ops:
	@cd $(OPSDIR) && $(OPSBUILD) generate $(OPSLIBS)
	@cd $(OPSDIR) && $(OPSBUILD) compile $(OPSLIBS)
	@cd $(OPSDIR) && $(OPSBUILD) linklibs $(OPSLIBS)
	@cd $(OPSDIR) && $(OPSBUILD) copy "--destination=$(DESTDIR)" $(OPSLIBS)

runtime/builtins.pir: $(GENERATED_INLINES) $(DEPS) tools/gen_builtins.pl
	$(PERL) tools/gen_builtins.pl > runtime/builtins.pir

runtime/tcllib.pbc: $(PARROT) runtime/tcllib.pir runtime/builtins.pir $(CLASSES)
	$(PARROT) --output=runtime/tcllib.pbc runtime/tcllib.pir

tclsh: $(PARROT) tcl.pbc
	$(PARROT) --gc-debug tcl.pbc

test:	tcl.pbc
	prove t

# Can only run a few of these cleanly with test_more at the moment.
# eventually, as the list of commented out tests is smaller, just
# run them all. For now - only run the ones that will report properly
# to the harness (and pass at least one test), or those that have dubious
# failure modes

RUNNABLE_TCL_TESTS = \
  t_tcl/append.t \
  t_tcl/appendComp.t \
  t_tcl/apply.t \
  t_tcl/binary.t \
  t_tcl/compExpr.t \
  t_tcl/compExpr_old.t \
  t_tcl/concat.t \
  t_tcl/error.t \
  t_tcl/eval.t \
  t_tcl/expr.t \
  t_tcl/expr_old.t \
  t_tcl/for.t \
  t_tcl/for_old.t \
  t_tcl/foreach.t \
  t_tcl/format.t \
  t_tcl/get.t \
  t_tcl/if.t \
  t_tcl/if_old.t \
  t_tcl/incr.t \
  t_tcl/incr_old.t \
  t_tcl/info.t \
  t_tcl/join.t \
  t_tcl/lindex.t \
  t_tcl/linsert.t \
  t_tcl/llength.t \
  t_tcl/lrange.t \
  t_tcl/lrepeat.t \
  t_tcl/lreplace.t \
  t_tcl/lsearch.t \
  t_tcl/lsetComp.t \
  t_tcl/misc.t \
  t_tcl/namespace_old.t \
  t_tcl/package.t \
  t_tcl/parseOld.t \
  t_tcl/platform.t \
  t_tcl/proc.t \
  t_tcl/proc_old.t \
  t_tcl/pwd.t \
  t_tcl/regexp.t \
  t_tcl/rename.t \
  t_tcl/scan.t \
  t_tcl/security.t \
  t_tcl/set.t \
  t_tcl/set_old.t \
  t_tcl/split.t \
  t_tcl/subst.t \
  t_tcl/stringComp.t \
  t_tcl/switch.t \
  t_tcl/unknown.t \
  t_tcl/upvar.t \
  t_tcl/util.t \
  t_tcl/while.t \
  t_tcl/while_old.t

# These tests segfault or exit before any tests results are shown
SEGFAULTING_TCL_TESTS = \
  t_tcl/utf.t

# Tests we couldn't possibly pass any anyway:
UNIMPLEMENTED_TCL_TESTS = \
  t_tcl/clock.t \
  t_tcl/dict.t

# These tests parse but fail (or skip) every test.
FAILING_TCL_TESTS = \
  t_tcl/case.t \
  t_tcl/config.t \
  t_tcl/init.t            

# These tests parse but all are skipped due to harder [test] format.
# interp skips all due to lack of [interp] command
SKIPPED_TCL_TESTS = \
  t_tcl/assocd.t \
  t_tcl/chan.t \
  t_tcl/cmdInfo.t \
  t_tcl/dcall.t \
  t_tcl/dstring.t \
  t_tcl/history.t \
  t_tcl/indexObj.t \
  t_tcl/link.t \
  t_tcl/load.t \
  t_tcl/lset.t \
  t_tcl/notify.t \
  t_tcl/obj.t \
  t_tcl/pkg.t \
  t_tcl/pid.t \
  t_tcl/registry.t \
  t_tcl/result.t \
  t_tcl/socket.t \
  t_tcl/stack.t \
  t_tcl/thread.t \
  t_tcl/unload.t \
  t_tcl/winConsole.t \
  t_tcl/winFCmd.t \
  t_tcl/winNotify.t \
  t_tcl/winTime.t

# These test files die for various reasons.
#
# invalid command name "package"
#t_tcl/safe.t             t_tcl/winPipe.t         t_tcl/unixInit.t
#t_tcl/tm.t               t_tcl/opt.t
#
# invalid command name "set"
#t_tcl/uplevel.t
#
# invalid command name "update"
#t_tcl/event.t
#
# invalid command name "cleanupTests" ( namespace import/tcltest combo issue)
#t_tcl/parse.t            t_tcl/source.t
#
# bad option "command": must be args, body, cmdcount, commands, complete, 
#t_tcl/interp.t
#
# invalid command name "cd" (odd, since it *is* defined)
#t_tcl/cmdAH.t            t_tcl/ioUtil.t          t_tcl/macOSXFCmd.t
#t_tcl/unixFile.t         t_tcl/unixFCmd          
#
# can't read "env(test)": no such element in array
#t_tcl/env.t
#
#Name 'prefix:!' not found
#t_tcl/io.t
#
#[oops; continuation <foo> of type <bar> is trying to jump from runloop <baz> to runloop 1]
#t_tcl/ioCmd.t           t_tcl/main.t             
#
# src/string.c:972: failed assertion `src->encoding == Parrot_fixed_8_encoding_ptr'
#t_tcl/parseExpr.t        
#
# No such file or directory
#t_tcl/fileSystem.t      t_tcl/tcltest.t          t_tcl/fCmd.t
#t_tcl/fileName.t
#
# invalid command name "testobj"
#t_tcl/execute.t
#
# can't delete "run": command doesn't exist
#t_tcl/basic.t
#
# The opcode 'tcl_error' (tcl_error<0>) was not found
#t_tcl/async.t
#
# bad option "exist": must be args, body, cmdcount, commands, complete ...
#t_tcl/unixNotfy.t
#
# invalid command name "close"
#t_tcl/exec.t            t_tcl/winFile.t
#
# invalid command name "auto_load"
#t_tcl/autoMkindex.t
#
# Null PMC access in type()
#tcl/var.t             t_tcl/winDde.t          t_tcl/reg.t
#
# extra characters after close-brace (These tests require {expand}[list])
#t_tcl/encoding.t       t_tcl/namespace.t       t_tcl/iogt.t
#t_tcl/pkgMkIndex.t     t_tcl/trace.t
#
# can't read "result": no such variable
#t_tcl/regexComp.t
#
# invalid command name "x"
#t_tcl/timer.t
#
# invalid command name "PowerSet" {{ probable nested namespace bug }}
#t_tcl/msgcat.t
#
# can't read "expected": no such variable
#t_tcl/compile.t
#
# can't read "actual": no such variable
#t_tcl/listObj.t
#
# syntax error, unexpected LABEL (the compiled PIR is truncated. memory issue?)
#t_tcl/stringObj.t
#
# couldn't read file "0/httpd": no such file or directory
#t_tcl/http.t            t_tcl/httpold.t

tcl-test: t_tcl tcl.pbc
    # For now, just test the ones that ``work'' with test_more
	TEST_PROG_ARGS=-G prove $(RUNNABLE_TCL_TESTS)
t_tcl:
	$(PERL) tools/tcl_test.pl

devtest:
	cd t && $(PERL) -e 'use Test::Harness qw($$verbose runtests) ; $$Test::Harness::verbose=1;runtests(glob("*.t"))' && cd ..

CLEANERS = \
tcl.pbc \
runtime/builtins.pir \
"runtime/*.pbc" \
"$(CLASSDIR)/*.pbc" \
"$(PMCDIR)/pmc_*.h" \
"$(PMCDIR)/*_group.h" \
"$(PMCDIR)/*$(LOAD_EXT)" \
"$(PMCDIR)/*.dump" \
#CONDITIONED_LINE(ld_parrot_exe_def):"$(PMCDIR)/*.def" \
"$(PMCDIR)/*.c" \
"$(PMCDIR)/*$(O)" \
"t/*.pir" \
"t/*.tcl" \
src/grammar/expr/expression.pir \
src/grammar/expr/past2pir.pir \
src/grammar/expr/pge2past.pir \
$(GENERATED_INLINES) \
"$(OPSDIR)/*.c" \
"$(OPSDIR)/*.h" \
"$(OPSDIR)/*$(O)" \
"$(OPSDIR)/*.bundle" \
"$(TCL_LIB)/*.pir"

# that last line should be cleaned up for x-platform.

clean:
	$(RM_F) $(CLEANERS)

distclean: clean
	$(RM_F) Makefile

