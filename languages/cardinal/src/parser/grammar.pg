# $Id$

=begin overview

This is the grammar for cardinal written as a sequence of Perl 6 rules.

Currently taken (partly) from:
http://www.math.hokudai.ac.jp/~gotoken/ruby/man/yacc.html

=end overview

grammar cardinal::Grammar is PCT::Grammar;

rule TOP {
    <.nl>?
    <comp_stmt>
    [ $ || <panic: Syntax error> ]
    {*}
}

token comp_stmt {
    <stmts> <.term>*
    {*}
}

token stmts {
    <stmt> [ <.term>+ <stmt> ]*
    {*}
}

token term { \n | ';' }

rule basic_stmt {
    | <alias> {*}           #= alias
    | <expr> {*}            #= expr
}

rule alias {
    'alias' <fname> <fname>
    {*}
}

rule stmt {
    <basic_stmt> <stmt_mod>*
    {*}
}

rule stmt_mod {
    $<sym>=[if|while|unless|until] <expr>
    {*}
}

rule expr {
    | <command> {*}         #= command
    | <arg> {*}             #= arg
    | <assignment> {*}      #= assignment
    | <not_expr> {*}        #= not_expr
}

rule not_expr {
    'not' <expr>
    {*}
}


rule assignment {
    <mlhs> '=' <mrhs>
    {*}
}

rule mlhs {
    <mlhs_item>
    {*}
}

rule mlhs_item {
    | <lhs> {*}               #= lhs
    | '(' <mlhs> ')' {*}      #= mlhs
}

rule lhs {
    <variable>
    {*}
}

rule command {
    | <operation> <call_args> {*}
}

rule operation {
    <identifier>
    {*}
}

rule call_args {
    | <args> {*}
}

rule variable {
    <varname> {*}
}

rule varname {
    <!reserved_word>
    [ <global>
    | <instance_variable>
    | <identifier>
    ]
    {*}
}

rule mrhs {
    <args> {*}
}

rule args {
    <arg> [',' <arg>]*
    {*}
}

rule 'arg' is optable { ... }

proto 'infix:=' is precedence('1')      { ... }

proto 'infix:+' is tighter('infix:=')
                is pirop('n_add')       { ... }

proto 'infix:-' is equal('infix:+')
                is pirop('n_sub')       { ... }

proto 'infix:*' is tighter('infix:+')
                is pirop('n_mul')       { ... }

proto 'infix:/' is equal('infix:*')
                is pirop('n_div')       { ... }

proto 'term:'   is tighter('infix:+')
                is parsed(&primary)     { ... }


rule primary {
    | <literal> {*}        #= literal
    | <variable> {*}       #= variable
    | <functiondef> {*}    #= functiondef
    | <if_stmt> {*}        #= if_stmt
}

rule if_stmt {
    'if' <expr> 'then' <.nl>
    <comp_stmt>
    ['elsif' <expr> 'then' <.nl>
    <comp_stmt>]*
    ['else' <.nl> $<else>=<comp_stmt>]?
    'end'
    {*}
}

rule functiondef {
    'def' <fname> <argdecl>
    <comp_stmt>
    'end'
    {*}
}

rule bodystmt {
    <comp_stmt>
}

token nl {
    \n+
}

rule argdecl {
    '(' ')'
}

rule fname {
    | <identifier> {*}          #= identifier
}

token identifier {
    <!reserved_word> <ident> {*}
}

token global {
    '$' <ident>
    {*}
}

token instance_variable {
    '@' <ident>
    {*}
}

token local_variable {
    <[a..z_]> <ident>
    {*}
}

token constant_variable {
    <[A..Z]> <ident>
    {*}
}

token literal {
    | <float> {*}          #= float
    | <integer> {*}        #= integer
    | <string> {*}         #= string
}

token float {
    \d* '.' \d+
    {*}
}

token integer {
    \d+
    {*}
}

token string {
    [ \' <string_literal: '> \' | \" <string_literal: "> \" ]
    {*}
}

token reserved_word {
    [alias|and|BEGIN|begin|break|case
    |class|def|defined|do|else|elsif
    |END|end|ensure|false|for|if
    |in|module|next|nil|not|or
    |redo|rescue|retry|return|self|super
    |then|true|undef|unless|until|when
    |while|yield]>>
}

token ws {
    | '\\' \n                      ## a backslash at end of line
    | <after [','|'='|'+']> \n     ## a newline after a comma or operator is ignored
    | \h* ['#' \N* \n*]?
}
