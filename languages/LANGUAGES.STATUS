If you submit a language compiler please write a one-liner below
indicating roughly the state of your language. Does it have
samples, do they work? Is there a README and an easy way
to build it? The fields are: (N) Language name, (A) authors/maintainers, (D)
description, (S) status, (M) maintained, (V) minimum Parrot version required.


N: BASIC/compiler
A: Clint Pierce
A: Will Coleda (work with parrot 0.1.0+)
D: BASIC Compiler
S: Cautiously Optimistic - wumpus & screen examples seem to work again.
M: Yes
V: 0.0.11

N: BASIC/interpreter
A: Clint Pierce
D: BASIC Interpreter written in pure Parrot
S: Broken - probably due to changes in PIR syntax.
M: Yes
V: 0.0.11

N: befunge
A: Jerome Quelin
D: Functioning -93 interpreter (input routines may be funky).
S: Samples working, README explain how to build/use.
S: (waiting for Parrot objects for a befunge-98 version).
M: Yes
V: 0.0.11

N: bf
A: Leon Brocard

N: Cola
A: Melvin Smith
D: Java like language with some hybrid Perl features like regex
D: operators planned.
S: Functioning, all samples working, lacks IO routines
M: Yes
V: 0.0.11

N: forth
A: Dan Sugalski
M: yes
V: 0.0.13

N: IMCC
A: Melvin Smith
A: Angel Faus
A: Leopold Toetsch
D: The PIR and PASM compiler for Parrot
S: Functioning, all samples working
M: Yes (integral to Parrot)
V: 0.0.13

N: Jako
A: Gregor Purdy
D: C/Perl like language, first compiler for Parrot
S: Functioning, although not all examples work. Calling conventions and NCI
S: have changed since the Jako subroutine and NCI code
S: generation was written, causing some breakage.
M: Yes
V: 0.0.11

N: m4
A: Bernhard Schmalhofer
D: Port of GNU m4 to PIR
S: Functioning for handcrafted test cases.
S: Far from complete.
S: Revision 0.0.4
M: Yes
V: 0.1.0

N: miniperl

N: Ook
A: Jerome Quelin
D: Functioning compiler targeting pasm.
S: Samples working, README explain how to build/use.
M: Yes
V: 0.0.11

N: OpenComal
D: Compiler emiting parrot being added to interpreter
S: Under development; nowhere near anything yet
W: http://www.josvisser.nl/opencomal
V: 0.0.11

N: Parakeet
A: Michel Pelletier
D: Parakeet is a Forth that is extremely machine specific to the Parrot VM.
D: Parakeet also has a lot of features not found in standard Forth, like local
D: variables, nested words and classes and (as a result) nested
D: compile-time and run-time lexical word, class and variable scopes.
S: Under development;
S: Not in Parrot CVS
W: http://www.daca.net:8080/Parakeet-0.1.tgz 
V: 0.0.11

N: parrot_compiler

N: Perl6
A: Sean O'Rourke
D: Perl6 compiler written in Perl5
S: Largely functional, but changing rapidly
M: Yes
V: 0.0.11

N: Python
A: Michal J Wallace
S: Mostly working except for classes/exec/import. For licensing
S: reasons, not in parrot's cvs tree.
M: Yes
W: http://pirate.tangentcode.com/
V: 0.0.11

N: regex
A: Steve Fink
S: Working but fairly minimal
M: Yes

N: Ruby

N: Span
A: Matt Kennedy
D: Span can be most concisely described as
D: Smalltalk for C++, C#, and Java programmers. It features an object
D: system modeled on the Smalltalk object system and a language syntax
D: designed to be easy to learn for developers of C-like languages.
S: Working
S: Not in parrot CVS
W: http://homepage.mac.com/matt.kennedy/Span
M: Yes
V: 0.0.11

N: Scheme
A: Jeffrey Goff
A: Juergen Boemmels
S: Functioning, as far as implemented. Lists and functions are working
S: but many functions are missing implementation.
M: Yes
V: 0.0.11

N: tcl ("partcl")
A: Will Coleda
S: all tests pass, but not feature-complete
S: under active development
M: Yes
V: 0.1.0

N: URM
A: Marcus Thiesen
S: Functioning, all examples working
S: Language standard is stable and not expected to change soon.
M: Yes
V: 0.0.11

N: YAL
A: Leopold Toetsch
S: YAL is Yet Another Language
S: Its mainly intended to test an AST interface and for checking, if and how
S: code generation plays nicely together with Parrot opcodes.
W: http://toetsch.at/yal/
M: Yes
V: 0.0.13
