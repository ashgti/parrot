# $Id $

=head1 Languages targeting parrot

Any language that targets parrot should be listed here. In addition,
any languages bundled with parrot that work with the unified test
suite will have their test results listed under the smokes marked
'languages' at http://smoke.parrotcode.org/smoke/.

=head2 Amber for parrot

=over 4

=item Author

Roger Browne

=item Description

Scripting language inspired by Eiffel and ruby.

=item Status

Incomplete - but all examples and test cases are working.

=item Last verified with parrot version

0.3.1

=item Location

http://xamber.org/

=back


=head2 BASIC/compiler

=over 4

=item Author

Clint Pierce, Will Coleda (work with parrot 0.3.0+)

=item Description

BASIC Compiler

=item Status

Most of the samples work.

=item Last verified with parrot version

0.3.0

=item Location

C<languages/BASIC/compiler>

=back


=head2 BASIC/interpreter

=over 4

=item Author

Clint Pierce

=item Description

BASIC Interpreter written in pure Parrot

=item Status

Broken - probably due to recent deprecations.

=item Last verified with parrot version

0.0.11

=item Location

C<languages/BASIC/interpreter>

=back


=head2 bc

=over 4

=item Author

Bernhard Schmalhofer

=item Description

Based on ANTLR and Python. ANTLR is needed only for maintainance, for generation of Python runtime files. 

=item Status

Very simple arithmetic expressions are working. Some test failures

=item Last verified with parrot version

0.3.0

=item Location

C<languages/bc>

=back


=head2 befunge

=over 4

=item Author

Jerome Quelin

=item Description

Functioning -93 interpreter (input routines may be funky).

=item Status

Broken with recent deprecation of push[simp]/pop[simp]. Samples working,
README explain how to build/use. (waiting for Parrot objects for a
befunge-98 version).

=item Last verified with parrot version

0.0.11

=item Location

C<languages/befunge>

=back


=head2 bf

=over 4

=item Author

Leon Brocard

=item Description

bf

=item Status

Passes all tests.

=item Last verified with parrot version

0.3.1

=item Location

C<languages/bf>

=back

=head2 Cardinal

=over 4

=item Author

Mark Spashett

=item Description

Implementation of Ruby.

=item Status

Not active.

=item Last verified with parrot version

Unknown

=item Location

http://rubyforge.org/projects/cardinal/

=back


=head2 Cola

=over 4

=item Author

Melvin Smith

=item Description

Java like language with some hybrid Perl features like regex operators planned.

=item Status

Functioning, all samples working, lacks IO routines

=item Last verified with parrot version

0.0.11

=item Location

C<languages/cola>

=back


=head2 Common Lisp

=over 4

=item Author

Cory Spencer

=item Description

Aspires to implement a significant subset of the Common Lisp language.

=item Status

broken due to recent deprecations

=item Last verified with parrot version

0.1.2

=item Location

C<languages/lisp>

=back


=head2 conversion

=over 4

=item Author

Unknown

=item Description

An early attempt to support grammars in Bachus-Naur-Format

=item Status

Unknown

=item Last verified with parrot version

Unknown

=item Location

C<languages/conversion>

=back


=head2 forth

=over 4

=item Author

Dan Sugalski

=item Description

forth

=item Status

Unknown

=item Last verified with parrot version

0.0.13

=item Location

C<languages/forth>

=back


=head2 Jako

=over 4

=item Author

Gregor Purdy

=item Description

C/Perl like language, first compiler for Parrot

=item Status

Functioning, although not all examples work. Calling conventions and NCI
have changed since the Jako subroutine and NCI code generation was written,
causing some breakage.

=item Last verified with parrot version

0.0.11

=item Location

C<languages/jako>

=back


=head2 lazy-k

=over 4

=item Author

Leopold TE<ouml>tsch

=item Description

lazy-k is a pure functional programming language according to the SKI calculus.

=item Status

Unknown

=item Last verified with parrot version

0.2.2

=item Location

http://homepages.cwi.nl/~tromp/cl/lazy-k.html

=back


=head2 Lua for Pirate (formerly known as Pirate, a new name is sought)

=over 4

=item Author

Klaas-Jan Stol

=item Description

Making Lua work on Parrot

=item Status

Unknown

=item Last verified with parrot version

Unknown

=item Location

http://members.home.nl/joeijoei/parrot/

=back


=head2 Parrot m4

=over 4

=item Author

Bernhard Schmalhofer

=item Description

Port of GNU m4 to PIR.

=item Status

Functioning for handcrafted test cases. Eval compiler and loading frozen
state are currently broken. Far from complete. Revision 0.0.14

=item Last verified with parrot version

0.3.1

=item Location

C<languages/m4>

=back


=head2 miniperl

=over 4

=item Author

Jeff Goff

=item Description

miniperl

=item Status

Broken, last update in 2002. Should probably be removed.

=item Last verified with parrot version

Unknown

=item Location

C<languages/miniperl>

=back


=head2 Ook

=over 4

=item Author

Jerome Quelin

=item Description

Functioning compiler targeting pasm.

=item Status

Samples working, README explain how to build/use.

=item Last verified with parrot version

0.3.0

=item Location

C<languages/ook>

=back


=head2 OpenComal

=over 4

=item Author

Unknown

=item Description

Compiler emiting parrot being added to interpreter

=item Status

Under development; nowhere near anything yet

=item Last verified with parrot version

0.0.11

=item Location

http://www.josvisser.nl/opencomal

=back


=head2 Parakeet

=over 4

=item Author

Michel Pelletier

=item Description

Parakeet is a Forth that is extremely machine specific to the Parrot VM.
Parakeet also has a lot of features not found in standard Forth, like local
variables, nested words and classes and (as a result) nested compile-time and
run-time lexical word, class and variable scopes.

=item Status

Under development; Broken in respect to recent (and upcoming) DEPRECATED items

=item Last verified with parrot version

0.0.11

=item Location

C<languages/parakeet>

=back


=head2 parrot_compiler

=over 4

=item Author

Bernhard Schmalhofer played with it.

=item Description

An example on how the builtin PASM, PIR and PAST compilers can be used
from within PASM and PIR programs.

=item Status

Working. Part of languages smoke testing.

=item Last verified with parrot version

0.3.1

=item Location

C<languages/parrot_compiler>

=back


=head2 Pint

=over 4

=item Author

Alan Knowles

=item Description

An experimental implementation of PHP

=item Status

This project has been abandoned. Any takers?

=item Last verified with parrot version

Unknown

=item Location

http://www.akbkhome.com/svn.php/PintCompiler http://www.akbkhome.com/blog.php/View/44/Latest_in_Vapourware_PintCompiler__dbdo.html

=back


=head2 Pugs

=over 4

=item Author

Autrijus Tang, et al.

=item Description

Perl6 compiler written in Perl6 and Haskell with multiple backends

=item Status

Basic IO and control flow elements; mutable variables; assignment.

=item Last verified with parrot version

0.2.2

=item Location

http://pugscode.org/

=back


=head2 Punie

=over 4

=item Author

Allison Randal

=item Description

An implementation of Perl1, implemented in PIR with PGE

=item Status

There are some TODO thar are not working yet. 
Only the 'print 1;' test is expected to work, and does so.

=item Last verified with parrot version

0.3.1

=item Location

C<languages/punie>

=back


=head2 Python

=over 4

=item Author

Michal J Wallace

=item Description

python

=item Status

Mostly working except for classes/exec/import. For licensing reasons, not in 
parrot's svn tree.

=item Last verified with parrot version

0.0.11

=item Location

http://pirate.tangentcode.com/

=back


=head2 regex

=over 4

=item Author

Steve Fink

=item Description

regex

=item Status

Working but fairly minimal.
Part of languages smoke testing, a lot of tests failing.

=item Last verified with parrot version

0.3.1

=item Location

C<languages/regex>

=back


=head2 Ruby

=over 4

=item Author

Jeff Goff

=item Description

Ruby

=item Status

Broken. Last updated in 2002. Should probably be removed.

=item Last verified with parrot version

Unknown

=item Location

languages/ruby

=back


=head2 Span

=over 4

=item Author

Matt Kennedy

=item Description

Span can be most concisely described as Smalltalk for C++, C#, and Java
programmers. It features an object system modeled on the Smalltalk object
system and a language syntax designed to be easy to learn for developers of
C-like languages.

=item Status

Working.

=item Last verified with parrot version

0.0.11

=item Location

http://homepage.mac.com/matt.kennedy/Span

=back


=head2 Scheme

=over 4

=item Author

Jeffrey Goff, Juergen Boemmels

=item Description

Scheme

=item Status

Functioning, as far as implemented. Lists and functions are working but many
functions are missing implementation. 70% pass ratio due to recent deprecations.

=item Last verified with parrot version

0.3.0

=item Location

C<languages/scheme>

=back


=head2 Tcl ("partcl")

=over 4

=item Author

Will Coleda, Matt Diephouse, et al.

=item Description

A from scratch implementation of a Tcl 8.5 compiler in parrot.

=item Status

Some tests failing due to unimplemented unicode features.
Passes about 10% of *tcl*'s test suite (modulo clock).
Still many builtins to implement.

=item Last verified with parrot version

0.3.1

=item Location

C<languages/tcl>

=back


=head2 unlamba

=over 4

=item Author

Leopold TE<ouml>tsch

=item Description

unlambda is a pure functional programming language with mostly eager evaluation following the SKI calculus (+ a few extensions)

=item Status

Bus error (OS X only?)

=item Last verified with parrot version

0.2.2

=item Location

http://www.madore.org/~david/programs/unlambda/

=back


=head2 URM

=over 4

=item Author

Marcus Thiesen

=item Description

URM

=item Status

Functioning, all examples working. Language standard is stable and not
expected to change soon.

=item Last verified with parrot version

0.3.1

=item Location

C<languages/urm>

=back


=head2 YAL

=over 4

=item Author

Leopold TE<ouml>tsch

=item Description

Yet Another Language

=item Status

It's mainly intended to test an AST interface and for checking that
code generation plays nicely together with Parrot opcodes.

=item Last verified with parrot version

0.0.13

=item Location

http://toetsch.at/yal/

=back


=head2 Zcode

=over 4

=item Author

Amir Karger, Leopold TE<ouml>tsch

=item Description

Infocom's Z-machine

=item Status

25 out of 66 Z3 opcodes all or mostly done. A long way from Zork.
Broken with recent deprecations.

=item Last verified with parrot version

0.2.3

=item Location

C<languges/Zcode>

=back

