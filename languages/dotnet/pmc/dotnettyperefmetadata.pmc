/* .NET CLI TypeRef Metadata PMC */


#include "parrot/parrot.h"
#include "tableinfo.h"
#include "structures.h"


pmclass DotNetTypeRefMetadata dynpmc group dotnet {

    /* Instance initialization. We need a custom DOD marking and destroy. */
    void init()
    {
        PObj_custom_mark_SET(SELF);
        PObj_active_destroy_SET(SELF);
    }


    /* Get string vtable function; returns the name of the referenced type. */
    STRING* get_string()
    {
        struct dotnet_typeref *c = PMC_struct_val(SELF);

        /* Handle cases where we've an invalid PMC. */
        if (c == NULL || c->str_name == NULL)
        {
            real_exception(INTERP, NULL, E_StandardError, 
               "Invalid DotNetTypeRefMetadata PMC");
            return NULL;
        }
        else
            return c->str_name;
    }


    /* Garbage Collection mark routine. */
    void mark()
    {
        /* Tell the GC about stuff we're holding on to. */
        struct dotnet_typeref *c = PMC_struct_val(SELF);
		if (c)
		{
			if (c->str_name)
				pobject_lives(INTERP, (PObj*)c->str_name);
			if (c->str_namespace)
				pobject_lives(INTERP, (PObj*)c->str_namespace);
		}
    }


    /* Destructor. */
    void destroy()
    {
        /* Cleanup any memory we're using. */
        if (PMC_struct_val(SELF) != NULL)
        {
            free(PMC_struct_val(SELF));
            PMC_struct_val(SELF) = NULL;
        }
    }


    /* Get the namespace of the referenced type. */
	METHOD STRING* get_namespace()
    {
        struct dotnet_typeref *c = PMC_struct_val(SELF);

        /* Handle cases where we've an invalid PMC. */
        if (c == NULL)
        {
            real_exception(INTERP, NULL, E_StandardError, 
               "Invalid DotNetTypeRefMetadata PMC");
            return NULL;
        }
        else
            return c->str_namespace;
    }


    /* Get the resolution scope. */
	METHOD int get_resolution_scope()
    {
        struct dotnet_typeref *c = PMC_struct_val(SELF);

        /* Handle cases where we've an invalid PMC. */
        if (c == NULL)
        {
            real_exception(INTERP, NULL, E_StandardError, 
               "Invalid DotNetTypeRefMetadata PMC");
            return 0;
        }
        else
            return c->resolution_scope;
    }
}

