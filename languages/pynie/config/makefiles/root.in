# Copyright (C) 2007-2009, Parrot Foundation.
# $Id$

## arguments we want to run parrot with
PARROT_ARGS   :=

## configuration settings
VERSION       := @versiondir@
BIN_DIR       := @bin_dir@
LIB_DIR       := @lib_dir@$(VERSION)
DOC_DIR       := @doc_dir@$(VERSION)
MANDIR        := @mandir@$(VERSION)

# Set up extensions
LOAD_EXT      := @load_ext@
O             := @o@

# Various paths
PERL6GRAMMAR  := $(LIB_DIR)/library/PGE/Perl6Grammar.pbc
NQP           := $(LIB_DIR)/languages/nqp/nqp.pbc
PCT           := $(LIB_DIR)/library/PCT.pbc

## Setup some commands
MAKE          := @make_c@
PERL          := @perl@
CAT           := @cat@
CHMOD         := @chmod@
CP            := @cp@
MKPATH        := @mkpath@
RM_F          := @rm_f@
RM_RF         := @rm_rf@
POD2MAN       := pod2man
#IF(parrot_is_shared and not(cygwin or win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
PARROT        := $(BIN_DIR)/parrot@exe@
PBC_TO_EXE    := $(BIN_DIR)/pbc_to_exe@exe@
#IF(darwin):
#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@

SOURCES := \
  src/gen_grammar.pir \
  src/gen_actions.pir \
  src/gen_builtins.pir \
  src/parser/indent.pir \
  pynie.pir

BUILTINS_PIR := \
  src/builtins/funcs.pir \
  src/builtins/io.pir \
  src/builtins/lists.pir \
  src/builtins/oper.pir

DOCS := README

BUILD_CLEANUPS := \
  pynie.pbc \
  "src/gen_*.pir" \
  "*.c" \
  "*$(O)" \
  pynie@exe@ \
#IF(win32):  parrot-pynie.exe \
#IF(win32):  parrot-pynie.iss \
#IF(win32):  "setup-parrot-*.exe" \
  installable_pynie@exe@

TEST_CLEANUPS :=

# the default target
build: pynie.pbc

all: build pynie@exe@ installable

pynie.pbc: $(SOURCES)
	$(PARROT) $(PARROT_ARGS) -o pynie.pbc pynie.pir

pynie@exe@: pynie.pbc
	$(PBC_TO_EXE) pynie.pbc

src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/Grammar.pg
	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
	    --output=src/gen_grammar.pir src/parser/Grammar.pg

src/gen_actions.pir: $(NQP) src/parser/Actions.pm
	$(PARROT) $(PARROT_ARGS) $(NQP) --target=pir \
	    --output=src/gen_actions.pir src/parser/Actions.pm

src/gen_builtins.pir: $(BUILTINS_PIR)
	$(CAT) $(BUILTINS_PIR) > src/gen_builtins.pir

installable: installable_pynie@exe@

installable_pynie@exe@: pynie.pbc
	$(PBC_TO_EXE) pynie.pbc --install

Makefile: config/makefiles/root.in
	$(PERL) Configure.pl

# This is a listing of all targets, that are meant to be called by users
help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  build:             pynie.pbc"
	@echo "                     This is the default."
	@echo "  pynie@exe@          Self-hosting binary not to be installed."
	@echo "  all:               pynie.pbc pynie@exe@ installable"
	@echo "  installable:       Create libs and self-hosting binaries to be installed."
	@echo "  install:           Install the installable targets and docs."
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite."
	@echo "  test-installable:  Test self-hosting targets."
	@echo "  testclean:         Clean up test results."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
	@echo "  distclean:         Removes also anything built, in theory"
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

test: build
	$(PERL) -I$(LIB_DIR)/tools/lib t/harness

# basic run for missing libs
test-installable: installable
	echo "1" | ./installable_pynie@exe@

install: installable
	$(CP) installable_pynie@exe@ $(BIN_DIR)/parrot-pynie@exe@
	$(CHMOD) 0755 $(BIN_DIR)/parrot-pynie@exe@
	-$(MKPATH) $(LIB_DIR)/languages/pynie
	$(CP) pynie.pbc $(LIB_DIR)/languages/pynie/pynie.pbc
#	-$(MKPATH) $(MANDIR)/man1
#	$(POD2MAN) doc/running.pod > $(MANDIR)/man1/parrot-pynie.1
	-$(MKPATH) $(DOC_DIR)/languages/pynie
	$(CP) $(DOCS) $(DOC_DIR)/languages/pynie

uninstall:
	$(RM_F) $(BIN_DIR)/parrot-pynie@exe@
	$(RM_RF) $(LIB_DIR)/languages/pynie
#	$(RM_F) $(MANDIR)/man1/parrot-pynie.1
	$(RM_RF) $(DOC_DIR)/languages/pynie

win32-inno-installer: installable
#	-$(MKPATH) man/man1
#	$(POD2MAN) doc/running.pod > man/man1/parrot-pynie.1
#	-$(MKPATH) man/html
#	pod2html --infile doc/running.pod --outfile man/html/parrot-pynie.html
	$(CP) installable_pynie@exe@ parrot-pynie.exe
	$(PERL) $(LIB_DIR)/tools/dev/mk_inno_language.pl pynie
	iscc parrot-pynie.iss

testclean:
	$(RM_F) $(TEST_CLEANUPS)

clean:
	$(RM_F) $(TEST_CLEANUPS) $(BUILD_CLEANUPS)

realclean:
	$(RM_F) $(TEST_CLEANUPS) $(BUILD_CLEANUPS) Makefile

distclean: realclean

# Local variables:
#   mode: makefile
# End:
# vim: ft=make:

