grammar PunieGrammar;

regex prog    { ^<PunieGrammar::lineseq>$ }

regex block { \s* \{ <PunieGrammar::lineseq> \} \s* }

regex lineseq { \s*<PunieGrammar::line>*\s* }

regex line    { 
    [ <PunieGrammar::label> <PunieGrammar::cond> 
    | <PunieGrammar::label> <PunieGrammar::expr>;
    ] \s* 
}

regex label { \s* [<PunieGrammar::word>\:]? \s* }

regex word { \w[\w|\d]* }

regex else {
    (else) <PunieGrammar::block>
    | (elsif) \s* \( \s* <PunieGrammar::expr> \s* \)
              <PunieGrammar::block>
              <PunieGrammar::else>?
}

regex cond {
    (if|unless) \s* \( \s* <PunieGrammar::expr> \s* \)
              <PunieGrammar::block>
              <PunieGrammar::else>?
} 

regex expr    { <PunieGrammar::gprint> | <PunieGrammar::cexpr> }

regex gprint  { (print) \s* <PunieGrammar::expr> }

regex cexpr {
    <PunieGrammar::oexpr> \s* [, \s* <PunieGrammar::oexpr>]*
}

regex term {
    <PunieGrammar::number>
    | <PunieGrammar::integer>
    | <PunieGrammar::stringdouble>
    | <PunieGrammar::stringsingle>
    | do <PunieGrammar::block>
}
regex integer { \d+ }
regex number { \d+\.\d+ }
regex stringdouble { <PGE::Text::bracketed: "> }
regex stringsingle { <PGE::Text::bracketed: '> }


