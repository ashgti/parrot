grammar PunieGrammar;

token prog    { ^<lineseq>$ }

rule block { \s* \{ <lineseq> \} \s* }

rule lineseq { <line>* }

token line    { 
    <label>
    [ <cond> 
    | <expr>;
    ] \s* 
}

rule label { [<word>\:]? }

token word { \w[\w|\d]* }

rule else {
    (else) <block>
    | (elsif) \( <expr> \)
              <block>
              <else>?
}

rule cond {
    (if|unless) \( <expr> \)
              <block>
              <else>?
} 

rule expr    { <gprint> | <cexpr> }

rule gprint  { (print) <expr> }

rule cexpr {
    <oexpr> \s* [, \s* <oexpr>]*
}

regex term {
      \( <expr> \)
    | <variable>
    | <number>
    | <integer>
    | <stringdouble>
    | <stringsingle>
    | do <block>
}
rule variable { <sigil> <word> }
token sigil { <[$@%]> }
token integer { \d+ }
token number { \d+\.\d+ }
regex stringdouble { <PGE::Text::bracketed: "> }
regex stringsingle { <PGE::Text::bracketed: '> }

token ws {
    [ \s+
    | \# \N*
    ]*
}
