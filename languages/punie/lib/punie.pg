grammar PunieGrammar;

token prog    { ^<lineseq>$ }

rule block { \s* \{ <lineseq> \} \s* }

rule lineseq { <line>* }

token line    { 
    <label>
    [ <cond> 
    | <expr>;
    ] \s* 
}

rule label { [<word>\:]? }

token word { \w[\w|\d]* }

rule else {
    (else) <block>
    | (elsif) \( <expr> \)
              <block>
              <else>?
}

rule cond {
    (if|unless) \( <expr> \)
              <block>
              <else>?
} 

rule expr    { <gprint> | <cexpr> }

rule gprint  { (print) <expr> }

rule cexpr {
    <oexpr> \s* [, \s* <oexpr>]*
}

regex term {
      \( <expr> \)
    | <variable>
    | <number>
    | <integer>
    | <stringdouble>
    | <stringsingle>
    | do <block>
}
rule variable { <sigil> <word> }
token sigil { <[$@%]> }
token integer { \d+ }
token number { \d+\.\d+ }
regex stringdouble { <PGE::Text::bracketed: "> }
regex stringsingle { <PGE::Text::bracketed: '> }

token ws {
    [ \s+
    | \# \N*
    ]*
}

proto infix:+ is precedence('=') {...}
proto infix:- is equiv('infix:+') {...}
proto infix:. is equiv('infix:+') {...}
proto infix:* is tighter('infix:+') {...}
proto infix:/ is equiv('infix:*') {...}
proto infix:% is equiv('infix:*') {...}
proto infix:x is equiv('infix:*') {...}

proto infix:<< is looser('infix:+') {...}
proto infix:>> is equiv('infix:<<') {...}

proto infix:<  is looser('infix:<<') is assoc('non') {...}
proto infix:>  is equiv('infix:<')   is assoc('non') {...}
proto infix:<= is equiv('infix:<')   is assoc('non') {...}
proto infix:>= is equiv('infix:<')   is assoc('non') {...}
proto infix:lt is equiv('infix:<')   is assoc('non') {...}
proto infix:gt is equiv('infix:<')   is assoc('non') {...}
proto infix:le is equiv('infix:<')   is assoc('non') {...}
proto infix:ge is equiv('infix:<')   is assoc('non') {...}

proto infix:== is looser('infix:<') is assoc('non') {...}
proto infix:!= is equiv('infix:==') is assoc('non') {...}
proto infix:eq is equiv('infix:==') is assoc('non') {...}
proto infix:ne is equiv('infix:==') is assoc('non') {...}

proto infix:& is looser('infix:==') is assoc('left') {...}
proto infix:| is looser('infix:&')  is assoc('left') {...}
proto infix:^ is equiv('infix:|')   is assoc('left') {...}

proto infix:&& is looser('infix:|')  is assoc('left') {...}
proto infix:|| is looser('infix:&&') is assoc('left') {...}

proto infix:= is looser('infix:||') {...}
proto term: is tighter('infix:+') is parsed(&term) { ... }
