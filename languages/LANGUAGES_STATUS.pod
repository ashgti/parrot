# $Id$

=head1 What's this?

This file will be removed. The status of language implementations will be tracked on
L<https://trac.parrot.org/parrot/wiki/Languages>.

Most language implementations that target parrot are listed here.
At least the implementations that live in the 'languages' directory
of the parrot repository should be covered.

No author information is given here. This is because maintainers
should be tracked in the respective languages/*/MAINTAINER files, and we
don't want to repeat ourselves.

=head1 List of languages


=head2 Scheme to PIR with Chicken

=over 4

=item Description

Patching Chicken so that PIR is generated.

=item Status

Last modified in 2005. The website says:

    The compiler dumps out code, but I have not yet tried running the code yet.
    There are a few design issues left before the code can start running,
    and I am discussing these issues on the
    chicken-users and parrot-internals mailing lists.

=item Last verified with parrot version

Unknown

=item Location

L<http://pages.cs.wisc.edu/~lenz/parrot/>

=back


=head2 Common Lisp

=over 4

=item Description

Aspires to implement a significant subset of the Common Lisp language.

=item Status

Working for some simple forms.
Due to some broken features, most of the bootstrapping code
has been commented out.

=item Last verified with parrot version

0.7.1

=item Location

C<languages/lisp>

=back


=head2 .Net To PIR Translator

=over 4

=item Description

Translates .Net bytecode to PIR.

=item Status

Much is left to do, but it's complete enough to tranlate 75% of the .Net class
library.

=item Last verified with parrot version

0.4.15

=item Location

C<languages/dotnet>

=back





=head2 JSON

=over 4

=item Description

Implements JSON with the PCT. JSON is a
data description (sub) language.
Running the pct-based JSON language, just input some string on the command
line, like [1, 2, 3], and the output is dumped to stdout.

=item Status

unknown

=item Last verified with parrot version

not verified

=item Location

C<languages/json>

=back






=head2 Monkey, an implementation of Lua on Parrot

=over 4

=item Author

Klaas-Jan Stol

=item Description

Making Lua work on Parrot.  Implemented in C. The lexer is built with
Flex. The Parser is built with Bison.  TreeCC is used to generate the
code for creating the Abstract Syntax Tree.

There is also a Lua bytecode to PIR compiler at
L<http://kjs.home.fmf.nl/lua2pir/>

=item Status

Simple examples are working. The current version is 0.2.2.

=item Last verified with parrot version

0.2.x

=item Location

L<http://kjs.home.fmf.nl/parrot/>

The Lua PMCs are in C<languages/lua>.

=back



=head2 miniperl

=over 4

=item Description

miniperl

=item Status

Written by Jeff Goff. Unmaintained. Removed from trunk of Parrot subversion repository.

=item Last verified with parrot version

Unknown

=item Location

Up to revision 12805 of the Parrot subversion repository:
C<languages/miniperl>

=back


=head2 NQP

=over 4

=item Description

Not Quite Perl : lite-Perl6 implemented with PCT

=item Status

In progress.

=item Last verified with parrot version

0.7.1

=item Location

C<compilers/nqp>

=back


=head2 parrot_compiler

=over 4

=item Description

An example on how the builtin PASM, PIR and PAST compilers can be used
from within PASM and PIR programs.

=item Status

Working. Part of languages smoke testing.

=item Last verified with parrot version

0.7.1

=item Location

C<languages/parrot_compiler>

=back





=head2 PJS

=over 4

=item Description

PJS is a JavaScript (ECMAScript) implementation. It makes use of flex/bison for parsing.
It can only do basic things right now (variables, if-else, loops, try-catch-finally, eval, etc.).

=item Status

Started.

=item Last verified with parrot version

0.4.14

=item Location

L<http://users.fulladsl.be/spb1622/pjs/>

=item Wiki

L<http://www.perlfoundation.org/parrot/index.cgi?javascript>

=back



=head2 Python

=over 4

=item Description

python

=item Status

This project is stalled. 
It used to be mostly working except for classes/exec/import.
For licensing reasons, not in parrot's svn tree.

=item Last verified with parrot version

0.0.11

=item Location

L<http://pirate.tangentcode.com/>

=back

=head1 Defunct languages

This section will eventually be removed, for now serves as a pointer to
some older implementations.

=head2 Amber

Scripting language inspired by Eiffel and Ruby. Original version
targeted parrot, current version is self-contained. The PMCs for amber
were in the repository until 0.6.1. L<http://xamber.org/>

=head2 Parakeet

Parakeet was a Forth that was extremely machine specific to the Parrot VM.
Parakeet also had a lot of features not found in standard Forth, like local
variables, nested words and classes and (as a result) nested compile-time and
run-time lexical word, class and variable scopes.

Removed from the repository (C<languages/parakeet>)
prior to 0.4.10, after having been broken since 0.0.11.

Parakeet is also the name of a project the extends the Jikes RVM in order to run Parrot bytecode.
See L<http://parakeet.wiki.sourceforge.net/>.

=head2 BASIC/interpreter

BASIC interpreter was written in PASM, and used the global stack. It was last
verified working in 0.0.11 before it was removed from
C<languages/BASIC/interpreter> prior to 0.5.1.

=head2 Cardinal

The version at L<http://rubyforge.org/projects/cardinal/> has been superseded
by the one in the repository. (See above)

=head2 Perl 5

From r16836 up to r25231 F<languages/perl5> served as a repository
for some Perl 5 - specific functionality that was heavily used in early parrot development.

=head2 Pint

An experimental implementation of PHP. Described at
L<http://www.akbkhome.com/blog.php/View/44/Latest_in_Vapourware_PintCompiler__dbdo.html>,
but no updates since August 2004, and the link to source is a 404.

=head2 Plumhead

Plumhead was the PHP on Parrot implementation. It has been renamed to Pipp.

=head2 Ruby

Removed from trunk of Parrot subversion repository. Up to revision 12805,
located in C<languages/ruby>.

=head2 SFL

Simple functional language.
A quickly abandoned attempt.
See L<http://web.archive.org/web/20070911102734/http://www.acooke.org/andrew/writing/parrot/sfl.html>

=head2 Span

Span can be most concisely described as Smalltalk for C++, C#, and Java
programmers. It features an object system modeled on the Smalltalk object
system and a language syntax designed to be easy to learn for developers of
C-like languages. Last verified against parrot 0.1.11.
L<http://homepage.mac.com/matt.kennedy/Span>

=head2 TAP (Test Anything Protocol)

A parser for the Test Anything Protocol
Was located in C<languages/tap>, removed in r26661.


