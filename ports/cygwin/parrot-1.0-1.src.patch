--- origsrc/parrot-1.0/README_cygwin.pod	2009-02-17 21:43:31.000000000 +0100
+++ src/parrot-1.0/README_cygwin.pod	2009-03-08 13:05:24.828125000 +0100
@@ -68,14 +68,15 @@
 
 =item opengl
 
-You can use the w32api and opengl packages for native Windows opengl support,
-or the freeglut package for the X Server.
+Building is tricky:
 
-Configure.pl will detect freeglut if freeglut is installed and DISPLAY
-is set, otherwise it checks for w32api and opengl with GLUT.
-In case that freeglut is installed, DISPLAY must be set I<before> running
-Configure.pl. If not using freeglut, then DISPLAY must B<not> be set.
-C<export DISPLAY=127.0.0.1:0.0> is the typical setting.
+If the freeglut package for the X Server is installed, this
+is used, otherwise the w32api and opengl packages for native
+Windows opengl support are tried.  The problem is that the
+L<NCI|pdds/draft/pdd16_native_call.pod> tries the header
+files to create the imports and not the libraries, and if
+the /usr/include/GL headers are found these are used, despite 
+the w32api GLUT libraries are defined.
 
   Determining if your platform supports OpenGL.............yes, freeglut 3.4.
   Determining if your platform supports OpenGL...................yes, GLUT 3.
@@ -83,12 +84,12 @@
 
 Required packages:
 
-  w32api opengl
+  libglut-devel libGL-devel libGLU-devel libglut3 ... 
 
-or
+or if C<libglut-devel> and C<libGL-devel> is not installed:
 
-  freeglut libglut-devel xorg-x11-devel xorg-x11-base xorg-x11-bin-dlls
+  w32api opengl
 
 =item SDL
 
--- origsrc/parrot-1.0/config/auto/opengl.pm	2009-02-17 21:42:10.000000000 +0100
+++ src/parrot-1.0/config/auto/opengl.pm	2009-03-08 13:12:32.765625000 +0100
@@ -110,20 +110,24 @@
 see L<http://www.transmissionzero.co.uk/computing/using-glut-with-mingw/>.
 
 
-=head3 Cygwin/w32api
+=head3 Cygwin/X
 
-The Cygwin/w32api for native opengl support
+Requires a X server and F<libglut-devel>, F<libGL-devel>, F<libGLU-devel>,
+F<freeglut> and its dependencies.
 
-F<opengl>, F<w32api>
+This is tried first.
 
-=head3 Cygwin/X
+=head3 Cygwin/w32api
 
-Requires a X server.
+The Cygwin/w32api for native opengl support
+is only tried if F</usr/include/GL> does not exist.
 
-F<freeglut>, F<libglut-devel>, F<xorg-x11-devel>
+The problem is that the L<NCI|pdds/draft/pdd16_native_call.pod>
+tries the header files to create the imports and not the libraries,
+and if the F</usr/include/GL> headers are found these are used, despite
+the w32api GLUT libraries are defined.
 
-This is detected if freeglut is installed and DISPLAY is set.
-It requires an X server.
+F<opengl>, F<w32api>
 
 =cut
 
@@ -164,11 +168,11 @@
             conf            => $conf,
             osname          => $osname,
             cc              => $conf->data->get('cc'),
-            # Prefer Cygwin/w32api over Cygwin/X, but use X when DISPLAY is set
-            ($^O eq 'cygwin') ?
-             ($ENV{DISPLAY} ? (cygwin => '-lglut -L/usr/X11R6/lib -lGLU -lGL')
-                            : (cygwin => '/usr/bin/glut32.dll -lglu32 -lopengl32'))
+            ($^O eq 'cygwin') ?  # Cygwin/X is used when /usr/include/GL is found
+             (-d '/usr/include/GL'
+                ? (cygwin => '-lglut -L/usr/X11R6/lib -lGLU -lGL')
+                : (cygwin => '-lglut32 -lglu32 -lopengl32'))
              : (),
             win32_gcc       => '-lglut32 -lglu32 -lopengl32',
             win32_nongcc    => 'opengl32.lib glu32.lib glut32.lib',
--- origsrc/parrot-1.0/src/pmc/bignum.pmc	2009-02-17 21:40:50.000000000 +0100
+++ src/parrot-1.0/src/pmc/bignum.pmc	2009-03-08 00:38:23.953125000 +0100
@@ -1,6 +1,6 @@
 /*
-Copyright (C) 2004-2008, Parrot Foundation.
-$Id: bignum.pmc 36832 2009-02-17 19:58:58Z allison $
+Copyright (C) 2004-2009, Parrot Foundation.
+$Id: bignum.pmc 36901 2009-02-20 01:41:22Z chromatic $
 
 =head1 NAME
 
@@ -280,11 +280,12 @@
 
 static void
 bignum_add_bignum_float(PARROT_INTERP, PMC *self, FLOATVAL value, PMC *dest) {
-    BIGNUM *bn, *bn_self, *bn_dest;
+    BIGNUM *bn_value, *bn_self, *bn_dest;
+    GETATTR_BigNum_bn(interp, self, bn_value);
     GETATTR_BigNum_bn(interp, self, bn_self);
     GETATTR_BigNum_bn(interp, dest, bn_dest);
-    mpf_set_d(bn->b, value);
-    mpf_add(bn_dest->b, bn_self->b, bn->b);
+    mpf_set_d(bn_value->b, value);
+    mpf_add(bn_dest->b, bn_self->b, bn_value->b);
 }
 
 static void
@@ -309,11 +310,12 @@
 
 static void
 bignum_sub_bignum_float(PARROT_INTERP, PMC *self, FLOATVAL value, PMC *dest) {
-    BIGNUM *bn, *bn_self, *bn_dest;
+    BIGNUM *bn_tmp, *bn_self, *bn_dest;
+    GETATTR_BigNum_bn(interp, self, bn_tmp);
     GETATTR_BigNum_bn(interp, self, bn_self);
     GETATTR_BigNum_bn(interp, dest, bn_dest);
-    mpf_set_d(bn->b, value);
-    mpf_sub(bn_dest->b, bn_self->b, bn->b);
+    mpf_set_d(bn_tmp->b, value);
+    mpf_sub(bn_dest->b, bn_self->b, bn_tmp->b);
 }
 
 static void
@@ -335,11 +337,12 @@
 
 static void
 bignum_mul_bignum_float(PARROT_INTERP, PMC *self, FLOATVAL value, PMC *dest) {
-    BIGNUM *bn, *bn_self, *bn_dest;
+    BIGNUM *bn_tmp, *bn_self, *bn_dest;
+    GETATTR_BigNum_bn(interp, self, bn_tmp);
     GETATTR_BigNum_bn(interp, self, bn_self);
     GETATTR_BigNum_bn(interp, dest, bn_dest);
-    mpf_set_d(bn->b, value);
-    mpf_mul(bn_dest->b, bn_self->b, bn->b);
+    mpf_set_d(bn_tmp->b, value);
+    mpf_mul(bn_dest->b, bn_self->b, bn_tmp->b);
 }
 
 static void
