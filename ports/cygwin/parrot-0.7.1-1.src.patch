--- origsrc/parrot-0.7.1/Configure.pl	2008-09-17 00:16:35.000000000 +0200
+++ src/parrot-0.7.1/Configure.pl	2008-09-18 20:27:41.968750000 +0200
@@ -65,6 +65,8 @@
 
 # from Parrot::Configure::Data
 $conf->options->set( %{$args} );
+# save the command-line
+$conf->data->set(config_args => join(" ", @ARGV));
 
 # Log files created by Configure.pl in MANIFEST.configure.generated
 $conf->{active_configuration} = 1;
--- origsrc/parrot-0.7.1/MANIFEST	2008-09-17 06:47:20.000000000 +0200
+++ src/parrot-0.7.1/MANIFEST	2008-09-18 20:27:42.000000000 +0200
@@ -1057,6 +1057,10 @@
 languages/PIR/t/sym.t                                       [PIR]
 languages/PIR/t/whitespace.t                                [PIR]
 languages/WMLScript/MAINTAINER                              [WMLScript]
+languages/WMLScript/WMLScript/wmlsconsole.pir               [WMLScript]
+languages/WMLScript/WMLScript/wmlsfloat.pir                 [WMLScript]
+languages/WMLScript/WMLScript/wmlslang.pir                  [WMLScript]
+languages/WMLScript/WMLScript/wmlsstring.pir                [WMLScript]
 languages/WMLScript/build/SRM/Register.pm                   [WMLScript]
 languages/WMLScript/build/SRM/Stack.pm                      [WMLScript]
 languages/WMLScript/build/stdlibs.pl                        [WMLScript]
@@ -1071,10 +1075,6 @@
 languages/WMLScript/pmc/wmlsinteger.pmc                     [WMLScript]
 languages/WMLScript/pmc/wmlsinvalid.pmc                     [WMLScript]
 languages/WMLScript/pmc/wmlsstring.pmc                      [WMLScript]
-languages/WMLScript/runtime/wmlsconsole.pir                 [WMLScript]
-languages/WMLScript/runtime/wmlsfloat.pir                   [WMLScript]
-languages/WMLScript/runtime/wmlslang.pir                    [WMLScript]
-languages/WMLScript/runtime/wmlsstring.pir                  [WMLScript]
 languages/WMLScript/src/WMLScript.pir                       [WMLScript]
 languages/WMLScript/src/script.pir                          [WMLScript]
 languages/WMLScript/src/translation.rules                   [WMLScript]
--- origsrc/parrot-0.7.1/README_cygwin.pod	2008-09-17 00:16:35.000000000 +0200
+++ src/parrot-0.7.1/README_cygwin.pod	2008-09-18 20:27:42.000000000 +0200
@@ -6,37 +6,98 @@
 
 =head1 SYNOPSIS
 
-Parrot builds out of the box under Cygwin.  Some tweaks are needed for
-different names of dynamic loading of some dll's.
+Parrot builds out of the box under Cygwin after 
+C<export PATH=`pwd`/blib/lib:$PATH>
+
+There are official cygwin parrot packages available via
+L<http://cygwin.com/setup.exe>.
+
+  parrot libparrot0 libparrot-devel parrot-perl6 parrot-languages
+
+Some tweaks are needed for different names for the ffi to some dll's.
+See L</loadlib DLL versioning>
+
 
 =head1 Packages
 
-You'll need the following Cygwin packages to build Parrot.
+You'll need the following Cygwin packages to run and build Parrot 
+by your own.
 
-=over 4
+Runtime requirements:
+
+  libreadline6 ncurses libintl8 libgmp3 libgdbm4
+
+Optional requirements:
+
+  libicu38 libpq5 openssl
+
+  for opengl: w32api opengl or libglut3 xorg-x11-base xorg-x11-bin-dlls
+
+Build requirements:
+
+  gcc make perl parrot readline libncurses-devel libgmp-devel
+  libgdbm-devel pcre-devel 
+
+Optional build requirements:
+
+  libicu-devel openssl-devel 
+
+  for Cygwin/X opengl: freeglut libglut-devel xorg-x11-devel 
+
+Optional perl packages for testing: 
+
+  L<Test::TAP::HTMLMatrix> if you want to run the language smoke tests
+  with C<make languages-smoke>.
 
-=item gcc
+  L<Test::Base> for some APL language tests.
 
-=item make
+  perl L<Moose> for smartlink
 
-=item perl
+  perl L<Test::Perl::Critic> and L<Perl::Critic>
 
-=item subversion
+=over 4
+
+=item Cygwin subversion and perl
 
 If you use SVN to get a copy of Parrot, you should use the Cygwin SVN
 and not the TortoiseSVN client to avoid build errors.  Similarly you will
 need Cygwin Perl rather than ActiveState or Strawberry Perl.
 
-=item ICU
-
-This is no official Cygwin package yet.  However, icu4c-3_8 builds out of the
-box on Cygwin.
-
-  http://download.icu-project.org/files/icu4c/3.8/icu4c-3_8-src.tgz
+=item icu
 
 Note that ICU is now optional, you can build Parrot without it,
 by not installing it or asking Parrot to ignore it (C<--without-icu>).
 
+=item opengl
+
+You can use the w32api and opengl packages for native Windows opengl support,
+or the freeglut package for the X Server.
+
+Configure.pl will detect freeglut if freeglut is installed and DISPLAY 
+is set, otherwise it checks for w32api and opengl with GLUT.
+
+  Determining if your platform supports OpenGL.............yes, freeglut 3.4.
+  Determining if your platform supports OpenGL...................yes, GLUT 3.
+  Determining if your platform supports OpenGL............................no.
+
+Required packages:
+
+  w32api opengl
+
+or 
+
+  freeglut libglut-devel xorg-x11-devel xorg-x11-base xorg-x11-bin-dlls
+
+=item SDL
+
+SDL references F<cygSDL-1-2-0.dll>, which is only in cygports
+L<http://news.gmane.org/gmane.os.cygwin.ports.announce>
+
+=item aio
+
+libaio-devel "Linux-native asynchronous I/O access" is not available
+for cygwin, and as the name says it will never be :)
+
 =back
 
 =head1 BUILD
@@ -53,21 +114,25 @@
 
 =item Makefile tuning
 
-rename libparrot.dll to cygparrot.dll, create an interim libparrot.dll.a
+Rename libparrot.dll to cygparrot0_6_x.dll and create an interim
+libparrot.dll.a
 
-fix the blib/lib PATH issue
+  [perl #56998] [TODO]  rename cygwin dll to cygparrot$MAJOR_$MINOR_$PATCH.dll
+  [perl #56562] [PATCH] root.in: add cygwin importlib
 
-=item DLL versioning
+=item loadlib DLL versioning
 
-cyg*-1.1.dll instead of lib*.so.1.1
+Use cyg*-1.1.dll naming conventions instead of lib*.so.1.1 names for
+loadlib, the FFI.
 
-Thanks to the L<Windows DLL Hell / http://> and the impossibility of file
-hardlinks, windows dll names are versioned, so the loadlib function or the
-various pir's needs more logic.
+Thanks to the L<Windows DLL Hell / http://?> and the impossibility of
+file hardlinks, windows dll names are versioned, so the loadlib
+function or the various pir's needs more logic.
 
-Either add the version to each loadlib call, and stem the version from POSIX
-versions within get_path(), or add an optional version argument to loadlib for
-win32. Or just fix all the pir's.
+Either add the version to each loadlib call, and stem the version from
+POSIX versions within get_path(), or add an optional version argument
+to loadlib for win32. Or just fix all the pir's, which will be easier
+when exceptions work again.
 
 =item Features
 
--- origsrc/parrot-0.7.1/README_win32.pod	2008-09-17 00:16:35.000000000 +0200
+++ src/parrot-0.7.1/README_win32.pod	2008-09-18 20:27:42.015625000 +0200
@@ -155,6 +155,10 @@
 Note: It is possible to use ActiveState Perl with the Toolkit: you don't
 have to compile your own perl.
 
+If you want to use MSVC with a mingw-gcc perl you can use 
+C<--cc=cl --link=link>. Just F<ar> in F<config_lib.pasm> has to be changed 
+to F<lib> and C<LIBPARROT = $(LIBPARROT_STATIC)> in F<Makefile>.
+
 =item Strawberry Perl
 
 With the Strawberry perl distro from
--- origsrc/parrot-0.7.1/config/auto/opengl.pm	2008-09-17 00:15:29.000000000 +0200
+++ src/parrot-0.7.1/config/auto/opengl.pm	2008-09-18 20:27:42.031250000 +0200
@@ -114,14 +114,16 @@
 
 The Cygwin/w32api for native opengl support
 
-F<-lglut32 -lglu32 -lopengl32>
-
+F<opengl>, F<w32api>
 
 =head3 Cygwin/X
 
 Requires a X server.
 
-F<freeglut>, F<libglut-devel>
+F<freeglut>, F<libglut-devel>, F<xorg-x11-devel>
+
+This is detected if freeglut is installed and DISPLAY is set.
+It requires an X server.
 
 =cut
 
@@ -167,25 +169,20 @@
 
     my $osname = $conf->data->get_p5('OSNAME');
 
-    # Prefer Cygwin/w32api over Cygwin/X, but use X when DISPLAY is set
-    if ($^O eq 'cygwin' and $ENV{DISPLAY}) {
-        $self->_add_to_libs( {
-            conf        => $conf,
-            osname      => $osname,
-            cc          => $cc,
-            cygwin      => '-lglut -L/usr/X11R6/lib -lGLU -lGL'
-        } )
-    }
-    else {
-        $self->_add_to_libs( {
+    $self->_add_to_libs( {
             conf            => $conf,
             osname          => $osname,
             cc              => $cc,
+            # Prefer Cygwin/w32api over Cygwin/X, but use X when DISPLAY is set
+            ($^O eq 'cygwin') ?
+             ($ENV{DISPLAY} ? (cygwin => '-lglut -L/usr/X11R6/lib -lGLU -lGL')
+                            : (cygwin => '-lglut32 -lglu32 -lopengl32'))
+             : (),
             win32_gcc       => '-lglut32 -lglu32 -lopengl32',
             win32_nongcc    => 'opengl32.lib glu32.lib glut32.lib',
             darwin          => '-framework OpenGL -framework GLUT',
             default         => '-lglut -lGLU -lGL',
-    } ) };
+    } );
 
     # On OS X check the presence of the OpenGL headers in the standard
     # Fink/macports locations.
--- origsrc/parrot-0.7.1/config/gen/config_pm/config_lib.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/config_pm/config_lib.in	2008-10-03 10:02:51.125000000 +0200
@@ -12,7 +12,7 @@
 
 	<<PCONFIG>>
 
-	if I11, is_install
+	ge I11, 1, is_install
 	set S1, "<<PWD>>"
 	set P0["prefix"], S1
 is_install:
--- origsrc/parrot-0.7.1/config/gen/languages.pm	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/languages.pm	2008-09-18 20:27:42.031250000 +0200
@@ -76,7 +76,7 @@
         }
         elsif ( $language eq 'c99' ) {
             $conf->genfile("$langdir/config/makefiles/root.in"     => "$langdir/Makefile");
-            $conf->genfile("$langdir/config/makefiles/cpp.in"      => "$langdir/src/cpp//Makefile");
+            $conf->genfile("$langdir/config/makefiles/cpp.in"      => "$langdir/src/cpp/Makefile");
         }
         elsif ( $language eq 'tcl' ) {
             # tcl has more than one Makefile
--- origsrc/parrot-0.7.1/config/gen/makefiles/bcg.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/bcg.in	2008-08-27 18:57:43.000000000 +0200
@@ -1,25 +1,25 @@
-RM_F		    = @rm_f@
-PERL		    = @perl@
+RM_F		= @rm_f@
+PERL		= @perl@
 PARROT	    	= @build_dir@/parrot@exe@
-#CONDITIONED_LINE(win32):LIBPARROT = @build_dir@/libparrot@a@
-#INVERSE_CONDITIONED_LINE(win32):LIBPARROT = @build_dir@/@blib_dir@/libparrot@a@
-O		        = @o@
-LOAD_EXT	    = @load_ext@
-CC         	    = @cc@
-CC_INC     	    = @cc_inc@ -I@build_dir@/include
-C_LIBS     	    = @libs@ 
-CC_SHARED  	    = @cc_shared@
-CFLAGS     	    = $(CC_INC) @ccflags@ @cc_debug@ @ccwarn@ @cc_hasjit@ @cg_flag@ @gc_flag@ $(CC_SHARED)
+#IF(win32):LIBPARROT = @build_dir@/libparrot@a@
+#ELSE:LIBPARROT = @build_dir@/@blib_dir@/libparrot@a@
+O		= @o@
+LOAD_EXT	= @load_ext@
+CC         	= @cc@
+CC_INC     	= @cc_inc@ -I@build_dir@/include
+C_LIBS     	= @libs@
+CC_SHARED  	= @cc_shared@
+CFLAGS     	= $(CC_INC) @ccflags@ @cc_debug@ @ccwarn@ @cc_hasjit@ @cg_flag@ @gc_flag@ $(CC_SHARED)
 LINK_DYNAMIC  	= @link_dynamic@
-LINK       	    = @link@
-LINKFLAGS  	    = @linkflags@ @link_debug@ @ld_debug@ 
-LD         	    = @ld@
-#CONDITIONED_LINE(win32):LDFLAGS = @ldflags@ @ld_debug@ $(LIBPARROT)
-#INVERSE_CONDITIONED_LINE(win32):LDFLAGS = @ldflags@ @ld_debug@ -L@build_dir@/blib/lib/ -lparrot
+LINK       	= @link@
+LINKFLAGS  	= @linkflags@ @link_debug@ @ld_debug@
+LD         	= @ld@
+#IF(win32):LDFLAGS = @ldflags@ @ld_debug@ $(LIBPARROT)
+#ELSE:LDFLAGS = @ldflags@ @ld_debug@ -L@build_dir@/blib/lib/ -lparrot
 SHARE_EXT       = @share_ext@
 LD_SHARE_FLAGS  = @ld_share_flags@
 BUILD_PMC   	= $(PERL) @build_dir@/tools/build/dynpmc.pl
-SRC_PMC_DIR	    = src/pmc
+SRC_PMC_DIR	= src/pmc
 DEST_PMC_DIR	= @build_dir@/runtime/parrot/dynext
 PMC_GROUP       = $(DEST_PMC_DIR)/bcg_group$(LOAD_EXT)
 LIB_BCG         = @build_dir@/blib/lib/libbcg$(SHARE_EXT)
@@ -60,8 +60,7 @@
  $(SRC_PMC_DIR)/*$(LOAD_EXT) \
  $(PMC_GROUP)
 
-all: pmcs
-
+all: pmcs Makefile
 
 #
 # Build Targets
@@ -72,7 +71,6 @@
 	$(LD) $(LD_SHARE_FLAGS) $(LDFLAGS) @ld_out@$@ $(BCG_O_FILES) @libs@
     $(CP) @build_dir@/blib/lib/libbcg$(SHARE_EXT) @build_dir@
 
-	
 pmcs: $(LIB_BCG)
 	@cd $(SRC_PMC_DIR) && $(BUILD_PMC) generate $(PMCS)
 	@cd $(SRC_PMC_DIR) && $(BUILD_PMC) compile $(PMCS)
@@ -80,6 +78,9 @@
 	@cd $(SRC_PMC_DIR) && $(BUILD_PMC) copy "--destination=$(DEST_PMC_DIR)" \
 		 $(PMCS)
 
+# regenerate the Makefile
+Makefile: @build_dir@/config/gen/makefiles/docs.in
+	cd @build_dir@ && $(RECONFIGURE) --step=gen::makefiles --target=docs/Makefile
 
 #
 # Test Targets
@@ -102,3 +103,9 @@
 realclean: clean
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/makefiles/docs.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/docs.in	2008-08-27 20:40:29.000000000 +0200
@@ -1,5 +1,5 @@
 # Copyright (C) 2001-2006, The Perl Foundation.
-# $Id: docs.in 28693 2008-06-25 13:54:06Z particle $
+# $Id: docs.in 30597 2008-08-27 18:31:51Z moritz $
 
 # Setup of some commands
 PERL   = @perl@
@@ -7,6 +7,8 @@
 MKPATH = @mkpath@
 CHMOD  = @chmod@
 PERLDOC = @perldoc@
+BUILD_DIR = @build_dir@
+RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
 
 # long list of .pod files
 POD = @pod@
@@ -16,7 +18,11 @@
 #
 
 # The default target
-all: doc-prep packfile-c.pod $(POD)
+all: doc-prep packfile-c.pod $(POD) Makefile
+
+# regenerate the Makefile
+Makefile: $(BUILD_DIR)/config/gen/makefiles/docs.in
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::makefiles --target=docs/Makefile
 
 # This is a listing of all targets, that are meant to be called by users
 # Most of them are proxied in the root makefile parrot/Makefile
@@ -35,8 +41,8 @@
 	$(MKPATH) ops
 
 packfile-c.pod: ../src/packfile.c
-#CONDITIONED_LINE(new_perldoc):	perldoc -ud packfile-c.pod ../src/packfile.c 
-#INVERSE_CONDITIONED_LINE(new_perldoc):	perldoc -u ../src/packfile.c > packfile-c.pod
+#IF(new_perldoc):	perldoc -ud packfile-c.pod ../src/packfile.c
+#ELSE:	perldoc -u ../src/packfile.c > packfile-c.pod
 
 clean:
 	$(RM_F) packfile-c.pod $(POD)
@@ -47,3 +53,8 @@
 html-clean:
 	$(PERL) -I../lib -MParrot::Distribution -e "Parrot::Distribution->new()->delete_html_docs()"
 
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/makefiles/dynoplibs.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/dynoplibs.in	2008-09-18 20:43:50.218750000 +0200
@@ -46,3 +46,9 @@
 distclean: realclean
 
 svnclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/makefiles/dynoplibs_pl.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/dynoplibs_pl.in	2008-09-18 20:44:39.125000000 +0200
@@ -32,7 +32,7 @@
 our $CFLAGS = q[@ccflags@ @cc_shared@ @cc_debug@ @ccwarn@ @cc_hasjit@ @cg_flag@ @gc_flag@];
 
 our $LIBPARROT = q[];
-#CONDITIONED_LINE(parrot_is_shared):$LIBPARROT = q[@libparrot_ldflags@];
+#IF(parrot_is_shared):$LIBPARROT = q[@libparrot_ldflags@];
 
 # Here comes some stuff for Win32.
 our $PATHQUOTE = q[];
@@ -46,15 +46,15 @@
 }
 
 # OPS2C Config
-our $OPS2C = "$PERL -I $PATHQUOTE" . 
+our $OPS2C = "$PERL -I $PATHQUOTE" .
              q[@build_dir@@slash@lib] .
              "$PATHQUOTE $PATHQUOTE" .
              q[@build_dir@@slash@tools@slash@build@slash@ops2c.pl] .
              $PATHQUOTE;
 our %cores = (
     C       => q[],
-#CONDITIONED_LINE(cg_flag):   CGP     => '_cgp',
-#CONDITIONED_LINE(cg_flag):   CGoto   => '_cg',
+#IF(cg_flag):   CGP     => '_cgp',
+#IF(cg_flag):   CGoto   => '_cg',
     CSwitch => '_switch'
 );
 
@@ -73,7 +73,7 @@
 
 sub partial_link_cmd {
     my ($target, $libs, $sources) = @_;
-    
+
     my $liblist;
     if ($^O =~ /mswin32/i) {
         # Need to put various libraries in the link line.
@@ -93,7 +93,7 @@
         "$LD ".
         "@ld_out@" . $target . " " .
         join(" ", map {"$PATHQUOTE$_$PATHQUOTE"} @$sources) .
-        " $liblist $LDFLAGS $LD_LOAD_FLAGS $PATHQUOTE$LIBPARROT$PATHQUOTE";
+        " $LDFLAGS $LD_LOAD_FLAGS $PATHQUOTE$LIBPARROT$PATHQUOTE $liblist";
 }
 
 our $NOW = time();
@@ -106,14 +106,14 @@
     # Convert X.ops -> ops_X.c, ops_X_cgp.c, ops_X_cg.c and ops_X_switch.c
     my $core;
     generate_c($_) foreach (@oplibs);
-} 
+}
 elsif ($mode eq 'compile') {
     # Convert X.c -> X.o for all X.c
     my $core_suffix;
     foreach $core_suffix (values %cores) {
         compile($_ . "_ops$core_suffix") foreach (@oplibs);
     }
-} 
+}
 elsif ($mode eq 'linklibs') {
     my @objs = grep { /$O$/} @oplibs;
     @oplibs  = grep {!/$O$/} @oplibs;
@@ -123,7 +123,7 @@
     foreach $core_suffix (values %cores) {
         partial_link({}, $_ . "_ops$core_suffix", @objs) foreach (@oplibs);
      }
-} 
+}
 elsif ($mode eq 'copy') {
     # Copy *.so -> destination, where destination is the first
     # argument, given as --destination=DIRECTORY
--- origsrc/parrot-0.7.1/config/gen/makefiles/dynpmc.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/dynpmc.in	2008-09-18 20:45:30.656250000 +0200
@@ -14,30 +14,30 @@
   dynlexpad \
   foo \
   rotest \
-#CONDITIONED_LINE(has_gdbm):  gdbmhash \
+#IF(has_gdbm):  gdbmhash \
   rational \
-#CONDITIONED_LINE(has_crypto):  md2 \
-#CONDITIONED_LINE(has_crypto):  md4 \
-#CONDITIONED_LINE(has_crypto):  md5 \
-#CONDITIONED_LINE(has_crypto):  ripemd160 \
-#CONDITIONED_LINE(has_crypto):  sha \
-#CONDITIONED_LINE(has_crypto):  sha1 \
-#CONDITIONED_LINE(has_crypto):  sha256 \
-#CONDITIONED_LINE(has_crypto):  sha512 \
+#IF(has_crypto):  md2 \
+#IF(has_crypto):  md4 \
+#IF(has_crypto):  md5 \
+#IF(has_crypto):  ripemd160 \
+#IF(has_crypto):  sha \
+#IF(has_crypto):  sha1 \
+#IF(has_crypto):  sha256 \
+#IF(has_crypto):  sha512 \
   subproxy 
 
 BUILD = $(PERL) @build_dir@/tools/build/dynpmc.pl
 
 # some *.pmc file are generated
 GEN_PMC_DEFINITIONS = \
-#CONDITIONED_LINE(has_crypto):  md2.pmc \
-#CONDITIONED_LINE(has_crypto):  md4.pmc \
-#CONDITIONED_LINE(has_crypto):  md5.pmc \
-#CONDITIONED_LINE(has_crypto):  ripemd160.pmc \
-#CONDITIONED_LINE(has_crypto):  sha.pmc \
-#CONDITIONED_LINE(has_crypto):  sha1.pmc \
-#CONDITIONED_LINE(has_crypto):  sha256.pmc \
-#CONDITIONED_LINE(has_crypto):  sha512.pmc
+#IF(has_crypto):  md2.pmc \
+#IF(has_crypto):  md4.pmc \
+#IF(has_crypto):  md5.pmc \
+#IF(has_crypto):  ripemd160.pmc \
+#IF(has_crypto):  sha.pmc \
+#IF(has_crypto):  sha1.pmc \
+#IF(has_crypto):  sha256.pmc \
+#IF(has_crypto):  sha512.pmc
 
 all :
 	@$(BUILD) generate $(PMCS)
@@ -72,3 +72,9 @@
 distclean: realclean
 
 svnclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/makefiles/dynpmc_pl.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/dynpmc_pl.in	2008-09-18 20:46:30.187500000 +0200
@@ -36,7 +36,7 @@
 our $CFLAGS = q[@ccflags@ @cc_shared@ @cc_debug@ @ccwarn@ @cc_hasjit@ @cg_flag@ @gc_flag@];
 
 our $LIBPARROT = q[];
-#CONDITIONED_LINE(parrot_is_shared):$LIBPARROT = q[@libparrot_ldflags@];
+#IF(parrot_is_shared):$LIBPARROT = q[@libparrot_ldflags@];
 
 # Here comes some stuff for Win32.
 our $PATHQUOTE = '';
@@ -72,8 +72,15 @@
 
     my $liblist;
     if ($^O =~ /mswin32/i) {
-        # Need to put various libraries in the link line.
-        $liblist = join( ' ', map { "$_.lib" } keys %$libs );
+        # Note that we may need to look in the Parrot blib directory first.
+        if ($CC =~ /gcc/i) {
+            $liblist = qq{ -Wl,-L "@build_dir@/blib/lib"};
+        }
+        else {
+            $liblist = qq{ /LIBPATH:"@build_dir@/blib/lib"};
+        }
+        # Need to add various libraries in the link line.
+        $liblist .= join( ' ', map { "$_.lib" } keys %$libs );
         if ($CC =~ /gcc/i) {
             $liblist =~ s/libgdbm\.lib/-llibgdbm/i;
         }
@@ -81,14 +88,6 @@
         $extraLibs =~ s/blib/..\\blib/g;
         $extraLibs =~ s/\Q$(A)\E/.lib/g;
         $liblist .= ' ' . $extraLibs;
-
-        # Also note that we may need to look in the Parrot blib directory.
-        if ($CC =~ /gcc/i) {
-            $liblist .= qq{ -Wl,-L "@build_dir@/blib/lib"};
-        }
-        else {
-            $liblist .= qq{ /LIBPATH:"@build_dir@/blib/lib"};
-        }
     }
     else {
         $liblist = join( ' ', map { "-l$_" } keys %$libs );
@@ -96,11 +95,14 @@
         $liblist .= ' ' . $extraLibs;
     }
 
+    # LDFLAGS, LIBS or ICU_SHARED may contain -L/usr/lib or -L/usr/local/lib
+    # falsely favoring an already installed libparrot.{so,dll}. So put liblist
+    # to the end.
     return
         "$LD ".
         '@ld_out@' . $target . " " .
         join(" ", map {"$PATHQUOTE$_$PATHQUOTE"} @$sources) .
-        " $liblist $LDFLAGS $LD_LOAD_FLAGS $PATHQUOTE$LIBPARROT$PATHQUOTE";
+        " $LDFLAGS $LD_LOAD_FLAGS $PATHQUOTE$LIBPARROT$PATHQUOTE $liblist";
 }
 
 our $NOW = time();
@@ -138,7 +140,7 @@
         compile("$group", "lib-$group")
           or die "compile $group.c failed ($?)\n";
     }
-} 
+}
 elsif ($mode eq 'linklibs') {
     my ($group_files, $group_libs, $pmc_group, $pmc_libs) =
         gather_groups_and_libs(@pmcs);
@@ -152,7 +154,7 @@
     # Link non-grouped PMCs individually
     my @ungrouped_pmcs = grep { ! exists $pmc_group->{$_} } @pmcs;
     partial_link($_, $pmc_libs->{$_}, [ $_ ] ) foreach (@ungrouped_pmcs);
-} 
+}
 elsif ($mode eq 'copy') {
     # Copy *.so -> destination, where destination is the first
     # argument, given as --destination=DIRECTORY
@@ -225,7 +227,7 @@
 
     if (defined $ago) {
         return $NOW - $ago;
-    } 
+    }
     else {
         return;
     }
--- origsrc/parrot-0.7.1/config/gen/makefiles/editor.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/editor.in	2008-08-25 19:54:51.000000000 +0200
@@ -1,4 +1,4 @@
-# $Id: editor.in 23097 2007-11-26 21:12:07Z chromatic $
+# $Id: editor.in 30510 2008-08-24 12:25:25Z allison $
 
 OPS_DIR     = ../src/ops
 VIM_DIR     = $(HOME)/.vim
@@ -10,10 +10,15 @@
 CP     = @cp@
 MKPATH = @mkpath@
 RM_F   = @rm_f@
+RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
 
 default: all
 
-all: pir.vim imc.kate
+all: pir.vim imc.kate Makefile
+
+# regenerate the Makefile
+Makefile: @build_dir@/config/gen/makefiles/editor.in
+	cd @build_dir@ && $(RECONFIGURE) --step=gen::makefiles --target=editor/Makefile
 
 # This is a listing of all targets, that are meant to be called by users
 help :
@@ -65,3 +70,9 @@
 
 realclean: clean
 	$(RM_F) Makefile
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/makefiles/ext.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/ext.in	2008-08-27 20:40:29.000000000 +0200
@@ -1,4 +1,4 @@
-# $Id: ext.in 17688 2007-03-22 08:48:04Z fperrad $
+# $Id: ext.in 30597 2008-08-27 18:31:51Z moritz $
 
 # setup of commands
 @make_set_make@
@@ -28,7 +28,14 @@
 	@echo "                This is the default."
 	@echo "  test:         Unified test suite for a lot of languages."
 	@echo ""
+	@echo "  installable:  Create self-hosting bins and libs."
+	@echo ""
+	@echo "  test-installable: Test self-hosting bins and libs."
+	@echo ""
+	@echo "  install:      Make install for a lot of languages."
+	@echo ""
 	@echo "  clean:        Clean up a lot of languages."
+	@echo "  realclean:    Clean up and remove Makefiles."
 	@echo ""
 	@echo "  help:         Print this help message."
 	@echo ""
@@ -40,11 +47,14 @@
 	@echo ""
 	@echo "Following languages are available:"
 	@echo "  $(LANGUAGES)"
-	@echo "A particular language <lang> can be built, tested and cleand up"
 	@echo "  make <lang>"
 	@echo "  make <lang>.test"
+	@echo "  make <lang>.installable"
+	@echo "  make <lang>.test-installable"
+	@echo "  make <lang>.install"
 	@echo "  make <lang>.clean"
-	@echo "For the status of individual languages see LANGUAGES.STATUS.pod"
+	@echo "  make <lang>.realclean"
+	@echo "For the status of individual languages see LANGUAGES_STATUS.pod"
 	@echo ""
 
 clean: \
@@ -59,10 +69,15 @@
 Parrot-Embed : Parrot-Embed.dummy
 
 Parrot-Embed.dummy:
-#CONDITIONED_LINE(win32):	- cd Parrot-Embed && $(PERL) Makefile.PL && nmake
-#INVERSE_CONDITIONED_LINE(win32):	- cd Parrot-Embed && $(PERL) Makefile.PL && $(MAKE)
+#IF(win32):	- cd Parrot-Embed && $(PERL) Makefile.PL && nmake
+#ELSE:	- cd Parrot-Embed && $(PERL) Makefile.PL && $(MAKE)
 
 Parrot-Embed.clean:
-#CONDITIONED_LINE(win32):	- cd Parrot-Embed && nmake clean
-#INVERSE_CONDITIONED_LINE(win32):	- cd Parrot-Embed && $(MAKE) clean
+#IF(win32):	- cd Parrot-Embed && nmake clean
+#ELSE:	- cd Parrot-Embed && $(MAKE) clean
 
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/makefiles/json.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/json.in	2008-08-27 20:40:29.000000000 +0200
@@ -1,15 +1,22 @@
-# $Id: json.in 26595 2008-03-28 18:13:40Z pmichaud $
+# $Id: json.in 30597 2008-08-27 18:31:51Z moritz $
 
 PERL     = @perl@
 RM_F     = @rm_f@
 PARROT   = ../../parrot@exe@
+RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
+#IF(cygwin):SHRPENV  = env PATH="@build_dir@/blib/lib:$(PATH)"
+#ELSIF(!win32):SHRPENV  = env LD_RUN_PATH="@build_dir@/blib/lib"
 
 TOOL_DIR = ../..
 PGE_DIR  = ../../compilers/pge
 TGE_DIR  = ../../compilers/tge
 
 # the default target
-all: JSON.pbc
+all: JSON.pbc Makefile
+
+# regenerate the Makefile
+Makefile: @build_dir@/config/gen/makefiles/json.in
+	cd @build_dir@ && $(RECONFIGURE) --step=gen::makefiles --target=compilers/json/Makefile
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -36,19 +43,25 @@
 	$(RM_F) "../../t/compilers/json/*.pir" \
 
 JSON.pbc : JSON/grammar.pbc JSON/pge2pir.pbc JSON.pir
-	$(PARROT) --output=JSON.pbc JSON.pir
+	$(SHRPENV) $(PARROT) --output=JSON.pbc JSON.pir
 
 JSON/grammar.pbc : JSON/grammar.pir
-	$(PARROT) --output=JSON/grammar.pbc JSON/grammar.pir
+	$(SHRPENV) $(PARROT) --output=JSON/grammar.pbc JSON/grammar.pir
 
 JSON/grammar.pir : JSON/grammar.pg
-	$(PARROT) $(TOOL_DIR)/runtime/parrot/library/PGE/Perl6Grammar.pbc --output=JSON/grammar.pir JSON/grammar.pg
+	$(SHRPENV) $(PARROT) $(TOOL_DIR)/runtime/parrot/library/PGE/Perl6Grammar.pbc --output=JSON/grammar.pir JSON/grammar.pg
 
 JSON/pge2pir.pbc : JSON/pge2pir.pir
-	$(PARROT) --output=JSON/pge2pir.pbc JSON/pge2pir.pir
+	$(SHRPENV) $(PARROT) --output=JSON/pge2pir.pbc JSON/pge2pir.pir
 
 JSON/pge2pir.pir : JSON/pge2pir.tg
-	$(PARROT) $(TGE_DIR)/tgc.pir --output=JSON/pge2pir.pir JSON/pge2pir.tg
+	$(SHRPENV) $(PARROT) $(TGE_DIR)/tgc.pir --output=JSON/pge2pir.pir JSON/pge2pir.tg
 
 clean : testclean
 	@rm_f@ "JSON/*.pbc" "JSON/*.pir" JSON.pbc
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/makefiles/languages.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/languages.in	2008-09-18 20:48:23.562500000 +0200
@@ -1,4 +1,4 @@
-# $Id: languages.in 31177 2008-09-16 11:02:05Z bernhard $
+# $Id: languages.in 31077 2008-09-13 17:50:15Z rurban $
 
 # setup of commands
 @make_set_make@
@@ -47,6 +47,12 @@
 	@echo ""
 	@echo "  test-separate: Run 'make test' in the individual lang dirs."
 	@echo ""
+	@echo "  installable:   Create self-hosting bins and libs."
+	@echo ""
+	@echo "  test-installable: Test self-hosting bins and libs."
+	@echo ""
+	@echo "  install:       Copy installable and more to DESTDIR."
+	@echo ""
 	@echo "  clean:         Clean up a lot of languages."
 	@echo ""
 	@echo "  help:          Print this help message."
@@ -60,13 +66,16 @@
 	@echo "Following languages are available:"
 	@echo "  $(LANGUAGES)"
 	@echo ""
-	@echo "A particular language <lang> can be built, tested and cleand up"
+	@echo "A particular language <lang> can be built, tested and cleaned up"
 	@echo "  make <lang>"
 	@echo "  make <lang>.test"
+	@echo "  make <lang>.installable"
+	@echo "  make <lang>.test-installable"
+	@echo "  make <lang>.install"
 	@echo "  make <lang>.clean"
 	@echo "  make <lang>.realclean"
 	@echo ""
-	@echo "For the status of individual languages see LANGUAGES.STATUS.pod"
+	@echo "For the status of individual languages see LANGUAGES_STATUS.pod"
 	@echo ""
 
 # regenerate the Makefile
@@ -88,7 +97,7 @@
     hq9plus.test \
     jako.test json.test \
     lazy-k.test lisp.test lolcode.test lua.test \
-    m4.test \
+    m4.test markdown.test \
     ook.test \
     parrot_compiler.test perl6.test pheme.test PIR.test pipp.test punie.test pynie.test \
     regex.test \
@@ -98,6 +107,65 @@
     WMLScript.test \
     Zcode.test
 
+installable : all \
+    abc.installable APL.installable \
+    befunge.installable bf.installable \
+    c99.installable cardinal.installable chitchat.installable cola.installable \
+    dotnet.installable \
+    eclectus.installable ecmascript.installable \
+    forth.installable \
+    hq9plus.installable \
+    jako.installable json.installable \
+    lazy-k.installable lisp.installable lolcode.installable lua.installable \
+    m4.installable markdown.installable \
+    ook.installable \
+    parrot_compiler.installable perl6.installable pheme.installable PIR.installable pipp.installable punie.installable pynie.installable \
+    regex.installable \
+    scheme.installable squaak.installable \
+    tcl.installable \
+    urm.installable unlambda.installable \
+    WMLScript.installable \
+    Zcode.installable
+
+test-installable : all \
+    abc.test-installable APL.test-installable \
+    befunge.test-installable bf.test-installable \
+    c99.test-installable cardinal.test-installable chitchat.test-installable cola.test-installable \
+    dotnet.test-installable \
+    eclectus.test-installable ecmascript.test-installable \
+    forth.test-installable \
+    hq9plus.test-installable \
+    jako.test-installable json.test-installable \
+    lazy-k.test-installable lisp.test-installable lolcode.test-installable lua.test-installable \
+    m4.test-installable markdown.test-installable \
+    ook.test-installable \
+    parrot_compiler.test-installable perl6.test-installable pheme.test-installable PIR.test-installable pipp.test-installable punie.test-installable pynie.test-installable \
+    regex.test-installable \
+    scheme.test-installable squaak.test-installable \
+    tcl.test-installable \
+    urm.test-installable unlambda.test-installable \
+    WMLScript.test-installable \
+    Zcode.test-installable
+
+install : all \
+    abc.install APL.install \
+    befunge.install bf.install \
+    c99.install cardinal.install chitchat.install cola.install \
+    dotnet.install \
+    eclectus.install ecmascript.install \
+    forth.install \
+    hq9plus.install \
+    jako.install json.install \
+    lazy-k.install lisp.install lolcode.install lua.install \
+    m4.install markdown.install \
+    ook.install \
+    parrot_compiler.install perl6.install pheme.install PIR.install pipp.install punie.install pynie.install \
+    regex.install \
+    scheme.install squaak.install \
+    tcl.install \
+    urm.install unlambda.install \
+    WMLScript.install \
+    Zcode.install
 
 smoke:  all
 	$(PERL) t/harness --html
@@ -160,6 +228,12 @@
 	- $(MAKE) abc
 abc.test:
 	- $(MAKE) abc test
+abc.installable:
+	- $(MAKE) abc installable
+abc.test-installable:
+	- $(MAKE) abc test-installable DESTDIR=$(DESTDIR)
+abc.install:
+	- $(MAKE) abc install DESTDIR=$(DESTDIR)
 abc.clean:
 	- $(MAKE) abc clean
 abc.realclean:
@@ -170,6 +244,12 @@
 	- $(MAKE) APL
 APL.test:
 	- $(MAKE) APL test
+APL.installable:
+	- $(MAKE) APL installable
+APL.test-installable:
+	- $(MAKE) APL test-installable DESTDIR=$(DESTDIR)
+APL.install:
+	- $(MAKE) APL install DESTDIR=$(DESTDIR)
 APL.clean:
 	- $(MAKE) APL clean
 APL.realclean:
@@ -180,6 +260,12 @@
 # don't know how to build BASIC
 BASIC.test:
 # Don't know how to test BASIC
+BASIC.installable:
+# Missing for BASIC
+BASIC.test-installable:
+# Missing for BASIC
+BASIC.install:
+# Missing for BASIC
 BASIC.clean:
 # Don't know how to clean BASIC
 
@@ -188,6 +274,12 @@
 	- $(MAKE) befunge
 befunge.test:
 	- $(MAKE) befunge test
+befunge.installable:
+	- $(MAKE) befunge installable
+befunge.test-installable:
+	- $(MAKE) befunge test-installable DESTDIR=$(DESTDIR)
+befunge.install:
+	- $(MAKE) befunge install DESTDIR=$(DESTDIR)
 befunge.clean:
 	- $(MAKE) befunge clean
 befunge.realclean:
@@ -198,6 +290,12 @@
 	- $(MAKE) bf
 bf.test:
 	- $(MAKE) bf test
+bf.installable:
+	- $(MAKE) bf installable
+bf.test-installable:
+	- $(MAKE) bf test-installable DESTDIR=$(DESTDIR)
+bf.install:
+	- $(MAKE) bf install DESTDIR=$(DESTDIR)
 bf.clean:
 	- $(MAKE) bf clean
 bf.realclean:
@@ -208,6 +306,12 @@
 	- $(MAKE) c99
 c99.test:
 	- $(MAKE) c99 test
+c99.installable:
+	- $(MAKE) c99 installable
+c99.test-installable:
+	- $(MAKE) c99 test-installable DESTDIR=$(DESTDIR)
+c99.install:
+	- $(MAKE) c99 install DESTDIR=$(DESTDIR)
 c99.clean:
 	- $(MAKE) c99 clean
 c99.realclean:
@@ -218,6 +322,12 @@
 	- $(MAKE) cardinal
 cardinal.test:
 	- $(MAKE) cardinal test
+cardinal.installable:
+	- $(MAKE) cardinal installable
+cardinal.test-installable:
+	- $(MAKE) cardinal test-installable DESTDIR=$(DESTDIR)
+cardinal.install:
+	- $(MAKE) cardinal install DESTDIR=$(DESTDIR)
 cardinal.clean:
 	- $(MAKE) cardinal clean
 cardinal.realclean:
@@ -228,6 +338,12 @@
 	- $(MAKE) chitchat
 chitchat.test:
 	- $(MAKE) chitchat test
+chitchat.installable:
+	- $(MAKE) chitchat installable
+chitchat.test-installable:
+	- $(MAKE) chitchat test-installable DESTDIR=$(DESTDIR)
+chitchat.install:
+	- $(MAKE) chitchat install DESTDIR=$(DESTDIR)
 chitchat.clean:
 	- $(MAKE) chitchat clean
 chitchat.realclean:
@@ -238,6 +354,12 @@
 	- $(MAKE) cola
 cola.test:
 	- $(MAKE) cola test
+cola.installable:
+	- $(MAKE) cola installable
+cola.test-installable:
+	- $(MAKE) cola test-installable DESTDIR=$(DESTDIR)
+cola.install:
+	- $(MAKE) cola install DESTDIR=$(DESTDIR)
 cola.clean:
 	- $(MAKE) cola clean
 cola.realclean:
@@ -249,6 +371,12 @@
 	- $(MAKE) dotnet
 dotnet.test:
 	- $(MAKE) dotnet test
+dotnet.installable:
+	- $(MAKE) dotnet installable
+dotnet.test-installable:
+	- $(MAKE) dotnet test-installable DESTDIR=$(DESTDIR)
+dotnet.install:
+	- $(MAKE) dotnet install DESTDIR=$(DESTDIR)
 dotnet.clean:
 	- $(MAKE) dotnet clean
 dotnet.realclean:
@@ -259,6 +387,12 @@
 	- $(MAKE) eclectus
 eclectus.test :
 	- $(MAKE) eclectus test
+eclectus.installable:
+	- $(MAKE) eclectus installable
+eclectus.test-installable:
+	- $(MAKE) eclectus test-installable DESTDIR=$(DESTDIR)
+eclectus.install:
+	- $(MAKE) eclectus install DESTDIR=$(DESTDIR)
 eclectus.clean :
 	- $(MAKE) eclectus clean
 eclectus.realclean :
@@ -269,6 +403,12 @@
 	- $(MAKE) ecmascript
 ecmascript.test:
 	- $(MAKE) ecmascript test
+ecmascript.installable:
+	- $(MAKE) ecmascript installable
+ecmascript.test-installable:
+	- $(MAKE) ecmascript test-installable DESTDIR=$(DESTDIR)
+ecmascript.install:
+	- $(MAKE) ecmascript install DESTDIR=$(DESTDIR)
 ecmascript.clean:
 	- $(MAKE) ecmascript clean
 ecmascript.realclean:
@@ -279,6 +419,12 @@
 	- $(MAKE) forth
 forth.test:
 	- $(MAKE) forth test
+forth.installable:
+	- $(MAKE) forth installable
+forth.test-installable:
+	- $(MAKE) forth test-installable DESTDIR=$(DESTDIR)
+forth.install:
+	- $(MAKE) forth install DESTDIR=$(DESTDIR)
 forth.clean:
 	- $(MAKE) forth clean
 forth.realclean:
@@ -289,6 +435,12 @@
 	- $(MAKE) hq9plus
 hq9plus.test:
 	- $(MAKE) hq9plus test
+hq9plus.installable:
+	- $(MAKE) hq9plus installable
+hq9plus.test-installable:
+	- $(MAKE) hq9plus test-installable DESTDIR=$(DESTDIR)
+hq9plus.install:
+	- $(MAKE) hq9plus install DESTDIR=$(DESTDIR)
 hq9plus.clean:
 	- $(MAKE) hq9plus clean
 hq9plus.realclean:
@@ -299,6 +451,12 @@
 	- $(MAKE) jako
 jako.test:
 	- $(MAKE) jako test
+jako.installable:
+	- $(MAKE) jako installable
+jako.test-installable:
+	- $(MAKE) jako test-installable DESTDIR=$(DESTDIR)
+jako.install:
+	- $(MAKE) jako install DESTDIR=$(DESTDIR)
 jako.clean:
 	- $(MAKE) jako clean
 jako.realclean:
@@ -309,6 +467,12 @@
 	- $(MAKE) json
 json.test:
 	- $(MAKE) json test
+json.installable:
+	- $(MAKE) json installable
+json.test-installable:
+	- $(MAKE) json test-installable DESTDIR=$(DESTDIR)
+json.install:
+	- $(MAKE) json install DESTDIR=$(DESTDIR)
 json.clean:
 	- $(MAKE) json clean
 json.realclean:
@@ -319,6 +483,12 @@
 	- $(MAKE) lazy-k
 lazy-k.test:
 	- $(MAKE) lazy-k test
+lazy-k.installable:
+	- $(MAKE) lazy-k installable
+lazy-k.test-installable:
+	- $(MAKE) lazy-k test-installable DESTDIR=$(DESTDIR)
+lazy-k.install:
+	- $(MAKE) lazy-k install DESTDIR=$(DESTDIR)
 lazy-k.clean:
 	- $(MAKE) lazy-k clean
 lazy-k.realclean:
@@ -329,6 +499,12 @@
 	- $(MAKE) lisp
 lisp.test:
 	- $(MAKE) lisp test
+lisp.installable:
+	- $(MAKE) lisp installable
+lisp.test-installable:
+	- $(MAKE) lisp test-installable DESTDIR=$(DESTDIR)
+lisp.install:
+	- $(MAKE) lisp install DESTDIR=$(DESTDIR)
 lisp.clean:
 	- $(MAKE) lisp clean
 lisp.realclean:
@@ -339,6 +515,12 @@
 	- $(MAKE) lolcode
 lolcode.test:
 	- $(MAKE) lolcode test
+lolcode.installable:
+	- $(MAKE) lolcode installable
+lolcode.test-installable:
+	- $(MAKE) lolcode test-installable DESTDIR=$(DESTDIR)
+lolcode.install:
+	- $(MAKE) lolcode install DESTDIR=$(DESTDIR)
 lolcode.clean:
 	- $(MAKE) lolcode clean
 lolcode.realclean:
@@ -349,6 +531,12 @@
 	- $(MAKE) lua
 lua.test:
 	- $(MAKE) lua test
+lua.installable:
+	- $(MAKE) lua installable
+lua.test-installable:
+	- $(MAKE) lua test-installable DESTDIR=$(DESTDIR)
+lua.install:
+	- $(MAKE) lua install DESTDIR=$(DESTDIR)
 lua.clean:
 	- $(MAKE) lua clean
 lua.realclean:
@@ -359,6 +547,12 @@
 	- $(MAKE) m4
 m4.test:
 	- $(MAKE) m4 test
+m4.installable:
+	- $(MAKE) m4 installable
+m4.test-installable:
+	- $(MAKE) m4 test-installable DESTDIR=$(DESTDIR)
+m4.install:
+	- $(MAKE) m4 install DESTDIR=$(DESTDIR)
 m4.clean:
 	- $(MAKE) m4 clean
 m4.realclean:
@@ -369,6 +563,12 @@
 	- $(MAKE) markdown
 markdown.test:
 	- $(MAKE) markdown test
+markdown.installable:
+	- $(MAKE) markdown installable
+markdown.test-installable:
+	- $(MAKE) markdown test-installable DESTDIR=$(DESTDIR)
+markdown.install:
+	- $(MAKE) markdown install DESTDIR=$(DESTDIR)
 markdown.clean:
 	- $(MAKE) markdown clean
 markdown.realclean:
@@ -379,6 +579,12 @@
 	- $(MAKE) ook
 ook.test:
 	- $(MAKE) ook test
+ook.installable:
+	- $(MAKE) ook installable
+ook.test-installable:
+	- $(MAKE) ook test-installable DESTDIR=$(DESTDIR)
+ook.install:
+	- $(MAKE) ook install DESTDIR=$(DESTDIR)
 ook.clean:
 	- $(MAKE) ook clean
 ook.realclean:
@@ -389,6 +595,12 @@
 	- $(MAKE) parrot_compiler
 parrot_compiler.test:
 	- $(MAKE) parrot_compiler test
+parrot_compiler.installable:
+	- $(MAKE) ook installable
+parrot_compiler.test-installable:
+	- $(MAKE) ook test-installable DESTDIR=$(DESTDIR)
+parrot_compiler.install:
+	- $(MAKE) ook install DESTDIR=$(DESTDIR)
 parrot_compiler.clean:
 	- $(MAKE) parrot_compiler clean
 parrot_compiler.realclean:
@@ -399,6 +611,12 @@
 	- $(MAKE) perl6
 perl6.test:
 	- $(MAKE) perl6 test
+perl6.installable:
+	- $(MAKE) perl6 installable
+perl6.test-installable:
+	- $(MAKE) perl6 test-installable DESTDIR=$(DESTDIR)
+perl6.install:
+	- $(MAKE) perl6 install DESTDIR=$(DESTDIR)
 perl6.clean:
 	- $(MAKE) perl6 clean
 perl6.realclean:
@@ -409,6 +627,12 @@
 	- $(MAKE) pheme
 pheme.test:
 	- $(MAKE) pheme test
+pheme.installable:
+	- $(MAKE) pheme installable
+pheme.test-installable:
+	- $(MAKE) pheme test-installable DESTDIR=$(DESTDIR)
+pheme.install:
+	- $(MAKE) pheme install DESTDIR=$(DESTDIR)
 pheme.clean:
 	- $(MAKE) pheme clean
 pheme.realclean:
@@ -419,6 +643,12 @@
 	- $(MAKE) pipp
 pipp.test:
 	- $(MAKE) pipp test
+pipp.installable:
+	- $(MAKE) pipp installable
+pipp.test-installable:
+	- $(MAKE) pipp test-installable DESTDIR=$(DESTDIR)
+pipp.install:
+	- $(MAKE) pipp install DESTDIR=$(DESTDIR)
 pipp.clean:
 	- $(MAKE) pipp clean
 pipp.realclean:
@@ -429,6 +659,12 @@
 	- $(MAKE) PIR
 PIR.test:
 	- $(MAKE) PIR test
+PIR.installable:
+	- $(MAKE) PIR installable
+PIR.test-installable:
+	- $(MAKE) PIR test-installable DESTDIR=$(DESTDIR)
+PIR.install:
+	- $(MAKE) PIR install DESTDIR=$(DESTDIR)
 PIR.clean:
 	- $(MAKE) PIR clean
 PIR.realclean:
@@ -439,6 +675,12 @@
 	- $(MAKE) punie
 punie.test:
 	- $(MAKE) punie test
+punie.installable:
+	- $(MAKE) punie installable
+punie.test-installable:
+	- $(MAKE) punie test-installable DESTDIR=$(DESTDIR)
+punie.install:
+	- $(MAKE) punie install DESTDIR=$(DESTDIR)
 punie.clean:
 	- $(MAKE) punie clean
 punie.realclean:
@@ -449,6 +691,12 @@
 	- $(MAKE) pynie
 pynie.test:
 	- $(MAKE) pynie test
+pynie.installable:
+	- $(MAKE) pynie installable
+pynie.test-installable:
+	- $(MAKE) pynie test-installable DESTDIR=$(DESTDIR)
+pynie.install:
+	- $(MAKE) pynie install DESTDIR=$(DESTDIR)
 pynie.clean:
 	- $(MAKE) pynie clean
 pynie.realclean:
@@ -459,6 +707,12 @@
 	- $(MAKE) regex
 regex.test :
 	- $(MAKE) regex test
+regex.installable:
+	- $(MAKE) regex installable
+regex.test-installable:
+	- $(MAKE) regex test-installable DESTDIR=$(DESTDIR)
+regex.install:
+	- $(MAKE) regex install DESTDIR=$(DESTDIR)
 regex.clean :
 	- $(MAKE) regex clean
 regex.realclean :
@@ -469,6 +723,12 @@
 	@echo "SKIPPED: scheme: (nothing to make, but should not default to make test)"
 scheme.test :
 	- $(MAKE) scheme test
+scheme.installable:
+	- $(MAKE) scheme installable
+scheme.test-installable:
+	- $(MAKE) scheme test-installable DESTDIR=$(DESTDIR)
+scheme.install:
+	- $(MAKE) scheme install DESTDIR=$(DESTDIR)
 scheme.clean :
 	- $(MAKE) scheme clean
 scheme.realclean :
@@ -479,6 +739,12 @@
 	- $(MAKE) squaak
 squaak.test:
 	- $(MAKE) squaak test
+squaak.installable:
+	- $(MAKE) squaak installable
+squaak.test-installable:
+	- $(MAKE) squaak test-installable DESTDIR=$(DESTDIR)
+squaak.install:
+	- $(MAKE) squaak install DESTDIR=$(DESTDIR)
 squaak.clean:
 	- $(MAKE) squaak clean
 squaak.realclean:
@@ -489,6 +755,12 @@
 	- $(MAKE) tcl
 tcl.test:
 	- $(MAKE) tcl test
+tcl.installable:
+	- $(MAKE) tcl installable
+tcl.test-installable:
+	- $(MAKE) tcl test-installable DESTDIR=$(DESTDIR)
+tcl.install:
+	- $(MAKE) tcl install DESTDIR=$(DESTDIR)
 tcl.clean:
 	- $(MAKE) tcl clean
 tcl.realclean:
@@ -499,6 +771,12 @@
 	- $(MAKE) unlambda
 unlambda.test :
 	- $(MAKE) unlambda test
+unlambda.installable:
+	- $(MAKE) unlambda installable
+unlambda.test-installable:
+	- $(MAKE) unlambda test-installable DESTDIR=$(DESTDIR)
+unlambda.install:
+	- $(MAKE) unlambda install DESTDIR=$(DESTDIR)
 unlambda.clean :
 	- $(MAKE) unlambda clean
 unlambda.realclean :
@@ -509,6 +787,12 @@
 	- $(MAKE) urm
 urm.test:
 	- $(MAKE) urm test
+urm.installable:
+	- $(MAKE) urm installable
+urm.test-installable:
+	- $(MAKE) urm test-installable DESTDIR=$(DESTDIR)
+urm.install:
+	- $(MAKE) urm install DESTDIR=$(DESTDIR)
 urm.clean:
 	- $(MAKE) urm clean
 urm.realclean:
@@ -519,6 +803,12 @@
 	- $(MAKE) WMLScript
 WMLScript.test:
 	- $(MAKE) WMLScript test
+WMLScript.installable:
+	- $(MAKE) WMLScript installable
+WMLScript.test-installable:
+	- $(MAKE) WMLScript test-installable DESTDIR=$(DESTDIR)
+WMLScript.install:
+	- $(MAKE) WMLScript install DESTDIR=$(DESTDIR)
 WMLScript.clean:
 	- $(MAKE) WMLScript clean
 WMLScript.realclean:
@@ -529,7 +819,19 @@
 # Do nothing. make Zcode requires an Inform compiler
 Zcode.test:
 	- $(MAKE) Zcode test
+Zcode.installable:
+# Do nothing. make Zcode requires an Inform compiler
+Zcode.test-installable:
+# Do nothing. make Zcode requires an Inform compiler
+Zcode.install:
+# Do nothing. make Zcode requires an Inform compiler
 Zcode.clean:
 	- $(MAKE) Zcode clean
 Zcode.realclean:
 	- $(MAKE) Zcode realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/makefiles/nqp.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/nqp.in	2008-08-27 20:40:29.000000000 +0200
@@ -1,9 +1,12 @@
-# $Id: nqp.in 26897 2008-04-10 02:12:56Z coke $
+# $Id: nqp.in 30597 2008-08-27 18:31:51Z moritz $
 
 # Setup some commands
 PERL     = @perl@
 RM_F     = @rm_f@
 PARROT   = ../../parrot@exe@
+RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
+#IF(cygwin): SHRPENV  = env PATH="@build_dir@/blib/lib:$(PATH)"
+#ELSIF(!win32):SHRPENV  = env LD_RUN_PATH="@build_dir@/blib/lib"
 
 PARROT_LIBRARY = @build_dir@/runtime/parrot/library
 PGE_LIBRARY  = @build_dir@/runtime/parrot/library/PGE
@@ -20,16 +23,20 @@
 
 # the default target
 nqp.pbc: $(PARROT) $(PGE_LIBRARY)/Perl6Grammar.pir $(SOURCES)
-	$(PARROT) $(PARROT_ARGS) $(PGE_LIBRARY)/Perl6Grammar.pir \
+	$(SHRPENV) $(PARROT) $(PARROT_ARGS) $(PGE_LIBRARY)/Perl6Grammar.pir \
 	    --output=src/Grammar_gen.pir src/Grammar.pg
-	$(PARROT) -o nqp.pbc nqp.pir
+	$(SHRPENV) $(PARROT) -o nqp.pbc nqp.pir
 
 boot: $(BOOTSRC)
-	$(PARROT) nqp.pbc \
-	--output=bootstrap/gen_actions.pir \
-	--target=pir \
-	bootstrap/actions.pm
-	$(PARROT) --output-pbc -o bootstrap/nqp.pbc bootstrap/nqp.pir
+	$(SHRPENV) $(PARROT) nqp.pbc \
+	  --output=bootstrap/gen_actions.pir \
+	  --target=pir \
+	  bootstrap/actions.pm
+	$(SHRPENV) $(PARROT) --output-pbc -o bootstrap/nqp.pbc bootstrap/nqp.pir
+
+# regenerate the Makefile
+Makefile: @build_dir@/config/gen/makefiles/nqp.in
+	cd @build_dir@ && $(RECONFIGURE) --step=gen::makefiles --target=compilers/nqp/Makefile
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -71,3 +78,9 @@
 	$(RM_F) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/makefiles/parrot_embed.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/parrot_embed.in	2008-08-27 20:40:29.000000000 +0200
@@ -1,5 +1,5 @@
 # Copyright (C) 2007, The Perl Foundation.
-# $Id: parrot_embed.in 17688 2007-03-22 08:48:04Z fperrad $
+# $Id: parrot_embed.in 30597 2008-08-27 18:31:51Z moritz $
 #
 use Cwd;
 use Config;
@@ -15,7 +15,7 @@
 $config{PARROT}          = '..@slash@..@slash@parrot@exe@';
 $config{C_LIBS}          = '@libs@';
 $config{INCLUDE}         = "$config{PARROTDIR}/include";
-#INVERSE_CONDITIONED_LINE(win32):$config{ALL_PARROT_LIBS} = "@libparrot_ldflags@ $config{C_LIBS}";
+#UNLESS(win32):$config{ALL_PARROT_LIBS} = "@libparrot_ldflags@ $config{C_LIBS}";
 $config{ABS_PARROTDIR}   = Cwd::realpath(
                                File::Spec->rel2abs( $config{PARROTDIR} ) );
 $config{LDDLFLAGS}       = $Config{lddlflags};
@@ -30,9 +30,9 @@
     'NAME'         => 'Parrot::Embed',
     'VERSION_FROM' => 'lib/Parrot/Embed.pm',
     'PREREQ_PM'    => { 'ExtUtils::CBuilder' => 0 },
-#CONDITIONED_LINE(win32):    'LIBS'         => [ $config{C_LIBS} ],
-#CONDITIONED_LINE(win32):    'OBJECT'       => "@libparrot_ldflags@ Embed@o@",
-#INVERSE_CONDITIONED_LINE(win32):    'LIBS'         => [ $config{ALL_PARROT_LIBS} ],
+#IF(win32):    'LIBS'         => [ $config{C_LIBS} ],
+#IF(win32):    'OBJECT'       => "@libparrot_ldflags@ Embed@o@",
+#ELSE:    'LIBS'         => [ $config{ALL_PARROT_LIBS} ],
     'INC'          => "-I$config{INCLUDE}",
     'PM'           => { map { $_ => "blib/$_" } <lib/Parrot/*pm> },
     'clean'        => { FILES => '*.xs t/greet.pbc' },
@@ -43,7 +43,9 @@
 
 sub postamble
 {
-    "t/greet.pbc:\n\t$config{PARROT} -o t/greet.pbc t/greet.pir\n";
+    "t/greet.pbc:\n\t$config{PARROT} -o t/greet.pbc t/greet.pir\n"
+    ."#\n# Local variables:\n# mode: makefile\n"
+    ."# ex: ft=make\n# End:\n";
 }
 
 sub test
@@ -64,3 +66,10 @@
     $inherited     =~ s{($sub_target)}{$1 t/greet.pbc};
     $inherited;
 }
+
+# Local Variables:
+#   mode: cperl
+#   cperl-indent-level: 4
+#   fill-column: 100
+# End:
+# vim: expandtab shiftwidth=4:
--- origsrc/parrot-0.7.1/config/gen/makefiles/pct.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/pct.in	2008-08-27 20:40:29.000000000 +0200
@@ -1,4 +1,4 @@
-# $Id: pct.in 24443 2008-01-02 17:42:04Z particle $
+# $Id: pct.in 30597 2008-08-27 18:31:51Z moritz $
 
 # Setup some commands
 LN_S     = @lns@
@@ -9,6 +9,9 @@
 PGE_DIR  = ../../compilers/pge
 TEST_DIR = ../../t/compilers/pct
 CP       = @cp@
+RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
+#IF(cygwin):SHRPENV  = env PATH="@build_dir@/blib/lib:$(PATH)"
+#ELSIF(!win32):SHRPENV  = env LD_RUN_PATH="@build_dir@/blib/lib"
 
 # Where to put things
 PARROT_LIBRARY    = ../../runtime/parrot/library
@@ -30,13 +33,17 @@
   src/POST/Node.pir
 
 # the default target
-all: $(PARROT_LIBRARY)/PCT.pbc
+all: $(PARROT_LIBRARY)/PCT.pbc Makefile
 
 $(PARROT_LIBRARY)/PCT.pbc: $(PARROT) $(PCT_SOURCES)
-	$(PARROT) -o $(PARROT_LIBRARY)/PCT.pbc --output-pbc PCT.pir
-	$(PARROT) -o $(PARROT_LIBRARY)/PCT/PAST.pbc --output-pbc src/PAST.pir
-	$(PARROT) -o $(PARROT_LIBRARY)/PCT/Grammar.pbc --output-pbc src/PCT/Grammar.pir
-	$(PARROT) -o $(PARROT_LIBRARY)/PCT/HLLCompiler.pbc --output-pbc src/PCT/HLLCompiler.pir
+	$(SHRPENV) $(PARROT) -o $(PARROT_LIBRARY)/PCT.pbc --output-pbc PCT.pir
+	$(SHRPENV) $(PARROT) -o $(PARROT_LIBRARY)/PCT/PAST.pbc --output-pbc src/PAST.pir
+	$(SHRPENV) $(PARROT) -o $(PARROT_LIBRARY)/PCT/Grammar.pbc --output-pbc src/PCT/Grammar.pir
+	$(SHRPENV) $(PARROT) -o $(PARROT_LIBRARY)/PCT/HLLCompiler.pbc --output-pbc src/PCT/HLLCompiler.pir
+
+# regenerate the Makefile
+Makefile: @build_dir@/config/gen/makefiles/pct.in
+	cd @build_dir@ && $(RECONFIGURE) --step=gen::makefiles --target=compilers/pct/Makefile
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -72,3 +79,9 @@
 	$(RM_F) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/makefiles/pge.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/pge.in	2008-08-27 20:40:29.000000000 +0200
@@ -1,4 +1,4 @@
-# $Id: pge.in 26664 2008-03-31 15:58:36Z pmichaud $
+# $Id: pge.in 30597 2008-08-27 18:31:51Z moritz $
 
 # Setup some commands
 LN_S     = @lns@
@@ -7,12 +7,15 @@
 PARROT   = ../../parrot@exe@
 TOOL_DIR = ../..
 CP       = @cp@
+RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
+#IF(cygwin):SHRPENV  = env PATH="@build_dir@/blib/lib:$(PATH)"
+#ELSIF(!win32):SHRPENV  = env LD_RUN_PATH="@build_dir@/blib/lib"
 
 # Where to put things
 PARROT_LIBRARY    = ../../runtime/parrot/library
 
 # the default target
-all: $(PARROT_LIBRARY)/PGE.pbc
+all: $(PARROT_LIBRARY)/PGE.pbc Makefile
 
 SOURCES = PGE.pir \
   PGE/Exp.pir \
@@ -29,10 +32,14 @@
 PGE.pbc: $(PARROT) $(SOURCES)
 	$(RM_F) PGE.pbc $(PARROT_LIBRARY)/PGE.pbc
 	$(PERL) -e "" >PGE/builtins_gen.pir
-	$(PARROT) -o PGE.pbc --output-pbc PGE.pir
-	$(PARROT) $(PARROT_LIBRARY)/PGE/Perl6Grammar.pir  --output=PGE/builtins_gen.pir PGE/builtins.pg
+	$(SHRPENV) $(PARROT) -o PGE.pbc --output-pbc PGE.pir
+	$(SHRPENV) $(PARROT) $(PARROT_LIBRARY)/PGE/Perl6Grammar.pir --output=PGE/builtins_gen.pir PGE/builtins.pg
 	$(RM_F) PGE.pbc
-	$(PARROT) -o PGE.pbc --output-pbc PGE.pir
+	$(SHRPENV) $(PARROT) -o PGE.pbc --output-pbc PGE.pir
+
+# regenerate the Makefile
+Makefile: @build_dir@/config/gen/makefiles/pge.in
+	cd @build_dir@ && $(RECONFIGURE) --step=gen::makefiles --target=compilers/pge/Makefile
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -75,3 +82,9 @@
 	$(RM_F) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/makefiles/pirc.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/pirc.in	2008-09-02 21:14:23.406250000 +0200
@@ -1,13 +1,14 @@
-# $Id: pirc.in 26140 2008-03-01 02:43:27Z jkeenan $
+# $Id: pirc.in 30712 2008-09-02 19:16:49Z moritz $
 
 # Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_F          = @rm_f@
-PARROT        = ../../parrot@exe@
 TOOL_DIR      = ../..
 CC            = @cc@
 CP            = @cp@
+POD2HTML      = pod2html
+PODCHECKER    = podchecker
 BUILD         = $(PERL) @build_dir@/tools/build/dynpmc.pl
 O             = @o@
 EXE           = @exe@
@@ -34,7 +35,7 @@
   src/pirutil.c
 
 # the default target
-all: pirc
+all: pirc Makefile
 
 pirc: pirmain$(O) pirparser$(O) pirlexer$(O) pirout$(O) pastout$(O) pirvtable$(O) jsonout$(O) pbcout$(O) pirutil$(O)
 	$(CC) -o pirc$(EXE) pirmain$(O) pirparser$(O) pirlexer$(O) pirout$(O) pastout$(O) pirvtable$(O) jsonout$(O) pbcout$(O) pirutil$(O)
@@ -66,6 +67,9 @@
 pirutil$(O): src/pirutil.c src/pirutil.h
 	$(CC) $(CFLAGS) -c src/pirutil.c
 
+# regenerate the Makefile
+Makefile: $(BUILD_DIR)/config/gen/makefiles/pirc.in
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::makefiles --target=compilers/pirc/Makefile
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -93,27 +97,22 @@
 
 
 docs: src/pirlexer.c src/pirparser.c doc/design.pod
-	pod2html --css=http://www.parrotcode.org/css/perl.css src/pirlexer.c > doc/pirlexer.html
-	pod2html --css=http://www.parrotcode.org/css/perl.css src/pirparser.c > doc/pirparser.html
-	pod2html --css=http://www.parrotcode.org/css/perl.css src/pirvtable.c > doc/pirvtable.html
-	pod2html --css=http://www.parrotcode.org/css/perl.css src/pirout.c > doc/pirout.html
-	pod2html --css=http://www.parrotcode.org/css/perl.css src/jsonout.c > doc/jsonout.html
-	pod2html --css=http://www.parrotcode.org/css/perl.css src/pastout.c > doc/pastout.html
-	pod2html --css=http://www.parrotcode.org/css/perl.css src/pirutil.c > doc/pirutil.html
-	pod2html --css=http://www.parrotcode.org/css/perl.css doc/design.pod > doc/design.html
-	pod2html --css=http://www.parrotcode.org/css/perl.css README.pod > doc/README.html
+	$(POD2HTML) --css=http://www.parrotcode.org/css/perl.css src/pirlexer.c > doc/pirlexer.html
+	$(POD2HTML) --css=http://www.parrotcode.org/css/perl.css src/pirparser.c > doc/pirparser.html
+	$(POD2HTML) --css=http://www.parrotcode.org/css/perl.css src/pirvtable.c > doc/pirvtable.html
+	$(POD2HTML) --css=http://www.parrotcode.org/css/perl.css src/pirout.c > doc/pirout.html
+	$(POD2HTML) --css=http://www.parrotcode.org/css/perl.css src/jsonout.c > doc/jsonout.html
+	$(POD2HTML) --css=http://www.parrotcode.org/css/perl.css src/pastout.c > doc/pastout.html
+	$(POD2HTML) --css=http://www.parrotcode.org/css/perl.css src/pirutil.c > doc/pirutil.html
+	$(POD2HTML) --css=http://www.parrotcode.org/css/perl.css doc/design.pod > doc/design.html
+	$(POD2HTML) --css=http://www.parrotcode.org/css/perl.css README.pod > doc/README.html
 
 test: all
 	cd t && prove && cd ..
-	podchecker $(SOURCES) \
+	$(PODCHECKER) $(SOURCES) \
   doc/design.pod \
   README.pod
 
-# regenerate the Makefile
-Makefile: $(BUILD_DIR)/config/gen/makefiles/pirc.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::makefiles --target=compilers/pirc/Makefile
-
-
 clean:
 	$(RM_F) *$(O)
 
@@ -124,3 +123,9 @@
   doc/*.html
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/makefiles/root.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/root.in	2008-10-03 11:53:34.828125000 +0200
@@ -19,6 +19,7 @@
 DEVEL           = @DEVEL@
 VERSION         = @VERSION@$(DEVEL)
 SOVERSION       = @VERSION@
+CONFIG_ARGS     = @config_args@
 
 # Override at least PREFIX with the install location if you're going
 # to be using this outside of your build area.
@@ -105,7 +106,7 @@
 RECONFIGURE      = $(PERL) tools/dev/reconfigure.pl
 INNO_SETUP       = iscc
 JIT_BUILD_TOOL   = $(BUILD_TOOLS_DIR)/jit2c.pl
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ###############################################################################
 #
@@ -138,7 +139,7 @@
 
 GEN_MAKEFILES = \
     Makefile \
-#CONDITIONED_LINE(has_perldoc):    docs/Makefile \
+#IF(has_perldoc):    docs/Makefile \
     compilers/bcg/Makefile \
     compilers/json/Makefile \
     compilers/ncigen/Makefile \
@@ -164,9 +165,9 @@
     lib/Parrot/PMC.pm \
     runtime/parrot/include/config.fpmc \
     $(SRC_DIR)/platform.c \
-#CONDITIONED_LINE(platform_asm):    $(SRC_DIR)/platform_asm.s \
-#CONDITIONED_LINE(has_opengl):    config/gen/call_list/opengl.in \
-#CONDITIONED_LINE(has_glut):    $(SRC_DIR)/glut_callbacks.c \
+#IF(platform_asm):    $(SRC_DIR)/platform_asm.s \
+#IF(has_opengl):    config/gen/call_list/opengl.in \
+#IF(has_glut):    $(SRC_DIR)/glut_callbacks.c \
     $(SRC_DIR)/core_pmcs.c \
     CFLAGS \
     $(IMCC_DIR)/CFLAGS \
@@ -183,8 +184,8 @@
 
 GEN_PASM_INCLUDES = \
     runtime/parrot/include/signal.pasm \
-#CONDITIONED_LINE(has_opengl):    runtime/parrot/include/opengl_defines.pasm \
-#CONDITIONED_LINE(has_opengl):    runtime/parrot/library/OpenGL_funcs.pir \
+#IF(has_opengl):    runtime/parrot/include/opengl_defines.pasm \
+#IF(has_opengl):    runtime/parrot/library/OpenGL_funcs.pir \
     @TEMP_gen_pasm_includes@
 
 CONFIGURE_GENERATED_FILES = \
@@ -252,7 +253,7 @@
     $(LIBRARY_DIR)/MIME/Base64.pbc \
     $(LIBRARY_DIR)/NCI/call_toolkit_init.pbc \
     $(LIBRARY_DIR)/ncurses.pbc \
-#CONDITIONED_LINE(has_opengl):    $(LIBRARY_DIR)/OpenGL.pbc \
+#IF(has_opengl):    $(LIBRARY_DIR)/OpenGL.pbc \
     $(LIBRARY_DIR)/P6object.pbc \
     $(LIBRARY_DIR)/parrotlib.pbc \
     $(LIBRARY_DIR)/pcre.pbc \
@@ -370,7 +371,7 @@
     $(OPS_DIR)/core_ops$(O) \
     $(OPS_DIR)/core_ops_switch$(O) \
     \
-#CONDITIONED_LINE(i386_has_gcc_cmpxchg):    $(SRC_DIR)/atomic/gcc_x86$(O) \
+#IF(i386_has_gcc_cmpxchg):    $(SRC_DIR)/atomic/gcc_x86$(O) \
     $(SRC_DIR)/byteorder$(O) \
     $(SRC_DIR)/charset$(O) \
     $(SRC_DIR)/core_pmcs$(O) \
@@ -442,7 +443,7 @@
     @TEMP_atomic_o@ \
     @TEMP_jit_o@ \
     @TEMP_gc_o@ \
-#CONDITIONED_LINE(platform_asm):    $(SRC_DIR)/platform_asm$(O) \
+#IF(platform_asm):    $(SRC_DIR)/platform_asm$(O) \
 
 O_FILES = \
     $(INTERP_O_FILES) \
@@ -485,14 +486,15 @@
 
 # Libraries
 LIBPARROT_STATIC    = @blib_dir@/@libparrot_static@
-#CONDITIONED_LINE(darwin):export DYLD_LIBRARY_PATH := @blib_dir@:$(DYLD_LIBRARY_PATH)
-#CONDITIONED_LINE(win32):LIBPARROT_SHARED  = @libparrot_shared@
-#INVERSE_CONDITIONED_LINE(win32):LIBPARROT_SHARED  = @blib_dir@/@libparrot_shared@
+#IF(darwin):export DYLD_LIBRARY_PATH := @blib_dir@:$(DYLD_LIBRARY_PATH)
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+#IF(cygwin or win32):LIBPARROT_SHARED    = @libparrot_shared@
+#ELSE:LIBPARROT_SHARED    = @blib_dir@/@libparrot_shared@
 
 # This line controls whether a static or shared library is built
 LIBPARROT           = @libparrot@
 
-#CONDITIONED_LINE(has_icu):ICU_SHARED  = @icu_shared@
+#IF(has_icu):ICU_SHARED  = @icu_shared@
 ALL_PARROT_LIBS     = @libparrot_ldflags@ $(ICU_SHARED) $(C_LIBS)
 
 # dynamic extensions
@@ -547,7 +549,7 @@
 #
 ###############################################################################
 
-all : \
+build : \
     flags_dummy \
     PARROT_LIBS \
     $(PARROT) \
@@ -555,7 +557,7 @@
     runtime/parrot/include/config.fpmc \
     docs \
     $(LIBNCI_TEST_SO) \
-#CONDITIONED_LINE(has_glut):    $(LIBGLUTCB_SO) \
+#IF(has_glut):    $(LIBGLUTCB_SO) \
     $(GEN_LIBRARY) \
     dynpmc \
     dynoplibs \
@@ -565,6 +567,8 @@
     $(DIS) \
     $(PBCMERGE)
 
+all : build parrot_utils installable $(PERL6) languages
+
 $(GEN_LIBRARY) : $(PARROT)
 
 # constant string support
@@ -759,7 +763,8 @@
 
 parrot_utils : $(PDUMP) $(DIS) $(PINFO) $(PDB) $(PBCMERGE) $(PBC_TO_EXE) $(PARROT_CONFIG)
 
-installable: all $(INSTALLABLEPARROT) $(INSTALLABLEPDUMP) $(INSTALLABLEDIS) $(INSTALLABLEPINFO) $(INSTALLABLEPDB) $(INSTALLABLEPBCMERGE) $(INSTALLABLECONFIG)
+installable: build parrot_utils $(INSTALLABLEPARROT) $(INSTALLABLEPDUMP) $(INSTALLABLEDIS) \
+             $(INSTALLABLEPINFO) $(INSTALLABLEPDB) $(INSTALLABLEPBCMERGE) $(INSTALLABLECONFIG)
 
 
 flags_dummy :
@@ -770,7 +775,6 @@
 	$(PARROT) -o $@ runtime/parrot/library/parrotlib.pir
 
 runtime/parrot/include/config.fpmc : myconfig config_lib.pasm $(MINIPARROT)
-	@cygchkdll@
 	@echo Invoking Parrot to generate runtime/parrot/include/config.fpmc --cross your fingers
 	$(MINIPARROT) config_lib.pasm > $@
 
@@ -780,7 +784,7 @@
 	$(LINK) @ld_out@$@ \
 	$(SRC_DIR)/main$(O) $(SRC_DIR)/parrot_config$(O) \
 	@rpath_blib@ $(ALL_PARROT_LIBS) $(LINKFLAGS) $(LINK_DYNAMIC)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 pbc_to_exe.pir : $(PARROT) tools/dev/pbc_to_exe_gen.pl
 	$(PERL) tools/dev/pbc_to_exe_gen.pl \
@@ -794,8 +798,12 @@
 	$(PARROT) -o parrot_config.pbc tools/util/parrot-config.pir
 	$(PARROT) pbc_to_exe.pir parrot_config.pbc
 
+$(INSTALLABLECONFIG) : $(SRC_DIR)/install_config$(O) $(PARROT_CONFIG) $(PBC_TO_EXE)
+	$(PARROT) -o parrot_config.pbc tools/util/parrot-config.pir
+	$(PBC_TO_EXE) parrot_config.pbc --install
+
 # HLL Executable targets
-#CONDITIONED_LINE(win32):perl6 : $(PERL6)
+#IF(win32 or cygwin):perl6 : $(PERL6)
 
 $(PERL6) : compilers $(PBC_TO_EXE)
 	$(MAKE) languages/perl6 perl6$(EXE)
@@ -804,20 +812,20 @@
 	$(PERL6) -e"say 'Hello, world.'"
 
 
-# TODO build the real miniparrot
+# build the real miniparrot
 $(MINIPARROT) : $(SRC_DIR)/main$(O) $(GEN_HEADERS) $(LIBPARROT) \
     lib/Parrot/OpLib/core.pm $(SRC_DIR)/null_config$(O)
 	$(LINK) @ld_out@$@ $(SRC_DIR)/main$(O) $(SRC_DIR)/null_config$(O) \
 	@rpath_blib@ $(ALL_PARROT_LIBS) $(LINKFLAGS)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 $(INSTALLABLEPARROT) : $(SRC_DIR)/main$(O) $(GEN_HEADERS) $(LIBPARROT) \
     lib/Parrot/OpLib/core.pm $(SRC_DIR)/install_config$(O) \
     $(PARROT)
 	$(LINK) @ld_out@$@ \
-    $(SRC_DIR)/main$(O) \
-    $(ALL_PARROT_LIBS) $(LINKFLAGS) $(SRC_DIR)/install_config$(O)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+    $(SRC_DIR)/main$(O) $(SRC_DIR)/install_config$(O) \
+    $(ALL_PARROT_LIBS) $(LINKFLAGS)
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 $(INC_DIR)/parrot.h : $(INC_DIR)/pbcversion.h $(INC_DIR)/vtable.h
 
@@ -875,27 +883,23 @@
 # so always delete the lib -leo
 
 PARROT_LIBS: \
-#CONDITIONED_LINE(has_static_linking):  $(LIBPARROT_STATIC) \
-#CONDITIONED_LINE(has_dynamic_linking): $(LIBPARROT_SHARED)
+#IF(has_static_linking):  $(LIBPARROT_STATIC) \
+#IF(has_dynamic_linking): $(LIBPARROT_SHARED)
 
 $(LIBPARROT_STATIC) : $(O_FILES)
 	$(MKPATH) @blib_dir@
 	$(AR_CR) @ar_out@$@ @ar_extra@ $(O_FILES)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;2
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;2
 	$(RANLIB) $@
 
 $(LIBPARROT_SHARED) : $(O_FILES)
 	$(MKPATH) @blib_dir@
 	$(LD) $(LD_SHARE_FLAGS) $(LDFLAGS) @ld_out@$@ @libparrot_soname@ \
-#CONDITIONED_LINE(cygchkdll):		-Wl,--out-implib=blib/lib/libparrot.dll.a \
+#IF(cygwin or msys or mingw):		-Wl,--out-implib=libparrot.dll.a \
 		$(O_FILES) $(C_LIBS) $(ICU_SHARED)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;2
-#CONDITIONED_LINE(libparrot_shared_alias):	( cd @blib_dir@ ; ln -sf @libparrot_shared@ @libparrot_shared_alias@ )
-
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;2
+#IF(libparrot_shared_alias):	( cd @blib_dir@ ; ln -sf @libparrot_shared@ @libparrot_shared_alias@ )
 
-$(INSTALLABLECONFIG) : $(SRC_DIR)/install_config$(O) $(PARROT_CONFIG) $(PBC_TO_EXE)
-	$(PARROT) -o parrot_config.pbc tools/util/parrot-config.pir
-	$(PBC_TO_EXE) parrot_config.pbc --install
 
 #
 # Parrot Debugger
@@ -908,14 +912,14 @@
     $(SRC_DIR)/parrot_debugger$(O) \
     $(SRC_DIR)/parrot_config$(O) \
     @rpath_blib@ $(ALL_PARROT_LIBS) $(LINKFLAGS)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 $(INSTALLABLEPDB) : $(SRC_DIR)/parrot_debugger$(O) $(LIBPARROT)
 	$(LINK) @ld_out@$@ \
     $(SRC_DIR)/parrot_debugger$(O) \
     $(SRC_DIR)/parrot_config$(O) \
     $(ALL_PARROT_LIBS) $(LINKFLAGS)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 #
 # Parrot Disassembler
@@ -927,13 +931,13 @@
 	$(LINK) @ld_out@$@ \
     $(SRC_DIR)/pbc_disassemble$(O) \
     @rpath_blib@ $(ALL_PARROT_LIBS) $(LINKFLAGS)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 $(INSTALLABLEDIS) : $(SRC_DIR)/pbc_disassemble$(O) $(LIBPARROT)
 	$(LINK) @ld_out@$@ \
     $(SRC_DIR)/pbc_disassemble$(O) \
     $(ALL_PARROT_LIBS) $(LINKFLAGS)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 #
 # Parrot Dump
@@ -943,7 +947,7 @@
 	$(LINK) @ld_out@$@ \
     $(SRC_DIR)/pdump$(O) \
     $(SRC_DIR)/packdump$(O) @rpath_blib@ $(ALL_PARROT_LIBS) $(LINKFLAGS)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 $(SRC_DIR)/pdump$(O) : $(GEN_HEADERS)
 
@@ -951,7 +955,7 @@
 	$(LINK) @ld_out@$@ \
     $(SRC_DIR)/pdump$(O) \
     $(SRC_DIR)/packdump$(O) $(ALL_PARROT_LIBS) $(LINKFLAGS)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 
 # pbc_info
@@ -959,7 +963,7 @@
 	$(LINK) @ld_out@$@ \
     $(SRC_DIR)/pbc_info$(O) \
     @rpath_blib@ $(ALL_PARROT_LIBS) $(LINKFLAGS)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 $(SRC_DIR)/pbc_info$(O) : $(GEN_HEADERS)
 
@@ -967,7 +971,7 @@
 	$(LINK) @ld_out@$@ \
     $(SRC_DIR)/pbc_info$(O) \
     $(ALL_PARROT_LIBS) $(LINKFLAGS)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 #
 # Parrot Bytecode File Merger
@@ -978,14 +982,14 @@
     $(SRC_DIR)/pbc_merge$(O) \
     $(SRC_DIR)/parrot_config$(O) \
     @rpath_blib@ $(ALL_PARROT_LIBS) $(LINK_DYNAMIC) $(LINKFLAGS)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 $(INSTALLABLEPBCMERGE) : $(SRC_DIR)/pbc_merge$(O) $(LIBPARROT)
 	$(LINK) @ld_out@$@ \
     $(SRC_DIR)/pbc_merge$(O) \
     $(SRC_DIR)/install_config$(O) \
     $(ALL_PARROT_LIBS) $(LINKFLAGS)
-#CONDITIONED_LINE(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
+#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;1
 
 
 ###############################################################################
@@ -1000,6 +1004,9 @@
     lib/Parrot/OpsFile.pm lib/Parrot/Op.pm $(OPS_DIR)/ops.num $(OPS_DIR)/ops.skip
 	$(PERL) $(BUILD_TOOLS_DIR)/ops2pm.pl $(OPS_FILES)
 
+Makefile : config/gen/makefiles/root.in
+	$(PERL) tools/dev/reconfigure.pl --step=gen::makefiles --target=Makefile
+
 ###############################################################################
 #
 # Examples (Assembly):
@@ -1092,8 +1099,8 @@
 
 $(SRC_DIR)/platform$(O) : $(GENERAL_H_FILES)
 
-#CONDITIONED_LINE(platform_asm):$(SRC_DIR)/platform_asm$(O) : $(GENERAL_H_FILES)
-#CONDITIONED_LINE(platform_asm):
+#IF(platform_asm):$(SRC_DIR)/platform_asm$(O) : $(GENERAL_H_FILES)
+#IF(platform_asm):
 $(SRC_DIR)/core_pmcs$(O) : $(GENERAL_H_FILES)
 
 $(SRC_DIR)/trace$(O) : $(GENERAL_H_FILES)
@@ -1282,11 +1289,11 @@
 #
 ###############################################################################
 
-#CONDITIONED_LINE(has_perldoc):docs : docs.dummy
-#INVERSE_CONDITIONED_LINE(has_perldoc):docs : docs.stub
+#IF(has_perldoc):docs : docs.dummy
+#ELSE:docs : docs.stub
 
-#CONDITIONED_LINE(has_perldoc):html : html.dummy
-#INVERSE_CONDITIONED_LINE(has_perldoc):html : html.stub
+#IF(has_perldoc):html : html.dummy
+#ELSE:html : html.stub
 
 html.stub:
 	@echo "Perldoc is required, but not detected."
@@ -1482,10 +1489,10 @@
 # when the needed runcores are available
 fulltest :
 	-@make@ testb
-#CONDITIONED_LINE(cg_flag):	-@make@ testC
+#IF(cg_flag):	-@make@ testC
 	-@make@ testf
-#CONDITIONED_LINE(cg_flag):	-@make@ testg
-#CONDITIONED_LINE(cg_flag):	-@make@ testj
+#IF(cg_flag):	-@make@ testg
+#IF(cg_flag):	-@make@ testj
 	-@make@ testr
 	-@make@ testS
 	-@make@ src_tests
@@ -1597,15 +1604,15 @@
     prog-clean \
     dynext-clean \
     languages-clean \
-#CONDITIONED_LINE(has_perldoc):    docs-clean \
-#CONDITIONED_LINE(has_perldoc):    html-clean \
+#IF(has_perldoc):    docs-clean \
+#IF(has_perldoc):    html-clean \
     dynpmc-clean \
     dynoplibs-clean \
     examples-clean \
     imcc-clean \
     compilers-clean \
     smoke-clean \
-#INVERSE_CONDITIONED_LINE(win32):    cover-clean \
+#UNLESS(win32):    cover-clean \
     editor-clean
 	@TEMP_cg_r@
 	$(RM_F) chartypes "*.s" "*~"
@@ -1648,7 +1655,9 @@
     $(SRC_DIR)/string_private_cstring.h \
     "$(SRC_DIR)/*.str" "$(SRC_DIR)/io/*.str" "$(SRC_DIR)/pmc/*.str" \
     "src/pmc/*.c" "src/pmc/pmc_*.h" "src/pmc/*.dump" \
-    vtable.dump "*.def" "*.lib" "*.exp"
+    vtable.dump \
+#IF(win32):    "*.def" "*.lib" "*.exp" \
+#IF(cygwin):   "*.stackdump" \
 
 archclean: dynoplibs-clean dynpmc-clean dynext-clean
 	$(RM_F) \
@@ -1696,12 +1705,12 @@
 	$(RM_F) \
     "$(DYNEXT_DIR)/*$(LOAD_EXT)" \
     "$(DYNEXT_DIR)/*$(SHARE_EXT)" \
-    "$(DYNEXT_DIR)/*.lib" \
-    "*.pdb" "$(DYNEXT_DIR)/*.pdb" \
-    "*.ilk" "$(DYNEXT_DIR)/*.ilk" \
-    "*.exp" "$(DYNEXT_DIR)/*.exp" \
-    "*.def" "$(DYNEXT_DIR)/*.def" \
-    "*.manifest" "$(DYNEXT_DIR)/*.manifest"
+#IF(win32):    "$(DYNEXT_DIR)/*.lib" \
+#IF(win32):    "*.pdb" "$(DYNEXT_DIR)/*.pdb" \
+#IF(win32):    "*.ilk" "$(DYNEXT_DIR)/*.ilk" \
+#IF(win32):    "*.exp" "$(DYNEXT_DIR)/*.exp" \
+#IF(win32):    "*.def" "$(DYNEXT_DIR)/*.def" \
+#IF(win32):    "*.manifest" "$(DYNEXT_DIR)/*.manifest"
 
 # Remove files generated by the test suite
 # XXX Is there a danger of too long command lines in the $(RM_F) commands,
@@ -1713,14 +1722,16 @@
     "t/compilers/*/*.pbc" \
     "t/compilers/*/*_pbcexe*" \
     "t/compilers/*/*.pir" \
-    "t/compilers/*/*.stabs.s"
+    "t/compilers/*/*.stabs.s" \
+    "t/compilers/*/*.stackdump"
 	$(RM_F) \
     "t/compilers/*/*/*.out" \
     "t/compilers/*/*/*.pasm" \
     "t/compilers/*/*/*.pbc" \
     "t/compilers/*/*/*_pbcexe*" \
     "t/compilers/*/*/*.pir" \
-    "t/compilers/*/*/*.stabs.s"
+    "t/compilers/*/*/*.stabs.s" \
+    "t/compilers/*/*/*.stackdump"
 	$(RM_F) \
     "t/examples/*.past"
 	$(RM_F) \
@@ -1729,7 +1740,8 @@
     "t/*/*.pasm" \
     "t/*/*_pbcexe*" \
     "t/*/*.pir" \
-    "t/*/*.stabs.s"
+    "t/*/*.stabs.s" \
+    "t/*/*.stackdump"
 	$(RM_F) \
     "t/library/*.pbc" \
     "t/dynoplibs/*.pbc" \
@@ -1741,14 +1753,16 @@
 	$(RM_F) \
     "t/src/*.c" \
     "t/src/*.pdb" \
-    "t/src/*.manifest"
+    "t/src/*.manifest" \
+    "t/src/*.stackdump"
 	$(RM_F) \
      "t/tools/pmc2c.t_*" \
      "t/tools/pmc2c.pmc_t_*" \
      "t/tools/parrot_debugger.t.*"
 	$(RM_F) \
      "test$(EXE)" \
-     "test.*"
+     "test.*" \
+     "*.stackdump"
 	$(RM_F) \
      "parrot_test_run.tar.gz"
 
@@ -1776,7 +1790,7 @@
 	$(PERL) tools/dev/svnclobber.pl
 
 reconfig : clean
-	$(PERL) Configure.pl
+	$(PERL) Configure.pl $(CONFIG_ARGS)
 
 manitest :
 	$(PERL) tools/dev/manicheck.pl
@@ -2066,10 +2080,10 @@
 cover: \
     cover.dummy \
     cover-testb \
-#CONDITIONED_LINE(cg_flag):    cover-testC \
+#IF(cg_flag):    cover-testC \
     cover-testf \
-#CONDITIONED_LINE(cg_flag):    cover-testg \
-#CONDITIONED_LINE(jitcapable):    cover-testj \
+#IF(cg_flag):    cover-testg \
+#IF(jitcapable):    cover-testj \
     cover-testr \
     cover-testS \
     cover-src \
--- origsrc/parrot-0.7.1/config/gen/makefiles/tge.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/makefiles/tge.in	2008-09-18 20:42:32.140625000 +0200
@@ -6,22 +6,29 @@
 PERL     = @perl@
 RM_F     = @rm_f@
 PARROT   = ../../parrot@exe@
+RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
+#IF(cygwin):SHRPENV  = env PATH="@build_dir@/blib/lib:$(PATH)"
+#ELSIF(!win32):SHRPENV  = env LD_RUN_PATH="@build_dir@/blib/lib"
 
 # Where to put things
 PARROT_LIBRARY    = ../../runtime/parrot/library
 PERL6GRAMMAR      = $(PARROT_LIBRARY)/PGE/Perl6Grammar.pbc
 
 # the default target
-all: $(PARROT_LIBRARY)/TGE.pbc
+all: $(PARROT_LIBRARY)/TGE.pbc Makefile
 
 $(PARROT_LIBRARY)/TGE.pbc: TGE.pir TGE/Rule.pbc TGE/Parser.pbc TGE/Grammar.pbc TGE/Compiler.pbc TGE/Tree.pbc
-	$(PARROT) -o $(PARROT_LIBRARY)/TGE.pbc --output-pbc TGE.pir
+	$(SHRPENV) $(PARROT) -o $(PARROT_LIBRARY)/TGE.pbc --output-pbc TGE.pir
 
 .pir.pbc :
-	$(PARROT) -o $@ --output-pbc $<
+	$(SHRPENV) $(PARROT) -o $@ --output-pbc $<
 
 TGE/Parser.pir: TGE/Parser.pg
-	$(PARROT) $(PERL6GRAMMAR) --output=TGE//Parser.pir TGE//Parser.pg
+	$(SHRPENV) $(PARROT) $(PERL6GRAMMAR) --output=TGE/Parser.pir TGE/Parser.pg
+
+# regenerate the Makefile
+Makefile: @build_dir@/config/gen/makefiles/tge.in
+	cd @build_dir@ && $(RECONFIGURE) --step=gen::makefiles --target=compilers/tge/Makefile
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -62,3 +69,9 @@
 	$(RM_F) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/config/gen/opengl.pm	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/config/gen/opengl.pm	2008-09-18 20:27:42.046875000 +0200
@@ -447,6 +447,9 @@
 #         "$ENV{HOME}/src/osx-insane/usr/X11R6 1/include/GL/*.h",
     );
 
+    # X freeglut only if DISPLAY is set, otherwise use native w32api GLUT
+    shift @header_globs if $^O eq 'cygwin' and !$ENV{DISPLAY};
+
     print "\nChecking for OpenGL headers using the following globs:\n\t",
         join("\n\t", @header_globs), "\n"
         if $verbose;
--- origsrc/parrot-0.7.1/config/init/hints/cygwin.pm	2008-09-17 00:15:26.000000000 +0200
+++ src/parrot-0.7.1/config/init/hints/cygwin.pm	2008-10-03 11:45:11.140625000 +0200
@@ -13,19 +13,31 @@
     # in the standard installation, so we get rid of it
     my $libs = $conf->data->get('libs');
     $libs =~ s/-lutil\b//g;
+    # same for -lm and -dl
+    $libs =~ s/-lm\b//g;
+    $libs =~ s/-ldl\b//g;
 
     my $build_dir = $conf->data->get('build_dir');
     $build_dir =~ s/ /\\ /g;
+    my $libparrot_shared = $conf->data->get('libparrot_shared');
+    # force cyg prefix
+    $libparrot_shared =~ s/^lib/cyg/g;
+    # force the dll versioning
+    my @parrot_version = Parrot::BuildUtil::parrot_version();
+    my $dllsuffix = join("_",@parrot_version);
+    $libparrot_shared =~ s/parrot\.dll/parrot$dllsuffix\.dll/;
 
-    # A note about building shared libraries:  Perl5 uses the 'ld2' tool, which
-    # is installed as part of the perl5 installation.  So far, it appears
-    # parrot can get by with simply using gcc -shared, so we override the
-    # perl5 Configure defaults and use 'gcc -shared' instead of 'ld2'.
-    # If this later causes problems, it might be worth revisiting.
-    # A. Dougherty 9/9/2002
+    # An old note about building shared libraries: Perl5 used the 'ld2' tool until
+    # 5.8.8-4, which is installed as part of the perl5 installation. So far, it
+    # appears parrot can get by with simply using gcc -shared, so we override
+    # the perl5 Configure defaults and use 'gcc -shared' instead of 'ld2'.  If
+    # this later causes problems, it might be worth revisiting.  A. Dougherty
+    # 9/9/2002
     $conf->data->set(
         build_dir           => $build_dir,
-        ld                  => 'gcc',
+        ld                  => $conf->data->get('ld') eq 'ld2'
+                               ? 'gcc' # do not use old perl5 linker helper
+                               : $conf->data->get('ld'), # gcc or g++
         ld_share_flags      => '-shared',
         ld_load_flags       => '-shared',
         libs                => $libs,
@@ -34,7 +46,11 @@
         parrot_is_shared    => 1,
         sym_export          => '__declspec(dllexport)',
         sym_import          => '__declspec(dllimport)',
-        cygchkdll           => 'tools/build/cygchkdll.sh $(MINIPARROT) $(LIBPARROT)',
+        #cygchkdll           => 'tools/build/cygchkdll.sh $(MINIPARROT) $(LIBPARROT)',
+        libparrot_shared    => $libparrot_shared,
+        blib_dir            => '.',
+        # as with mingw link against the dll directly, not the importlib
+        libparrot_ldflags   => $conf->data->get('build_dir') . '/' . $libparrot_shared,
     );
 
     # inet_aton needs to be defined on Cygwin.
--- origsrc/parrot-0.7.1/config/inter/libparrot.pm	2008-09-17 00:15:25.000000000 +0200
+++ src/parrot-0.7.1/config/inter/libparrot.pm	2008-10-03 11:43:17.171875000 +0200
@@ -41,18 +41,6 @@
 
     $parrot_is_shared = 0 unless $conf->data->get('has_dynamic_linking');
 
-    # Parrot can't necessarily handle a pre-existing installed shared
-    # libparrot.so. At this point, we don't know the actual name
-    # of the shared parrot library. However, 'libparrot.so' will catch
-    # at least some of the problems.
-    # RT#52288: the check for old_versions should be improved
-    my $old_version
-        = File::Spec->catfile($conf->data->get('libdir'), 'libparrot.so');
-    if (-e $old_version) {
-        warn("\nWarning: Building a shared parrot library may conflict " .
-             "with your previously-installed $old_version\n");
-    }
-
     if (
         $conf->options->get('ask')
         &&
@@ -83,16 +71,38 @@
         : ''
     );
 
+    # Should be overridden by hints to allow RT#39742 installed parrot
+    # conflicts with dev parrot. We do not know the LIBPARROT name yet.
+    # mingw and cygwin can link to the dll directly. Only msvc needs to link
+    # against the importlib.
     unless ( defined( $conf->data->get('libparrot_ldflags') ) ) {
-        $conf->data->set(libparrot_ldflags =>
-        '-L'
-        . $conf->data->get('build_dir')
-        . $conf->data->get('slash')
-        . $conf->data->get('blib_dir')
-        . ' -lparrot'
+        $conf->data->set
+          ( libparrot_ldflags =>
+            defined( $conf->data->get('libparrot_shared') )
+            ? '-L'
+            . $conf->data->get('build_dir')
+            . $conf->data->get('slash')
+            . $conf->data->get('blib_dir')
+            . ' -lparrot'
+            : $conf->data->get('build_dir')
+            . $conf->data->get('slash')
+            . $conf->data->get('blib_dir')
+            . 'libparrot'
+            . $conf->data->get('a')
         );
     }
 
+    # RT#39742 installed parrot conflicts with dev parrot:
+    # move -L/usr/lib in ldflags to the back after -lparrot
+    # but better link directly to the file.
+    if ($parrot_is_shared and $conf->data->get('ldflags') =~ /(-L\S+)/) {
+       my $ldflags = $conf->data->get('ldflags');
+       my $lpath = $1;
+       $ldflags =~ s|$1||;
+       $conf->data->set('libs' => $lpath . " " . $conf->data->get('libs'));
+       $conf->data->set('ldflags' => $ldflags);
+    }
+
     $self->set_result( $parrot_is_shared ? 'yes' : 'no' );
 
     return 1;
--- origsrc/parrot-0.7.1/languages/APL/config/makefiles/root.in	2008-09-17 00:15:49.000000000 +0200
+++ src/parrot-0.7.1/languages/APL/config/makefiles/root.in	2008-10-03 12:30:07.859375000 +0200
@@ -1,36 +1,49 @@
-## $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+## $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME	      = APL
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_F          = @rm_f@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
-PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PGE_LIBRARY   = $(PARROT_LIB)/PGE
+PCT           = $(PARROT_LIB)/PCT.pbc
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
-PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
 
 PMC_DIR       = src/pmc
 
-all: APL.pbc
+build: APL.pbc
+
+all: APL.pbc Makefile APL@exe@ installable
 
 APL_GROUP = $(PMC_DIR)/apl_group$(LOAD_EXT)
 
@@ -42,11 +55,15 @@
 
 PMCS = aplvector
 PMC_SOURCES = $(PMC_DIR)/aplvector.pmc
+DOCS = MAINTAINER README STATUS
 
 # the default target
-APL.pbc: $(PARROT) $(SOURCES) $(APL_GROUP)
+APL.pbc: $(SOURCES) $(APL_GROUP)
 	$(PARROT) $(PARROT_ARGS) -o APL.pbc APL.pir
 
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg
 	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
 	    --encoding=utf8 \
@@ -60,15 +77,23 @@
 src/gen_builtins.pir: tools/gen_operator_defs.pl
 	$(PERL) tools/gen_operator_defs.pl >src/gen_builtins.pir
 
-$(APL_GROUP): $(PARROT) $(PMC_SOURCES)
+$(APL_GROUP): $(PMC_SOURCES)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
 
+installable : installable_$(HLLNAME)@exe@ $(ABC_GROUP) $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
+
+installable_$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=APL
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -77,8 +102,11 @@
 	@echo ""
 	@echo "  all:               APL.pbc"
 	@echo "                     This is the default."
+	@echo "  install:           install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo "  testclean:         Clean up test results."
 	@echo ""
 	@echo "Cleaning:"
@@ -93,6 +121,18 @@
 test: all
 	$(PERL) t/harness
 
+# TODO: test for installed libs, rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ demo.apl
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy "--destination=$(DESTDIR)$(LIB_DIR)/parrot/dynext" $(PMCS)
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
 testclean:
 	$(RM_F) t/*.pir
 
@@ -101,6 +141,7 @@
   src/gen_grammar.pir \
   src/gen_actions.pir \
   src/gen_builtins.pir \
+  $(PARROT_LIB)/$(HLLNAME).pbc \
   $(PMC_DIR)/*.h \
   $(PMC_DIR)/*.c \
   $(PMC_DIR)/*.dump \
@@ -111,6 +152,8 @@
   $(PMC_DIR)/*.manifest \
   $(PMC_DIR)/*.pdb \
   $(PMC_DIR)/*.lib \
+  $(HLLNAME)@exe@ \
+  installable_$(HLLNAME)@exe@ \
 
 
 clean: testclean
@@ -121,4 +164,8 @@
 
 distclean: realclean
 
-
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/BASIC/config/makefiles/root.in	1970-01-01 01:00:00.000000000 +0100
+++ src/parrot-0.7.1/languages/BASIC/config/makefiles/root.in	2008-10-03 12:30:07.968750000 +0200
@@ -0,0 +1,131 @@
+## $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
+
+## arguments we want to run parrot with
+PARROT_ARGS =
+
+## configuration settings
+HLLNAME	      = BASIC
+BUILD_DIR     = @build_dir@
+LOAD_EXT      = @load_ext@
+O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+
+## Setup some commands
+LN_S          = @lns@
+PERL          = @perl@
+RM_F          = @rm_f@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
+CAT           = $(PERL) -MExtUtils::Command -e cat
+RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+
+## places to look for things
+PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PGE_LIBRARY   = $(PARROT_LIB)/PGE
+PCT           = $(PARROT_LIB)/PCT.pbc
+PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
+NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
+
+build: $(HLLNAME).pbc
+
+all: $(HLLNAME).pbc Makefile $(HLLNAME)@exe@ installable
+
+SOURCES = compiler/APL.pir \
+  src/gen_grammar.pir \
+  src/gen_actions.pir \
+  src/gen_builtins.pir
+
+DOCS = MAINTAINER compiler/BASIC_README 
+
+# the default target
+$(HLLNAME).pbc: $(SOURCES)
+	$(PARROT) $(PARROT_ARGS) -o $(HLLNAME).pbc $(HLLNAME).pir
+
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
+# regenerate the Makefile
+Makefile: config/makefiles/root.in
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
+
+# This is a listing of all targets, that are meant to be called by users
+help:
+	@echo ""
+	@echo "Following targets are available for the user:"
+	@echo ""
+	@echo "  all:               BASIC.pbc"
+	@echo "                     This is the default."
+	@echo "  install:           install the installable targets and docs."
+	@echo ""
+	@echo "Testing:"
+	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
+	@echo "  testclean:         Clean up test results."
+	@echo ""
+	@echo "Cleaning:"
+	@echo "  clean:             Basic cleaning up."
+	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
+	@echo "  distclean:         Removes also anything built, in theory"
+	@echo ""
+	@echo "Misc:"
+	@echo "  help:              Print this help message."
+	@echo ""
+
+test: all
+	$(PERL) t/harness
+
+# TODO: test for installed libs, rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ readme.bas
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+testclean:
+	$(RM_F) t/*.pir
+
+CLEANUPS = \
+  $(HLLNAME).pbc \
+  src/gen_grammar.pir \
+  src/gen_actions.pir \
+  src/gen_builtins.pir \
+  $(PARROT_LIB)/$(HLLNAME).pbc \
+  $(HLLNAME)@exe@ \
+  installable_$(HLLNAME)@exe@
+
+clean: testclean
+	$(RM_F) $(CLEANUPS)
+
+realclean: clean
+	$(RM_F) Makefile
+
+distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/PIR/config/makefiles/root.in	2008-09-17 00:15:40.000000000 +0200
+++ src/parrot-0.7.1/languages/PIR/config/makefiles/root.in	2008-10-03 12:30:08.015625000 +0200
@@ -1,4 +1,4 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
@@ -13,13 +13,18 @@
 PERL          = @perl@
 RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
@@ -52,7 +57,7 @@
   src/pasm/gen_pasm_core.pbc
 
 # the default target
-pirc.pbc: $(PARROT) $(SOURCES) $(PASMGRAMMAR)
+pirc.pbc: $(SOURCES) $(PASMGRAMMAR)
 	$(PARROT) $(PARROT_ARGS) -o pirc.pbc pirc.pir
 
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/pir.pg
@@ -102,7 +107,7 @@
 
 src/pasm/gen_pasm_args.pbc: src/pasm/gen_pasm_args.pir
 	$(PARROT) --output-pbc -o src/pasm/gen_pasm_args.pbc src/pasm/gen_pasm_args.pir
-	
+
 src/pasm/gen_pasm_io.pbc: src/pasm/gen_pasm_io.pir
 	$(PARROT) --output-pbc -o src/pasm/gen_pasm_io.pbc src/pasm/gen_pasm_io.pir
 
@@ -111,7 +116,7 @@
 
 src/pasm/gen_pasm_core.pbc: src/pasm/gen_pasm_core.pir
 	$(PARROT) --output-pbc -o src/pasm/gen_pasm_core.pbc src/pasm/gen_pasm_core.pir
-	
+
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
 	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=PIR
@@ -177,3 +182,9 @@
 	$(RM_RF) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/WMLScript/WMLScript/wmlsconsole.pir	1970-01-01 01:00:00.000000000 +0100
+++ src/parrot-0.7.1/languages/WMLScript/WMLScript/wmlsconsole.pir	2008-09-18 20:27:42.093750000 +0200
@@ -0,0 +1,110 @@
+# Copyright (C) 2006-2008, The Perl Foundation.
+# $Id: wmlsconsole.pir 30895 2008-09-08 17:26:26Z rurban $
+
+=head1 NAME
+
+WMLScript/wmlsconsole.pir - WMLScript Console library
+
+=head1 DESCRIPTION
+
+See "WMLScript Reference UP.SDK R4.B3 - October 1999".
+
+=head1 FUNCTIONS
+
+=cut
+
+.loadlib 'wmls_ops'
+.HLL 'WMLScript', 'wmls_group'
+
+
+.sub 'getConsole'
+    new $P0, 'Hash'
+
+    .const .Sub _console_print = '_console_print'
+    $P0[0]  = _console_print
+    .const .Sub _console_println = '_console_println'
+    $P0[1]  = _console_println
+
+    .return ($P0)
+.end
+
+
+=head2 C<print(string)>
+
+=head3 DESCRIPTION
+
+
+=head3 PARAMETERS
+
+string = String
+
+=head3 RETURN VALUE
+
+Number or invalid.
+
+=cut
+
+.sub '_console_print' :anon
+    .param pmc str
+    .local pmc res
+    $I0 = isa str, 'WmlsInvalid'
+    if $I0 goto L1
+    $S0 = str
+    print $S0
+    $I0 = length $S0
+    new res, 'WmlsInteger'
+    set res, $I0
+    goto L2
+  L1:
+    new res, 'WmlsInvalid'
+  L2:
+    .return (res)
+.end
+
+
+=head2 C<println(string)>
+
+=head3 DESCRIPTION
+
+
+=head3 PARAMETERS
+
+string = String
+
+=head3 RETURN VALUE
+
+Number or invalid.
+
+=cut
+
+.sub '_console_println' :anon
+    .param pmc str
+    .local pmc res
+    $I0 = isa str, 'WmlsInvalid'
+    if $I0 goto L1
+    $S0 = str
+    print $S0
+    print "\n"
+    $I0 = length $S0
+    new res, 'WmlsInteger'
+    set res, $I0
+    goto L2
+  L1:
+    new res, 'WmlsInvalid'
+  L2:
+    .return (res)
+.end
+
+
+=head1 AUTHORS
+
+Francois Perrad.
+
+=cut
+
+
+# Local Variables:
+#   mode: pir
+#   fill-column: 100
+# End:
+# vim: expandtab shiftwidth=4 ft=pir:
--- origsrc/parrot-0.7.1/languages/WMLScript/WMLScript/wmlsfloat.pir	1970-01-01 01:00:00.000000000 +0100
+++ src/parrot-0.7.1/languages/WMLScript/WMLScript/wmlsfloat.pir	2008-09-18 20:27:42.109375000 +0200
@@ -0,0 +1,370 @@
+# Copyright (C) 2006-2008, The Perl Foundation.
+# $Id: wmlsfloat.pir 30895 2008-09-08 17:26:26Z rurban $
+
+=head1 NAME
+
+WMLScript/wmlsfloat.pir - WMLScript Float library
+
+=head1 DESCRIPTION
+
+This library contains a set of typical arithmetic floating-point functions that
+are frequently used by applications.
+
+See "WMLScript Standard Libraries Specification", section 8 "Float".
+
+=head1 FUNCTIONS
+
+=cut
+
+.loadlib 'wmls_ops'
+.HLL 'WMLScript', 'wmls_group'
+
+
+.sub 'getFloat'
+    new $P0, 'Hash'
+
+    .const .Sub _float_int = '_float_int'
+    $P0[0]  = _float_int
+    .const .Sub _float_floor = '_float_floor'
+    $P0[1]  = _float_floor
+    .const .Sub _float_ceil = '_float_ceil'
+    $P0[2]  = _float_ceil
+    .const .Sub _float_pow = '_float_pow'
+    $P0[3]  = _float_pow
+    .const .Sub _float_round = '_float_round'
+    $P0[4]  = _float_round
+    .const .Sub _float_sqrt = '_float_sqrt'
+    $P0[5]  = _float_sqrt
+    .const .Sub _float_maxFloat = '_float_maxFloat'
+    $P0[6]  = _float_maxFloat
+    .const .Sub _float_minFloat = '_float_minFloat'
+    $P0[7]  = _float_minFloat
+
+    .return ($P0)
+.end
+
+
+=head2 C<int(value)>
+
+=head3 DESCRIPTION
+
+Returns the integer part of the given value. If the value is already an integer,
+the result is the value itself.
+
+=head3 PARAMETERS
+
+value = Number
+
+=head3 RETURN VALUE
+
+Integer or invalid.
+
+=cut
+
+.sub '_float_int' :anon
+    .param pmc value
+    .local pmc res
+    $P0 = value
+    $I0 = isa value, 'WmlsString'
+    unless $I0 goto L1
+    $P0 = value.'parseNumber'()
+  L1:
+    $I0 = isa $P0, 'WmlsInvalid'
+    if $I0 goto L2
+    $I0 = $P0
+    new res, 'WmlsInteger'
+    set res, $I0
+    goto L3
+  L2:
+    new res, 'WmlsInvalid'
+  L3:
+    .return (res)
+.end
+
+
+=head2 C<floor(value)>
+
+=head3 DESCRIPTION
+
+Returns the greatest integer value that is not greater than the given value. If
+the value is already an integer, the result is the value itself.
+
+=head3 PARAMETERS
+
+value = Number
+
+=head3 RETURN VALUE
+
+Integer or invalid.
+
+=cut
+
+.sub '_float_floor' :anon
+    .param pmc value
+    .local pmc res
+    $P0 = value
+    $I0 = isa value, 'WmlsString'
+    unless $I0 goto L1
+    $P0 = value.'parseNumber'()
+  L1:
+    $I0 = isa $P0, 'WmlsInvalid'
+    if $I0 goto L2
+    $N0 = $P0
+    $I0 = floor $N0
+    new res, 'WmlsInteger'
+    set res, $I0
+    goto L3
+  L2:
+    new res, 'WmlsInvalid'
+  L3:
+    .return (res)
+.end
+
+
+=head2 C<ceil(value)>
+
+=head3 DESCRIPTION
+
+Returns the smallest integer value that is not less than the given value. If
+the value is already an integer, the result is the value itself.
+
+=head3 PARAMETERS
+
+value = Number
+
+=head3 RETURN VALUE
+
+Integer or invalid.
+
+=cut
+
+.sub '_float_ceil' :anon
+    .param pmc value
+    .local pmc res
+    $P0 = value
+    $I0 = isa value, 'WmlsString'
+    unless $I0 goto L1
+    $P0 = value.'parseNumber'()
+  L1:
+    $I0 = isa $P0, 'WmlsInvalid'
+    if $I0 goto L2
+    $N0 = $P0
+    $I0 = ceil $N0
+    new res, 'WmlsInteger'
+    set res, $I0
+    goto L3
+  L2:
+    new res, 'WmlsInvalid'
+  L3:
+    .return (res)
+.end
+
+
+=head2 C<pow(value1, value2)>
+
+=head3 DESCRIPTION
+
+Returns an implementation-dependent approximation to the result of raising
+value1 to the power of value2. If value1 is a negative number then value2
+must be an integer.
+
+=head3 PARAMETERS
+
+value1 = Number
+
+value2 = Number
+
+=head3 RETURN VALUE
+
+Floating-point or invalid.
+
+=head3 EXCEPTIONS
+
+If value1 == 0 and value2 < 0 then C<invalid> is returned.
+
+If value1 < 0 and value2 is not an integer then C<invalid> is returned.
+
+=cut
+
+.sub '_float_pow' :anon
+    .param pmc value1
+    .param pmc value2
+    .local pmc res
+    $P1 = value1
+    $I0 = isa value1, 'WmlsString'
+    unless $I0 goto L1
+    $P1 = value1.'parseNumber'()
+  L1:
+    $I0 = isa $P1, 'WmlsInvalid'
+    if $I0 goto L2
+    $N1 = $P1
+    $P2 = value2
+    $I0 = isa value2, 'WmlsString'
+    unless $I0 goto L3
+    $P2 = value2.'parseNumber'()
+  L3:
+    $I0 = isa $P2, 'WmlsInvalid'
+    if $I0 goto L2
+    $N2 = $P2
+    unless $N1 == 0.0 goto L4
+    if $N2 < 0.0 goto L2
+    new res, 'WmlsFloat'
+    set res, 0.0
+    goto L5
+  L4:
+    unless $N1 < 0.0 goto L6
+    $I0 = isa $P2, 'WmlsFloat'
+    if $I0 goto L2
+  L6:
+    $N0 = pow $N1, $N2
+    new res, 'WmlsFloat'
+    set res, $N0
+    goto L5
+  L2:
+    new res, 'WmlsInvalid'
+  L5:
+    .return (res)
+.end
+
+
+=head2 C<round(value)>
+
+=head3 DESCRIPTION
+
+Returns the number value that is closest to the given value and is equal to a
+mathematical integer. If two integer number values are equally close to the
+value, the result is the larger number value. If the value is already an
+integer, the result is the value itself.
+
+=head3 PARAMETERS
+
+value = Number
+
+=head3 RETURN VALUE
+
+Integer or invalid.
+
+=cut
+
+.sub '_float_round' :anon
+    .param pmc value
+    .local pmc res
+    $P0 = value
+    $I0 = isa value, 'WmlsString'
+    unless $I0 goto L1
+    $P0 = value.'parseNumber'()
+  L1:
+    $I0 = isa $P0, 'WmlsInvalid'
+    if $I0 goto L2
+    $N0 = $P0
+    $N0 += 0.5
+    $I0 = floor $N0
+    new res, 'WmlsInteger'
+    set res, $I0
+    goto L3
+  L2:
+    new res, 'WmlsInvalid'
+  L3:
+    .return (res)
+.end
+
+
+=head2 C<sqrt(value)>
+
+=head3 DESCRIPTION
+
+Returns an implementation-dependent approximation to the square root of
+the given value.
+
+=head3 PARAMETERS
+
+value = Floating-point
+
+=head3 RETURN VALUE
+
+Floating-point or invalid.
+
+=head3 EXCEPTIONS
+
+If value is a negative number then invalid is returned.
+
+=cut
+
+.sub '_float_sqrt' :anon
+    .param pmc value
+    .local pmc res
+    $P0 = value
+    $I0 = isa value, 'WmlsString'
+    unless $I0 goto L1
+    $P0 = value.'parseNumber'()
+  L1:
+    $I0 = isa $P0, 'WmlsInvalid'
+    if $I0 goto L2
+    $N0 = $P0
+    if $N0 < 0.0 goto L2
+    $N1 = sqrt $N0
+    new res, 'WmlsFloat'
+    set res, $N1
+    goto L3
+  L2:
+    new res, 'WmlsInvalid'
+  L3:
+    .return (res)
+.end
+
+
+=head2 C<maxFloat()>
+
+=head3 DESCRIPTION
+
+Returns the maximum floating-point value supported by [IEEE754] single
+precision floating-point format.
+
+=head3 RETURN VALUE
+
+Floating-point 3.40282347e+38.
+
+=cut
+
+.sub '_float_maxFloat' :anon
+    .local pmc res
+    new res, 'WmlsFloat'
+    set res, 3.40282347e+38
+    .return (res)
+.end
+
+
+=head2 C<minFloat()>
+
+=head3 DESCRIPTION
+
+Returns the smallest nonzero floating-point value supported by [IEEE754]
+single precision floating-point format.
+
+=head3 RETURN VALUE
+
+Floating-point. Smaller than or equal to the normalised minimum single
+precision floating-point value: 1.17549435e-38.
+
+=cut
+
+.sub '_float_minFloat' :anon
+    .local pmc res
+    new res, 'WmlsFloat'
+    set res, 1.17549435e-38
+    .return (res)
+.end
+
+
+=head1 AUTHORS
+
+Francois Perrad.
+
+=cut
+
+
+# Local Variables:
+#   mode: pir
+#   fill-column: 100
+# End:
+# vim: expandtab shiftwidth=4 ft=pir:
--- origsrc/parrot-0.7.1/languages/WMLScript/WMLScript/wmlslang.pir	1970-01-01 01:00:00.000000000 +0100
+++ src/parrot-0.7.1/languages/WMLScript/WMLScript/wmlslang.pir	2008-09-18 20:27:42.140625000 +0200
@@ -0,0 +1,673 @@
+# Copyright (C) 2006-2008, The Perl Foundation.
+# $Id: wmlslang.pir 30895 2008-09-08 17:26:26Z rurban $
+
+=head1 NAME
+
+WMLScript/wmlslang.pir - WMLScript Lang library
+
+=head1 DESCRIPTION
+
+This library contains a set of functions that are closely related to the
+WMLScript language core.
+
+See "WMLScript Standard Libraries Specification", section 7 "Lang".
+
+=head1 FUNCTIONS
+
+=cut
+
+.loadlib 'wmls_ops'
+.HLL 'WMLScript', 'wmls_group'
+
+
+.sub 'getLang'
+    new $P0, 'Hash'
+
+    .const .Sub _lang_abs = '_lang_abs'
+    $P0[0]  = _lang_abs
+    .const .Sub _lang_min = '_lang_min'
+    $P0[1]  = _lang_min
+    .const .Sub _lang_max = '_lang_max'
+    $P0[2]  = _lang_max
+    .const .Sub _lang_parseInt = '_lang_parseInt'
+    $P0[3]  = _lang_parseInt
+    .const .Sub _lang_parseFloat = '_lang_parseFloat'
+    $P0[4]  = _lang_parseFloat
+    .const .Sub _lang_isInt = '_lang_isInt'
+    $P0[5]  = _lang_isInt
+    .const .Sub _lang_isFloat = '_lang_isFloat'
+    $P0[6]  = _lang_isFloat
+    .const .Sub _lang_maxInt = '_lang_maxInt'
+    $P0[7]  = _lang_maxInt
+    .const .Sub _lang_minInt = '_lang_minInt'
+    $P0[8]  = _lang_minInt
+    .const .Sub _lang_float = '_lang_float'
+    $P0[9]  = _lang_float
+    .const .Sub _lang_exit = '_lang_exit'
+    $P0[10] = _lang_exit
+    .const .Sub _lang_abort = '_lang_abort'
+    $P0[11] = _lang_abort
+    .const .Sub _lang_random = '_lang_random'
+    $P0[12] = _lang_random
+    .const .Sub _lang_seed = '_lang_seed'
+    $P0[13] = _lang_seed
+    .const .Sub _lang_characterSet = '_lang_characterSet'
+    $P0[14] = _lang_characterSet
+
+    .return ($P0)
+.end
+
+
+=head2 C<abs(value)>
+
+=head3 DESCRIPTION
+
+Returns the absolute value of the given number. If the given number is of
+type integer then an integer value is returned. If the given number is of type
+floating-point then a floating-point value is returned.
+
+=head3 PARAMETERS
+
+value = Number
+
+=head3 RETURN VALUE
+
+Number or invalid.
+
+=cut
+
+.sub '_lang_abs' :anon
+    .param pmc value
+    .local pmc res
+    res = clone value
+    res = abs value
+    .return (res)
+.end
+
+
+=head2 C<min(value1, value2)>
+
+=head3 DESCRIPTION
+
+Returns the minimum value of the given two numbers. The value and type
+returned is the same as the value and type of the selected number. The
+selection is done in the following way:
+
+=over 4
+
+=item *
+
+WMLScript operator data type conversion rules for I<integers and
+floating-points> (see [WMLScript]) must be used to specify the data
+type (integer or floating-point ) for comparison.
+
+=item *
+
+Compare the numbers to select the smaller one.
+
+=item *
+
+If the values are equal then the first value is selected.
+
+=back
+
+=head3 PARAMETERS
+
+value1 = Number
+
+value2 = Number
+
+=head3 RETURN VALUE
+
+Number or invalid.
+
+=cut
+
+.sub '_lang_min' :anon
+    .param pmc value1
+    .param pmc value2
+    .local pmc res
+    $P1 = value1
+    $I0 = isa value1, 'WmlsString'
+    unless $I0 goto L1
+    $P1 = value1.'parseNumber'()
+  L1:
+    $P2 = value2
+    $I0 = isa value2, 'WmlsString'
+    unless $I0 goto L2
+    $P2 = value2.'parseNumber'()
+  L2:
+    $P0 = isle $P1, $P2
+    $I0 = isa $P0, 'WmlsInvalid'
+    unless $I0 goto L3
+    .return ($P0)
+  L3:
+    $I0 = $P0
+    unless $I0 goto L4
+    res = clone value1
+    goto L5
+  L4:
+    res = clone value2
+  L5:
+    .return (res)
+.end
+
+
+=head2 C<max(value1, value2)>
+
+=head3 DESCRIPTION
+
+Returns the maximum value of the given two numbers. The value and type
+returned is the same as the value and type of the selected number. The
+selection is done in the following way:
+
+=over 4
+
+=item *
+
+WMLScript operator data type conversion rules for I<integers and
+floating-points> (see [WMLScript]) must be used to specify the data
+type (integer or floating-point ) for comparison.
+
+=item *
+
+Compare the numbers to select the larger one.
+
+=item *
+
+If the values are equal then the first value is selected.
+
+=back
+
+=head3 PARAMETERS
+
+value1 = Number
+
+value2 = Number
+
+=head3 RETURN VALUE
+
+Number or invalid.
+
+=cut
+
+.sub '_lang_max' :anon
+    .param pmc value1
+    .param pmc value2
+    .local pmc res
+    $P1 = value1
+    $I0 = isa value1, 'WmlsString'
+    unless $I0 goto L1
+    $P1 = value1.'parseNumber'()
+  L1:
+    $P2 = value2
+    $I0 = isa value2, 'WmlsString'
+    unless $I0 goto L2
+    $P2 = value2.'parseNumber'()
+  L2:
+    $P0 = isge $P1, $P2
+    $I0 = isa $P0, 'WmlsInvalid'
+    unless $I0 goto L3
+    .return ($P0)
+  L3:
+    $I0 = $P0
+    unless $I0 goto L4
+    res = clone value1
+    goto L5
+  L4:
+    res = clone value2
+  L5:
+    .return (res)
+.end
+
+
+=head2 C<parseInt(value)>
+
+=head3 DESCRIPTION
+
+Returns an integer value defined by the string value. The legal integer
+syntax is specified by the WMLScript (see [WMLScript]) numeric string
+grammar for I<decimal integer literals> with the following additional parsing
+rule:
+
+=over 4
+
+=item *
+
+Parsing ends when the first character is encountered that is not a
+leading '+' or '-' or a decimal digit.
+
+=back
+
+The result is the parsed string converted to an integer value.
+
+=head3 PARAMETERS
+
+value = String
+
+=head3 RETURN VALUE
+
+Integer or invalid.
+
+=head3 EXCEPTIONS
+
+In case of a parsing error an C<invalid> value is returned.
+
+=cut
+
+.sub '_lang_parseInt' :anon
+    .param pmc value
+    .local pmc res
+    $I0 = isa value, 'WmlsString'
+    unless $I0 goto L1
+    res = value.'parseInt'()
+    .return (res)
+  L1:
+    res = value
+    $I0 = isa value, 'WmlsInteger'
+    if $I0 goto L2
+    new res, 'WmlsInvalid'
+  L2:
+    .return (res)
+.end
+
+
+=head2 C<parseFloat(value)>
+
+=head3 DESCRIPTION
+
+Returns a floating-point value defined by the string value. The legal floatingpoint
+syntax is specified by the WMLScript (see [WMLScript]) numeric
+string grammar for I<decimal floating-point literals> with the following additional
+parsing rule:
+
+=over 4
+
+=item *
+
+Parsing ends when the first character is encountered that cannot
+be parsed as being part of the floating-point representation.
+
+=back
+
+The result is the parsed string converted to a floating-point value.
+
+=head3 PARAMETERS
+
+value = String
+
+=head3 RETURN VALUE
+
+Floating-point or invalid.
+
+=head3 EXCEPTIONS
+
+In case of a parsing error an C<invalid> value is returned.
+
+=cut
+
+.sub '_lang_parseFloat' :anon
+    .param pmc value
+    .local pmc res
+    $I0 = isa value, 'WmlsString'
+    unless $I0 goto L1
+    res = value.'parseFloat'()
+    .return (res)
+  L1:
+    res = value
+    $I0 = isa value, 'WmlsFloat'
+    if $I0 goto L2
+    $I0 = isa value, 'WmlsInteger'
+    unless $I0 goto L3
+    $I0 = value
+    new res, 'WmlsFloat'
+    set res, $I0
+    goto L2
+  L3:
+    new res, 'WmlsInvalid'
+  L2:
+    .return (res)
+.end
+
+
+=head2 C<isInt(value)>
+
+=head3 DESCRIPTION
+
+Returns a boolean value that is C<true> if the given value can be converted
+into an integer number by using parseInt(value). Otherwise C<false> is
+returned.
+
+=head3 PARAMETERS
+
+value = Any
+
+=head3 RETURN VALUE
+
+Boolean or invalid.
+
+=cut
+
+.sub '_lang_isInt' :anon
+    .param pmc value
+    .local pmc res
+    $I0 = isa value, 'WmlsString'
+    unless $I0 goto L1
+    $P0 = value.'parseInt'()
+    res = defined $P0
+    .return (res)
+  L1:
+    $I0 = isa value, 'WmlsInvalid'
+    unless $I0 goto L2
+    new res, 'WmlsInvalid'
+    .return (res)
+  L2:
+    new res, 'WmlsBoolean'
+    $I0 = isa value, 'WmlsInteger'
+    set res, $I0
+    .return (res)
+.end
+
+
+=head2 C<isFloat(value)>
+
+=head3 DESCRIPTION
+
+Returns a boolean value that is C<true> if the given value can be converted
+into a floating-point number using parseFloat(value). Otherwise C<false> is
+returned.
+
+=head3 PARAMETERS
+
+value = Any
+
+=head3 RETURN VALUE
+
+Boolean or invalid.
+
+=cut
+
+.sub '_lang_isFloat' :anon
+    .param pmc value
+    .local pmc res
+    $I0 = isa value, 'WmlsString'
+    unless $I0 goto L1
+    $P0 = value.'parseFloat'()
+    res = defined $P0
+    .return (res)
+  L1:
+    $I0 = isa value, 'WmlsInvalid'
+    unless $I0 goto L2
+    new res, 'WmlsInvalid'
+    .return (res)
+  L2:
+    new res, 'WmlsBoolean'
+    $I0 = isa value, 'WmlsFloat'
+    set res, $I0
+    if $I0 goto L3
+    $I0 = isa value, 'WmlsInteger'
+    set res, $I0
+  L3:
+    .return (res)
+.end
+
+
+=head2 C<maxInt()>
+
+=head3 DESCRIPTION
+
+Returns the maximum integer value.
+
+=head3 RETURN VALUE
+
+Integer 2147483647.
+
+=cut
+
+.sub '_lang_maxInt' :anon
+    .local pmc res
+    new res, 'WmlsInteger'
+    set res, 2147483647
+    .return (res)
+.end
+
+
+=head2 C<minInt()>
+
+=head3 DESCRIPTION
+
+Returns the minimum integer value.
+
+=head3 RETURN VALUE
+
+Integer -2147483648.
+
+=cut
+
+.sub '_lang_minInt' :anon
+    .local pmc res
+    new res, 'WmlsInteger'
+    set res, -2147483648
+    .return (res)
+.end
+
+
+=head2 C<float()>
+
+=head3 DESCRIPTION
+
+Returns true if floating-points are supported and false if not.
+
+=head3 RETURN VALUE
+
+Boolean.
+
+=cut
+
+.sub '_lang_float' :anon
+    .local pmc res
+    new res, 'WmlsBoolean'
+    set res, 1
+    .return (res)
+.end
+
+
+=head2 C<exit(value)>
+
+=head3 DESCRIPTION
+
+Ends the interpretation of the WMLScript bytecode and returns the control
+back to the caller of the WMLScript interpreter with the given return value.
+This function can be used to perform a normal exit from a function in cases
+where the execution of the WMLScript bytecode should be discontinued.
+
+=head3 PARAMETERS
+
+value = Any
+
+=head3 RETURN VALUE
+
+None (this function ends the interpretation).
+
+=cut
+
+.sub '_lang_exit' :anon
+    .param pmc value
+    .local pmc res
+    $I0 = isa value, 'WmlsString'
+    unless $I0 goto L1
+    $P0 = value.'parseInt'()
+    $I0 = $P0
+    exit $I0
+  L1:
+    $I0 = value
+    exit $I0
+.end
+
+
+=head2 C<abort(errorDescription)>
+
+=head3 DESCRIPTION
+
+Aborts the interpretation of the WMLScript bytecode and returns the control
+back to the caller of the WMLScript interpreter with the return
+errorDescription. This function can be used to perform an abnormal exit in
+cases where the execution of the WMLScript should be discontinued due to
+serious errors detected by the program. If the type of the errorDescription is
+invalid, string "invalid" is used as the errorDescription instead.
+
+=head3 PARAMETERS
+
+errorDescription = String
+
+=head3 RETURN VALUE
+
+None (this function aborts the interpretation).
+
+=cut
+
+.sub '_lang_abort' :anon
+    .param pmc value
+    die value
+.end
+
+
+=head2 C<random(value)>
+
+=head3 DESCRIPTION
+
+Returns an integer value with positive sign that is greater than or equal to 0
+but less than or equal to the given value. The return value is chosen
+randomly or pseudo-randomly with approximately uniform distribution over
+that range, using an implementation-dependent algorithm or strategy.
+
+If the value is of type floating-point, Float.int() is first used to calculate the
+actual integer value.
+
+=head3 PARAMETERS
+
+value = Number
+
+=head3 RETURN VALUE
+
+Integer or invalid.
+
+=head3 EXCEPTIONS
+
+If value is equal to zero (0), the function returns zero.
+
+If value is less than zero (0), the function returns C<invalid>.
+
+=cut
+
+.sub '_lang_random' :anon
+    .param pmc value
+    .local pmc res
+    $P0 = value
+    $I0 = isa value, 'WmlsString'
+    unless $I0 goto L1
+    $P0 = value.'parseNumber'()
+  L1:
+    $I0 = isa $P0, 'WmlsInvalid'
+    if $I0 goto L2
+    $I0 = $P0
+    if $I0 < 0 goto L2
+    new $P0, 'Random'
+    $N0 = $P0
+    $N0 = mul $I0
+    $I0 = $N0
+    new res, 'WmlsInteger'
+    set res, $I0
+    goto L3
+  L2:
+    new res, 'WmlsInvalid'
+  L3:
+    .return (res)
+.end
+
+
+=head2 C<seed(value)>
+
+=head3 DESCRIPTION
+
+Initialises the pseudo-random number sequence and returns an empty
+string. If the value is zero or a positive integer then the given value is used
+for initialisation, otherwise a random, system dependent initialisation value
+is used. A seed value of greater than or equal to zero results in a repeatable
+sequence of pseudo-random numbers. A seed value of less than zero
+results in a non-repeatable sequence of random numbers.
+
+If the value is of type floating-point, Float.int() is first used to calculate the
+actual integer value. . If the value is non-numeric, invalid is returned and the
+current seed is unchanged.
+
+=head3 PARAMETERS
+
+value = Number
+
+=head3 RETURN VALUE
+
+String or invalid.
+
+=cut
+
+.sub '_lang_seed' :anon
+    .param pmc value
+    .local pmc res
+    $P0 = value
+    $I0 = isa value, 'WmlsString'
+    unless $I0 goto L1
+    $P0 = value.'parseNumber'()
+  L1:
+    $I0 = isa $P0, 'WmlsInvalid'
+    if $I0 goto L2
+    $I0 = $P0
+    if $I0 >= 0 goto L3
+    $I0 = time
+  L3:
+    new $P0, 'Random'
+    $P0 = $I0
+    new res, 'WmlsString'
+    set res, ''
+    goto L4
+  L2:
+    new res, 'WmlsInvalid'
+  L4:
+    .return (res)
+.end
+
+
+=head2 C<characterSet()>
+
+=head3 DESCRIPTION
+
+Returns the character set supported by the WMLScript Interpreter. The
+return value is an integer that denotes a MIBEnum value assigned by the
+IANA for all character sets (see [WSP] for more information).
+
+=head3 RETURN VALUE
+
+Integer.
+
+=cut
+
+.sub '_lang_characterSet' :anon
+    .local pmc res
+    new res, 'WmlsInteger'
+    res = 4     # latin1
+    .return (res)
+.end
+
+
+=head1 AUTHORS
+
+Francois Perrad.
+
+=cut
+
+
+# Local Variables:
+#   mode: pir
+#   fill-column: 100
+# End:
+# vim: expandtab shiftwidth=4 ft=pir:
--- origsrc/parrot-0.7.1/languages/WMLScript/WMLScript/wmlsstring.pir	1970-01-01 01:00:00.000000000 +0100
+++ src/parrot-0.7.1/languages/WMLScript/WMLScript/wmlsstring.pir	2008-09-18 20:27:42.156250000 +0200
@@ -0,0 +1,1116 @@
+# Copyright (C) 2006-2008, The Perl Foundation.
+# $Id: wmlsstring.pir 30895 2008-09-08 17:26:26Z rurban $
+
+=head1 NAME
+
+WMLScript/wmlsstring.pir - WMLScript String library
+
+=head1 DESCRIPTION
+
+This library contains a set of string functions. A string is an array of
+characters. Each of the characters has an index. The first character in a
+string has an index zero (0). The length of the string is the number of
+characters in the array.
+
+The user of the String library can specify a special separator by which
+elements in a string can be separated. These elements can be accessed
+by specifying the separator and the element index. The first element in a
+string has an index zero (0). Each occurrence of the separator in the string
+separates two elements (no escaping of separators is allowed).
+
+A White space character is one of the following characters:
+
+=over 4
+
+=item * TAB : Horizontal Tabulation
+
+=item * VT : Vertical Tabulation
+
+=item * FF : Form Feed
+
+=item * SP : Space
+
+=item * LF : Line Feed
+
+=item * CR : Carriage Return
+
+=back
+
+See "WMLScript Standard Libraries Specification", section 9 "String".
+
+=head1 FUNCTIONS
+
+=cut
+
+.loadlib 'wmls_ops'
+.HLL 'WMLScript', 'wmls_group'
+
+
+.sub 'getString'
+    new $P0, 'Hash'
+
+    .const .Sub _string_length = '_string_length'
+    $P0[0]  = _string_length
+    .const .Sub _string_isEmpty = '_string_isEmpty'
+    $P0[1]  = _string_isEmpty
+    .const .Sub _string_charAt = '_string_charAt'
+    $P0[2]  = _string_charAt
+    .const .Sub _string_subString = '_string_subString'
+    $P0[3]  = _string_subString
+    .const .Sub _string_find = '_string_find'
+    $P0[4]  = _string_find
+    .const .Sub _string_replace = '_string_replace'
+    $P0[5]  = _string_replace
+    .const .Sub _string_elements = '_string_elements'
+    $P0[6]  = _string_elements
+    .const .Sub _string_elementAt = '_string_elementAt'
+    $P0[7]  = _string_elementAt
+    .const .Sub _string_removeAt = '_string_removeAt'
+    $P0[8]  = _string_removeAt
+    .const .Sub _string_replaceAt = '_string_replaceAt'
+    $P0[9]  = _string_replaceAt
+    .const .Sub _string_insertAt = '_string_insertAt'
+    $P0[10] = _string_insertAt
+    .const .Sub _string_squeeze = '_string_squeeze'
+    $P0[11] = _string_squeeze
+    .const .Sub _string_trim = '_string_trim'
+    $P0[12] = _string_trim
+    .const .Sub _string_compare = '_string_compare'
+    $P0[13] = _string_compare
+    .const .Sub _string_toString = '_string_toString'
+    $P0[14] = _string_toString
+    .const .Sub _string_format = '_string_format'
+    $P0[15] = _string_format
+
+    .return ($P0)
+.end
+
+
+=head2 C<length(string)>
+
+=head3 DESCRIPTION
+
+Returns the length (number of characters) of the given string.
+
+=head3 PARAMETERS
+
+string = String
+
+=head3 RETURN VALUE
+
+Integer or invalid.
+
+=cut
+
+.sub '_string_length' :anon
+    .param pmc str
+    .local pmc res
+    $I0 = isa str, 'WmlsInvalid'
+    if $I0 goto L1
+    $S1 = str
+    $I1 = length $S1
+    new res, 'WmlsInteger'
+    set res, $I1
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<isEmpty(string)>
+
+=head3 DESCRIPTION
+
+Returns a boolean true if the string length is zero and boolean false
+otherwise.
+
+=head3 PARAMETERS
+
+string = String
+
+=head3 RETURN VALUE
+
+Boolean or invalid.
+
+=cut
+
+.sub '_string_isEmpty' :anon
+    .param pmc str
+    .local pmc res
+    $I0 = isa str, 'WmlsInvalid'
+    if $I0 goto L1
+    $S1 = str
+    $I1 = length $S1
+    new res, 'WmlsBoolean'
+    set res, 0
+    if $I1 goto L2
+    set res, 1
+  L2:
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<charAt(string, index)>
+
+=head3 DESCRIPTION
+
+Returns a new string of length one containing the character at the specified
+index of the given string.
+
+If the index is of type floating-point, Float.int() is first used to calculate the
+actual integer index.
+
+=head3 PARAMETERS
+
+string = String
+
+index = Number (the index of the character to be returned)
+
+=head3 RETURN VALUE
+
+String or invalid.
+
+=head3 EXCEPTIONS
+
+If index is out of range then an empty string (C<"">) is returned.
+
+=cut
+
+.sub '_string_charAt' :anon
+    .param pmc str
+    .param pmc index_
+    .local pmc res
+    $I0 = isa str, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa index_, 'WmlsInteger'
+    if $I0 goto L2
+    $I0 = isa index_, 'WmlsFloat'
+    if $I0 goto L2
+    goto L1
+  L2:
+    $S1 = str
+    $I1 = length $S1
+    $I2 = index_
+    new res, 'WmlsString'
+    if $I2 < 0 goto L3
+    if $I2 >= $I1 goto L3
+    $S0 = substr $S1, $I2, 1
+    set res, $S0
+  L3:
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<subString(string, startIndex, length)>
+
+=head3 DESCRIPTION
+
+Returns a new string that is a substring of the given string. The substring
+begins at the specified startIndex and its length (number of characters) is
+the given length. If the startIndex is less than 0 then 0 is used for the
+startIndex. If the length is larger than the remaining number of characters in
+the string, the length is replaced with the number of remaining characters.
+
+If the startIndex or the length is of type floating-point, Float.int() is first used to
+calculate the actual integer value.
+
+=head3 PARAMETERS
+
+string = String
+
+startIndex = Number (the beginning index, inclusive)
+
+length = Number (the length of the substring)
+
+=head3 RETURN VALUE
+
+String or invalid.
+
+=head3 EXCEPTIONS
+
+If startIndex is larger than the last index an empty string (C<"">) is returned.
+
+If length <= 0 an empty string (C<"">) is returned.
+
+=cut
+
+.sub '_string_subString' :anon
+    .param pmc String
+    .param pmc startIndex
+    .param pmc Length
+    .local pmc res
+    $I0 = isa String, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa startIndex, 'WmlsInteger'
+    if $I0 goto L2
+    $I0 = isa startIndex, 'WmlsFloat'
+    if $I0 goto L2
+    goto L1
+  L2:
+    $I0 = isa Length, 'WmlsInteger'
+    if $I0 goto L3
+    $I0 = isa Length, 'WmlsFloat'
+    if $I0 goto L3
+    goto L1
+  L3:
+    $S1 = String
+    $I1 = length $S1
+    $I2 = startIndex
+    if $I2 >= 0 goto L4
+    $I2 = 0
+  L4:
+    new res, 'WmlsString'
+    if $I2 >= $I1 goto L5
+    $I3 = Length
+    if $I3 <= 0 goto L5
+    $S0 = substr $S1, $I2, $I3
+    set res, $S0
+  L5:
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<find(string, subString)>
+
+=head3 DESCRIPTION
+
+Returns the index of the first character in the string that matches the
+requested subString. If no match is found integer value -1 is returned.
+
+Two strings are defined to match when they are identical. Characters with
+multiple possible representations match only if they have the same
+representation in both strings. No case folding is performed.
+
+=head3 PARAMETERS
+
+string = String
+
+subString = String
+
+=head3 RETURN VALUE
+
+Integer or invalid.
+
+=head3 EXCEPTIONS
+
+If subString is an empty string (C<"">), an invalid value is returned.
+
+=cut
+
+.sub '_string_find' :anon
+    .param pmc String
+    .param pmc subString
+    .local pmc res
+    $I0 = isa String, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa subString, 'WmlsInvalid'
+    if $I0 goto L1
+    $S1 = String
+    $S2 = subString
+    $I2 = length $S2
+    if $I2 == 0 goto L1
+    $I0 = index $S1, $S2
+    new res, 'WmlsInteger'
+    set res, $I0
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<replace(string, oldSubString, newSubString)>
+
+=head3 DESCRIPTION
+
+Returns a new string resulting from replacing all occurrences of
+oldSubString in this string with newSubString.
+
+Two strings are defined to match when they are identical. Characters with
+multiple possible representations match only if they have the same
+representation in both strings. No case folding is performed.
+
+=head3 PARAMETERS
+
+string = String
+
+oldSubString = String
+
+newSubString = String
+
+=head3 RETURN VALUE
+
+String or invalid.
+
+=head3 EXCEPTIONS
+
+If oldSubString is an empty string an C<invalid> value is returned.
+
+=cut
+
+.sub '_string_replace' :anon
+    .param pmc String
+    .param pmc oldSubString
+    .param pmc newSubString
+    .local pmc res
+    $I0 = isa String, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa oldSubString, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa newSubString, 'WmlsInvalid'
+    if $I0 goto L1
+    $S1 = String
+    $S2 = oldSubString
+    $I2 = length $S2
+    if $I2 == 0 goto L1
+    $S3 = newSubString
+    $P0 = split $S2, $S1
+    $S0 = join $S3, $P0
+    new res, 'WmlsString'
+    set res, $S0
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<elements(string, separator)>
+
+=head3 DESCRIPTION
+
+Returns the number of elements in the given string separated by the given
+separator. Empty string ("") is a valid element (thus, this function can never
+return a value that is less or equal to zero).
+
+=head3 PARAMETERS
+
+string = String
+
+separator = String (the first character of the string used as separator)
+
+=head3 RETURN VALUE
+
+Integer or invalid.
+
+=head3 EXCEPTIONS
+
+Returns C<invalid> if the separator is an empty string.
+
+=cut
+
+.sub '_string_elements' :anon
+    .param pmc str
+    .param pmc separator
+    .local pmc res
+    $I0 = isa str, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa separator, 'WmlsInvalid'
+    if $I0 goto L1
+    $S1 = str
+    $S2 = separator
+    $I2 = length $S2
+    if $I2 == 0 goto L1
+    $S2 = substr $S2, 0, 1
+    new res, 'WmlsInteger'
+    $I1 = length $S1
+    if $I1 != 0 goto L2
+    set res, 1
+    .return (res)
+  L2:
+    $P0 = split $S2, $S1
+    $I0 = elements $P0
+    set res, $I0
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<elementAt(string, index, separator)>
+
+=head3 DESCRIPTION
+
+Search string for index'th element, elements being separated by separator
+and return the corresponding element. If the index is less than 0 then the first
+element is returned. If the index is larger than the number of elements then
+the last element is returned. If the string is an empty string then an empty
+string is returned.
+
+If the index is of type floating-point, Float.int() is first used to calculate the
+actual index value.
+
+=head3 PARAMETERS
+
+string = String
+
+index = Number (the index of the element to be returned)
+
+separator = String (the first character of the string used as separator)
+
+=head3 RETURN VALUE
+
+String or invalid.
+
+=head3 EXCEPTIONS
+
+Returns C<invalid> if the separator is an empty string.
+
+=cut
+
+.sub '_string_elementAt' :anon
+    .param pmc str
+    .param pmc index_
+    .param pmc separator
+    .local pmc res
+    $I0 = isa str, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa index_, 'WmlsInteger'
+    if $I0 goto L2
+    $I0 = isa index_, 'WmlsFloat'
+    if $I0 goto L2
+    goto L1
+  L2:
+    $I0 = isa separator, 'WmlsInvalid'
+    if $I0 goto L1
+    $S1 = str
+    $I2 = index_
+    if $I2 >= 0 goto L3
+    $I2 = 0
+  L3:
+    $S3 = separator
+    $I3 = length $S3
+    if $I3 == 0 goto L1
+    $S3 = substr $S3, 0, 1
+    new res, 'WmlsString'
+    $I1 = length $S1
+    if $I1 != 0 goto L4
+    .return (res)
+  L4:
+    $P0 = split $S3, $S1
+    $I0 = elements $P0
+    if $I2 < $I0 goto L5
+    $I2 = $I0 - 1
+  L5:
+    $S0 = $P0[$I2]
+    set res, $S0
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<removeAt(string, index, separator)>
+
+=head3 DESCRIPTION
+
+Returns a new string where the element and the corresponding separator (if
+existing) with the given index are removed from the given string. If the index
+is less than 0 then the first element is removed. If the index is larger than the
+number of elements then the last element is removed. If the string is empty,
+the function returns a new empty string.
+
+If the index is of type floating-point, Float.int() is first used to calculate the
+actual index value.
+
+=head3 PARAMETERS
+
+string = String
+
+index = Number (the index of the element to be deleted)
+
+separator = String (the first character of the string used as separator)
+
+=head3 RETURN VALUE
+
+String or invalid.
+
+=head3 EXCEPTIONS
+
+Returns C<invalid> if the separator is an empty string.
+
+=cut
+
+.sub '_string_removeAt' :anon
+    .param pmc str
+    .param pmc index_
+    .param pmc separator
+    .local pmc res
+    $I0 = isa str, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa index_, 'WmlsInteger'
+    if $I0 goto L2
+    $I0 = isa index_, 'WmlsFloat'
+    if $I0 goto L2
+    goto L1
+  L2:
+    $I0 = isa separator, 'WmlsInvalid'
+    if $I0 goto L1
+    $S1 = str
+    $I2 = index_
+    if $I2 >= 0 goto L3
+    $I2 = 0
+  L3:
+    $S3 = separator
+    $I3 = length $S3
+    if $I3 == 0 goto L1
+    $S3 = substr $S3, 0, 1
+    new res, 'WmlsString'
+    $I1 = length $S1
+    if $I1 != 0 goto L4
+    .return (res)
+  L4:
+    $P0 = split $S3, $S1
+    $I4 = elements $P0
+    if $I2 < $I4 goto L5
+    $I2 = $I4 - 1
+  L5:
+    dec $I4
+    new $P1, 'Array'
+    set $P1, $I4
+    $I0 = 0
+    $I1 = 0
+  L6:
+    unless $I1 < $I4 goto L7
+    $S0 = $P0[$I0]
+    $P1[$I1] = $S0
+    if $I0 == $I2 goto L8
+    inc $I1
+  L8:
+    inc $I0
+    goto L6
+  L7:
+    $S0 = join $S3, $P1
+    set res, $S0
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<replaceAt(string, element, index, separator)>
+
+=head3 DESCRIPTION
+
+Returns a string with the current element at the specified index replaced with
+the given element. If the index is less than 0 then the first element is
+replaced. If the index is larger than the number of elements then the last
+element is replaced. If the string is empty, the function returns a new string
+with the given element.
+
+If the index is of type floating-point, Float.int() is first used to calculate the
+actual index value.
+
+=head3 PARAMETERS
+
+string = String
+
+element = String
+
+index = Number (the index of the element to be replaced)
+
+separator = String (the first character of the string used as separator)
+
+=head3 RETURN VALUE
+
+String or invalid.
+
+=head3 EXCEPTIONS
+
+Returns C<invalid> if the separator is an empty string.
+
+=cut
+
+.sub '_string_replaceAt' :anon
+    .param pmc str
+    .param pmc element
+    .param pmc index_
+    .param pmc separator
+    .local pmc res
+    $I0 = isa str, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa element, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa index_, 'WmlsInteger'
+    if $I0 goto L2
+    $I0 = isa index_, 'WmlsFloat'
+    if $I0 goto L2
+    goto L1
+  L2:
+    $I0 = isa separator, 'WmlsInvalid'
+    if $I0 goto L1
+    $S1 = str
+    $S2 = element
+    $I3 = index_
+    if $I3 >= 0 goto L3
+    $I3 = 0
+  L3:
+    $S4 = separator
+    $I4 = length $S4
+    if $I4 == 0 goto L1
+    $S4 = substr $S4, 0, 1
+    new res, 'WmlsString'
+    $I1 = length $S1
+    if $I1 != 0 goto L4
+    set res, $S2
+    .return (res)
+  L4:
+    $P0 = split $S4, $S1
+    $I0 = elements $P0
+    if $I3 < $I0 goto L5
+    $I3 = $I0 - 1
+  L5:
+    $P0[$I3] = $S2
+    $S0 = join $S4, $P0
+    set res, $S0
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<insertAt(string, element, index, separator)>
+
+=head3 DESCRIPTION
+
+Returns a string with the element and the corresponding separator (if
+needed) inserted at the specified element index of the original string. If the
+index is less than 0 then 0 is used as the index. If the index is larger than the
+number of elements then the element is appended at the end of the string. If
+the string is empty, the function returns a new string with the given element.
+
+If the index is of type floating-point, Float.int() is first used to calculate the
+actual index value.
+
+=head3 PARAMETERS
+
+string = String (original string)
+
+element = String (element to be inserted)
+
+index = Number (the index of the element to be added)
+
+separator = String (the first character of the string used as separator)
+
+=head3 RETURN VALUE
+
+String or invalid.
+
+=head3 EXCEPTIONS
+
+Returns C<invalid> if the separator is an empty string.
+
+=cut
+
+.sub '_string_insertAt' :anon
+    .param pmc str
+    .param pmc element
+    .param pmc index_
+    .param pmc separator
+    .local pmc res
+    $I0 = isa str, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa element, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa index_, 'WmlsInteger'
+    if $I0 goto L2
+    $I0 = isa index_, 'WmlsFloat'
+    if $I0 goto L2
+    goto L1
+  L2:
+    $I0 = isa separator, 'WmlsInvalid'
+    if $I0 goto L1
+    $S1 = str
+    $S2 = element
+    $I3 = index_
+    if $I3 >= 0 goto L3
+    $I3 = 0
+  L3:
+    $S4 = separator
+    $I4 = length $S4
+    if $I4 == 0 goto L1
+    $S4 = substr $S4, 0, 1
+    new res, 'WmlsString'
+    $I1 = length $S1
+    if $I1 != 0 goto L4
+    set res, $S2
+    .return (res)
+  L4:
+    $P0 = split $S4, $S1
+    $I5 = elements $P0
+    if $I3 <= $I5 goto L5
+    $I3 = $I5
+  L5:
+    $I6 = $I5 + 1
+    new $P1, 'Array'
+    set $P1, $I6
+    $I0 = 0
+    $I1 = 0
+  L6:
+    unless $I0 < $I5 goto L7
+    if $I1 != $I3 goto L8
+    inc $I1
+  L8:
+    $S0 = $P0[$I0]
+    $P1[$I1] = $S0
+    inc $I0
+    inc $I1
+    goto L6
+  L7:
+    $P1[$I3] = $S2
+    $S0 = join $S4, $P1
+    set res, $S0
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<squeeze(string)>
+
+=head3 DESCRIPTION
+
+Returns a string where all consecutive series of white spaces within the
+string are reduced to single inter-word space.
+
+=head3 PARAMETERS
+
+String = String
+
+=head3 RETURN VALUE
+
+String or invalid.
+
+=cut
+
+.include 'cclass.pasm'
+
+.sub 'squeeze' :anon
+    .param string s
+    .local string res
+    .local int idx
+    res = ''
+    idx = 0
+    $I1 = length s
+  L1:
+    unless idx < $I1 goto L2
+    $I0 = is_cclass .CCLASS_WHITESPACE, s, idx
+    if $I0 goto L3
+    $S0 = substr s, idx, 1
+    res = concat $S0
+    inc idx
+    goto L1
+  L3:
+    res = concat ' '
+  L4:
+    inc idx
+    $I0 = is_cclass .CCLASS_WHITESPACE, s, idx
+    if $I0 goto L4
+    goto L1
+  L2:
+    .return (res)
+.end
+
+.sub '_string_squeeze' :anon
+    .param pmc str
+    .local pmc res
+    $I0 = isa str, 'WmlsInvalid'
+    if $I0 goto L1
+    new res, 'WmlsString'
+    $S1 = str
+    $S0 = squeeze($S1)
+    set res, $S0
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<trim(string)>
+
+=head3 DESCRIPTION
+
+Returns a string where all trailing and leading white spaces in the given
+string have been trimmed.
+
+=head3 PARAMETERS
+
+String = String
+
+=head3 RETURN VALUE
+
+String or invalid.
+
+=cut
+
+.sub 'trim' :anon
+    .param string s
+    .local string res
+    $I1 = 0
+  L1:
+    $I0 = is_cclass .CCLASS_WHITESPACE, s, $I1
+    unless $I0 goto L2
+    inc $I1
+    goto L1
+  L2:
+    $I2 = length s
+  L3:
+    dec $I2
+    $I0 = is_cclass .CCLASS_WHITESPACE, s, $I2
+    if $I0 goto L3
+    inc $I2
+    $I2 -= $I1
+    res = substr s, $I1, $I2
+    .return (res)
+.end
+
+.sub '_string_trim' :anon
+    .param pmc str
+    .local pmc res
+    $I0 = isa str, 'WmlsInvalid'
+    if $I0 goto L1
+    new res, 'WmlsString'
+    $S1 = str
+    $S0 = trim($S1)
+    set res, $S0
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<compare(string1, string2)>
+
+=head3 DESCRIPTION
+
+The return value indicates the lexicographic relation of string1 to string2. The
+relation is based on the relation of the character codes in the native
+character set. The return value is -1 if string1 is less than string2, 0 if string1
+is identical to string2 or 1 if string1 is greater than string2.
+
+=head3 PARAMETERS
+
+String1 = String
+
+String2 = String
+
+=head3 RETURN VALUE
+
+Integer or invalid.
+
+=cut
+
+.sub '_string_compare' :anon
+    .param pmc string1
+    .param pmc string2
+    .local pmc res
+    $I0 = isa string1, 'WmlsInvalid'
+    if $I0 goto L1
+    $I0 = isa string2, 'WmlsInvalid'
+    if $I0 goto L1
+    $S1 = string1
+    $S2 = string2
+    new res, 'WmlsInteger'
+    if $S1 >= $S2 goto L2
+    set res, -1
+    .return (res)
+  L2:
+    if $S1 > $S2 goto L3
+    set res, 0
+    .return (res)
+  L3:
+    set res, 1
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head2 C<toString(value)>
+
+=head3 DESCRIPTION
+
+Returns a string representation of the given value. This function performs
+exactly the same conversions as supported by the [WMLScript] language
+(automatic conversion from boolean, integer and floating-point values to
+strings) except that C<invalid> value returns the string C<"invalid">.
+
+=head3 PARAMETERS
+
+value = Any
+
+=head3 RETURN VALUE
+
+String.
+
+=cut
+
+.sub '_string_toString' :anon
+    .param pmc value
+    $S1 = value
+    .local pmc res
+    new res, 'WmlsString'
+    set res, $S1
+    .return (res)
+.end
+
+
+=head2 C<format(format, value)>
+
+=head3 DESCRIPTION
+
+Converts the given value to a string by using the given formatting provided as
+a format string. The format string can contain only one format specifier,
+which can be located anywhere inside the string. If more than one is
+specified, only the first one (leftmost) is used and the remaining specifiers
+are replaced by an empty string. The format specifier has the following form:
+
+ % [width] [.precision] type
+
+The C<width> argument is a nonnegative decimal integer controlling the
+minimum number of characters printed. If the number of characters in the
+output value is less than the specified width, blanks are added to the left until
+the minimum width is reached. The C<width> argument never causes the
+value to be truncated. If the number of characters in the output value is
+greater than the specified width or, if width is not given, all characters of the
+value are printed (subject to the precision argument).
+
+The C<precision> argument specifies a nonnegative decimal integer,
+preceded by a period (.), which can be used to set the precision of the output
+value. The interpretation of this value depends on the given C<type>:
+
+=over 4
+
+=item d
+
+Specifies the minimum number of digits to be printed. If the number
+of digits in the value is less than precision, the output value is
+padded on the left with zeroes. The value is not truncated when the
+number of digits exceeds precision. Default precision is 1. If
+precision is specified as 0 and the value to be converted is 0, the
+result is an empty string.
+
+=item f
+
+Specifies the number of digits after the decimal point. If a decimal
+point appears, at least one digit appears before it. The value is
+rounded to the appropriate number of digits. Default precision is 6; if
+precision is 0 or if the period (.) appears without a number following
+it, no decimal point is printed.
+
+=item s
+
+Specifies the maximum number of characters to be printed. By
+default, all characters are printed.
+
+=back
+
+Unlike the C<width> argument, the C<precision> argument can cause either
+truncation of the output value or rounding of a floating-point value.
+
+The C<type> argument is the only required format argument; it appears after
+any optional format fields. The type character determines whether the given
+value is interpreted as integer, floating-point or string. If the value argument
+is of a different type than is specified by the type argument, it is converted
+according to WMLScript standard automatic conversion rules, with the
+addition that if value is of type floating-point and type is B<d>, Float.int() is called
+to convert the value. The supported C<type> arguments are:
+
+=over 4
+
+=item d
+
+Integer: The output value has the form [-]dddd, where dddd is one
+or more decimal digits.
+
+=item f
+
+Floating-point: The output value has the form [-]dddd.dddd, where
+dddd is one or more decimal digits. The number of digits before the
+decimal point depends on the magnitude of the number and the
+number of digits after the decimal point depends on the requested
+precision. When the number of digits after the decimal point in the value
+is less than the precision, letter 0 should be padded to fill columns
+(e.g. the result of String.format("%2.3f", 1.2) will be
+"1.200")
+
+=item s
+
+String: Characters are printed up to the end of the string or until the
+precision value is reached. When the width is larger than
+precision, the width should be ignored.
+
+=back
+
+A literal percent character (%) may be included in the format string by
+preceding it with another percent character (%%).
+
+MINIMALIST IMPLEMENTATION
+
+=head3 PARAMETERS
+
+format = String
+
+value = Any
+
+=head3 RETURN VALUE
+
+String or invalid.
+
+=head3 EXCEPTIONS
+
+Illegal format specifier results in an C<invalid> return value.
+
+=cut
+
+.sub '_string_format' :anon
+    .param pmc format
+    .param pmc value
+    .local pmc res
+    $I0 = isa format, 'WmlsInvalid'
+    if $I0 goto L1
+    $S0 = format
+    new $P0, 'Array'
+    set $P0, 1
+    $P0[0] = value
+  L2:
+    $S1 = sprintf $S0, $P0
+    new res, 'WmlsString'
+    set res, $S1
+    .return (res)
+  L1:
+    new res, 'WmlsInvalid'
+    .return (res)
+.end
+
+
+=head1 AUTHORS
+
+Francois Perrad.
+
+=cut
+
+
+# Local Variables:
+#   mode: pir
+#   fill-column: 100
+# End:
+# vim: expandtab shiftwidth=4 ft=pir:
--- origsrc/parrot-0.7.1/languages/WMLScript/config/makefiles/root.in	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/config/makefiles/root.in	2008-10-03 15:39:53.656250000 +0200
@@ -1,21 +1,40 @@
 # Copyright (C) 2006-2007, The Perl Foundation.
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
-RM_F    = @rm_f@
-PERL    = @perl@
-PARROT  = ../../parrot@exe@
-
-PMCBUILD = $(PERL) @build_dir@/tools/build/dynpmc.pl
-OPSBUILD = $(PERL) @build_dir@/tools/build/dynoplibs.pl
-LIBPATH  = runtime
-PMCDIR   = pmc
-OPSDIR   = ops
-O        = @o@
-LOAD_EXT = @load_ext@
-PARROT_DYNEXT = @build_dir@/runtime/parrot/dynext
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+## configuration settings
+HLLNAME = WMLScript
+
+## Setup some commands
+PERL          = @perl@
+RM_F          = @rm_f@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+PMCBUILD      = $(PERL) @build_dir@/tools/build/dynpmc.pl
+OPSBUILD      = $(PERL) @build_dir@/tools/build/dynoplibs.pl
+O             = @o@
+LOAD_EXT      = @load_ext@
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
+RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
+
+## places to look for things
+BUILD_DIR     = @build_dir@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+
+LIBPATH       = WMLScript
+PMCDIR        = pmc
+OPSDIR        = ops
+PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 SRM=Stack
 
@@ -36,9 +55,10 @@
  $(PMCDIR)/wmlsbytecode.pmc
 
 OPS_FILES = $(OPSDIR)/wmls.ops
-
 OPSLIB    = wmls
 
+CMDS = wmls2pir wmls2pbc wmlsd wmlsi
+
 PBCS = \
  $(LIBPATH)/wmlslang.pbc \
  $(LIBPATH)/wmlsfloat.pbc \
@@ -49,12 +69,23 @@
  src/opcode.pir \
  src/stdlibs.pir
 
-all: \
+DOCS = \
+ MAINTAINER doc/running.pod doc/status.pod
+
+build: \
  pmc/wmls_group$(LOAD_EXT) \
  ops/wmls_ops$(LOAD_EXT) \
- src/WMLScript.pbc \
+ WMLScript.pbc \
  $(PBCS)
 
+all: \
+ pmc/wmls_group$(LOAD_EXT) \
+ ops/wmls_ops$(LOAD_EXT) \
+ WMLScript.pbc \
+ Makefile \
+ $(PBCS) \
+ wmls2pir@exe@ wmls2pbc@exe@ wmlsd@exe@ wmlsi@exe@ installable
+
 pmc/wmls_group$(LOAD_EXT) : $(PMC_FILES)
 	@cd $(PMCDIR) && $(PMCBUILD) generate $(PMCS)
 	@cd $(PMCDIR) && $(PMCBUILD) compile $(PMCS)
@@ -67,9 +98,9 @@
 	@cd $(OPSDIR) && $(OPSBUILD) linklibs $(OPSLIB)
 	@cd $(OPSDIR) && $(OPSBUILD) copy "--destination=$(PARROT_DYNEXT)" $(OPSLIB)
 
-src/WMLScript.pbc: src/WMLScript.pir \
+WMLScript.pbc: src/WMLScript.pir \
  src/script.pir src/wmlsstdlibs.pir $(GEN_PIR)
-	$(PARROT) -o src/WMLScript.pbc src/WMLScript.pir
+	$(PARROT) -o WMLScript.pbc src/WMLScript.pir
 
 src/opcode.pir: src/translation.rules build/translator.pl \
  build/SRM/Stack.pm build/SRM/Register.pm
@@ -91,6 +122,67 @@
 $(LIBPATH)/wmlsconsole.pbc: $(LIBPATH)/wmlsconsole.pir
 	$(PARROT) --output=$(LIBPATH)/wmlsconsole.pbc $(LIBPATH)/wmlsconsole.pir
 
+# regenerate the Makefile
+Makefile: config/makefiles/root.in
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
+
+wmls2pir.pbc: wmls2pir.pir
+	$(PARROT) --output=$@ wmls2pir.pir
+
+wmls2pbc.pbc: wmls2pbc.pir
+	$(PARROT) --output=$@ wmls2pbc.pir
+
+wmlsd.pbc: wmlsd.pir
+	$(PARROT) --output=$@ wmlsd.pir
+
+wmlsi.pbc: wmlsi.pir
+	$(PARROT) --output=$@ wmlsi.pir
+
+wmls2pir@exe@: wmls2pir.pbc
+	$(PBC_TO_EXE) wmls2pir.pbc
+
+wmls2pbc@exe@: wmls2pbc.pbc
+	$(PBC_TO_EXE) wmls2pbc.pbc
+
+wmlsd@exe@: wmlsd.pbc
+	$(PBC_TO_EXE) wmlsd.pbc
+
+wmlsi@exe@: wmlsi.pbc
+	$(PBC_TO_EXE) wmlsi.pbc
+
+installable_wmls2pir@exe@: wmls2pir.pbc
+	$(PBC_TO_EXE) wmls2pir.pbc --install
+
+installable_wmls2pbc@exe@: wmls2pbc.pbc
+	$(PBC_TO_EXE) wmls2pbc.pbc --install
+
+installable_wmlsd@exe@: wmlsd.pbc
+	$(PBC_TO_EXE) wmlsd.pbc --install
+
+installable_wmlsi@exe@: wmlsi.pbc
+	$(PBC_TO_EXE) wmlsi.pbc --install
+
+install : installable
+	$(CP) installable_wmls2pir@exe@ $(DESTDIR)$(BIN_DIR)/parrot-wmls2pir@exe@
+	$(CP) installable_wmls2pbc@exe@ $(DESTDIR)$(BIN_DIR)/parrot-wmls2pbc@exe@
+	$(CP) installable_wmlsd@exe@ $(DESTDIR)$(BIN_DIR)/parrot-wmlsd@exe@
+	$(CP) installable_wmlsi@exe@ $(DESTDIR)$(BIN_DIR)/parrot-wmlsi@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(MKPATH) $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME)
+	$(CP) $(PBCS) $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME)
+	@cd $(PMCDIR) && $(PMCBUILD) copy "--destination=$(DESTDIR)$(LIB_DIR)/parrot/dynext" $(PMCS)
+	@cd $(OPSDIR) && $(OPSBUILD) copy "--destination=$(DESTDIR)$(LIB_DIR)/parrot/dynext" $(OPSLIB)
+	$(POD2MAN) doc/running.pod > $(DESTDIR)$(MANDIR)/man1/parrot-wmls.5
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+installable: installable_wmls2pir@exe@ installable_wmls2pbc@exe@ \
+             installable_wmlsd@exe@ installable_wmlsi@exe@ \
+             $(HLLNAME).pbc $(PBCS)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+	-$(MKPATH) $(PARROT_LIB)/$(HLLNAME)
+	$(CP) $(PBCS) $(PARROT_LIB)/$(HLLNAME)
+
 help:
 	@echo ""
 	@echo "Following targets are available for the user:"
@@ -136,7 +228,11 @@
  "$(OPSDIR)/*.h" \
  "$(OPSDIR)/*$(LOAD_EXT)" \
  "$(OPSDIR)/*$(O)" \
- "$(LIBPATH)/*.pbc"
+ "$(LIBPATH)/*.pbc" \
+  $(PARROT_LIB)/$(HLLNAME).pbc \
+  $(HLLNAME).pbc installable_*@exe@ \
+  wmls2pir@exe@ wmls2pbc@exe@ wmlsd@exe@ wmlsi@exe@ \
+  $(PARROT_LIB)/$(HLLNAME)/*.pbc
 
 clean:
 	$(RM_F) $(BUILD_CLEANERS) $(TEST_CLEANERS)
@@ -146,3 +242,8 @@
 
 distclean: realclean
 
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/WMLScript/runtime/wmlsconsole.pir	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/runtime/wmlsconsole.pir	1970-01-01 01:00:00.000000000 +0100
@@ -1,110 +0,0 @@
-# Copyright (C) 2006-2008, The Perl Foundation.
-# $Id: wmlsconsole.pir 25819 2008-02-18 00:16:21Z coke $
-
-=head1 NAME
-
-runtime/wmlsconsole.pir - WMLScript Console library
-
-=head1 DESCRIPTION
-
-See "WMLScript Reference UP.SDK R4.B3 - October 1999".
-
-=head1 FUNCTIONS
-
-=cut
-
-.loadlib 'wmls_ops'
-.HLL 'WMLScript', 'wmls_group'
-
-
-.sub 'getConsole'
-    new $P0, 'Hash'
-
-    .const .Sub _console_print = '_console_print'
-    $P0[0]  = _console_print
-    .const .Sub _console_println = '_console_println'
-    $P0[1]  = _console_println
-
-    .return ($P0)
-.end
-
-
-=head2 C<print(string)>
-
-=head3 DESCRIPTION
-
-
-=head3 PARAMETERS
-
-string = String
-
-=head3 RETURN VALUE
-
-Number or invalid.
-
-=cut
-
-.sub '_console_print' :anon
-    .param pmc str
-    .local pmc res
-    $I0 = isa str, 'WmlsInvalid'
-    if $I0 goto L1
-    $S0 = str
-    print $S0
-    $I0 = length $S0
-    new res, 'WmlsInteger'
-    set res, $I0
-    goto L2
-  L1:
-    new res, 'WmlsInvalid'
-  L2:
-    .return (res)
-.end
-
-
-=head2 C<println(string)>
-
-=head3 DESCRIPTION
-
-
-=head3 PARAMETERS
-
-string = String
-
-=head3 RETURN VALUE
-
-Number or invalid.
-
-=cut
-
-.sub '_console_println' :anon
-    .param pmc str
-    .local pmc res
-    $I0 = isa str, 'WmlsInvalid'
-    if $I0 goto L1
-    $S0 = str
-    print $S0
-    print "\n"
-    $I0 = length $S0
-    new res, 'WmlsInteger'
-    set res, $I0
-    goto L2
-  L1:
-    new res, 'WmlsInvalid'
-  L2:
-    .return (res)
-.end
-
-
-=head1 AUTHORS
-
-Francois Perrad.
-
-=cut
-
-
-# Local Variables:
-#   mode: pir
-#   fill-column: 100
-# End:
-# vim: expandtab shiftwidth=4 ft=pir:
--- origsrc/parrot-0.7.1/languages/WMLScript/runtime/wmlsfloat.pir	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/runtime/wmlsfloat.pir	1970-01-01 01:00:00.000000000 +0100
@@ -1,370 +0,0 @@
-# Copyright (C) 2006-2008, The Perl Foundation.
-# $Id: wmlsfloat.pir 25819 2008-02-18 00:16:21Z coke $
-
-=head1 NAME
-
-runtime/wmlsfloat.pir - WMLScript Float library
-
-=head1 DESCRIPTION
-
-This library contains a set of typical arithmetic floating-point functions that
-are frequently used by applications.
-
-See "WMLScript Standard Libraries Specification", section 8 "Float".
-
-=head1 FUNCTIONS
-
-=cut
-
-.loadlib 'wmls_ops'
-.HLL 'WMLScript', 'wmls_group'
-
-
-.sub 'getFloat'
-    new $P0, 'Hash'
-
-    .const .Sub _float_int = '_float_int'
-    $P0[0]  = _float_int
-    .const .Sub _float_floor = '_float_floor'
-    $P0[1]  = _float_floor
-    .const .Sub _float_ceil = '_float_ceil'
-    $P0[2]  = _float_ceil
-    .const .Sub _float_pow = '_float_pow'
-    $P0[3]  = _float_pow
-    .const .Sub _float_round = '_float_round'
-    $P0[4]  = _float_round
-    .const .Sub _float_sqrt = '_float_sqrt'
-    $P0[5]  = _float_sqrt
-    .const .Sub _float_maxFloat = '_float_maxFloat'
-    $P0[6]  = _float_maxFloat
-    .const .Sub _float_minFloat = '_float_minFloat'
-    $P0[7]  = _float_minFloat
-
-    .return ($P0)
-.end
-
-
-=head2 C<int(value)>
-
-=head3 DESCRIPTION
-
-Returns the integer part of the given value. If the value is already an integer,
-the result is the value itself.
-
-=head3 PARAMETERS
-
-value = Number
-
-=head3 RETURN VALUE
-
-Integer or invalid.
-
-=cut
-
-.sub '_float_int' :anon
-    .param pmc value
-    .local pmc res
-    $P0 = value
-    $I0 = isa value, 'WmlsString'
-    unless $I0 goto L1
-    $P0 = value.'parseNumber'()
-  L1:
-    $I0 = isa $P0, 'WmlsInvalid'
-    if $I0 goto L2
-    $I0 = $P0
-    new res, 'WmlsInteger'
-    set res, $I0
-    goto L3
-  L2:
-    new res, 'WmlsInvalid'
-  L3:
-    .return (res)
-.end
-
-
-=head2 C<floor(value)>
-
-=head3 DESCRIPTION
-
-Returns the greatest integer value that is not greater than the given value. If
-the value is already an integer, the result is the value itself.
-
-=head3 PARAMETERS
-
-value = Number
-
-=head3 RETURN VALUE
-
-Integer or invalid.
-
-=cut
-
-.sub '_float_floor' :anon
-    .param pmc value
-    .local pmc res
-    $P0 = value
-    $I0 = isa value, 'WmlsString'
-    unless $I0 goto L1
-    $P0 = value.'parseNumber'()
-  L1:
-    $I0 = isa $P0, 'WmlsInvalid'
-    if $I0 goto L2
-    $N0 = $P0
-    $I0 = floor $N0
-    new res, 'WmlsInteger'
-    set res, $I0
-    goto L3
-  L2:
-    new res, 'WmlsInvalid'
-  L3:
-    .return (res)
-.end
-
-
-=head2 C<ceil(value)>
-
-=head3 DESCRIPTION
-
-Returns the smallest integer value that is not less than the given value. If
-the value is already an integer, the result is the value itself.
-
-=head3 PARAMETERS
-
-value = Number
-
-=head3 RETURN VALUE
-
-Integer or invalid.
-
-=cut
-
-.sub '_float_ceil' :anon
-    .param pmc value
-    .local pmc res
-    $P0 = value
-    $I0 = isa value, 'WmlsString'
-    unless $I0 goto L1
-    $P0 = value.'parseNumber'()
-  L1:
-    $I0 = isa $P0, 'WmlsInvalid'
-    if $I0 goto L2
-    $N0 = $P0
-    $I0 = ceil $N0
-    new res, 'WmlsInteger'
-    set res, $I0
-    goto L3
-  L2:
-    new res, 'WmlsInvalid'
-  L3:
-    .return (res)
-.end
-
-
-=head2 C<pow(value1, value2)>
-
-=head3 DESCRIPTION
-
-Returns an implementation-dependent approximation to the result of raising
-value1 to the power of value2. If value1 is a negative number then value2
-must be an integer.
-
-=head3 PARAMETERS
-
-value1 = Number
-
-value2 = Number
-
-=head3 RETURN VALUE
-
-Floating-point or invalid.
-
-=head3 EXCEPTIONS
-
-If value1 == 0 and value2 < 0 then C<invalid> is returned.
-
-If value1 < 0 and value2 is not an integer then C<invalid> is returned.
-
-=cut
-
-.sub '_float_pow' :anon
-    .param pmc value1
-    .param pmc value2
-    .local pmc res
-    $P1 = value1
-    $I0 = isa value1, 'WmlsString'
-    unless $I0 goto L1
-    $P1 = value1.'parseNumber'()
-  L1:
-    $I0 = isa $P1, 'WmlsInvalid'
-    if $I0 goto L2
-    $N1 = $P1
-    $P2 = value2
-    $I0 = isa value2, 'WmlsString'
-    unless $I0 goto L3
-    $P2 = value2.'parseNumber'()
-  L3:
-    $I0 = isa $P2, 'WmlsInvalid'
-    if $I0 goto L2
-    $N2 = $P2
-    unless $N1 == 0.0 goto L4
-    if $N2 < 0.0 goto L2
-    new res, 'WmlsFloat'
-    set res, 0.0
-    goto L5
-  L4:
-    unless $N1 < 0.0 goto L6
-    $I0 = isa $P2, 'WmlsFloat'
-    if $I0 goto L2
-  L6:
-    $N0 = pow $N1, $N2
-    new res, 'WmlsFloat'
-    set res, $N0
-    goto L5
-  L2:
-    new res, 'WmlsInvalid'
-  L5:
-    .return (res)
-.end
-
-
-=head2 C<round(value)>
-
-=head3 DESCRIPTION
-
-Returns the number value that is closest to the given value and is equal to a
-mathematical integer. If two integer number values are equally close to the
-value, the result is the larger number value. If the value is already an
-integer, the result is the value itself.
-
-=head3 PARAMETERS
-
-value = Number
-
-=head3 RETURN VALUE
-
-Integer or invalid.
-
-=cut
-
-.sub '_float_round' :anon
-    .param pmc value
-    .local pmc res
-    $P0 = value
-    $I0 = isa value, 'WmlsString'
-    unless $I0 goto L1
-    $P0 = value.'parseNumber'()
-  L1:
-    $I0 = isa $P0, 'WmlsInvalid'
-    if $I0 goto L2
-    $N0 = $P0
-    $N0 += 0.5
-    $I0 = floor $N0
-    new res, 'WmlsInteger'
-    set res, $I0
-    goto L3
-  L2:
-    new res, 'WmlsInvalid'
-  L3:
-    .return (res)
-.end
-
-
-=head2 C<sqrt(value)>
-
-=head3 DESCRIPTION
-
-Returns an implementation-dependent approximation to the square root of
-the given value.
-
-=head3 PARAMETERS
-
-value = Floating-point
-
-=head3 RETURN VALUE
-
-Floating-point or invalid.
-
-=head3 EXCEPTIONS
-
-If value is a negative number then invalid is returned.
-
-=cut
-
-.sub '_float_sqrt' :anon
-    .param pmc value
-    .local pmc res
-    $P0 = value
-    $I0 = isa value, 'WmlsString'
-    unless $I0 goto L1
-    $P0 = value.'parseNumber'()
-  L1:
-    $I0 = isa $P0, 'WmlsInvalid'
-    if $I0 goto L2
-    $N0 = $P0
-    if $N0 < 0.0 goto L2
-    $N1 = sqrt $N0
-    new res, 'WmlsFloat'
-    set res, $N1
-    goto L3
-  L2:
-    new res, 'WmlsInvalid'
-  L3:
-    .return (res)
-.end
-
-
-=head2 C<maxFloat()>
-
-=head3 DESCRIPTION
-
-Returns the maximum floating-point value supported by [IEEE754] single
-precision floating-point format.
-
-=head3 RETURN VALUE
-
-Floating-point 3.40282347e+38.
-
-=cut
-
-.sub '_float_maxFloat' :anon
-    .local pmc res
-    new res, 'WmlsFloat'
-    set res, 3.40282347e+38
-    .return (res)
-.end
-
-
-=head2 C<minFloat()>
-
-=head3 DESCRIPTION
-
-Returns the smallest nonzero floating-point value supported by [IEEE754]
-single precision floating-point format.
-
-=head3 RETURN VALUE
-
-Floating-point. Smaller than or equal to the normalised minimum single
-precision floating-point value: 1.17549435e-38.
-
-=cut
-
-.sub '_float_minFloat' :anon
-    .local pmc res
-    new res, 'WmlsFloat'
-    set res, 1.17549435e-38
-    .return (res)
-.end
-
-
-=head1 AUTHORS
-
-Francois Perrad.
-
-=cut
-
-
-# Local Variables:
-#   mode: pir
-#   fill-column: 100
-# End:
-# vim: expandtab shiftwidth=4 ft=pir:
--- origsrc/parrot-0.7.1/languages/WMLScript/runtime/wmlslang.pir	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/runtime/wmlslang.pir	1970-01-01 01:00:00.000000000 +0100
@@ -1,673 +0,0 @@
-# Copyright (C) 2006-2008, The Perl Foundation.
-# $Id: wmlslang.pir 25819 2008-02-18 00:16:21Z coke $
-
-=head1 NAME
-
-runtime/wmlslang.pir - WMLScript Lang library
-
-=head1 DESCRIPTION
-
-This library contains a set of functions that are closely related to the
-WMLScript language core.
-
-See "WMLScript Standard Libraries Specification", section 7 "Lang".
-
-=head1 FUNCTIONS
-
-=cut
-
-.loadlib 'wmls_ops'
-.HLL 'WMLScript', 'wmls_group'
-
-
-.sub 'getLang'
-    new $P0, 'Hash'
-
-    .const .Sub _lang_abs = '_lang_abs'
-    $P0[0]  = _lang_abs
-    .const .Sub _lang_min = '_lang_min'
-    $P0[1]  = _lang_min
-    .const .Sub _lang_max = '_lang_max'
-    $P0[2]  = _lang_max
-    .const .Sub _lang_parseInt = '_lang_parseInt'
-    $P0[3]  = _lang_parseInt
-    .const .Sub _lang_parseFloat = '_lang_parseFloat'
-    $P0[4]  = _lang_parseFloat
-    .const .Sub _lang_isInt = '_lang_isInt'
-    $P0[5]  = _lang_isInt
-    .const .Sub _lang_isFloat = '_lang_isFloat'
-    $P0[6]  = _lang_isFloat
-    .const .Sub _lang_maxInt = '_lang_maxInt'
-    $P0[7]  = _lang_maxInt
-    .const .Sub _lang_minInt = '_lang_minInt'
-    $P0[8]  = _lang_minInt
-    .const .Sub _lang_float = '_lang_float'
-    $P0[9]  = _lang_float
-    .const .Sub _lang_exit = '_lang_exit'
-    $P0[10] = _lang_exit
-    .const .Sub _lang_abort = '_lang_abort'
-    $P0[11] = _lang_abort
-    .const .Sub _lang_random = '_lang_random'
-    $P0[12] = _lang_random
-    .const .Sub _lang_seed = '_lang_seed'
-    $P0[13] = _lang_seed
-    .const .Sub _lang_characterSet = '_lang_characterSet'
-    $P0[14] = _lang_characterSet
-
-    .return ($P0)
-.end
-
-
-=head2 C<abs(value)>
-
-=head3 DESCRIPTION
-
-Returns the absolute value of the given number. If the given number is of
-type integer then an integer value is returned. If the given number is of type
-floating-point then a floating-point value is returned.
-
-=head3 PARAMETERS
-
-value = Number
-
-=head3 RETURN VALUE
-
-Number or invalid.
-
-=cut
-
-.sub '_lang_abs' :anon
-    .param pmc value
-    .local pmc res
-    res = clone value
-    res = abs value
-    .return (res)
-.end
-
-
-=head2 C<min(value1, value2)>
-
-=head3 DESCRIPTION
-
-Returns the minimum value of the given two numbers. The value and type
-returned is the same as the value and type of the selected number. The
-selection is done in the following way:
-
-=over 4
-
-=item *
-
-WMLScript operator data type conversion rules for I<integers and
-floating-points> (see [WMLScript]) must be used to specify the data
-type (integer or floating-point ) for comparison.
-
-=item *
-
-Compare the numbers to select the smaller one.
-
-=item *
-
-If the values are equal then the first value is selected.
-
-=back
-
-=head3 PARAMETERS
-
-value1 = Number
-
-value2 = Number
-
-=head3 RETURN VALUE
-
-Number or invalid.
-
-=cut
-
-.sub '_lang_min' :anon
-    .param pmc value1
-    .param pmc value2
-    .local pmc res
-    $P1 = value1
-    $I0 = isa value1, 'WmlsString'
-    unless $I0 goto L1
-    $P1 = value1.'parseNumber'()
-  L1:
-    $P2 = value2
-    $I0 = isa value2, 'WmlsString'
-    unless $I0 goto L2
-    $P2 = value2.'parseNumber'()
-  L2:
-    $P0 = isle $P1, $P2
-    $I0 = isa $P0, 'WmlsInvalid'
-    unless $I0 goto L3
-    .return ($P0)
-  L3:
-    $I0 = $P0
-    unless $I0 goto L4
-    res = clone value1
-    goto L5
-  L4:
-    res = clone value2
-  L5:
-    .return (res)
-.end
-
-
-=head2 C<max(value1, value2)>
-
-=head3 DESCRIPTION
-
-Returns the maximum value of the given two numbers. The value and type
-returned is the same as the value and type of the selected number. The
-selection is done in the following way:
-
-=over 4
-
-=item *
-
-WMLScript operator data type conversion rules for I<integers and
-floating-points> (see [WMLScript]) must be used to specify the data
-type (integer or floating-point ) for comparison.
-
-=item *
-
-Compare the numbers to select the larger one.
-
-=item *
-
-If the values are equal then the first value is selected.
-
-=back
-
-=head3 PARAMETERS
-
-value1 = Number
-
-value2 = Number
-
-=head3 RETURN VALUE
-
-Number or invalid.
-
-=cut
-
-.sub '_lang_max' :anon
-    .param pmc value1
-    .param pmc value2
-    .local pmc res
-    $P1 = value1
-    $I0 = isa value1, 'WmlsString'
-    unless $I0 goto L1
-    $P1 = value1.'parseNumber'()
-  L1:
-    $P2 = value2
-    $I0 = isa value2, 'WmlsString'
-    unless $I0 goto L2
-    $P2 = value2.'parseNumber'()
-  L2:
-    $P0 = isge $P1, $P2
-    $I0 = isa $P0, 'WmlsInvalid'
-    unless $I0 goto L3
-    .return ($P0)
-  L3:
-    $I0 = $P0
-    unless $I0 goto L4
-    res = clone value1
-    goto L5
-  L4:
-    res = clone value2
-  L5:
-    .return (res)
-.end
-
-
-=head2 C<parseInt(value)>
-
-=head3 DESCRIPTION
-
-Returns an integer value defined by the string value. The legal integer
-syntax is specified by the WMLScript (see [WMLScript]) numeric string
-grammar for I<decimal integer literals> with the following additional parsing
-rule:
-
-=over 4
-
-=item *
-
-Parsing ends when the first character is encountered that is not a
-leading '+' or '-' or a decimal digit.
-
-=back
-
-The result is the parsed string converted to an integer value.
-
-=head3 PARAMETERS
-
-value = String
-
-=head3 RETURN VALUE
-
-Integer or invalid.
-
-=head3 EXCEPTIONS
-
-In case of a parsing error an C<invalid> value is returned.
-
-=cut
-
-.sub '_lang_parseInt' :anon
-    .param pmc value
-    .local pmc res
-    $I0 = isa value, 'WmlsString'
-    unless $I0 goto L1
-    res = value.'parseInt'()
-    .return (res)
-  L1:
-    res = value
-    $I0 = isa value, 'WmlsInteger'
-    if $I0 goto L2
-    new res, 'WmlsInvalid'
-  L2:
-    .return (res)
-.end
-
-
-=head2 C<parseFloat(value)>
-
-=head3 DESCRIPTION
-
-Returns a floating-point value defined by the string value. The legal floatingpoint
-syntax is specified by the WMLScript (see [WMLScript]) numeric
-string grammar for I<decimal floating-point literals> with the following additional
-parsing rule:
-
-=over 4
-
-=item *
-
-Parsing ends when the first character is encountered that cannot
-be parsed as being part of the floating-point representation.
-
-=back
-
-The result is the parsed string converted to a floating-point value.
-
-=head3 PARAMETERS
-
-value = String
-
-=head3 RETURN VALUE
-
-Floating-point or invalid.
-
-=head3 EXCEPTIONS
-
-In case of a parsing error an C<invalid> value is returned.
-
-=cut
-
-.sub '_lang_parseFloat' :anon
-    .param pmc value
-    .local pmc res
-    $I0 = isa value, 'WmlsString'
-    unless $I0 goto L1
-    res = value.'parseFloat'()
-    .return (res)
-  L1:
-    res = value
-    $I0 = isa value, 'WmlsFloat'
-    if $I0 goto L2
-    $I0 = isa value, 'WmlsInteger'
-    unless $I0 goto L3
-    $I0 = value
-    new res, 'WmlsFloat'
-    set res, $I0
-    goto L2
-  L3:
-    new res, 'WmlsInvalid'
-  L2:
-    .return (res)
-.end
-
-
-=head2 C<isInt(value)>
-
-=head3 DESCRIPTION
-
-Returns a boolean value that is C<true> if the given value can be converted
-into an integer number by using parseInt(value). Otherwise C<false> is
-returned.
-
-=head3 PARAMETERS
-
-value = Any
-
-=head3 RETURN VALUE
-
-Boolean or invalid.
-
-=cut
-
-.sub '_lang_isInt' :anon
-    .param pmc value
-    .local pmc res
-    $I0 = isa value, 'WmlsString'
-    unless $I0 goto L1
-    $P0 = value.'parseInt'()
-    res = defined $P0
-    .return (res)
-  L1:
-    $I0 = isa value, 'WmlsInvalid'
-    unless $I0 goto L2
-    new res, 'WmlsInvalid'
-    .return (res)
-  L2:
-    new res, 'WmlsBoolean'
-    $I0 = isa value, 'WmlsInteger'
-    set res, $I0
-    .return (res)
-.end
-
-
-=head2 C<isFloat(value)>
-
-=head3 DESCRIPTION
-
-Returns a boolean value that is C<true> if the given value can be converted
-into a floating-point number using parseFloat(value). Otherwise C<false> is
-returned.
-
-=head3 PARAMETERS
-
-value = Any
-
-=head3 RETURN VALUE
-
-Boolean or invalid.
-
-=cut
-
-.sub '_lang_isFloat' :anon
-    .param pmc value
-    .local pmc res
-    $I0 = isa value, 'WmlsString'
-    unless $I0 goto L1
-    $P0 = value.'parseFloat'()
-    res = defined $P0
-    .return (res)
-  L1:
-    $I0 = isa value, 'WmlsInvalid'
-    unless $I0 goto L2
-    new res, 'WmlsInvalid'
-    .return (res)
-  L2:
-    new res, 'WmlsBoolean'
-    $I0 = isa value, 'WmlsFloat'
-    set res, $I0
-    if $I0 goto L3
-    $I0 = isa value, 'WmlsInteger'
-    set res, $I0
-  L3:
-    .return (res)
-.end
-
-
-=head2 C<maxInt()>
-
-=head3 DESCRIPTION
-
-Returns the maximum integer value.
-
-=head3 RETURN VALUE
-
-Integer 2147483647.
-
-=cut
-
-.sub '_lang_maxInt' :anon
-    .local pmc res
-    new res, 'WmlsInteger'
-    set res, 2147483647
-    .return (res)
-.end
-
-
-=head2 C<minInt()>
-
-=head3 DESCRIPTION
-
-Returns the minimum integer value.
-
-=head3 RETURN VALUE
-
-Integer -2147483648.
-
-=cut
-
-.sub '_lang_minInt' :anon
-    .local pmc res
-    new res, 'WmlsInteger'
-    set res, -2147483648
-    .return (res)
-.end
-
-
-=head2 C<float()>
-
-=head3 DESCRIPTION
-
-Returns true if floating-points are supported and false if not.
-
-=head3 RETURN VALUE
-
-Boolean.
-
-=cut
-
-.sub '_lang_float' :anon
-    .local pmc res
-    new res, 'WmlsBoolean'
-    set res, 1
-    .return (res)
-.end
-
-
-=head2 C<exit(value)>
-
-=head3 DESCRIPTION
-
-Ends the interpretation of the WMLScript bytecode and returns the control
-back to the caller of the WMLScript interpreter with the given return value.
-This function can be used to perform a normal exit from a function in cases
-where the execution of the WMLScript bytecode should be discontinued.
-
-=head3 PARAMETERS
-
-value = Any
-
-=head3 RETURN VALUE
-
-None (this function ends the interpretation).
-
-=cut
-
-.sub '_lang_exit' :anon
-    .param pmc value
-    .local pmc res
-    $I0 = isa value, 'WmlsString'
-    unless $I0 goto L1
-    $P0 = value.'parseInt'()
-    $I0 = $P0
-    exit $I0
-  L1:
-    $I0 = value
-    exit $I0
-.end
-
-
-=head2 C<abort(errorDescription)>
-
-=head3 DESCRIPTION
-
-Aborts the interpretation of the WMLScript bytecode and returns the control
-back to the caller of the WMLScript interpreter with the return
-errorDescription. This function can be used to perform an abnormal exit in
-cases where the execution of the WMLScript should be discontinued due to
-serious errors detected by the program. If the type of the errorDescription is
-invalid, string "invalid" is used as the errorDescription instead.
-
-=head3 PARAMETERS
-
-errorDescription = String
-
-=head3 RETURN VALUE
-
-None (this function aborts the interpretation).
-
-=cut
-
-.sub '_lang_abort' :anon
-    .param pmc value
-    die value
-.end
-
-
-=head2 C<random(value)>
-
-=head3 DESCRIPTION
-
-Returns an integer value with positive sign that is greater than or equal to 0
-but less than or equal to the given value. The return value is chosen
-randomly or pseudo-randomly with approximately uniform distribution over
-that range, using an implementation-dependent algorithm or strategy.
-
-If the value is of type floating-point, Float.int() is first used to calculate the
-actual integer value.
-
-=head3 PARAMETERS
-
-value = Number
-
-=head3 RETURN VALUE
-
-Integer or invalid.
-
-=head3 EXCEPTIONS
-
-If value is equal to zero (0), the function returns zero.
-
-If value is less than zero (0), the function returns C<invalid>.
-
-=cut
-
-.sub '_lang_random' :anon
-    .param pmc value
-    .local pmc res
-    $P0 = value
-    $I0 = isa value, 'WmlsString'
-    unless $I0 goto L1
-    $P0 = value.'parseNumber'()
-  L1:
-    $I0 = isa $P0, 'WmlsInvalid'
-    if $I0 goto L2
-    $I0 = $P0
-    if $I0 < 0 goto L2
-    new $P0, 'Random'
-    $N0 = $P0
-    $N0 = mul $I0
-    $I0 = $N0
-    new res, 'WmlsInteger'
-    set res, $I0
-    goto L3
-  L2:
-    new res, 'WmlsInvalid'
-  L3:
-    .return (res)
-.end
-
-
-=head2 C<seed(value)>
-
-=head3 DESCRIPTION
-
-Initialises the pseudo-random number sequence and returns an empty
-string. If the value is zero or a positive integer then the given value is used
-for initialisation, otherwise a random, system dependent initialisation value
-is used. A seed value of greater than or equal to zero results in a repeatable
-sequence of pseudo-random numbers. A seed value of less than zero
-results in a non-repeatable sequence of random numbers.
-
-If the value is of type floating-point, Float.int() is first used to calculate the
-actual integer value. . If the value is non-numeric, invalid is returned and the
-current seed is unchanged.
-
-=head3 PARAMETERS
-
-value = Number
-
-=head3 RETURN VALUE
-
-String or invalid.
-
-=cut
-
-.sub '_lang_seed' :anon
-    .param pmc value
-    .local pmc res
-    $P0 = value
-    $I0 = isa value, 'WmlsString'
-    unless $I0 goto L1
-    $P0 = value.'parseNumber'()
-  L1:
-    $I0 = isa $P0, 'WmlsInvalid'
-    if $I0 goto L2
-    $I0 = $P0
-    if $I0 >= 0 goto L3
-    $I0 = time
-  L3:
-    new $P0, 'Random'
-    $P0 = $I0
-    new res, 'WmlsString'
-    set res, ''
-    goto L4
-  L2:
-    new res, 'WmlsInvalid'
-  L4:
-    .return (res)
-.end
-
-
-=head2 C<characterSet()>
-
-=head3 DESCRIPTION
-
-Returns the character set supported by the WMLScript Interpreter. The
-return value is an integer that denotes a MIBEnum value assigned by the
-IANA for all character sets (see [WSP] for more information).
-
-=head3 RETURN VALUE
-
-Integer.
-
-=cut
-
-.sub '_lang_characterSet' :anon
-    .local pmc res
-    new res, 'WmlsInteger'
-    res = 4     # latin1
-    .return (res)
-.end
-
-
-=head1 AUTHORS
-
-Francois Perrad.
-
-=cut
-
-
-# Local Variables:
-#   mode: pir
-#   fill-column: 100
-# End:
-# vim: expandtab shiftwidth=4 ft=pir:
--- origsrc/parrot-0.7.1/languages/WMLScript/runtime/wmlsstring.pir	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/runtime/wmlsstring.pir	1970-01-01 01:00:00.000000000 +0100
@@ -1,1116 +0,0 @@
-# Copyright (C) 2006-2008, The Perl Foundation.
-# $Id: wmlsstring.pir 25819 2008-02-18 00:16:21Z coke $
-
-=head1 NAME
-
-runtime/wmlsstring.pir - WMLScript String library
-
-=head1 DESCRIPTION
-
-This library contains a set of string functions. A string is an array of
-characters. Each of the characters has an index. The first character in a
-string has an index zero (0). The length of the string is the number of
-characters in the array.
-
-The user of the String library can specify a special separator by which
-elements in a string can be separated. These elements can be accessed
-by specifying the separator and the element index. The first element in a
-string has an index zero (0). Each occurrence of the separator in the string
-separates two elements (no escaping of separators is allowed).
-
-A White space character is one of the following characters:
-
-=over 4
-
-=item * TAB : Horizontal Tabulation
-
-=item * VT : Vertical Tabulation
-
-=item * FF : Form Feed
-
-=item * SP : Space
-
-=item * LF : Line Feed
-
-=item * CR : Carriage Return
-
-=back
-
-See "WMLScript Standard Libraries Specification", section 9 "String".
-
-=head1 FUNCTIONS
-
-=cut
-
-.loadlib 'wmls_ops'
-.HLL 'WMLScript', 'wmls_group'
-
-
-.sub 'getString'
-    new $P0, 'Hash'
-
-    .const .Sub _string_length = '_string_length'
-    $P0[0]  = _string_length
-    .const .Sub _string_isEmpty = '_string_isEmpty'
-    $P0[1]  = _string_isEmpty
-    .const .Sub _string_charAt = '_string_charAt'
-    $P0[2]  = _string_charAt
-    .const .Sub _string_subString = '_string_subString'
-    $P0[3]  = _string_subString
-    .const .Sub _string_find = '_string_find'
-    $P0[4]  = _string_find
-    .const .Sub _string_replace = '_string_replace'
-    $P0[5]  = _string_replace
-    .const .Sub _string_elements = '_string_elements'
-    $P0[6]  = _string_elements
-    .const .Sub _string_elementAt = '_string_elementAt'
-    $P0[7]  = _string_elementAt
-    .const .Sub _string_removeAt = '_string_removeAt'
-    $P0[8]  = _string_removeAt
-    .const .Sub _string_replaceAt = '_string_replaceAt'
-    $P0[9]  = _string_replaceAt
-    .const .Sub _string_insertAt = '_string_insertAt'
-    $P0[10] = _string_insertAt
-    .const .Sub _string_squeeze = '_string_squeeze'
-    $P0[11] = _string_squeeze
-    .const .Sub _string_trim = '_string_trim'
-    $P0[12] = _string_trim
-    .const .Sub _string_compare = '_string_compare'
-    $P0[13] = _string_compare
-    .const .Sub _string_toString = '_string_toString'
-    $P0[14] = _string_toString
-    .const .Sub _string_format = '_string_format'
-    $P0[15] = _string_format
-
-    .return ($P0)
-.end
-
-
-=head2 C<length(string)>
-
-=head3 DESCRIPTION
-
-Returns the length (number of characters) of the given string.
-
-=head3 PARAMETERS
-
-string = String
-
-=head3 RETURN VALUE
-
-Integer or invalid.
-
-=cut
-
-.sub '_string_length' :anon
-    .param pmc str
-    .local pmc res
-    $I0 = isa str, 'WmlsInvalid'
-    if $I0 goto L1
-    $S1 = str
-    $I1 = length $S1
-    new res, 'WmlsInteger'
-    set res, $I1
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<isEmpty(string)>
-
-=head3 DESCRIPTION
-
-Returns a boolean true if the string length is zero and boolean false
-otherwise.
-
-=head3 PARAMETERS
-
-string = String
-
-=head3 RETURN VALUE
-
-Boolean or invalid.
-
-=cut
-
-.sub '_string_isEmpty' :anon
-    .param pmc str
-    .local pmc res
-    $I0 = isa str, 'WmlsInvalid'
-    if $I0 goto L1
-    $S1 = str
-    $I1 = length $S1
-    new res, 'WmlsBoolean'
-    set res, 0
-    if $I1 goto L2
-    set res, 1
-  L2:
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<charAt(string, index)>
-
-=head3 DESCRIPTION
-
-Returns a new string of length one containing the character at the specified
-index of the given string.
-
-If the index is of type floating-point, Float.int() is first used to calculate the
-actual integer index.
-
-=head3 PARAMETERS
-
-string = String
-
-index = Number (the index of the character to be returned)
-
-=head3 RETURN VALUE
-
-String or invalid.
-
-=head3 EXCEPTIONS
-
-If index is out of range then an empty string (C<"">) is returned.
-
-=cut
-
-.sub '_string_charAt' :anon
-    .param pmc str
-    .param pmc index_
-    .local pmc res
-    $I0 = isa str, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa index_, 'WmlsInteger'
-    if $I0 goto L2
-    $I0 = isa index_, 'WmlsFloat'
-    if $I0 goto L2
-    goto L1
-  L2:
-    $S1 = str
-    $I1 = length $S1
-    $I2 = index_
-    new res, 'WmlsString'
-    if $I2 < 0 goto L3
-    if $I2 >= $I1 goto L3
-    $S0 = substr $S1, $I2, 1
-    set res, $S0
-  L3:
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<subString(string, startIndex, length)>
-
-=head3 DESCRIPTION
-
-Returns a new string that is a substring of the given string. The substring
-begins at the specified startIndex and its length (number of characters) is
-the given length. If the startIndex is less than 0 then 0 is used for the
-startIndex. If the length is larger than the remaining number of characters in
-the string, the length is replaced with the number of remaining characters.
-
-If the startIndex or the length is of type floating-point, Float.int() is first used to
-calculate the actual integer value.
-
-=head3 PARAMETERS
-
-string = String
-
-startIndex = Number (the beginning index, inclusive)
-
-length = Number (the length of the substring)
-
-=head3 RETURN VALUE
-
-String or invalid.
-
-=head3 EXCEPTIONS
-
-If startIndex is larger than the last index an empty string (C<"">) is returned.
-
-If length <= 0 an empty string (C<"">) is returned.
-
-=cut
-
-.sub '_string_subString' :anon
-    .param pmc String
-    .param pmc startIndex
-    .param pmc Length
-    .local pmc res
-    $I0 = isa String, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa startIndex, 'WmlsInteger'
-    if $I0 goto L2
-    $I0 = isa startIndex, 'WmlsFloat'
-    if $I0 goto L2
-    goto L1
-  L2:
-    $I0 = isa Length, 'WmlsInteger'
-    if $I0 goto L3
-    $I0 = isa Length, 'WmlsFloat'
-    if $I0 goto L3
-    goto L1
-  L3:
-    $S1 = String
-    $I1 = length $S1
-    $I2 = startIndex
-    if $I2 >= 0 goto L4
-    $I2 = 0
-  L4:
-    new res, 'WmlsString'
-    if $I2 >= $I1 goto L5
-    $I3 = Length
-    if $I3 <= 0 goto L5
-    $S0 = substr $S1, $I2, $I3
-    set res, $S0
-  L5:
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<find(string, subString)>
-
-=head3 DESCRIPTION
-
-Returns the index of the first character in the string that matches the
-requested subString. If no match is found integer value -1 is returned.
-
-Two strings are defined to match when they are identical. Characters with
-multiple possible representations match only if they have the same
-representation in both strings. No case folding is performed.
-
-=head3 PARAMETERS
-
-string = String
-
-subString = String
-
-=head3 RETURN VALUE
-
-Integer or invalid.
-
-=head3 EXCEPTIONS
-
-If subString is an empty string (C<"">), an invalid value is returned.
-
-=cut
-
-.sub '_string_find' :anon
-    .param pmc String
-    .param pmc subString
-    .local pmc res
-    $I0 = isa String, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa subString, 'WmlsInvalid'
-    if $I0 goto L1
-    $S1 = String
-    $S2 = subString
-    $I2 = length $S2
-    if $I2 == 0 goto L1
-    $I0 = index $S1, $S2
-    new res, 'WmlsInteger'
-    set res, $I0
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<replace(string, oldSubString, newSubString)>
-
-=head3 DESCRIPTION
-
-Returns a new string resulting from replacing all occurrences of
-oldSubString in this string with newSubString.
-
-Two strings are defined to match when they are identical. Characters with
-multiple possible representations match only if they have the same
-representation in both strings. No case folding is performed.
-
-=head3 PARAMETERS
-
-string = String
-
-oldSubString = String
-
-newSubString = String
-
-=head3 RETURN VALUE
-
-String or invalid.
-
-=head3 EXCEPTIONS
-
-If oldSubString is an empty string an C<invalid> value is returned.
-
-=cut
-
-.sub '_string_replace' :anon
-    .param pmc String
-    .param pmc oldSubString
-    .param pmc newSubString
-    .local pmc res
-    $I0 = isa String, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa oldSubString, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa newSubString, 'WmlsInvalid'
-    if $I0 goto L1
-    $S1 = String
-    $S2 = oldSubString
-    $I2 = length $S2
-    if $I2 == 0 goto L1
-    $S3 = newSubString
-    $P0 = split $S2, $S1
-    $S0 = join $S3, $P0
-    new res, 'WmlsString'
-    set res, $S0
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<elements(string, separator)>
-
-=head3 DESCRIPTION
-
-Returns the number of elements in the given string separated by the given
-separator. Empty string ("") is a valid element (thus, this function can never
-return a value that is less or equal to zero).
-
-=head3 PARAMETERS
-
-string = String
-
-separator = String (the first character of the string used as separator)
-
-=head3 RETURN VALUE
-
-Integer or invalid.
-
-=head3 EXCEPTIONS
-
-Returns C<invalid> if the separator is an empty string.
-
-=cut
-
-.sub '_string_elements' :anon
-    .param pmc str
-    .param pmc separator
-    .local pmc res
-    $I0 = isa str, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa separator, 'WmlsInvalid'
-    if $I0 goto L1
-    $S1 = str
-    $S2 = separator
-    $I2 = length $S2
-    if $I2 == 0 goto L1
-    $S2 = substr $S2, 0, 1
-    new res, 'WmlsInteger'
-    $I1 = length $S1
-    if $I1 != 0 goto L2
-    set res, 1
-    .return (res)
-  L2:
-    $P0 = split $S2, $S1
-    $I0 = elements $P0
-    set res, $I0
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<elementAt(string, index, separator)>
-
-=head3 DESCRIPTION
-
-Search string for index'th element, elements being separated by separator
-and return the corresponding element. If the index is less than 0 then the first
-element is returned. If the index is larger than the number of elements then
-the last element is returned. If the string is an empty string then an empty
-string is returned.
-
-If the index is of type floating-point, Float.int() is first used to calculate the
-actual index value.
-
-=head3 PARAMETERS
-
-string = String
-
-index = Number (the index of the element to be returned)
-
-separator = String (the first character of the string used as separator)
-
-=head3 RETURN VALUE
-
-String or invalid.
-
-=head3 EXCEPTIONS
-
-Returns C<invalid> if the separator is an empty string.
-
-=cut
-
-.sub '_string_elementAt' :anon
-    .param pmc str
-    .param pmc index_
-    .param pmc separator
-    .local pmc res
-    $I0 = isa str, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa index_, 'WmlsInteger'
-    if $I0 goto L2
-    $I0 = isa index_, 'WmlsFloat'
-    if $I0 goto L2
-    goto L1
-  L2:
-    $I0 = isa separator, 'WmlsInvalid'
-    if $I0 goto L1
-    $S1 = str
-    $I2 = index_
-    if $I2 >= 0 goto L3
-    $I2 = 0
-  L3:
-    $S3 = separator
-    $I3 = length $S3
-    if $I3 == 0 goto L1
-    $S3 = substr $S3, 0, 1
-    new res, 'WmlsString'
-    $I1 = length $S1
-    if $I1 != 0 goto L4
-    .return (res)
-  L4:
-    $P0 = split $S3, $S1
-    $I0 = elements $P0
-    if $I2 < $I0 goto L5
-    $I2 = $I0 - 1
-  L5:
-    $S0 = $P0[$I2]
-    set res, $S0
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<removeAt(string, index, separator)>
-
-=head3 DESCRIPTION
-
-Returns a new string where the element and the corresponding separator (if
-existing) with the given index are removed from the given string. If the index
-is less than 0 then the first element is removed. If the index is larger than the
-number of elements then the last element is removed. If the string is empty,
-the function returns a new empty string.
-
-If the index is of type floating-point, Float.int() is first used to calculate the
-actual index value.
-
-=head3 PARAMETERS
-
-string = String
-
-index = Number (the index of the element to be deleted)
-
-separator = String (the first character of the string used as separator)
-
-=head3 RETURN VALUE
-
-String or invalid.
-
-=head3 EXCEPTIONS
-
-Returns C<invalid> if the separator is an empty string.
-
-=cut
-
-.sub '_string_removeAt' :anon
-    .param pmc str
-    .param pmc index_
-    .param pmc separator
-    .local pmc res
-    $I0 = isa str, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa index_, 'WmlsInteger'
-    if $I0 goto L2
-    $I0 = isa index_, 'WmlsFloat'
-    if $I0 goto L2
-    goto L1
-  L2:
-    $I0 = isa separator, 'WmlsInvalid'
-    if $I0 goto L1
-    $S1 = str
-    $I2 = index_
-    if $I2 >= 0 goto L3
-    $I2 = 0
-  L3:
-    $S3 = separator
-    $I3 = length $S3
-    if $I3 == 0 goto L1
-    $S3 = substr $S3, 0, 1
-    new res, 'WmlsString'
-    $I1 = length $S1
-    if $I1 != 0 goto L4
-    .return (res)
-  L4:
-    $P0 = split $S3, $S1
-    $I4 = elements $P0
-    if $I2 < $I4 goto L5
-    $I2 = $I4 - 1
-  L5:
-    dec $I4
-    new $P1, 'Array'
-    set $P1, $I4
-    $I0 = 0
-    $I1 = 0
-  L6:
-    unless $I1 < $I4 goto L7
-    $S0 = $P0[$I0]
-    $P1[$I1] = $S0
-    if $I0 == $I2 goto L8
-    inc $I1
-  L8:
-    inc $I0
-    goto L6
-  L7:
-    $S0 = join $S3, $P1
-    set res, $S0
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<replaceAt(string, element, index, separator)>
-
-=head3 DESCRIPTION
-
-Returns a string with the current element at the specified index replaced with
-the given element. If the index is less than 0 then the first element is
-replaced. If the index is larger than the number of elements then the last
-element is replaced. If the string is empty, the function returns a new string
-with the given element.
-
-If the index is of type floating-point, Float.int() is first used to calculate the
-actual index value.
-
-=head3 PARAMETERS
-
-string = String
-
-element = String
-
-index = Number (the index of the element to be replaced)
-
-separator = String (the first character of the string used as separator)
-
-=head3 RETURN VALUE
-
-String or invalid.
-
-=head3 EXCEPTIONS
-
-Returns C<invalid> if the separator is an empty string.
-
-=cut
-
-.sub '_string_replaceAt' :anon
-    .param pmc str
-    .param pmc element
-    .param pmc index_
-    .param pmc separator
-    .local pmc res
-    $I0 = isa str, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa element, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa index_, 'WmlsInteger'
-    if $I0 goto L2
-    $I0 = isa index_, 'WmlsFloat'
-    if $I0 goto L2
-    goto L1
-  L2:
-    $I0 = isa separator, 'WmlsInvalid'
-    if $I0 goto L1
-    $S1 = str
-    $S2 = element
-    $I3 = index_
-    if $I3 >= 0 goto L3
-    $I3 = 0
-  L3:
-    $S4 = separator
-    $I4 = length $S4
-    if $I4 == 0 goto L1
-    $S4 = substr $S4, 0, 1
-    new res, 'WmlsString'
-    $I1 = length $S1
-    if $I1 != 0 goto L4
-    set res, $S2
-    .return (res)
-  L4:
-    $P0 = split $S4, $S1
-    $I0 = elements $P0
-    if $I3 < $I0 goto L5
-    $I3 = $I0 - 1
-  L5:
-    $P0[$I3] = $S2
-    $S0 = join $S4, $P0
-    set res, $S0
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<insertAt(string, element, index, separator)>
-
-=head3 DESCRIPTION
-
-Returns a string with the element and the corresponding separator (if
-needed) inserted at the specified element index of the original string. If the
-index is less than 0 then 0 is used as the index. If the index is larger than the
-number of elements then the element is appended at the end of the string. If
-the string is empty, the function returns a new string with the given element.
-
-If the index is of type floating-point, Float.int() is first used to calculate the
-actual index value.
-
-=head3 PARAMETERS
-
-string = String (original string)
-
-element = String (element to be inserted)
-
-index = Number (the index of the element to be added)
-
-separator = String (the first character of the string used as separator)
-
-=head3 RETURN VALUE
-
-String or invalid.
-
-=head3 EXCEPTIONS
-
-Returns C<invalid> if the separator is an empty string.
-
-=cut
-
-.sub '_string_insertAt' :anon
-    .param pmc str
-    .param pmc element
-    .param pmc index_
-    .param pmc separator
-    .local pmc res
-    $I0 = isa str, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa element, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa index_, 'WmlsInteger'
-    if $I0 goto L2
-    $I0 = isa index_, 'WmlsFloat'
-    if $I0 goto L2
-    goto L1
-  L2:
-    $I0 = isa separator, 'WmlsInvalid'
-    if $I0 goto L1
-    $S1 = str
-    $S2 = element
-    $I3 = index_
-    if $I3 >= 0 goto L3
-    $I3 = 0
-  L3:
-    $S4 = separator
-    $I4 = length $S4
-    if $I4 == 0 goto L1
-    $S4 = substr $S4, 0, 1
-    new res, 'WmlsString'
-    $I1 = length $S1
-    if $I1 != 0 goto L4
-    set res, $S2
-    .return (res)
-  L4:
-    $P0 = split $S4, $S1
-    $I5 = elements $P0
-    if $I3 <= $I5 goto L5
-    $I3 = $I5
-  L5:
-    $I6 = $I5 + 1
-    new $P1, 'Array'
-    set $P1, $I6
-    $I0 = 0
-    $I1 = 0
-  L6:
-    unless $I0 < $I5 goto L7
-    if $I1 != $I3 goto L8
-    inc $I1
-  L8:
-    $S0 = $P0[$I0]
-    $P1[$I1] = $S0
-    inc $I0
-    inc $I1
-    goto L6
-  L7:
-    $P1[$I3] = $S2
-    $S0 = join $S4, $P1
-    set res, $S0
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<squeeze(string)>
-
-=head3 DESCRIPTION
-
-Returns a string where all consecutive series of white spaces within the
-string are reduced to single inter-word space.
-
-=head3 PARAMETERS
-
-String = String
-
-=head3 RETURN VALUE
-
-String or invalid.
-
-=cut
-
-.include 'cclass.pasm'
-
-.sub 'squeeze' :anon
-    .param string s
-    .local string res
-    .local int idx
-    res = ''
-    idx = 0
-    $I1 = length s
-  L1:
-    unless idx < $I1 goto L2
-    $I0 = is_cclass .CCLASS_WHITESPACE, s, idx
-    if $I0 goto L3
-    $S0 = substr s, idx, 1
-    res = concat $S0
-    inc idx
-    goto L1
-  L3:
-    res = concat ' '
-  L4:
-    inc idx
-    $I0 = is_cclass .CCLASS_WHITESPACE, s, idx
-    if $I0 goto L4
-    goto L1
-  L2:
-    .return (res)
-.end
-
-.sub '_string_squeeze' :anon
-    .param pmc str
-    .local pmc res
-    $I0 = isa str, 'WmlsInvalid'
-    if $I0 goto L1
-    new res, 'WmlsString'
-    $S1 = str
-    $S0 = squeeze($S1)
-    set res, $S0
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<trim(string)>
-
-=head3 DESCRIPTION
-
-Returns a string where all trailing and leading white spaces in the given
-string have been trimmed.
-
-=head3 PARAMETERS
-
-String = String
-
-=head3 RETURN VALUE
-
-String or invalid.
-
-=cut
-
-.sub 'trim' :anon
-    .param string s
-    .local string res
-    $I1 = 0
-  L1:
-    $I0 = is_cclass .CCLASS_WHITESPACE, s, $I1
-    unless $I0 goto L2
-    inc $I1
-    goto L1
-  L2:
-    $I2 = length s
-  L3:
-    dec $I2
-    $I0 = is_cclass .CCLASS_WHITESPACE, s, $I2
-    if $I0 goto L3
-    inc $I2
-    $I2 -= $I1
-    res = substr s, $I1, $I2
-    .return (res)
-.end
-
-.sub '_string_trim' :anon
-    .param pmc str
-    .local pmc res
-    $I0 = isa str, 'WmlsInvalid'
-    if $I0 goto L1
-    new res, 'WmlsString'
-    $S1 = str
-    $S0 = trim($S1)
-    set res, $S0
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<compare(string1, string2)>
-
-=head3 DESCRIPTION
-
-The return value indicates the lexicographic relation of string1 to string2. The
-relation is based on the relation of the character codes in the native
-character set. The return value is -1 if string1 is less than string2, 0 if string1
-is identical to string2 or 1 if string1 is greater than string2.
-
-=head3 PARAMETERS
-
-String1 = String
-
-String2 = String
-
-=head3 RETURN VALUE
-
-Integer or invalid.
-
-=cut
-
-.sub '_string_compare' :anon
-    .param pmc string1
-    .param pmc string2
-    .local pmc res
-    $I0 = isa string1, 'WmlsInvalid'
-    if $I0 goto L1
-    $I0 = isa string2, 'WmlsInvalid'
-    if $I0 goto L1
-    $S1 = string1
-    $S2 = string2
-    new res, 'WmlsInteger'
-    if $S1 >= $S2 goto L2
-    set res, -1
-    .return (res)
-  L2:
-    if $S1 > $S2 goto L3
-    set res, 0
-    .return (res)
-  L3:
-    set res, 1
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head2 C<toString(value)>
-
-=head3 DESCRIPTION
-
-Returns a string representation of the given value. This function performs
-exactly the same conversions as supported by the [WMLScript] language
-(automatic conversion from boolean, integer and floating-point values to
-strings) except that C<invalid> value returns the string C<"invalid">.
-
-=head3 PARAMETERS
-
-value = Any
-
-=head3 RETURN VALUE
-
-String.
-
-=cut
-
-.sub '_string_toString' :anon
-    .param pmc value
-    $S1 = value
-    .local pmc res
-    new res, 'WmlsString'
-    set res, $S1
-    .return (res)
-.end
-
-
-=head2 C<format(format, value)>
-
-=head3 DESCRIPTION
-
-Converts the given value to a string by using the given formatting provided as
-a format string. The format string can contain only one format specifier,
-which can be located anywhere inside the string. If more than one is
-specified, only the first one (leftmost) is used and the remaining specifiers
-are replaced by an empty string. The format specifier has the following form:
-
- % [width] [.precision] type
-
-The C<width> argument is a nonnegative decimal integer controlling the
-minimum number of characters printed. If the number of characters in the
-output value is less than the specified width, blanks are added to the left until
-the minimum width is reached. The C<width> argument never causes the
-value to be truncated. If the number of characters in the output value is
-greater than the specified width or, if width is not given, all characters of the
-value are printed (subject to the precision argument).
-
-The C<precision> argument specifies a nonnegative decimal integer,
-preceded by a period (.), which can be used to set the precision of the output
-value. The interpretation of this value depends on the given C<type>:
-
-=over 4
-
-=item d
-
-Specifies the minimum number of digits to be printed. If the number
-of digits in the value is less than precision, the output value is
-padded on the left with zeroes. The value is not truncated when the
-number of digits exceeds precision. Default precision is 1. If
-precision is specified as 0 and the value to be converted is 0, the
-result is an empty string.
-
-=item f
-
-Specifies the number of digits after the decimal point. If a decimal
-point appears, at least one digit appears before it. The value is
-rounded to the appropriate number of digits. Default precision is 6; if
-precision is 0 or if the period (.) appears without a number following
-it, no decimal point is printed.
-
-=item s
-
-Specifies the maximum number of characters to be printed. By
-default, all characters are printed.
-
-=back
-
-Unlike the C<width> argument, the C<precision> argument can cause either
-truncation of the output value or rounding of a floating-point value.
-
-The C<type> argument is the only required format argument; it appears after
-any optional format fields. The type character determines whether the given
-value is interpreted as integer, floating-point or string. If the value argument
-is of a different type than is specified by the type argument, it is converted
-according to WMLScript standard automatic conversion rules, with the
-addition that if value is of type floating-point and type is B<d>, Float.int() is called
-to convert the value. The supported C<type> arguments are:
-
-=over 4
-
-=item d
-
-Integer: The output value has the form [-]dddd, where dddd is one
-or more decimal digits.
-
-=item f
-
-Floating-point: The output value has the form [-]dddd.dddd, where
-dddd is one or more decimal digits. The number of digits before the
-decimal point depends on the magnitude of the number and the
-number of digits after the decimal point depends on the requested
-precision. When the number of digits after the decimal point in the value
-is less than the precision, letter 0 should be padded to fill columns
-(e.g. the result of String.format("%2.3f", 1.2) will be
-"1.200")
-
-=item s
-
-String: Characters are printed up to the end of the string or until the
-precision value is reached. When the width is larger than
-precision, the width should be ignored.
-
-=back
-
-A literal percent character (%) may be included in the format string by
-preceding it with another percent character (%%).
-
-MINIMALIST IMPLEMENTATION
-
-=head3 PARAMETERS
-
-format = String
-
-value = Any
-
-=head3 RETURN VALUE
-
-String or invalid.
-
-=head3 EXCEPTIONS
-
-Illegal format specifier results in an C<invalid> return value.
-
-=cut
-
-.sub '_string_format' :anon
-    .param pmc format
-    .param pmc value
-    .local pmc res
-    $I0 = isa format, 'WmlsInvalid'
-    if $I0 goto L1
-    $S0 = format
-    new $P0, 'Array'
-    set $P0, 1
-    $P0[0] = value
-  L2:
-    $S1 = sprintf $S0, $P0
-    new res, 'WmlsString'
-    set res, $S1
-    .return (res)
-  L1:
-    new res, 'WmlsInvalid'
-    .return (res)
-.end
-
-
-=head1 AUTHORS
-
-Francois Perrad.
-
-=cut
-
-
-# Local Variables:
-#   mode: pir
-#   fill-column: 100
-# End:
-# vim: expandtab shiftwidth=4 ft=pir:
--- origsrc/parrot-0.7.1/languages/WMLScript/src/script.pir	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/src/script.pir	2008-09-18 20:27:42.796875000 +0200
@@ -103,7 +103,7 @@
 
   $P0 = get_hll_global '@stdlibs'
   unless null $P0 goto L1
-  load_bytecode 'languages/WMLScript/src/WMLScript.pbc'
+  load_bytecode 'WMLScript.pbc'
 L1:
 PIRCODE
 
--- origsrc/parrot-0.7.1/languages/WMLScript/src/wmlsstdlibs.pir	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/src/wmlsstdlibs.pir	2008-09-18 20:27:42.812500000 +0200
@@ -28,10 +28,10 @@
 
 .sub '__onload' :load :anon
 #    print "__onload (wmlsstdlibs.pir)\n"
-    load_bytecode 'languages/WMLScript/runtime/wmlslang.pbc'
-    load_bytecode 'languages/WMLScript/runtime/wmlsfloat.pbc'
-    load_bytecode 'languages/WMLScript/runtime/wmlsstring.pbc'
-    load_bytecode 'languages/WMLScript/runtime/wmlsconsole.pbc'
+    load_bytecode 'WMLScript/wmlslang.pbc'
+    load_bytecode 'WMLScript/wmlsfloat.pbc'
+    load_bytecode 'WMLScript/wmlsstring.pbc'
+    load_bytecode 'WMLScript/wmlsconsole.pbc'
 
     new $P0, 'Hash'
     $P1 = getLang()
--- origsrc/parrot-0.7.1/languages/WMLScript/t/harness	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/t/harness	2008-09-18 20:27:42.828125000 +0200
@@ -7,7 +7,7 @@
     # Check that we have the WMLScript compiler.
     my $check = `wmlsc -h`;
     unless ($check =~ /wmlsc/) {
-        die "You need the WMLScript compiler in your path to build the test.\n";
+        die "You need the WMLScript compiler in your path to build the test. Try cpan WAP::wmls\n";
     }
 }
 
--- origsrc/parrot-0.7.1/languages/WMLScript/t/runtime.t	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/t/runtime.t	2008-09-18 20:27:42.843750000 +0200
@@ -22,7 +22,7 @@
 .HLL 'WMLScript', 'wmls_group'
 
 .sub '_init' :anon
-  load_bytecode 'languages/WMLScript/src/WMLScript.pbc'
+  load_bytecode 'WMLScript.pbc'
 .end
 
 .sub 'function0' :anon
--- origsrc/parrot-0.7.1/languages/WMLScript/wmls2pbc.pir	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/wmls2pbc.pir	2008-09-18 20:27:42.859375000 +0200
@@ -28,7 +28,7 @@
 
 .sub 'main' :main
     .param pmc argv
-    load_bytecode 'languages/WMLScript/src/WMLScript.pbc'
+    load_bytecode 'WMLScript.pbc'
     .local int argc
     .local string progname
     .local string filename
--- origsrc/parrot-0.7.1/languages/WMLScript/wmls2pir.pir	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/wmls2pir.pir	2008-09-18 20:27:42.875000000 +0200
@@ -28,7 +28,7 @@
 
 .sub 'main' :main
     .param pmc argv
-    load_bytecode 'languages/WMLScript/src/WMLScript.pbc'
+    load_bytecode 'WMLScript.pbc'
     .local int argc
     .local string progname
     .local string filename
--- origsrc/parrot-0.7.1/languages/WMLScript/wmlsd.pir	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/wmlsd.pir	2008-09-18 20:27:42.890625000 +0200
@@ -28,7 +28,7 @@
 
 .sub 'main' :main
     .param pmc argv
-    load_bytecode 'languages/WMLScript/src/WMLScript.pbc'
+    load_bytecode 'WMLScript.pbc'
     .local int argc
     .local string progname
     .local string filename
--- origsrc/parrot-0.7.1/languages/WMLScript/wmlsi.pir	2008-09-17 00:16:10.000000000 +0200
+++ src/parrot-0.7.1/languages/WMLScript/wmlsi.pir	2008-09-18 20:27:42.906250000 +0200
@@ -29,7 +29,7 @@
 
 .sub 'main' :main
     .param pmc argv
-    load_bytecode 'languages/WMLScript/src/WMLScript.pbc'
+    load_bytecode 'WMLScript.pbc'
     .local int argc
     .local string progname
     .local string filename
--- origsrc/parrot-0.7.1/languages/Zcode/config/makefiles/root.in	2008-09-17 00:15:42.000000000 +0200
+++ src/parrot-0.7.1/languages/Zcode/config/makefiles/root.in	2008-10-03 12:30:08.078125000 +0200
@@ -1,14 +1,20 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # Makefile for languages/Zcode
+HLLNAME	      = Zcode
 
 # Setup of some commands
-PARROT     = ../../parrot@exe@
-PERL       = @perl@
-RM_F       = @rm_f@
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+BUILD_DIR     = @build_dir@
+PERL          = @perl@
+RM_F          = @rm_f@
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
+RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 EXAMPLES = examples/small.z3 examples/hello.z3
 
@@ -27,9 +33,7 @@
 	@echo "                     Requires an Inform compiler!"
 	@echo ""
 	@echo "  clean:             clean up temporary files (none presently)"
-	@echo ""
 	@echo "  realclean:         clean up generated files"
-	@echo ""
 	@echo "  maintclean:        clean up Z-code files"
 	@echo ""
 	@echo "  help:              print this help message"
@@ -54,6 +58,10 @@
 .inf.z3:
 	inform $< $@
 
+# regenerate the Makefile
+Makefile: config/makefiles/root.in
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
+
 clean:
 	@echo "No temp files to clean"
 
@@ -64,3 +72,9 @@
 
 maintclean: realclean
 	$(RM_F) $(EXAMPLES) $(TEST_ZFILES)
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/abc/config/makefiles/root.in	2008-09-17 00:16:11.000000000 +0200
+++ src/parrot-0.7.1/languages/abc/config/makefiles/root.in	2008-10-03 12:30:08.109375000 +0200
@@ -1,55 +1,63 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME       = abc
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
-PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PGE_LIBRARY   = $(PARROT_LIB)/PGE
+PCT           = $(PARROT_LIB)/PCT.pbc
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
-PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
-
-PMC_DIR       = src/pmc
 
 all: abc.pbc
 
-ABC_GROUP = $(PMC_DIR)/abc_group$(LOAD_EXT)
-
 SOURCES = abc.pir \
   src/gen_grammar.pir \
   src/gen_actions.pir \
   src/gen_builtins.pir \
-#  $(ABC_GROUP)
 
 BUILTINS_PIR = \
   src/builtins/all.pir \
 
-# PMCS = abc
-# PMC_SOURCES = $(PMC_DIR)/abc.pmc
+DOCS = MAINTAINER README TODO
 
 # the default target
-abc.pbc: $(PARROT) $(SOURCES)
+abc.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o abc.pbc abc.pir
 
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg src/parser/grammar-oper.pg
 	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
 	    --output=src/gen_grammar.pir \
@@ -63,25 +71,31 @@
 src/gen_builtins.pir: $(BUILTINS_PIR)
 	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir
 
-$(ABC_GROUP): $(PARROT) $(PMC_SOURCES)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=abc
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 # This is a listing of all targets, that are meant to be called by users
 help:
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  all:               abc.pbc"
+	@echo "  build:             abc.pbc"
 	@echo "                     This is the default."
+	@echo "  all:               abc.pbc abc@exe@ installable"
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo "  testclean:         Clean up test results."
 	@echo ""
 	@echo "Cleaning:"
@@ -96,6 +110,17 @@
 test: all
 	prove -r t
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	echo "2-1" | ./installable_$(HLLNAME)@exe@
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	-$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
 testclean:
 	$(RM_RF) "t/*.pir" "t/*.out"
 
@@ -104,17 +129,9 @@
   src/gen_grammar.pir \
   src/gen_actions.pir \
   src/gen_builtins.pir \
-  $(PMC_DIR)/*.h \
-  $(PMC_DIR)/*.c \
-  $(PMC_DIR)/*.dump \
-  $(PMC_DIR)/*$(O) \
-  $(PMC_DIR)/*$(LOAD_EXT) \
-  $(PMC_DIR)/*.exp \
-  $(PMC_DIR)/*.ilk \
-  $(PMC_DIR)/*.manifest \
-  $(PMC_DIR)/*.pdb \
-  $(PMC_DIR)/*.lib \
-
+  $(PARROT_LIB)/$(HLLNAME).pbc \
+  $(HLLNAME)@exe@ \
+  installable_$(HLLNAME)@exe@
 
 clean: testclean
 	$(RM_RF) $(CLEANUPS)
@@ -123,3 +140,9 @@
 	$(RM_RF) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/befunge/config/makefiles/root.in	2008-09-17 00:16:27.000000000 +0200
+++ src/parrot-0.7.1/languages/befunge/config/makefiles/root.in	2008-10-03 12:30:08.140625000 +0200
@@ -1,48 +1,102 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # Makefile for languages/befunge
+HLLNAME       = befunge
+
+## configuration settings
+BUILD_DIR     = @build_dir@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 # Setup of some commands
-PARROT     = ../../parrot
-PERL       = @perl@
-RM_F       = @rm_f@
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+PERL          = @perl@
+RM_F          = @rm_f@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN	      = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
+RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+
+DOCS = MAINTAINER README Changes
 
-default: all
+build: befunge.pbc
 
 help :
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  build:             Create befunge.pbc"
+	@echo "  all:               befunge.pbc"
 	@echo "                     This is the default."
+	@echo "  install:           Install the installable targets and docs."
 	@echo ""
-	@echo "  test:              run the test suite,"
+	@echo "Testing:"
+	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo ""
-	@echo "  clean:             clean up temporary files"
+	@echo "Cleaning:"
+	@echo "  clean:             Basic cleaning up."
+	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
+	@echo "  distclean:         Removes also anything built, in theory"
 	@echo ""
-	@echo "  realclean:         clean up generated files"
-	@echo ""
-	@echo "  help:              print this help message"
-
+	@echo "Misc:"
+	@echo "  help:              Print this help message"
 
-all: build
 
-build: befunge.pbc
+all: befunge.pbc Makefile befunge@exe@
 
 befunge.pbc: befunge.pasm debug.pasm flow.pasm io.pasm load.pasm maths.pasm stack.pasm
 	$(PARROT) -o befunge.pbc befunge.pasm
 
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
 test: befunge.pbc
-	cd .. && $(PERL) t/harness --languages=befunge
+	cd .. && $(PERL) t/harness --languages=$(HLLNAME)
+
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ test.bef
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+# regenerate the Makefile
+Makefile: config/makefiles/root.in
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 clean:
 	$(RM_F) core \
     "*.pbc" \
-    "*~"
+    "*~" \
+    "installable_$(HLLNAME)@exe@"
 
 realclean: clean
 	$(RM_F) Makefile
 
+distclean: clean realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/befunge/flow.pasm	2008-09-17 00:16:27.000000000 +0200
+++ src/parrot-0.7.1/languages/befunge/flow.pasm	2008-09-18 20:27:43.000000000 +0200
@@ -29,7 +29,8 @@
         branch MOVE_PC
 
 FLOW_GO_AWAY:
-        save 4
+        set I2, 4
+        save I2
         bsr MATHS_RAND
         restore I10
         set I2, I10
--- origsrc/parrot-0.7.1/languages/bf/config/makefiles/root.in	2008-09-17 00:15:36.000000000 +0200
+++ src/parrot-0.7.1/languages/bf/config/makefiles/root.in	2008-10-03 12:30:08.171875000 +0200
@@ -1,31 +1,84 @@
-RM_F = @rm_f@
-PERL = @perl@
-PARROT=../../parrot
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
-default: build
+HLLNAME       = bf
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR        = @mandir@
+
+RM_F          = @rm_f@
+PERL          = @perl@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+
+DOCS = MAINTAINER README
+PBCS = bf.pbc bfc.pbc bfco.pbc
+EXES = installable_bf@exe@ installable_bfc@exe@ installable_bfco@exe@
+
+all : build
 
 help :
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  build:             build bf.pbc and bfc.pir"
+	@echo "  build:             build bf.pbc, bfc.pfc and bfco.pfc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
 	@echo ""
-	@echo "  test:              run the test suite,"
+	@echo "Testing:"
+	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
+	@echo "  testclean:         Clean up test results."
 	@echo ""
-	@echo "  clean:             clean up temporary files"
+	@echo "Cleaning:"
+	@echo "  clean:             Basic cleaning up."
+	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
+	@echo "  distclean:         Removes also anything built, in theory"
 	@echo ""
-	@echo "  realclean:         clean up generated files"
+	@echo "Misc:"
+	@echo "  help:              Print this help message."
 	@echo ""
-	@echo "  help:              print this help message"
 
-test: build
+test : build
 	$(PERL) -Ilib -I../../lib t/harness
 
-build: bf.pbc bfc.pbc bfco.pbc
+build: $(PBCS)
+
+installable: $(EXES) $(PBCS)
+	$(CP) installable_bf@exe@   $(BUILD_DIR)
+	$(CP) installable_bfc@exe@  $(BUILD_DIR)
+	$(CP) installable_bfco@exe@ $(BUILD_DIR)
+	$(CP) bf.pbc   $(PARROT_LIB)/bf.pbc
+	$(CP) bfc.pbc  $(PARROT_LIB)/bfco.pbc
+	$(CP) bfco.pbc $(PARROT_LIB)/bfco.pbc
+
+bf@exe@: bf.pbc
+	$(PBC_TO_EXE) bf.pbc
+
+bfc@exe@: bfc.pbc
+	$(PBC_TO_EXE) bfc.pbc
+
+bfco@exe@: bfco.pbc
+	$(PBC_TO_EXE) bfco.pbc
+
+installable_bf@exe@: bf.pbc
+	$(PBC_TO_EXE) bf.pbc --install
+
+installable_bfc@exe@: bfc.pbc
+	$(PBC_TO_EXE) bfc.pbc --install
+
+installable_bfco@exe@: bfco.pbc
+	$(PBC_TO_EXE) bfco.pbc --install
 
 bf.pbc: bf.pasm
 	$(PARROT) -o bf.pbc bf.pasm
@@ -36,9 +89,30 @@
 bfco.pbc: bfco.pir
 	$(PARROT) -o bfco.pbc bfco.pir
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_bf@exe@   test.bf
+	./installable_bfc@exe@  test.bf
+	./installable_bfco@exe@ test.bf
+
+install : installable
+	$(CP) installable_bf@exe@   $(DESTDIR)$(BIN_DIR)/parrot-bf@exe@
+	$(CP) installable_bfc@exe@  $(DESTDIR)$(BIN_DIR)/parrot-bfc@exe@
+	$(CP) installable_bfco@exe@ $(DESTDIR)$(BIN_DIR)/parrot-bfco@exe@
+	$(CP) bf.pbc   $(DESTDIR)$(LIB_DIR)/parrot/library/bf.pbc
+	$(CP) bfc.pbc  $(DESTDIR)$(LIB_DIR)/parrot/library/bfc.pbc
+	$(CP) bfco.pbc $(DESTDIR)$(LIB_DIR)/parrot/library/bfco.pbc
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
 clean:
-	$(RM_F) core "*.pbc" "*~"
+	$(RM_F) core "*.pbc" "*~" "installable_bf*@exe@" "$(PARROT_LIB)/bf*.pbc"
 
 realclean: clean
 	$(RM_F) Makefile
 
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/c99/config/makefiles/cpp.in	2008-09-17 00:16:16.000000000 +0200
+++ src/parrot-0.7.1/languages/c99/config/makefiles/cpp.in	2008-10-03 12:30:08.203125000 +0200
@@ -1,25 +1,35 @@
-## $Id: cpp.in 26906 2008-04-10 19:45:40Z bernhard $
+## $Id: cpp.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME       = cpp
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
-LN_S          = @lns@
 PERL          = @perl@
-RM_RF         = @rm_rf@
+RM_F          = @rm_f@
 CP            = @cp@
-PARROT        = ../../../../parrot@exe@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = $(BUILD_DIR)/parrot@exe@
+PBC_TO_EXE    = $(BUILD_DIR)/pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
 
 ## places to look for things
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
 PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
@@ -27,26 +37,28 @@
 
 PMC_DIR       = src/pmc
 
-all: cpp.pbc
+build: cpp.pbc
 
-C_GROUP = $(PMC_DIR)/c_group$(LOAD_EXT)
+all: cpp.pbc cpp@exe@ src/cpp/Makefile installable
 
 SOURCES = cpp.pir \
   src/gen_grammar.pir \
   src/gen_actions.pir \
-  src/gen_builtins.pir \
-#  $(C_GROUP)
+  src/gen_builtins.pir
 
 BUILTINS_PIR = \
   src/builtins/say.pir \
 
-# PMCS = c
-# PMC_SOURCES = $(PMC_DIR)/c.pmc
-
 # the default target
-cpp.pbc: $(PARROT) $(SOURCES)
+cpp.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o cpp.pbc cpp.pir
 
+cpp@exe@ : cpp.pbc
+	$(PBC_TO_EXE) cpp.pbc
+
+installable_cpp@exe@ : cpp.pbc
+	$(PBC_TO_EXE) cpp.pbc --install
+
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg
 	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
 	    --output=src/gen_grammar.pir \
@@ -59,22 +71,20 @@
 src/gen_builtins.pir: $(BUILTINS_PIR)
 	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir
 
-$(C_GROUP): $(PARROT) $(PMC_SOURCES)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
-
 # regenerate the Makefile
 Makefile: ../../config/makefiles/cpp.in
 	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=c99
 
+installable : installable_cpp@exe@ cpp.pbc
+	$(CP) installable_cpp@exe@ $(BUILD_DIR)
+	$(CP) cpp.pbc $(PARROT_LIB)/cpp.pbc
+
 # This is a listing of all targets, that are meant to be called by users
 help:
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  all:               c.pbc"
+	@echo "  build:             cpp.pbc"
 	@echo "                     This is the default."
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
@@ -89,7 +99,7 @@
 	@echo "  help:              Print this help message."
 	@echo ""
 
-test: all
+test: build
 	$(PERL) t/harness
 
 # this target has nothing to do
@@ -99,18 +109,7 @@
   cpp.pbc \
   src/gen_grammar.pir \
   src/gen_actions.pir \
-  src/gen_builtins.pir \
-  $(PMC_DIR)/*.h \
-  $(PMC_DIR)/*.c \
-  $(PMC_DIR)/*.dump \
-  $(PMC_DIR)/*$(O) \
-  $(PMC_DIR)/*$(LOAD_EXT) \
-  $(PMC_DIR)/*.exp \
-  $(PMC_DIR)/*.ilk \
-  $(PMC_DIR)/*.manifest \
-  $(PMC_DIR)/*.pdb \
-  $(PMC_DIR)/*.lib \
-
+  src/gen_builtins.pir
 
 clean:
 	$(RM_RF) $(CLEANUPS)
@@ -120,4 +119,8 @@
 
 distclean: realclean
 
-
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/c99/config/makefiles/root.in	2008-09-17 00:16:16.000000000 +0200
+++ src/parrot-0.7.1/languages/c99/config/makefiles/root.in	2008-10-03 12:30:08.218750000 +0200
@@ -1,55 +1,78 @@
-## $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+## $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME	      = c99
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+POD2MAN       = pod2man
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
-PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PGE_LIBRARY   = $(PARROT_LIB)/PGE
+PCT           = $(PARROT_LIB)/PCT.pbc
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
-PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
 
 PMC_DIR       = src/pmc
+DOCS = MAINTAINER
+
+build: c99.pbc src/cpp/cpp.pbc
 
-all: c99.pbc
+all: build Makefile installable
 
 C_GROUP = $(PMC_DIR)/c_group$(LOAD_EXT)
 
 SOURCES = c99.pir \
   src/gen_grammar.pir \
   src/gen_actions.pir \
-  src/gen_builtins.pir \
-#  $(C_GROUP)
+  src/gen_builtins.pir
 
 BUILTINS_PIR = \
   src/builtins/say.pir \
 
-# PMCS = c
-# PMC_SOURCES = $(PMC_DIR)/c.pmc
-
 # the default target
-c99.pbc: $(PARROT) $(SOURCES)
+c99.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o c99.pbc c99.pir
-	cd src/cpp; $(MAKE)
+	cd src/cpp && $(MAKE)
+
+c99@exe@: c99.pbc
+	$(PBC_TO_EXE) c99.pbc
+
+installable_c99@exe@ : c99.pbc
+	$(PBC_TO_EXE) c99.pbc --install
+
+src/cpp/cpp.pbc: src/cpp/cpp.pir
+	cd src/cpp && $(MAKE) installable_cpp@exe@
+
+installable_cpp@exe@ : src/cpp/cpp.pbc
+	$(CP) src/cpp/installable_cpp@exe@ installable_cpp@exe@
 
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg
 	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
@@ -63,15 +86,9 @@
 src/gen_builtins.pir: $(BUILTINS_PIR)
 	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir
 
-$(C_GROUP): $(PARROT) $(PMC_SOURCES)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
-
 # regenerate the Makefile
-Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=c
+Makefile: config/makefiles/root.in config/makefiles/cpp.in
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=c99
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -80,6 +97,9 @@
 	@echo ""
 	@echo "  all:               c.pbc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
 	@echo "  testclean:         Clean up test results."
@@ -96,6 +116,27 @@
 test: all
 	$(PERL) t/harness
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ t/spi.t
+	./installable_cpp@exe@ t/spi.t
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) installable_cpp@exe@ $(DESTDIR)$(BIN_DIR)/parrot-cpp@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(CP) src/cpp/cpp.pbc $(DESTDIR)$(LIB_DIR)/parrot/library/cpp.pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(POD2MAN) src/cpp/cpp.pir > $(DESTDIR)$(MANDIR)/man1/parrot-cpp.1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+installable : installable_c99@exe@ installable_cpp@exe@ $(HLLNAME).pbc src/cpp/cpp.pbc
+	$(CP) installable_c99@exe@ $(BUILD_DIR)
+	$(CP) installable_cpp@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+	$(CP) src/cpp/cpp.pbc $(PARROT_LIB)/cpp.pbc
+
 # this target has nothing to do
 testclean:
 
@@ -104,21 +145,11 @@
   src/gen_grammar.pir \
   src/gen_actions.pir \
   src/gen_builtins.pir \
-  $(PMC_DIR)/*.h \
-  $(PMC_DIR)/*.c \
-  $(PMC_DIR)/*.dump \
-  $(PMC_DIR)/*$(O) \
-  $(PMC_DIR)/*$(LOAD_EXT) \
-  $(PMC_DIR)/*.exp \
-  $(PMC_DIR)/*.ilk \
-  $(PMC_DIR)/*.manifest \
-  $(PMC_DIR)/*.pdb \
-  $(PMC_DIR)/*.lib \
   src/cpp/cpp.pbc \
   src/cpp/src/gen_actions.pir \
   src/cpp/src/gen_grammar.pir \
-  src/cpp/src/gen_builtins.pir
-
+  src/cpp/src/gen_builtins.pir \
+  installable_*@exe@
 
 clean:
 	$(RM_RF) $(CLEANUPS)
@@ -128,4 +159,8 @@
 
 distclean: realclean
 
-
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/cardinal/config/makefiles/root.in	2008-09-17 00:15:49.000000000 +0200
+++ src/parrot-0.7.1/languages/cardinal/config/makefiles/root.in	2008-10-03 12:30:08.234375000 +0200
@@ -1,70 +1,77 @@
-## $Id: root.in 30742 2008-09-03 21:59:21Z tene $
+## $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME       = cardinal
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
-PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PGE_LIBRARY   = $(PARROT_LIB)/PGE
+PCT           = $(PARROT_LIB)/PCT.pbc
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
-PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
 
 PMC_DIR       = src/pmc
 
-all: cardinal.pbc test.pir
-
-CARDINAL_GROUP = $(PMC_DIR)/cardinal_group$(LOAD_EXT)
+all: cardinal.pbc
 
 SOURCES = cardinal.pir \
-  src/parser/quote_expression.pir \
   src/gen_grammar.pir \
   src/gen_actions.pir \
-  src/gen_builtins.pir \
-#  $(CARDINAL_GROUP)
+  src/gen_builtins.pir
 
 BUILTINS_PIR = \
   src/builtins/guts.pir \
   src/builtins/say.pir \
   src/builtins/cmp.pir \
-  src/builtins/op.pir \
   src/classes/Object.pir \
   src/classes/NilClass.pir \
   src/classes/String.pir \
   src/classes/Integer.pir \
   src/classes/Array.pir \
   src/classes/Hash.pir \
-  src/classes/Bool.pir \
   src/builtins/globals.pir \
-  src/builtins/eval.pir \
+  src/builtins/eval.pir
 
-# PMCS = cardinal
-# PMC_SOURCES = $(PMC_DIR)/cardinal.pmc
+DOCS = README
 
 # the default target
-cardinal.pbc: $(PARROT) $(SOURCES)
+cardinal.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o cardinal.pbc cardinal.pir
 
-test.pir: $(PARROT) test.rb cardinal.pbc
-	$(PARROT) $(PARROT_ARGS) cardinal.pbc --target=pir --output=test.pir test.rb
+cardinal@exe@: cardinal.pbc
+	$(PBC_TO_EXE) cardinal.pbc
+
+installable_cardinal@exe@: cardinal.pbc
+	$(PBC_TO_EXE) cardinal.pbc --install
 
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg
 	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
@@ -78,15 +85,9 @@
 src/gen_builtins.pir: $(BUILTINS_PIR)
 	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir
 
-$(CARDINAL_GROUP): $(PARROT) $(PMC_SOURCES)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
-
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=cardinal
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -95,8 +96,12 @@
 	@echo ""
 	@echo "  all:               cardinal.pbc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo "  testclean:         Clean up test results."
 	@echo ""
 	@echo "Cleaning:"
@@ -111,31 +116,33 @@
 test: all
 	$(PERL) t/harness
 
-arraytest: all
-	$(PERL) t/harness --tests-from-dir=array
-
-hashtest: all
-	$(PERL) t/harness --tests-from-dir=hash
-
 # this target has nothing to do
 testclean:
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ t/00-sanity.t
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
 CLEANUPS = \
   cardinal.pbc \
+  cardinal@exe@ \
+  installable_cardinal@exe@ \
+  $(PARROT_LIB)/$(HLLNAME).pbc \
+  $(BUILD_DIR)/installable_cardinal@exe@ \
   src/gen_grammar.pir \
   src/gen_actions.pir \
-  src/gen_builtins.pir \
-  $(PMC_DIR)/*.h \
-  $(PMC_DIR)/*.c \
-  $(PMC_DIR)/*.dump \
-  $(PMC_DIR)/*$(O) \
-  $(PMC_DIR)/*$(LOAD_EXT) \
-  $(PMC_DIR)/*.exp \
-  $(PMC_DIR)/*.ilk \
-  $(PMC_DIR)/*.manifest \
-  $(PMC_DIR)/*.pdb \
-  $(PMC_DIR)/*.lib \
-
+  src/gen_builtins.pir
 
 clean:
 	$(RM_RF) $(CLEANUPS)
@@ -145,4 +152,8 @@
 
 distclean: realclean
 
-
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/chitchat/config/makefiles/root.in	2008-09-17 00:15:37.000000000 +0200
+++ src/parrot-0.7.1/languages/chitchat/config/makefiles/root.in	2008-10-03 12:30:08.250000000 +0200
@@ -1,53 +1,60 @@
-## $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+## $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME       = chitchat
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
-PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PGE_LIBRARY   = $(PARROT_LIB)/PGE
+PCT           = $(PARROT_LIB)/PCT.pbc
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
-PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
 
-PMC_DIR       = src/pmc
+DOCS = MAINTAINER
 
-all: chitchat.pbc
+build: chitchat.pbc
 
-CHITCHAT_GROUP = $(PMC_DIR)/chitchat_group$(LOAD_EXT)
+all: chitchat.pbc chitchat@exe@ Makefile installable
 
 SOURCES = chitchat.pir \
   src/gen_grammar.pir \
   src/gen_actions.pir \
   src/gen_builtins.pir \
-#  $(CHITCHAT_GROUP)
 
 BUILTINS_PIR = \
   src/builtins/say.pir \
 
-# PMCS = chitchat
-# PMC_SOURCES = $(PMC_DIR)/chitchat.pmc
-
 # the default target
-chitchat.pbc: $(PARROT) $(SOURCES)
+chitchat.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o chitchat.pbc chitchat.pir
 
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg
@@ -62,15 +69,9 @@
 src/gen_builtins.pir: $(BUILTINS_PIR)
 	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir
 
-$(CHITCHAT_GROUP): $(PARROT) $(PMC_SOURCES)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
-
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=chitchat
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -79,8 +80,12 @@
 	@echo ""
 	@echo "  all:               chitchat.pbc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo "  testclean:         Clean up test results."
 	@echo ""
 	@echo "Cleaning:"
@@ -95,6 +100,27 @@
 test: all
 	$(PERL) t/harness
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	echo "2-1" | ./installable_$(HLLNAME)@exe@
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
 # this target has nothing to do
 testclean:
 
@@ -103,17 +129,9 @@
   src/gen_grammar.pir \
   src/gen_actions.pir \
   src/gen_builtins.pir \
-  $(PMC_DIR)/*.h \
-  $(PMC_DIR)/*.c \
-  $(PMC_DIR)/*.dump \
-  $(PMC_DIR)/*$(O) \
-  $(PMC_DIR)/*$(LOAD_EXT) \
-  $(PMC_DIR)/*.exp \
-  $(PMC_DIR)/*.ilk \
-  $(PMC_DIR)/*.manifest \
-  $(PMC_DIR)/*.pdb \
-  $(PMC_DIR)/*.lib \
-
+  $(PARROT_LIB)/$(HLLNAME).pbc \
+  $(HLLNAME)@exe@ \
+  installable_$(HLLNAME)@exe@ \
 
 clean:
 	$(RM_RF) $(CLEANUPS)
@@ -123,4 +141,8 @@
 
 distclean: realclean
 
-
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/cola/config/makefiles/root.in	2008-09-17 00:16:28.000000000 +0200
+++ src/parrot-0.7.1/languages/cola/config/makefiles/root.in	2008-10-03 12:30:08.265625000 +0200
@@ -1,26 +1,32 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # Makefile for languages/cola
 
+## configuration settings
+HLLNAME       = cola
+BUILD_DIR     = @build_dir@
+O             = @o@
+EXE           = @exe@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+
 # Set up commands
 PERL          = @perl@
 RM_F          = @rm_f@
 CHMOD         = @chmod@
+CP            = @cp@
+MKPATH        = @mkpath@
 CC            = @cc@
 DEBUG         = @cc_debug@
 YACC          = @yacc@
 LEX           = @lex@
 RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
-
-# Set up extensions
-O             = @o@
-EXE           = @exe@
-
-# Set up directories
-BUILD_DIR     = @build_dir@
+POD2MAN	      = pod2man
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 # Libraries:  Ordinarily, no special libraries are needed
 # for cola, but one of the following settings might be helpful
@@ -44,8 +50,9 @@
 # LIBS = -lefence
 
 HEADERS = cola.h parser.h
+DOCS = MAINTAINER README examples/*
 
-default :
+all : colacc$(EXE)
 	$(MAKE) colacc$(EXE)
 	-$(CHMOD) 775 colacc$(EXE)
 
@@ -53,22 +60,27 @@
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  default  :         build 'colacc'"
+	@echo "  all  :             build 'colacc'"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
 	@echo ""
-	@echo "  test:              run the test suite"
-	@echo ""
-	@echo "  clean:             clean up temporary files"
+	@echo "Testing:"
+	@echo "  test:              Run the test suite"
+	@echo "  test-installable:  Test self-hosting targets."
+	@echo ""
+	@echo "Cleaning:"
+	@echo "  clean:             Clean up temporary files"
+	@echo "  realclean:         Clean up generated files"
+	@echo "  superclean:        Clean up generated files, also the flex/bison files"
 	@echo ""
-	@echo "  realclean:         clean up generated files"
+	@echo "Misc:"
+	@echo "  help:              Print this help message"
 	@echo ""
-	@echo "  superclean:       clean up generated files, also the flex/bison files"
-	@echo ""
-	@echo "  help:              print this help message"
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=cola
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 nogen : gen$(O) semant$(O) sym$(O) type$(O)
 	$(CC) $(DEBUG) -c parser.c
@@ -93,11 +105,11 @@
 	$(RM_F) parser.h
 	$(RM_F) lexer.c parser.c
 
-publish :
-	$(PERL) publish.pl < MANIFEST
-
-dist :
-	$(PERL) distribution.pl < MANIFEST
+#publish :
+#	$(PERL) publish.pl < MANIFEST
+#
+#dist :
+#	$(PERL) distribution.pl < MANIFEST
 
 parser.c : cola.y
 	$(YACC) -d -o parser.c cola.y
@@ -127,5 +139,23 @@
 	$(CC) $(DEBUG) -o colacc$(EXE) parser$(O) lexer$(O) gen$(O) semant$(O) sym$(O) type$(O) $(LIBS)
 
 test: default
-	cd .. && $(PERL) t/harness --languages=cola
+	cd .. && $(PERL) t/harness --languages=$(HLLNAME)
+
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./colacc$(EXE) examples/fib.cola
+
+install : installable
+	$(CP) colacc$(EXE) $(DESTDIR)$(BIN_DIR)/parrot-colacc$(EXE)
+	ascii2man README > $(DESTDIR)$(MANDIR)/man1/parrot-colacc.1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
 
+installable : colacc$(EXE)
+	$(CP) colacc$(EXE) $(BUILD_DIR)/installable_colacc$(EXE)
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/eclectus/config/makefiles/root.in	2008-09-17 00:16:19.000000000 +0200
+++ src/parrot-0.7.1/languages/eclectus/config/makefiles/root.in	2008-10-03 12:30:08.296875000 +0200
@@ -1,25 +1,38 @@
 # Copyright (C) 2007-2008, The Perl Foundation.
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # Makefile for languages/eclectus
 
 # configuration settings
-BUILD_DIR       = @build_dir@
-LOAD_EXT        = @load_ext@
-O               = @o@
+HLLNAME       = eclectus
+BUILD_DIR     = @build_dir@
+LOAD_EXT      = @load_ext@
+O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 # Set up commands
-PARROT          = ../../parrot@exe@
-PERL            = @perl@
-RM_F            = @rm_f@
-RECONFIGURE     = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-BUILD_DYNPMC    = $(PERL) @build_dir@/tools/build/dynpmc.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
+PERL          = @perl@
+RM_F          = @rm_f@
+RENAME        = @mv@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
+BUILD_DYNPMC  = $(PERL) @build_dir@/tools/build/dynpmc.pl
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 # Set up directories
 PARROT_DYNEXT   = @build_dir@/runtime/parrot/dynext
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
 PMC_DIR         = src/pmc
 
 ECLECTUS_GROUP  = $(PMC_DIR)/eclectus_group@load_ext@
@@ -39,45 +52,79 @@
     $(PMC_DIR)/eclectuspair.pmc \
     $(PMC_DIR)/eclectusstring.pmc \
     $(PMC_DIR)/eclectusvector.pmc
-
+DOCS = MAINTAINER README docs/eclectus.pod
 
 # The default target
 default: build
 
+all: build Makefile $(HLLNAME)@exe@ installable
+
 help :
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  build:             Builds the dynamic PMCSs needed by Eclectus."
+	@echo "  all:               Builds the dynamic PMCSs needed by Eclectus."
 	@echo "                     This is the default target."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
 	@echo ""
+	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
+	@echo "  testclean:         Clean up test results."
 	@echo ""
+	@echo "Cleaning:"
 	@echo "  clean:             Clean up temporary files."
-	@echo ""
 	@echo "  realclean:         Clean up generated files."
+	@echo "  distclean:         Removes also anything built, in theory"
 	@echo ""
+	@echo "Misc:"
 	@echo "  help:              Print this help message."
+	@echo ""
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=eclectus
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 # Compilation:
-build: $(ECLECTUS_GROUP) driver_nqp.pbc
+build: $(ECLECTUS_GROUP) $(HLLNAME).pbc
 
-$(ECLECTUS_GROUP): $(PARROT) $(PMC_SOURCES)
+$(ECLECTUS_GROUP): $(PMC_SOURCES)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
 
-driver_nqp.pbc: src/builtins/all.pbc driver_nqp.pir
-	$(PARROT) -o driver_nqp.pbc driver_nqp.pir
+# TODO: merge those two and fix driver_nqp.pir
+$(HLLNAME).pbc: src/builtins/all.pbc driver_nqp.pir
+	$(PARROT) -o $(HLLNAME).pbc driver_nqp.pir
 
 src/builtins/all.pbc: src/builtins/all.pir
 	$(PARROT) -o src/builtins/all.pbc src/builtins/all.pir
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ tests-driver.scm
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy "--destination=$(DESTDIR)$(LIB_DIR)/parrot/dynext" $(PMCS)
+	$(POD2MAN) docs/$(HLLNAME).pod > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable : installable_$(HLLNAME)@exe@ $(ECLECTUS_GROUP) $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
+
 # cleaning up
 
 clean: dynext-clean test-clean
@@ -97,8 +144,11 @@
   $(PMC_DIR)/*.ilk \
   $(PMC_DIR)/*.manifest \
   $(PMC_DIR)/*.pdb \
-  $(PMC_DIR)/*.lib
-
+  $(PMC_DIR)/*.lib \
+  installable_$(HLLNAME)@exe@ \
+  $(HLLNAME)@exe@ \
+  $(HLLNAME).pbc \
+  $(PARROT_LIB)/$(HLLNAME).pbc
 
 realclean: clean
 	$(RM_F) Makefile
@@ -110,3 +160,11 @@
 test-clean:
 	$(RM_F) t/*.nqp
 	$(RM_F) t/*.pir
+
+distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/eclectus/driver_nqp.pir	2008-09-17 00:16:21.000000000 +0200
+++ src/parrot-0.7.1/languages/eclectus/driver_nqp.pir	2008-09-18 20:27:43.734375000 +0200
@@ -39,7 +39,7 @@
     # say cmd
     ret = spawnw cmd
 
-    # load the generated PIR
+    # load the generated PIR. TODO: make that installable
     $S1 = concat "languages/eclectus/", pir_fn
     load_bytecode $S1
 
--- origsrc/parrot-0.7.1/languages/ecmascript/config/makefiles/root.in	2008-09-17 00:15:41.000000000 +0200
+++ src/parrot-0.7.1/languages/ecmascript/config/makefiles/root.in	2008-10-03 15:38:08.812500000 +0200
@@ -1,12 +1,17 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME       = ecmascript
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 # Setup some commands
 LN_S          = @lns@
@@ -14,33 +19,41 @@
 RM_F          = @rm_f@
 RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
-PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PGE_LIBRARY   = $(PARROT_LIB)/PGE
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
-PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
-PBC_TO_EXE    = $(BUILD_DIR)/pbc_to_exe@exe@
+PCT           = $(PARROT_LIB)/PCT.pbc
 
 PMCDIR   = src/pmc
 
 
 # the default target
-all: js.pbc #$(PMCDIR)/js_group$(LOAD_EXT)
+build: $(HLLNAME).pbc
+
+all: js.pbc $(HLLNAME)@exe@ Makefile installable
 
+DOCS = MAINTAINER
 SOURCES = \
   js.pir \
   src/gen_grammar.pir \
   src/gen_actions.pir \
-  src/builtin/builtins.pir \
+  src/builtin/builtins.pir
 
 #PMCS = \
 #  jsobject \
@@ -85,7 +98,7 @@
 	$(PBC_TO_EXE) js.pbc
 
 # the default target
-js.pbc: $(PARROT) $(SOURCES)
+js.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o js.pbc js.pir
 
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg 
@@ -104,7 +117,7 @@
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=ecmascript
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -113,8 +126,12 @@
 	@echo ""
 	@echo "  all:               js.pbc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo "  testclean:         Clean up test results."
 	@echo ""
 	@echo "Cleaning:"
@@ -129,12 +146,42 @@
 test: all
 	$(PERL) t/harness t
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	echo "2-1" | ./installable_$(HLLNAME)@exe@
+
+install : installable $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+$(HLLNAME).pbc : js.pbc
+	$(CP) js.pbc $(HLLNAME).pbc
+
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+$(PARROT_LIB)/$(HLLNAME).pbc: $(HLLNAME).pbc
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
 testclean:
 	$(RM_F) "t/*.js" "t/*.out"
 
 CLEANUPS = \
-  js.pbc \
   js@exe@ \
+  js.pbc \
+  installable_$(HLLNAME)@exe@ \
+  $(HLLNAME).pbc \
+  $(HLLNAME)@exe@ \
+  $(PARROT_LIB)/$(HLLNAME).pbc \
   js.c \
   src/gen_grammar.pir \
   src/gen_actions.pir \
@@ -159,3 +206,9 @@
 	$(RM_RF) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/forth/config/makefiles/root.in	2008-09-17 00:15:33.000000000 +0200
+++ src/parrot-0.7.1/languages/forth/config/makefiles/root.in	2008-10-03 12:30:08.328125000 +0200
@@ -1,38 +1,45 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
-PARROT = ../../parrot@exe@
-PERL   = @perl@
-RM_RF  = @rm_rf@
+HLLNAME       = forth
+PERL          = @perl@
+RM_RF         = @rm_rf@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN	      = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
+PBC_MERGE     = ../../pbc_merge@exe@
 RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 BUILD_DIR     = @build_dir@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+
+PBCS = tokenstream.pbc \
+       variablestack.pbc \
+       virtualstack.pbc
+DEPENDENCIES = forth.pbc $(PBCS)
+DOCS = MAINTAINER
 
-DEPENDENCIES = \
-    forth.pbc \
-    tokenstream.pbc \
-    variablestack.pbc \
-    virtualstack.pbc
+build: $(DEPENDENCIES)
 
-
-all: $(DEPENDENCIES)
+all: $(DEPENDENCIES) Makefile forth@exe@ installable
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=forth
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 prompt: all
 	$(PARROT) forth.pbc
 
-clean:
-	$(RM_RF) $(DEPENDENCIES)
-
-realclean: clean
-	$(RM_RF) Makefile
-
-
 forth.pbc: forth.pir words.pir
 	$(PARROT) -o forth.pbc forth.pir
 
@@ -47,3 +54,76 @@
 
 test: all
 	$(PERL) t/harness
+
+# This is a listing of all targets, that are meant to be called by users
+help:
+	@echo ""
+	@echo "Following targets are available for the user:"
+	@echo ""
+	@echo "  all:               force.pbc"
+	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
+	@echo "Testing:"
+	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
+	@echo "  testclean:         Clean up test results."
+	@echo ""
+	@echo "Cleaning:"
+	@echo "  clean:             Basic cleaning up."
+	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
+	@echo "  distclean:         Removes also anything built, in theory"
+	@echo ""
+	@echo "Misc:"
+	@echo "  help:              Print this help message."
+	@echo ""
+
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	echo "2-1" | ./installable_$(HLLNAME)@exe@
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc    $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	-$(MKPATH) $(DESTDIR)$(LIB_DIR)/parrot/library/forth
+	$(CP) tokenstream.pbc   $(DESTDIR)$(LIB_DIR)/parrot/library/forth/tokenstream.pbc
+	$(CP) variablestack.pbc $(DESTDIR)$(LIB_DIR)/parrot/library/forth/variablestack.pbc
+	$(CP) virtualstack.pbc  $(DESTDIR)$(LIB_DIR)/parrot/library/forth/virtualstack.pbc
+	-$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc    $(PARROT_LIB)/$(HLLNAME).pbc
+	-$(MKPATH) $(PARROT_LIB)/forth
+	$(CP) tokenstream.pbc   $(PARROT_LIB)/forth/tokenstream.pbc
+	$(CP) variablestack.pbc $(PARROT_LIB)/forth/variablestack.pbc
+	$(CP) virtualstack.pbc  $(PARROT_LIB)/forth/virtualstack.pbc
+
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
+testclean:
+
+CLEANUPS = \
+  installable_$(HLLNAME)@exe@ \
+  *.pbc \
+  $(HLLNAME)@exe@ \
+
+clean:
+	$(RM_RF) $(CLEANUPS)
+
+realclean: clean
+	$(RM_RF) Makefile
+
+distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/forth/forth.pir	2008-09-17 00:15:33.000000000 +0200
+++ src/parrot-0.7.1/languages/forth/forth.pir	2008-09-18 20:27:44.687500000 +0200
@@ -5,10 +5,27 @@
 .include 'languages/forth/words.pir'
 
 .sub ' init' :load
+
+    # determine location of libs from the Parrot config
+    load_bytecode 'config.pir'
+    .local pmc cfg
+    cfg  = _config()
+    .local int installed
+    .local string lib_dir, pbc_fn
+    lib_dir = 'forth/'
+    installed = cfg['installed']
+    if installed goto inst
+
+    lib_dir = cfg['build_dir']
+    lib_dir .= '/languages/forth/'
+inst:
     # load the libraries we depend on
-    load_bytecode 'languages/forth/tokenstream.pbc'
-    load_bytecode 'languages/forth/variablestack.pbc'
-    load_bytecode 'languages/forth/virtualstack.pbc'
+    pbc_fn = concat lib_dir, 'tokenstream.pbc'
+    load_bytecode pbc_fn
+    pbc_fn = concat lib_dir, 'variablestack.pbc'
+    load_bytecode pbc_fn
+    pbc_fn = concat lib_dir, 'virtualstack.pbc'
+    load_bytecode pbc_fn
 
     # initialize the rstack
     .local pmc stack
--- origsrc/parrot-0.7.1/languages/forth/test.pir	2008-09-17 00:15:33.000000000 +0200
+++ src/parrot-0.7.1/languages/forth/test.pir	2008-09-18 20:27:44.734375000 +0200
@@ -10,11 +10,23 @@
 
 .sub main :main
     .param pmc args
-    .local int argc
+    .local int argc, installed
+    .local string lib_dir, pbc_fn
     $P0  = shift args
     argc = elements args
 
-    load_bytecode 'languages/forth/forth.pir'
+    # determine location of libs from the Parrot config
+    .local pmc cfg
+    cfg  = _config()
+    lib_dir = 'forth/'
+    installed = cfg['installed']
+    if installed goto inst
+
+    lib_dir = cfg['build_dir']
+    lib_dir .= 'languages/forth/'
+inst:
+    pbc_fn = concat lib_dir, 'forth'
+    load_bytecode pbc_fn
 
     .local pmc iter
     iter = new .Iterator, args
--- origsrc/parrot-0.7.1/languages/hq9plus/config/makefiles/root.in	2008-09-17 00:15:45.000000000 +0200
+++ src/parrot-0.7.1/languages/hq9plus/config/makefiles/root.in	2008-10-03 12:30:08.343750000 +0200
@@ -1,28 +1,42 @@
-## $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+## $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME       = hq9plus
 BUILD_DIR     = @build_dir@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
 PERL          = @perl@
 RM_RF         = @rm_rf@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
-PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PGE_LIBRARY   = $(PARROT_LIB)/PGE
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
-PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
+PCT           = $(PARROT_LIB)/PCT.pbc
+
+build: hq9plus.pbc
 
-all: hq9plus.pbc
+all: hq9plus.pbc Makefile hq9plus@exe@ installable
 
 SOURCES = hq9plus.pir \
   src/gen_grammar.pir \
@@ -35,8 +49,10 @@
   src/builtins/nintynine_bottles_of_beer.pir \
   src/builtins/plus.pir \
 
+DOCS = MAINTAINER README
+
 # the default target
-hq9plus.pbc: $(PARROT) $(SOURCES)
+hq9plus.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o hq9plus.pbc hq9plus.pir
 
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg
@@ -53,7 +69,7 @@
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=hq9plus
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -62,8 +78,12 @@
 	@echo ""
 	@echo "  all:               hq9plus.pbc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo "  testclean:         Clean up test results."
 	@echo ""
 	@echo "Cleaning:"
@@ -78,6 +98,27 @@
 test: all
 	$(PERL) t/harness
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
 # this target has nothing to do
 testclean:
 
@@ -96,4 +137,10 @@
 realclean: clean
 	$(RM_RF) Makefile
 
-distclean: realclean
+distclean: clean realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/jako/config/makefiles/root.in	2008-09-17 00:15:34.000000000 +0200
+++ src/parrot-0.7.1/languages/jako/config/makefiles/root.in	2008-10-03 12:30:08.359375000 +0200
@@ -1,21 +1,36 @@
 #
 # Makefile.in
 #
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 #
 
+HLLNAME       = jako
+BUILD_DIR     = @build_dir@
+LOAD_EXT      = @load_ext@
+O             = @o@
+BIN_DIR       = @bin_dir@
+PERLLIB_DIR   = $(shell $(PERL) -V::sitelib:)
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+
 PERL          = @perl@
 RM_F          = @rm_f@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
 JAKOC         = $(PERL) -I lib jakoc
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 INTERP        = ../../@test_prog@
-BUILD_DIR     = @build_dir@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
 #CONDITIONED_LINE(darwin):
 #CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
 #CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
-.SUFFIXES: .jako .pir
+DOCS = README MAINTAINER
 
+.SUFFIXES: .jako .pir
 
 # default target
 all: \
@@ -41,16 +56,23 @@
 	@echo ""
 	@echo "  all  :             Compile the example scripts"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo "  over:              Clean and build again"
+	@echo ""
+	@echo "Testing:"
+	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
+	@echo "  testclean:         Clean up test results."
+	@echo ""
+	@echo "Cleaning:"
+	@echo "  clean:             Basic cleaning up."
+	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
+	@echo "  distclean:         Removes also anything built, in theory"
 	@echo ""
-	@echo "  over:              clean and build again"
+	@echo "Misc:"
+	@echo "  help:              Print this help message."
 	@echo ""
-	@echo "  test:              run the test suite"
-	@echo ""
-	@echo "  clean:             clean up temporary files"
-	@echo ""
-	@echo "  realclean:         clean up generated files"
-	@echo ""
-	@echo "  help:              print this help message"
 
 
 # regenerate the Makefile
@@ -109,7 +131,27 @@
 	$(INTERP) examples/queens.pir
 	$(INTERP) examples/sub.pir
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	echo "2-1" | ./installable_$(HLLNAME)@exe@
+
+install : installable
+	$(CP) jako $(DESTDIR)$(BIN_DIR)/parrot-jako
+	$(CP) jakoc $(DESTDIR)$(BIN_DIR)/parrot-jakoc
+	$(CP) -R lib/Jako $(DESTDIR)$(PERLLIB_DIR)
+	$(POD2MAN) docs/jako.pod > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)/examples
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) *.jako $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) examples/*.jako $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)/examples
+
+installable : jako jakoc
+
+testclean:
 
 #
-# End of file.
-#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/json/config/makefiles/root.in	2008-09-17 00:15:47.000000000 +0200
+++ src/parrot-0.7.1/languages/json/config/makefiles/root.in	2008-10-03 12:30:08.375000000 +0200
@@ -1,53 +1,63 @@
-## $Id: root.in 28940 2008-07-02 08:36:01Z bernhard $
+## $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME       = json
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+POD2MAN	      = pod2man
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
-PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PGE_LIBRARY   = $(PARROT_LIB)/PGE
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
-PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
+PCT           = $(PARROT_LIB)/PCT.pbc
 
 PMC_DIR       = src/pmc
 
-all: json.pbc
+build: json.pbc
 
-JSON_GROUP = $(PMC_DIR)/json_group$(LOAD_EXT)
+all: json.pbc Makefile json@exe@ installable
 
 SOURCES = json.pir \
   src/gen_grammar.pir \
   src/gen_actions.pir \
-  src/gen_builtins.pir \
-#  $(JSON_GROUP)
+  src/gen_builtins.pir
+
+DOCS = MAINTAINER
 
 BUILTINS_PIR = \
   src/builtins/say.pir \
 
-# PMCS = json
-# PMC_SOURCES = $(PMC_DIR)/json.pmc
-
 # the default target
-json.pbc: $(PARROT) $(SOURCES)
+json.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o json.pbc json.pir
 
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg src/parser/grammar-oper.pg
@@ -63,15 +73,9 @@
 src/gen_builtins.pir: $(BUILTINS_PIR)
 	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir
 
-$(JSON_GROUP): $(PARROT) $(PMC_SOURCES)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
-
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=json
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -80,8 +84,12 @@
 	@echo ""
 	@echo "  all:               json.pbc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo "  testclean:         Clean up test results."
 	@echo ""
 	@echo "Cleaning:"
@@ -96,6 +104,27 @@
 test: all
 	$(PERL) t/harness
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
 # this target has nothing to do
 testclean:
 
@@ -103,18 +132,7 @@
   json.pbc \
   src/gen_grammar.pir \
   src/gen_actions.pir \
-  src/gen_builtins.pir \
-  $(PMC_DIR)/*.h \
-  $(PMC_DIR)/*.c \
-  $(PMC_DIR)/*.dump \
-  $(PMC_DIR)/*$(O) \
-  $(PMC_DIR)/*$(LOAD_EXT) \
-  $(PMC_DIR)/*.exp \
-  $(PMC_DIR)/*.ilk \
-  $(PMC_DIR)/*.manifest \
-  $(PMC_DIR)/*.pdb \
-  $(PMC_DIR)/*.lib \
-
+  src/gen_builtins.pir
 
 clean: testclean
 	$(RM_RF) $(CLEANUPS)
@@ -123,3 +141,9 @@
 	$(RM_RF) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/lazy-k/config/makefiles/root.in	2008-09-17 00:16:19.000000000 +0200
+++ src/parrot-0.7.1/languages/lazy-k/config/makefiles/root.in	2008-10-03 12:30:08.390625000 +0200
@@ -1,47 +1,102 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # Makefile for languages/lazy-k
+HLLNAME       = lazy-k
 
 # Setup of some commands
-PARROT        = @build_dir@/parrot@exe@
 PERL          = @perl@
 RM_F          = @rm_f@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 # set up location
 BUILD_DIR     = @build_dir@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
 
-default: all
-all: build
+build: lazy-k.pbc
+
+all: lazy-k.pbc lazy-k@exe@ Makefile installable
+
+lazy-k.pbc : $(SOURCES)
+	$(PARROT) $(PARROT_ARGS) -o lazy-k.pbc lazy.pir
 
 help :
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  build:             Nothing to do"
+	@echo "  all:               lazy-k.pbc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
 	@echo ""
-	@echo "  test:              run the test suite,"
-	@echo ""
-	@echo "  clean:             clean up temporary files"
+	@echo "Testing:"
+	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
+	@echo "  testclean:         Clean up test results."
+	@echo ""
+	@echo "Cleaning:"
+	@echo "  clean:             Basic cleaning up."
+	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
+	@echo "  distclean:         Removes also anything built, in theory"
 	@echo ""
-	@echo "  realclean:         clean up generated files"
+	@echo "Misc:"
+	@echo "  help:              Print this help message."
 	@echo ""
-	@echo "  help:              print this help message"
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=lazy-k
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
-build:
-
-test: build
+test: all
 	cd .. && $(PERL) t/harness --languages=lazy-k
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	echo '1+2*3' |  ./installable_$(HLLNAME)@exe@ calc.lazy
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) lazy.pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
 clean:
+	$(RM_F) core \
+    "*.pbc" \
+    "*~" \
+    "installable_$(HLLNAME)@exe@"
 
 realclean: clean
 	$(RM_F) Makefile
+
+distclean: clean realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/lisp/config/makefiles/root.in	2008-09-17 00:15:46.000000000 +0200
+++ src/parrot-0.7.1/languages/lisp/config/makefiles/root.in	2008-10-03 12:30:08.406250000 +0200
@@ -1,41 +1,97 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
-# Setup some commands
-RM_F          = @rm_f@
+## arguments we want to run parrot with
+PARROT_ARGS =
+
+## configuration settings
+HLLNAME       = lisp
+BUILD_DIR     = @build_dir@
+LOAD_EXT      = @load_ext@
+O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+
+## Setup some commands
+LN_S          = @lns@
 PERL          = @perl@
+RM_RF         = @rm_rf@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
-BUILD_DIR     = @build_dir@
-RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
+CAT           = $(PERL) -MExtUtils::Command -e cat
+BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
+RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+
+DOCS = CHANGES KNOWN_BUGS LICENSE MAINTAINER README
+
+build: lisp.pbc
 
-all: build
+all: lisp.pbc lisp@exe@ Makefile installable
+
+# regenerate the Makefile
+Makefile: config/makefiles/root.in
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
+
+test: build
+	$(PERL) -Ilib -I../../lib t/harness
+
+lisp.pbc: lisp.pir
+	$(PARROT) -o lisp.pbc lisp.pir
 
 # This is a listing of all targets, that are meant to be called by users
-help :
+help:
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  all:               'lisp.pbc'"
+	@echo "  all:               lisp.pbc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
 	@echo ""
-	@echo "  help:              Print this help message."
-	@echo ""
+	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
+	@echo "  testclean:         Clean up test results."
 	@echo ""
-	@echo "  clean:             Cleaning up."
+	@echo "Cleaning:"
+	@echo "  clean:             Basic cleaning up."
+	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
+	@echo "  distclean:         Removes also anything built, in theory"
+	@echo ""
+	@echo "Misc:"
+	@echo "  help:              Print this help message."
 	@echo ""
 
-# regenerate the Makefile
-Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=lisp
-
-test: build
-	$(PERL) -Ilib -I../../lib t/harness
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
 
-build: lisp.pir
-	$(PARROT) -o lisp.pbc lisp.pir
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
 
 clean: testclean
 	$(RM_F) core "*.pbc" "*~"
@@ -45,3 +101,11 @@
 
 realclean: clean
 	$(RM_F) Makefile
+
+distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/lolcode/config/makefiles/root.in	2008-09-17 00:16:01.000000000 +0200
+++ src/parrot-0.7.1/languages/lolcode/config/makefiles/root.in	2008-10-03 12:30:08.421875000 +0200
@@ -1,46 +1,53 @@
-## $Id: root.in 29523 2008-07-16 15:41:23Z tene $
+## $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME       = lolcode
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
-PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PGE_LIBRARY   = $(PARROT_LIB)/PGE
+PCT           = $(PARROT_LIB)/PCT.pbc
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
-PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
-PBC_TO_EXE    = $(BUILD_DIR)/pbc_to_exe@exe@
 
 PMC_DIR       = src/pmc
 
-all: lolcode.pbc
-
-LOLCODE_GROUP = $(PMC_DIR)/lolcode_group$(LOAD_EXT)
+build: lolcode.pbc
 
 SOURCES = lolcode.pir \
   src/gen_grammar.pir \
   src/gen_actions.pir \
   src/gen_builtins.pir \
-  src/parser/yarn_literal.pir \
-#  $(LOLCODE_GROUP)
+  src/parser/yarn_literal.pir
 
 BUILTINS_PIR = \
   src/builtins/say.pir \
@@ -48,14 +55,13 @@
   src/builtins/math.pir \
   src/builtins/cmp.pir
 
-# PMCS = lolcode
-# PMC_SOURCES = $(PMC_DIR)/lolcode.pmc
+all: lolcode.pbc lolcode@exe@ Makefile installable
 
 lolcode@exe@: lolcode.pbc
 	$(PBC_TO_EXE) lolcode.pbc
 
 # the default target
-lolcode.pbc: $(PARROT) $(SOURCES)
+lolcode.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o lolcode.pbc lolcode.pir
 
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg
@@ -70,12 +76,6 @@
 src/gen_builtins.pir: $(BUILTINS_PIR)
 	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir
 
-$(LOLCODE_GROUP): $(PARROT) $(PMC_SOURCES)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
-
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
 	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=lolcode
@@ -87,8 +87,12 @@
 	@echo ""
 	@echo "  all:               lolcode.pbc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo "  testclean:         Clean up test results."
 	@echo ""
 	@echo "Cleaning:"
@@ -103,6 +107,22 @@
 test: all
 	$(PERL) t/harness
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ t/00-sanity.t
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
 # this target has nothing to do
 testclean:
 
@@ -112,18 +132,7 @@
   lolcode.pbc \
   src/gen_grammar.pir \
   src/gen_actions.pir \
-  src/gen_builtins.pir \
-  $(PMC_DIR)/*.h \
-  $(PMC_DIR)/*.c \
-  $(PMC_DIR)/*.dump \
-  $(PMC_DIR)/*$(O) \
-  $(PMC_DIR)/*$(LOAD_EXT) \
-  $(PMC_DIR)/*.exp \
-  $(PMC_DIR)/*.ilk \
-  $(PMC_DIR)/*.manifest \
-  $(PMC_DIR)/*.pdb \
-  $(PMC_DIR)/*.lib \
-
+  src/gen_builtins.pir
 
 clean:
 	$(RM_RF) $(CLEANUPS)
@@ -131,6 +140,10 @@
 realclean: clean
 	$(RM_RF) Makefile
 
-distclean: realclean
-
+distclean: clean realclean
 
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/lua/config/makefiles/root.in	2008-09-17 00:15:57.000000000 +0200
+++ src/parrot-0.7.1/languages/lua/config/makefiles/root.in	2008-10-03 12:30:08.453125000 +0200
@@ -1,29 +1,42 @@
 # Copyright (C) 2005-2008, The Perl Foundation.
-# $Id: root.in 31143 2008-09-15 07:52:14Z fperrad $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## configuration settings
-O        = @o@
-LOAD_EXT = @load_ext@
+HLLNAME     = lua
+O           = @o@
+LOAD_EXT    = @load_ext@
 
 ## Setup some commands
-MAKE    = @make_c@
-RM_F    = @rm_f@
-PERL    = @perl@
-PARROT  = ../../parrot@exe@
-PBC_MERGE = ../../pbc_merge@exe@
-PGE      = $(PARROT) ../../runtime/parrot/library/PGE/Perl6Grammar.pir
-TGE      = $(PARROT) ../../compilers/tge/tgc.pir
-PBC_TO_EXE = ../../pbc_to_exe@exe@
+MAKE        = @make_c@
+RM_F        = @rm_f@
+PERL        = @perl@
+CP          = @cp@
+MKPATH      = @mkpath@
+POD2MAN     = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT      = ../../parrot@exe@
+PBC_TO_EXE  = ../../pbc_to_exe@exe@
+PBC_MERGE   = ../../pbc_merge@exe@
+PGE         = $(PARROT) ../../runtime/parrot/library/PGE/Perl6Grammar.pir
+TGE         = $(PARROT) ../../compilers/tge/tgc.pir
 RECONFIGURE = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-PMCBUILD = $(PERL) @build_dir@/tools/build/dynpmc.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+PMCBUILD    = $(PERL) @build_dir@/tools/build/dynpmc.pl
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
-LIBPATH  = src/lib
-PMCDIR   = src/pmc
+LIBPATH       = src/lib
+PMCDIR        = src/pmc
 PARROT_DYNEXT = @build_dir@/runtime/parrot/dynext
+PARROT_LIB    = @build_dir@/runtime/parrot/library
+BUILD_DIR     = @build_dir@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+
 
 PMCS = \
  lua \
@@ -96,6 +109,8 @@
 GEN_PBC = \
  lua.pbc
 
+DOCS = MAINTAINER doc/running.pod doc/status.pod
+
 all: \
  $(PMCDIR)/lua_group$(LOAD_EXT) \
  $(LIB_PBCS) \
@@ -109,17 +124,26 @@
  $(LIBPATH)/gl_binding.pbc \
  $(LIBPATH)/glut.pbc \
  $(LIBPATH)/lfs.pbc \
- $(LIBPATH)/lpeg.pbc \
- $(LIBPATH)/markdown.pbc \
  $(LIBPATH)/md5.pbc \
  $(LIBPATH)/random.pbc \
  $(LIBPATH)/sha1.pbc \
- $(LIBPATH)/struct.pbc \
  $(LIBPATH)/uuid.pbc \
  $(GEN_PIR) \
  $(GEN_PBC) \
  src/yapp/Lua/parser.pm
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	echo "a=1" | ./installable_$(HLLNAME)@exe@
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(CP) lualibs.pbc $(DESTDIR)$(LIB_DIR)/parrot/library/lualibs.pbc
+	@cd $(PMCDIR) && $(PMCBUILD) copy "--destination=$(DESTDIR)$(LIB_DIR)/parrot/dynext" $(PMCS)
+	$(POD2MAN) doc/running.pod > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
 
 src/lua51_testlex_gen.pir: src/lua51_testlex.pg
 	$(PGE) --output=src/lua51_testlex_gen.pir src/lua51_testlex.pg
@@ -138,10 +162,25 @@
 
 lua.pbc: lua.pir src/lua51.pir src/grammar51.pir src/lua51_gen.pir src/PASTGrammar_gen.pir src/POSTGrammar_gen.pir $(LIB_SRCS)
 	$(PARROT) -o lua.pbc --output-pbc lua.pir
+# $(PBC_MERGE) -o lua.pbc lua_i.pbc ../../compilers/tge/TGE/Rule.pbc
 
 lua@exe@: lua.pbc
 	$(PBC_TO_EXE) lua.pbc
 
+installable_lua@exe@: lua.pbc
+	$(PBC_TO_EXE) lua.pbc --install
+
+$(PARROT_LIB)/$(HLLNAME).pbc: $(HLLNAME).pbc
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+$(PARROT_LIB)/lualibs.pbc: $(LIBPATH)/lualibs.pbc
+	$(CP) $(LIBPATH)/lualibs.pbc $(PARROT_LIB)/lualibs.pbc
+
+installable: installable_lua@exe@ $(PMCDIR)/lua_group$(LOAD_EXT) \
+  $(PARROT_LIB)/$(HLLNAME).pbc \
+  $(PARROT_LIB)/lualibs.pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+
 $(LIBPATH)/lualibs.pbc: $(LIB_PBCS)
 	$(PBC_MERGE) -o $(LIBPATH)/lualibs.pbc $(LIB_PBCS)
 
@@ -223,12 +262,6 @@
 $(LIBPATH)/lfs.pbc: $(LIBPATH)/lfs.pir
 	-$(PARROT) --output=$(LIBPATH)/lfs.pbc $(LIBPATH)/lfs.pir
 
-$(LIBPATH)/lpeg.pbc: $(LIBPATH)/lpeg.pir
-	-$(PARROT) --output=$(LIBPATH)/lpeg.pbc $(LIBPATH)/lpeg.pir
-
-$(LIBPATH)/markdown.pbc: $(LIBPATH)/markdown.pir
-	-$(PARROT) --output=$(LIBPATH)/markdown.pbc $(LIBPATH)/markdown.pir
-
 $(LIBPATH)/md5.pbc: $(LIBPATH)/md5.pir
 	-$(PARROT) --output=$(LIBPATH)/md5.pbc $(LIBPATH)/md5.pir
 
@@ -239,9 +272,6 @@
 	$(PERL) -pe "s|md5|sha1|g; s|MD5|SHA1|g" $(LIBPATH)/md5.pir > $(LIBPATH)/sha1.pir
 	-$(PARROT) --output=$(LIBPATH)/sha1.pbc $(LIBPATH)/sha1.pir
 
-$(LIBPATH)/struct.pbc: $(LIBPATH)/struct.pir
-	-$(PARROT) --output=$(LIBPATH)/struct.pbc $(LIBPATH)/struct.pir
-
 $(LIBPATH)/uuid.pbc: $(LIBPATH)/uuid.pir
 	-$(PARROT) --output=$(LIBPATH)/uuid.pbc $(LIBPATH)/uuid.pir
 
@@ -253,7 +283,7 @@
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd ../.. && $(RECONFIGURE) --step=gen::languages --languages=lua
+	cd ../.. && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 help:
 	@echo ""
@@ -261,8 +291,12 @@
 	@echo ""
 	@echo "  all:"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting binaries."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo "  testclean:         Clean up test results."
 	@echo ""
 	@echo "Cleaning:"
@@ -277,7 +311,6 @@
 test: all
 	cd .. && $(PERL) t/harness --languages=lua
 
-
 TEST_CLEANERS = \
  "t/pmc/*.pir" \
  "t/*.pir" \
@@ -291,6 +324,7 @@
 
 BUILD_CLEANERS = \
  lua@exe@ \
+ installable_lua@exe@ \
  lua$(O) \
  lua.c \
  "*.pbc" \
@@ -301,7 +335,9 @@
  "$(PMCDIR)/*_group.h" \
  "$(PMCDIR)/*$(LOAD_EXT)" \
  "$(PMCDIR)/*$(O)" \
- "$(LIBPATH)/*.pbc"
+ "$(LIBPATH)/*.pbc" \
+ $(PARROT_LIB)/$(HLLNAME).pbc \
+ $(PARROT_LIB)/lualibs.pbc
 
 clean:
 	$(RM_F) $(BUILD_CLEANERS) $(TEST_CLEANERS)
@@ -310,3 +346,9 @@
 	$(RM_F) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/m4/config/makefiles/root.in	2008-09-17 00:15:32.000000000 +0200
+++ src/parrot-0.7.1/languages/m4/config/makefiles/root.in	2008-10-03 15:41:18.125000000 +0200
@@ -1,27 +1,49 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # Makefile for languages/m4
+HLLNAME       = m4
 
 # Setup of some commands
-PARROT        = ../../parrot@exe@
 PERL          = @perl@
 RM_RF         = @rm_rf@
 TOUCH         = $(PERL) -MExtUtils::Command -e touch
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
 BUILD_DIR     = @build_dir@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+
+DOCS = BUGS ChangeLog LICENSE MAINTAINER README TODO.pod VERSION \
+       doc/features.pod doc/freezing.pod doc/operation.pod doc/running.pod
 
-default: all
-all: build 
+default: build
+
+all: build m4@exe@ installable_m4@exe@
+
+build: m4.pbc
 
 help:
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  all:               m4.pbc"
+	@echo "  all:               m4.pbc m4.exe"
+	@echo "  build:             m4.pbc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
 	@echo "  test-gnu-m4:       Run the test suite on the installed GNU m4."
@@ -47,21 +69,40 @@
 test-gnu-m4: build
 	PARROT_M4_TEST_PROG='m4' $(PERL) -Ilib -I../../lib t/harness
 
-build: m4.pbc 
-
 m4.pbc: src/m4.pir
-	$(PARROT) -o m4.pbc src/m4.pir 
+	$(PARROT) -o m4.pbc src/m4.pir
+
+src/m4.pir: src/builtin.pir src/freeze.pir src/input.pir src/macro.pir src/output.pir
+	$(TOUCH) $@
+
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) doc/running.pod > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+m4@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(PARROT_LIB)/$(HLLNAME).pbc $(HLLNAME).pbc
 
-src/m4.pir: src/builtin.pir src/freeze.pir src/input.pir src/macro.pir src/output.pir 
-	$(TOUCH) $@ 
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
 
-html: 
-	mkdir docs/html 
+html:
+	$(MKPATH) docs/html
 	pod2html docs/*.pod -o docs/html
- 
+
 perlcritic:
 	$(PERL) tools/scrutinize.pl
- 
+
 clean:
 	$(RM_RF) \
 m4.pbc \
@@ -78,3 +119,9 @@
 	$(RM_RF) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/markdown/config/makefiles/root.in	2008-09-17 00:16:02.000000000 +0200
+++ src/parrot-0.7.1/languages/markdown/config/makefiles/root.in	2008-10-03 12:30:08.484375000 +0200
@@ -1,32 +1,48 @@
 # Copyright (C) 2008, The Perl Foundation.
-# $Id: root.in 31121 2008-09-14 16:01:24Z fperrad $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME	      = markdown
 BUILD_DIR     = @build_dir@
+LOAD_EXT      = @load_ext@
+O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_F          = @rm_f@
-RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
 PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
 PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
 
-all: markdown.pbc
+DOCS          = README
+
+build: markdown.pbc
+
+all: markdown.pbc Makefile markdown@exe@ installable
 
 SOURCES = \
   markdown.pir \
@@ -40,7 +56,7 @@
   src/builtins/length.pir \
 
 # the default target
-markdown.pbc: $(PARROT) $(SOURCES)
+markdown.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o markdown.pbc markdown.pir
 
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg
@@ -55,6 +71,16 @@
 src/gen_builtins.pir: $(BUILTINS_PIR)
 	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir
 
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
 	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=markdown
@@ -64,10 +90,15 @@
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  all:               markdown.pbc"
+	@echo "  build:             markdown.pbc"
 	@echo "                     This is the default."
+	@echo "  all:               markdown.pbc markdown@exe@ installable"
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo "  testclean:         Clean up test results."
 	@echo ""
 	@echo "Cleaning:"
@@ -91,12 +122,22 @@
 t/MarkdownTest_1.0: t/MarkdownTest_1.0.zip
 	cd t && perl -MArchive::Zip -e "Archive::Zip->new(q{MarkdownTest_1.0.zip})->extractTree();"
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	echo "2-1" | ./installable_$(HLLNAME)@exe@
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	-$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
 TEST_CLEANUPS = \
   "t/*.html" \
   "t/*.text"
 
 testclean:
-	$(RM_RF) t/MarkdownTest_1.0
 	$(RM_F) $(TEST_CLEANUPS)
 
 GEN_CLEANUPS = \
@@ -108,7 +149,12 @@
 	$(RM_F) $(GEN_CLEANUPS)
 
 realclean: clean
-	$(RM_F) Makefile t/MarkdownTest_1.0.zip
+	$(RM_F) Makefile
 
 distclean: realclean
 
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/ook/config/makefiles/root.in	2008-09-17 00:16:12.000000000 +0200
+++ src/parrot-0.7.1/languages/ook/config/makefiles/root.in	2008-10-03 12:30:08.500000000 +0200
@@ -1,20 +1,34 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31489 2008-09-29 09:24:18Z rurban $
 
 # Makefile for languages/ook
+HLLNAME       = ook
 
 # Set up of commands
-PARROT        = ../../parrot
 PERL          = @perl@
 RM_F          = @rm_f@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 # Set up directories
 BUILD_DIR     = @build_dir@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
-default: all
+DOCS = Changes MAINTAINER README
+
+default: ook.pbc
 
 help :
 	@echo ""
@@ -33,22 +47,53 @@
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=ook
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
+
+all: ook.pbc Makefile ook@exe@ installable
 
-all: build
+build: ook.pbc
+
+ook.pbc: ook.pasm
+	$(PARROT) -o ook.pbc ook.pasm
 
 test: build
 	$(PERL) -I../../lib t/harness
 
-build: ook.pasm
-	$(PARROT) -o ook.pbc ook.pasm
+ook@exe@: ook.pbc
+	$(PBC_TO_EXE) ook.pbc
+
+installable_ook@exe@: ook.pbc
+	$(PBC_TO_EXE) ook.pbc --install
+
+installable: installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ hello.ook
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	-$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
 
 clean:
 	$(RM_F) core \
     "*.pbc" \
     "*~" \
     "hello.out" \
-    "foo.p*"
+    "foo.p*" \
+    $(HLLNAME)@exe@ \
+    installable_* \
+    $(PARROT_LIB)/$(HLLNAME).pbc
 
 realclean: clean
 	$(RM_F) Makefile
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/parrot_compiler/config/makefiles/root.in	2008-09-17 00:16:16.000000000 +0200
+++ src/parrot-0.7.1/languages/parrot_compiler/config/makefiles/root.in	2008-10-03 12:30:08.515625000 +0200
@@ -1,16 +1,19 @@
 # Copyright (C) 2001-2005, The Perl Foundation.
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # Makefile for languages/parrot_compiler
 
 # Set up commands
 PERL          = @perl@
 RM_F          = @rm_f@
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../@test_prog@@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 # Set up directories
 BUILD_DIR     = @build_dir@
@@ -55,3 +58,8 @@
 parrot_compiler.pasm : parrot_compiler.pir
 	$(PARROT) -o parrot_compiler.pasm parrot_compiler.pir
 
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/perl6/config/makefiles/root.in	2008-09-17 00:15:37.000000000 +0200
+++ src/parrot-0.7.1/languages/perl6/config/makefiles/root.in	2008-10-03 16:12:43.109375000 +0200
@@ -1,19 +1,24 @@
-# $Id: root.in 30985 2008-09-11 14:37:09Z moritz $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # arguments we want to run parrot with
-PARROT_ARGS =
+HLLNAME       = perl6
+PARROT_ARGS   =
 
 # places to look for things
 BUILD_DIR     = @build_dir@
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
-PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
-PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PERL6GRAMMAR  = $(PARROT_LIB)/PGE/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
 PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
 PMC_DIR       = src/pmc
 OPSDIR        = src/ops
 OPSLIB        = perl6
 OPS_FILE      = src/ops/perl6.ops
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 # Set up extensions
 LOAD_EXT      = @load_ext@
@@ -24,17 +29,23 @@
 MAKE          = @make_c@
 PERL          = @perl@
 RM_F          = @rm_f@
-PARROT        = ../../parrot$(EXE)
+CP            = @cp@
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 BUILD_DYNOPS  = $(PERL) $(BUILD_DIR)/tools/build/dynoplibs.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-PBC_TO_EXE    = $(BUILD_DIR)/pbc_to_exe$(EXE)
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+DOCS = README MAINTAINER ROADMAP docs/compiler_overview.pod docs/glossary.pod docs/STATUS
+
+build: perl6.pbc Test.pir
 
-all: perl6.pbc Test.pir
+all: build perl6$(EXE) installable
 
 xmas: perl6$(EXE)
 
@@ -106,6 +117,7 @@
 PMC_SOURCES = $(PMC_DIR)/perl6str.pmc $(PMC_DIR)/mutable.pmc $(PMC_DIR)/perl6scalar.pmc \
               $(PMC_DIR)/mutablevar.pmc $(PMC_DIR)/perl6multisub.pmc
 PERL6_GROUP = $(PMC_DIR)/perl6_group$(LOAD_EXT)
+DOCS = README MAINTAINER ROADMAP docs/compiler_overview.pod docs/glossary.pod docs/STATUS
 
 # targets for building a standalone perl6.
 # (We're not quite ready to make this a default target.)
@@ -113,7 +125,7 @@
 	$(PBC_TO_EXE) perl6.pbc
 
 # the default target
-perl6.pbc: $(PARROT) $(SOURCES)
+perl6.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o perl6.pbc perl6.pir
 
 installable_perl6$(EXE): perl6.pbc
@@ -122,6 +134,9 @@
 Test.pir: Test.pm perl6.pbc
 	$(PARROT) $(PARROT_ARGS) perl6.pbc --target=pir --output=Test.pir Test.pm
 
+$(PERL6GRAMMAR): $(PARROT_LIB)/PGE/Perl6Grammar.pir
+	cd $(BUILD_DIR) && $(PARROT) $(PARROT_ARGS) -o $(PERL6GRAMMAR) $(PARROT_LIB)/PGE/Perl6Grammar.pir
+
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg src/parser/grammar-oper.pg
 	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
 	    --output=src/gen_grammar.pir \
@@ -134,7 +149,7 @@
 src/gen_builtins.pir: $(BUILTINS_PIR)
 	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir
 
-$(PERL6_GROUP): $(PARROT) $(PMC_SOURCES)
+$(PERL6_GROUP): $(PMC_SOURCES)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
@@ -159,6 +174,8 @@
 	@echo "                     This is the default."
 	@echo "  perl6$(EXE):       Some want a pony, others are satisfied with an executable."
 	@echo "  xmas:              Christmas is when Perl 6 is released. Alias of perl6$(EXE)."
+	@echo "  installable:       Create self-hosting binaries."
+	@echo "  install:           Install the installable targets and docs."
 	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run coretest and codetest."
@@ -169,6 +186,7 @@
 	@echo "  spectest_regression:  Run the tests of the official test suite that are known to pass."
 	@echo "  localtest:         Run the official tests given in t/localtest.data."
 	@echo "  fulltest:          Run coretest, spectest_regression, and codetest."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo ""
 	@echo "Cleaning:"
 	@echo "  clean:             Basic cleaning up."
@@ -197,22 +215,21 @@
 # NOTE: eventually, we should remove --keep-exit-code and --fudge
 #       as the goal is that all tests must pass without fudge
 HARNESS_WITH_FUDGE = $(PERL) t/harness --fudge --keep-exit-code
-HARNESS_WITH_FUDGE_JOBS = $(HARNESS_WITH_FUDGE) --jobs
 
 spectest: all t/spec
 	-cd t/spec && svn up
-	$(HARNESS_WITH_FUDGE_JOBS) t/spec
+	$(HARNESS_WITH_FUDGE) t/spec
 
 # Run the spectests that we know work.
 spectest_regression: all t/spec t/spectest_regression.data
 	-cd t/spec && svn up
-	$(HARNESS_WITH_FUDGE_JOBS) --tests-from-file=t/spectest_regression.data
+	$(HARNESS_WITH_FUDGE) --tests-from-file=t/spectest_regression.data
 
 fulltest: coretest spectest_regression codetest
 
 # Run the tests in t/localtest.data
 localtest: all t/spec t/localtest.data
-	@$(HARNESS_WITH_FUDGE_JOBS) --tests-from-file=t/localtest.data
+	@$(HARNESS_WITH_FUDGE) --tests-from-file=t/localtest.data
 
 # Run the tests in t/localtest.data with a higher verbosity
 localtest_loud: all t/spec t/localtest.data
@@ -221,11 +238,11 @@
 # Run many tests of your choise.
 # make somtests TESTFILES=t/foo/bar
 sometests: all
-	@$(HARNESS_WITH_FUDGE_JOBS) $(TESTFILES)
+	@$(HARNESS_WITH_FUDGE) $(TESTFILES)
 
 # Run a single test
 t/*.t t/*/*.t t/*/*/*.t: all
-	@$(HARNESS_WITH_FUDGE) --verbosity=1 $@
+	@$(HARNESS_WITH_FUDGE) $@
 
 t/localtest.data:
 	$(PERL) -MExtUtils::Command -e test_f $@
@@ -233,6 +250,26 @@
 t/spec:
 	svn co http:////svn.pugscode.org//pugs//t//spec t/spec
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ -e'say 1'
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-perl6@exe@
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/rakudo@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	@cd $(PMC_DIR) && $(BUILD_DYNPMC) copy "--destination=$(DESTDIR)$(LIB_DIR)/parrot/dynext" $(PMCS)
+	@cd $(OPSDIR)  && $(BUILD_DYNOPS) copy "--destination=$(DESTDIR)$(LIB_DIR)/parrot/dynext" $(OPSLIB)
+	$(POD2MAN) doc/running.pod > $(DESTDIR)$(MANDIR)/man1/perl6.1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+installable : installable_$(HLLNAME)@exe@ $(PERL6_GROUP) $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+	@cd $(PMC_DIR) && $(BUILD_DYNPMC) copy "--destination=$(PARROT_DYNEXT)" $(PMCS)
+	@cd $(OPSDIR)  && $(BUILD_DYNOPS) copy "--destination=$(PARROT_DYNEXT)" $(OPSLIB)
+
 CLEANUPS = \
   perl6.pbc \
   perl6.c \
@@ -266,3 +303,9 @@
 	$(RM_F) src/utils/Makefile Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/perl6/config/makefiles/utils.in	2008-09-17 00:15:37.000000000 +0200
+++ src/parrot-0.7.1/languages/perl6/config/makefiles/utils.in	2008-10-03 12:30:08.546875000 +0200
@@ -1,20 +1,30 @@
-# $Id: utils.in 25400 2008-02-01 07:32:20Z chromatic $
+# $Id: utils.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
+HLLNAME        = perl6doc
 PARROT_ARGS =
 
 ## configuration settings
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
 MAKE          = @make_c@
-PARROT        = ../../../../parrot@exe@
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = $(BUILD_DIR)/parrot@exe@
+PBC_TO_EXE    = $(BUILD_DIR)/pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
@@ -39,7 +49,7 @@
 perl6doc@exe@: perl6doc.pbc
 	$(PBC_TO_EXE) perl6doc.pbc
 
-perl6doc.pbc: $(PARROT) $(PERL6DOC_SOURCES)
+perl6doc.pbc: $(PERL6DOC_SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o perl6doc.pbc perl6doc.pir
 
 perl6doc/gen_grammar.pir: $(PERL6GRAMMAR) perl6doc/grammar.pg
@@ -63,6 +73,9 @@
 	@echo ""
 	@echo "  all:               perl6doc.pbc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting binaries."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
 	@echo "  testclean:         Clean up test results."
@@ -76,6 +89,20 @@
 	@echo "  help:              Print this help message."
 	@echo ""
 
+installable_perl6doc@exe@: perl6doc.pbc
+	$(PBC_TO_EXE) perl6doc.pbc --install
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/$(HLLNAME)@exe@
+
+installable : installable_$(HLLNAME)@exe@
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ -f 'test'
+
+
 test: all
 	$(PERL) t/harness t/01-sanity
 
@@ -97,3 +124,9 @@
 	$(RM_RF) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/pheme/config/makefiles/root.in	2008-09-17 00:16:16.000000000 +0200
+++ src/parrot-0.7.1/languages/pheme/config/makefiles/root.in	2008-10-03 12:30:08.578125000 +0200
@@ -1,22 +1,39 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # configuration settings
+HLLNAME       = pheme
 BUILD_DIR     = @build_dir@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 # Setup some commands
 PERL          = @perl@
 RM_F          = @rm_f@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN	      = pod2man
+EXE           = @exe@
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 TGE_DIR       = ../../compilers/tge
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
 PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+
+DOCS = MAINTAINER MANIFEST README TODO
+
+# the default targets
+build: pheme.pbc Makefile
 
-# the default target
-all: pheme.pbc
+all: pheme.pbc Makefile pheme$(EXE) installable
 
 lib/pheme_grammar_gen.pir: lib/pheme.g
 	$(PARROT) $(PERL6GRAMMAR) \
@@ -28,6 +45,12 @@
 pheme.pbc: pheme.pir lib/PhemeSymbols.pir lib/PhemeObjects.pir lib/ASTGrammar.pir lib/pheme_grammar_gen.pir
 	$(PARROT) -o pheme.pbc pheme.pir
 
+pheme$(EXE): pheme.pbc
+	$(PBC_TO_EXE) pheme.pbc
+
+installable_pheme$(EXE): pheme.pbc
+	$(PBC_TO_EXE) pheme.pbc --install
+
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
 	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=pheme
@@ -39,6 +62,9 @@
 	@echo ""
 	@echo "  all:               pheme.pbc"
 	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
 	@echo "  testclean:         Clean up test results."
@@ -58,13 +84,35 @@
 testclean:
 	$(RM_F) "t/*.out"
 
+
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ -e'say 1'
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
 clean: testclean
 	$(RM_F) pheme.pbc
 	$(RM_F) lib/pheme_grammar_gen.pir
-	$(RM_F) lib/*.pbc
+	$(RM_F) lib/*.pbc $(PARROT_LIB)/$(HLLNAME).pbc installable_*
 	$(RM_F) lib/ASTGrammar.pir
 
 realclean: clean
 	$(RM_F) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/pipp/config/makefiles/root.in	2008-09-17 00:16:22.000000000 +0200
+++ src/parrot-0.7.1/languages/pipp/config/makefiles/root.in	2008-10-03 12:31:40.937500000 +0200
@@ -1,25 +1,36 @@
-# $Id: root.in 30479 2008-08-23 14:21:49Z bernhard $
+# $Id: root.in 31488 2008-09-29 09:20:33Z rurban $
 
 # Set up extensions
+HLLNAME       = pipp
 LOAD_EXT      = @load_ext@
 O             = @o@
 EXE           = @exe@
 
 # Set up directories
 BUILD_DIR     = @build_dir@
-LIBRARY_DIR   = $(BUILD_DIR)/runtime/parrot/library
 PMCDIR        = src/pmc
-PARROT_DYNEXT = @build_dir@/runtime/parrot/dynext
+PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 # Set up commands
-PARROT        = $(BUILD_DIR)/parrot@exe@
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
+PBC_MERGE     = $(BUILD_DIR)/pbc_merge$(EXE)
 PERL          = @perl@
 RM_F          = @rm_f@
-RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
 PMCBUILD      = $(PERL) @build_dir@/tools/build/dynpmc.pl
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
 PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
-PBC_TO_EXE    = $(BUILD_DIR)/pbc_to_exe$(EXE)
 
 PMCS = \
  php \
@@ -102,8 +113,14 @@
   src/common/php_gmp.pbc \
   src/common/php_pcre.pbc
 
+DOCS = README ChangeLog CREDITS MAINTAINER TODO \
+       docs/antlr3.pod docs/overview.pod docs/testing.pod
+
+
 # default
-all: build
+build: build-pct
+
+all: Makefile build pipp$(EXE) installable
 
 # This is a listing of all targets, that are meant to be called by users
 help:
@@ -158,8 +175,6 @@
 	java org.antlr.Tool src/antlr3/Pipp.g
 	java org.antlr.Tool -lib src/antlr3 src/antlr3/GenPastNqp.g
 
-build:           build-pct
-
 build-all:       build-pct build-phc build-antlr3
 
 build-common:    pmc src/common/pipplib.pbc pipp.pbc $(PHP_EXT)
@@ -176,6 +191,9 @@
 pipp$(EXE): build-common
 	$(PBC_TO_EXE) pipp.pbc
 
+installable_pipp$(EXE): build-common
+	$(PBC_TO_EXE) pipp.pbc --install
+
 src/common/pipplib.pbc: src/common/builtins.pir src/common/php_standard.pir $(PHP_SRC_STD_EXT) src/common/php_API.pir src/common/php_MACRO.pir
 	$(PARROT) -o src/common/pipplib.pbc src/common/builtins.pir
 
@@ -188,8 +206,8 @@
 src/common/php_pcre.pbc: src/common/php_pcre.pir src/common/php_MACRO.pir
 	$(PARROT) -o src/common/php_pcre.pbc src/common/php_pcre.pir
 
-src/pct/gen_grammar.pir: $(LIBRARY_DIR)/PGE/Perl6Grammar.pir src/pct/grammar.pg
-	$(PARROT) $(LIBRARY_DIR)/PGE/Perl6Grammar.pir \
+src/pct/gen_grammar.pir: $(PARROT_LIB)/PGE/Perl6Grammar.pir src/pct/grammar.pg
+	$(PARROT) $(PARROT_LIB)/PGE/Perl6Grammar.pir \
             --output=src/pct/gen_grammar.pir src/pct/grammar.pg
 
 src/pct/gen_actions.pir: $(NQP) $(PCT) src/pct/actions.pm
@@ -205,12 +223,25 @@
 
 pmc: $(PHP_GROUP)
 
-$(PHP_GROUP): $(PARROT) $(PMC_SOURCES)
+$(PHP_GROUP): $(PMC_SOURCES)
 	@cd $(PMCDIR) && $(PMCBUILD) generate $(PMCS)
 	@cd $(PMCDIR) && $(PMCBUILD) compile $(PMCS)
 	@cd $(PMCDIR) && $(PMCBUILD) linklibs $(PMCS)
 	@cd $(PMCDIR) && $(PMCBUILD) copy "--destination=$(PARROT_DYNEXT)" $(PMCS)
 
+installable : installable_$(HLLNAME)@exe@ pmc $(HLLNAME).pbc src/common/pipplib.pbc $(PHP_EXT)
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+	$(CP) src/common/pipplib.pbc $(PHP_EXT) $(PARROT_LIB)
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(CP) src/common/pipplib.pbc $(PHP_EXT) $(DESTDIR)$(LIB_DIR)/parrot/library
+	@cd $(PMCDIR) && $(PMCBUILD) copy "--destination=$(DESTDIR)$(LIB_DIR)/parrot/dynext" $(PMCS)
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
 test:     all test-pct
 
 test-all: all test-php test-phc test-antlr3 test-pct test-pmc
@@ -245,7 +276,8 @@
   src/common/pipplib.pbc \
   src/common/*.pbc \
   pipp.pbc \
-  pipp.c pipp.o pipp
+  pipp.c pipp.o pipp \
+  $(PARROT_LIB)/$(HLLNAME).pbc $(HLLNAME)@exe@ installable_*
 
 clean-pmc:
 	$(RM_F) "$(PMCDIR)/*dump" "$(PMCDIR)/*.c" "$(PMCDIR)/pmc_*h" "$(PMCDIR)/php_group.h" "$(PMCDIR)/*$(O)" "$(PMCDIR)/*$(LOAD_EXT)"
@@ -273,3 +305,9 @@
 
 realclean: clean
 	$(RM_F) Makefile
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/pipp/src/common/pipp.pir	2008-09-17 00:16:27.000000000 +0200
+++ src/parrot-0.7.1/languages/pipp/src/common/pipp.pir	2008-09-18 20:27:45.765625000 +0200
@@ -83,17 +83,21 @@
     # determine location of libs from the Parrot config
     .local pmc cfg
     cfg  = _config()
-    .local string lib_dir, pbc_fn
-    lib_dir = cfg['build_dir']
-    lib_dir .= '/languages/pipp/src/common'
+    .local string installed, lib_dir, pbc_fn
+    lib_dir = ''
+    installed = cfg['installed']
+    if installed goto inst
 
-    pbc_fn = concat lib_dir, '/pipplib.pbc'
+    lib_dir = cfg['build_dir']
+    lib_dir .= '/languages/pipp/src/common/'
+inst:
+    pbc_fn = concat lib_dir, 'pipplib.pbc'
     load_bytecode pbc_fn
-    pbc_fn = concat lib_dir, '/php_ctype.pbc'
+    pbc_fn = concat lib_dir, 'php_ctype.pbc'
     load_bytecode pbc_fn
-    pbc_fn = concat lib_dir, '/php_gmp.pbc'
+    pbc_fn = concat lib_dir, 'php_gmp.pbc'
     load_bytecode pbc_fn
-    pbc_fn = concat lib_dir, '/php_pcre.pbc'
+    pbc_fn = concat lib_dir, 'php_pcre.pbc'
     load_bytecode pbc_fn
 
     load_bytecode 'CGI/QueryHash.pbc'
--- origsrc/parrot-0.7.1/languages/punie/config/makefiles/root.in	2008-09-17 00:15:52.000000000 +0200
+++ src/parrot-0.7.1/languages/punie/config/makefiles/root.in	2008-10-03 12:30:08.609375000 +0200
@@ -1,32 +1,46 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # Setup some commands
-LN_S     = @lns@
-PERL     = @perl@
-RM_F     = @rm_f@
-PARROT   = ../../parrot@exe@
+HLLNAME       = punie
+LN_S          = @lns@
+PERL          = @perl@
+RM_F          = @rm_f@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 BUILD_DIR     = @build_dir@
-RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
 PGE_DIR       = ../../compilers/pge
 NQP_DIR       = ../../compilers/nqp
-CP       = @cp@
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
-PARROT_LIBRARY = ../../runtime/parrot/library
+PARROT_LIB    = ../../runtime/parrot/library
 PGE_LIBRARY   = ../../runtime/parrot/library/PGE
 
+DOCS = MAINTAINER README overview.pod
+
 # the default target
 all: punie.pbc
 
+all: punie.pbc punie@exe@ installable_punie@exe@
+
 SOURCES = punie.pir \
   src/parser/grammar.pg \
   src/parser/actions.pm \
   src/builtins/builtins.pir \
 
 # the default target
-punie.pbc: $(PARROT) $(NQP_DIR)/nqp.pbc $(PGE_LIBRARY)/Perl6Grammar.pir $(SOURCES)
+punie.pbc: $(NQP_DIR)/nqp.pbc $(PGE_LIBRARY)/Perl6Grammar.pir $(SOURCES)
 	$(PARROT) $(PGE_LIBRARY)/Perl6Grammar.pir --output=src/gen_punie.pir src/parser/grammar.pg
 	$(PARROT) $(NQP_DIR)/nqp.pbc --target=pir --output=src/gen_punie-actions.pir src/parser/actions.pm
 	$(PARROT) -o punie.pbc punie.pir
@@ -36,8 +50,12 @@
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  all:               punie.pbc"
+	@echo "  build:             punie.pbc"
 	@echo "                     This is the default."
+	@echo "  all:               punie.pbc punie@exe@"
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
 	@echo "  testclean:         Clean up test results."
@@ -56,7 +74,28 @@
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=punie
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
+
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ demo.p1
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	-$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
 
 testclean:
 	$(RM_F) "t/*.p1" "t/*.out" "t/*.pir"
@@ -65,6 +104,7 @@
   punie.pbc \
   src/gen_punie.pir \
   src/gen_punie-actions.pir \
+  $(PARROT_LIB)/$(HLLNAME).pbc punie@exe@ installable_*
 
 clean: testclean
 	$(RM_F) $(CLEANUPS)
@@ -73,3 +113,9 @@
 	$(RM_F) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/pynie/config/makefiles/root.in	2008-09-17 00:16:11.000000000 +0200
+++ src/parrot-0.7.1/languages/pynie/config/makefiles/root.in	2008-10-03 12:30:08.625000000 +0200
@@ -1,46 +1,59 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME       = pynie
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
-PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PGE_LIBRARY   = $(PARROT_LIB)/PGE
+PCT           = $(PARROT_LIB)/PCT.pbc
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
-PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
 
-PMC_DIR       = src/pmc
+DOCS = MAINTAINER README
+
+build : pynie.pbc
 
-all: pynie.pbc
+all: pynie.pbc Makefile pynie@exe@ installable
 
 SOURCES = pynie.pir \
   src/parser/Grammar.pg \
   src/parser/Actions.pm \
   src/builtins/io.pir \
   src/builtins/lists.pir \
-  src/builtins/oper.pir \
+  src/builtins/oper.pir
 
 # the default target
-pynie.pbc: $(PARROT) $(PERL6GRAMMAR) $(NQP) $(PCT) $(SOURCES)
+pynie.pbc: $(PERL6GRAMMAR) $(NQP) $(PCT) $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
 	    --output=src/gen_grammar.pir src/parser/Grammar.pg
 	$(PARROT) $(PARROT_ARGS) $(NQP) --target=pir \
@@ -56,8 +69,12 @@
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  all:               pynie.pbc"
+	@echo "  build:             pynie.pbc"
 	@echo "                     This is the default."
+	@echo "  all:               pynie.pbc pynie@exe@ installable"
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
 	@echo "  testclean:         Clean up test results."
@@ -77,10 +94,33 @@
 # this target has nothing to do
 testclean:
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ t/00-parrot/03-op-logic.t
+
+$(HLLNAME)@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) pynie.pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
 CLEANUPS = \
   pynie.pbc \
   src/gen_grammar.pir \
   src/gen_actions.pir \
+  $(PARROT_LIB)/$(HLLNAME).pbc \
+  $(HLLNAME)@exe@ installable_*
 
 clean:
 	$(RM_RF) $(CLEANUPS)
@@ -89,3 +129,9 @@
 	$(RM_RF) Makefile
 
 distclean: realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/regex/config/makefiles/root.in	2008-09-17 00:15:47.000000000 +0200
+++ src/parrot-0.7.1/languages/regex/config/makefiles/root.in	2008-10-03 12:30:08.656250000 +0200
@@ -1,34 +1,48 @@
 # Copyright (C) 2005-2008, The Perl Foundation.
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # Makefile for languages/regex
-
-# Set up commands
-PARROT        = ../../parrot@exe@
-PERL          = @perl@
-RM_F          = @rm_f@
-YAPP          = yapp
-PMC_DIR       = pmc
-BUILD_DYNPMC  = $(PERL) @build_dir@/tools/build/dynpmc.pl
-PARROT_DYNEXT = @build_dir@/runtime/parrot/dynext
-RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+HLLNAME	      = regex
 
 # Set up directories
-LOAD_EXT      = @load_ext@
+PMC_DIR       = pmc
 BUILD_DIR     = @build_dir@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 # set up extensions
+LOAD_EXT      = @load_ext@
 O             = @o@
 
+# Set up commands
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
+PERL          = @perl@
+RM_F          = @rm_f@
+YAPP          = yapp
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
+PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+
 PMCS = match matchrange
 
 PMC_SOURCES = $(PMC_DIR)/match.pmc $(PMC_DIR)/matchrange.pmc
 
 build : lib/Regex/Grammar.pm $(PMC_DIR)/match_group$(LOAD_EXT) regex-compiler.pbc
 
+all : build Makefile installable
+
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
 	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=regex
@@ -39,12 +53,34 @@
 regex-compiler.pbc : regex-compiler.pir
 	$(PARROT) -o regex-compiler.pbc regex-compiler.pir
 
-$(PMC_DIR)/match_group$(LOAD_EXT): $(PARROT) $(PMC_SOURCES)
+regex-compiler@exe@ : regex-compiler.pbc
+	$(PBC_TO_EXE) regex-compiler.pbc
+
+$(PMC_DIR)/match_group$(LOAD_EXT): $(PMC_SOURCES)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
 	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
 
+installable : installable_$(HLLNAME)@exe@ regex-compiler.pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) regex-compiler.pbc $(PARROT_LIB)/regex-compiler.pbc
+
+installable_regex@exe@: regex-compiler.pbc
+	$(PBC_TO_EXE) regex-compiler.pbc --install
+	$(MV) installable_regex-compiler@exe@ installable_regex@exe@
+
+# TODO: test for installed libs, rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ "(a+)?a" "aa"
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) regex-compiler.pbc $(DESTDIR)$(LIB_DIR)/parrot/library/regex-compiler.pbc
+	$(POD2MAN) regex-compiler.pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
 # Note: These tend to be in the order of the latest thing I've been
 # working on to the oldest, so that I see the failures quicker.
 .PHONY: test
@@ -70,7 +106,8 @@
   $(PMC_DIR)/*.pdb \
   $(PMC_DIR)/*.lib \
   test_regex.pir \
-  test_regex.pbc
+  test_regex.pbc \
+  $(PARROT_LIB)/regex-compiler.pbc
 
 clean:
 	$(RM_F) $(CLEANUPS)
@@ -80,3 +117,8 @@
 
 distclean: realclean
 
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/scheme/config/makefiles/root.in	2008-09-17 00:16:18.000000000 +0200
+++ src/parrot-0.7.1/languages/scheme/config/makefiles/root.in	2008-10-03 12:30:08.671875000 +0200
@@ -1,18 +1,23 @@
 # Copyright (C) 2005-2007, The Perl Foundation.
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # Makefile for languages/scheme
+HLLNAME       = scheme
 
 # Set up commands
 PERL          = @perl@
 RM_F          = @rm_f@
 RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 # Set up directories
 BUILD_DIR     = @build_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+#PERL_LIB     = @ perl_lib @
 
 # The default target
 default: build
@@ -34,12 +39,22 @@
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=scheme
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 # Compilation:
 build:
 	$(PERL) -c schemec
 
+# perl libs where? need @ perl_lib @
+#	-$(MKPATH) $(DESTDIR)$(LIB_DIR)
+#	-$(MKPATH) $(DESTDIR)$(LIB_DIR)/Scheme
+#	$(CP) lib/Scheme.pm $(DESTDIR)$(LIB_DIR)/Scheme.pm
+#	$(CP) lib/Scheme/*.pm $(DESTDIR)$(LIB_DIR)/Scheme
+install : installable
+	$(CP) schemec $(DESTDIR)$(BIN_DIR)/parrot-schemec
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
 # cleaning up
 
 clean:
@@ -60,3 +75,9 @@
 # testing
 test:
 	cd .. && $(PERL) scheme/t/harness
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/squaak/config/makefiles/root.in	2008-09-17 00:16:12.000000000 +0200
+++ src/parrot-0.7.1/languages/squaak/config/makefiles/root.in	2008-10-03 12:30:08.687500000 +0200
@@ -1,55 +1,74 @@
-## $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+## $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 ## arguments we want to run parrot with
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME       = squaak
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 ## Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
 BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
 PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
-PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+PGE_LIBRARY   = $(PARROT_LIB)/PGE
+PCT           = $(PARROT_LIB)/PCT.pbc
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
-PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
-
-PMC_DIR       = src/pmc
 
-all: squaak.pbc
+build: squaak.pbc
 
-SQUAAK_GROUP = $(PMC_DIR)/squaak_group$(LOAD_EXT)
+all: build squaak@exe@ installable
 
 SOURCES = squaak.pir \
   src/gen_grammar.pir \
   src/gen_actions.pir \
   src/gen_builtins.pir \
-#  $(SQUAAK_GROUP)
 
 BUILTINS_PIR = \
   src/builtins/say.pir \
 
-# PMCS = squaak
-# PMC_SOURCES = $(PMC_DIR)/squaak.pmc
+DOCS = MAINTAINER README \
+  pod/tutorial_episode_1.pod \
+  pod/tutorial_episode_2.pod \
+  pod/tutorial_episode_3.pod \
+  pod/tutorial_episode_4.pod \
+  pod/tutorial_episode_5.pod \
+  pod/tutorial_episode_6.pod \
+  pod/tutorial_episode_7.pod \
+  pod/tutorial_episode_8.pod \
+  pod/tutorial_episode_9.pod
 
 # the default target
-squaak.pbc: $(PARROT) $(SOURCES)
+squaak.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o squaak.pbc squaak.pir
 
+squaak@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
+
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg
 	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
 	    --output=src/gen_grammar.pir \
@@ -62,23 +81,39 @@
 src/gen_builtins.pir: $(BUILTINS_PIR)
 	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir
 
-$(SQUAAK_GROUP): $(PARROT) $(PMC_SOURCES)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-$(HLLNAME)@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) squaak.pir > $(DESTDIR)$(MANDIR)/man1/parrot-$(HLLNAME).1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+installable_$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
-	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=squaak
+	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)
 
 # This is a listing of all targets, that are meant to be called by users
 help:
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  all:               squaak.pbc"
+	@echo "  build:             squaak.pbc"
 	@echo "                     This is the default."
+	@echo "  all:               squaak.pbc squaak.exe installable"
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
 	@echo "  testclean:         Clean up test results."
@@ -103,17 +138,7 @@
   src/gen_grammar.pir \
   src/gen_actions.pir \
   src/gen_builtins.pir \
-  $(PMC_DIR)/*.h \
-  $(PMC_DIR)/*.c \
-  $(PMC_DIR)/*.dump \
-  $(PMC_DIR)/*$(O) \
-  $(PMC_DIR)/*$(LOAD_EXT) \
-  $(PMC_DIR)/*.exp \
-  $(PMC_DIR)/*.ilk \
-  $(PMC_DIR)/*.manifest \
-  $(PMC_DIR)/*.pdb \
-  $(PMC_DIR)/*.lib \
-
+  $(PARROT_LIB)/$(HLLNAME).pbc $(HLLNAME)@exe@ installable_*
 
 clean:
 	$(RM_RF) $(CLEANUPS)
@@ -124,3 +149,8 @@
 distclean: realclean
 
 
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/t/harness	2008-09-17 00:16:16.000000000 +0200
+++ src/parrot-0.7.1/languages/t/harness	2008-09-18 20:27:47.328125000 +0200
@@ -79,6 +79,7 @@
 # ecmascript           No t/harness
 # eclectus
 # forth                No t/harness
+# jvm                  not yet functional
 # perl6                test scripts are written in Perl 6, not Perl 5
 # pheme                test scripts are written in Scheme, not Perl 5
 # PIR                  many test failures
--- origsrc/parrot-0.7.1/languages/tcl/config/makefiles/examples.in	2008-09-17 00:16:08.000000000 +0200
+++ src/parrot-0.7.1/languages/tcl/config/makefiles/examples.in	2008-10-03 12:30:08.703125000 +0200
@@ -1,16 +1,24 @@
-PARROT = ../../../parrot@exe@
-PARROT_ARRGS = --gc-debug
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT      = @build_dir@/parrot@exe@
+PARROT_ARGS = --gc-debug
 
 default:
 	@echo "to run <foo>.tcl, type 'make <foo>'"
 	@echo "to run an interactive tclsh, type 'make tclsh'"
 
 %:%.tcl
-	$(PARROT) $(PARROT_ARRGS)  ../tcl.pbc $@.tcl
+	$(PARROT) $(PARROT_ARGS)  ../tcl.pbc $@.tcl
 
 tclsh:
-	$(PARROT) $(PARROT_ARRGS) ../tcl.pbc
+	$(PARROT) $(PARROT_ARGS) ../tcl.pbc
 
 # (for development testing)
 test:
-	$(PARROT) -tf $(PARROT_ARRGS) ../tcl.pbc foo.tcl
+	$(PARROT) -tf $(PARROT_ARGS) ../tcl.pbc foo.tcl
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/tcl/config/makefiles/root.in	2008-09-17 00:16:08.000000000 +0200
+++ src/parrot-0.7.1/languages/tcl/config/makefiles/root.in	2008-10-03 15:35:03.531250000 +0200
@@ -1,31 +1,46 @@
-RM_F    = @rm_f@
-PERL    = @perl@
-PARROT  = ../../parrot@exe@
+# $Id: root.in 31489 2008-09-29 09:24:18Z rurban $
+HLLNAME    = tcl
+RM_F       = @rm_f@
+PERL       = @perl@
+MKPATH     = @mkpath@
+POD2MAN    = pod2man
 
 BUILD_DIR   = @build_dir@
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT      = ../../parrot@exe@
+PBC_TO_EXE  = ../../pbc_to_exe@exe@
 RECONFIGURE = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-PBC_TO_EXE    = $(BUILD_DIR)/pbc_to_exe@exe@
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 TCL_LIB   = library
 PMCBUILD  = $(PERL) @build_dir@/tools/build/dynpmc.pl
 OPSBUILD  = $(PERL) @build_dir@/tools/build/dynoplibs.pl
-DESTDIR   = @build_dir@/runtime/parrot/dynext
+PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
 O         = @o@
 PMCDIR    = src/pmc
 OPSDIR    = src/ops
 CLASSDIR  = src/class
 LOAD_EXT  = @load_ext@
+RM_F      = @rm_f@
+MKPATH    = @mkpath@
+POD2MAN   = pod2man
 COPY      = @cp@
 RENAME    = @mv@
+BIN_DIR   = @bin_dir@
+LIB_DIR   = @lib_dir@
+DOC_DIR   = @doc_dir@
+MANDIR	  = @mandir@
 
 CC_INC     = @cc_inc@
 CC_SHARED  = @cc_shared@
 CFLAGS     = $(CC_INC) @ccflags@ @cc_debug@ @ccwarn@ @cc_hasjit@ @cg_flag@ @gc_flag@ $(CC_SHARED)
 CC         = @cc@
 
+DOCS = LICENSE MAINTAINER README.pod TODO docs/hacks.pod docs/howto.pod docs/overview.pod
 
 TGE_DIR  = ../../compilers/tge
 PERL6GRAMMAR = ../../runtime/parrot/library/PGE/Perl6Grammar.pbc
@@ -59,12 +74,14 @@
 $(TCL_LIB)/parray.tcl \
 $(RUNTIME_PIR)
 
-all: tcl.pbc
+build: tcl.pbc
+
+all: tcl.pbc tclsh@exe@ Makefile installable
 
-tcl.pbc: $(PARROT) pmcs ops runtime/tcllib.pbc src/tclsh.pir
+tcl.pbc: pmcs ops runtime/tcllib.pbc src/tclsh.pir
 	$(PARROT) --output=tcl.pbc src/tclsh.pir
 
-.SUFFIXES : .pir .pg .tg .tcl
+.SUFFIXES : .exe .pbc .pir .pg .tg .tcl
 
 .tg.pir :
 	$(PARROT) $(TGE_DIR)/tgc.pir --output=$@ $<
@@ -86,7 +103,7 @@
 	@cd $(PMCDIR) && $(PMCBUILD) generate $(PMCS)
 	@cd $(PMCDIR) && $(PMCBUILD) compile $(PMCS)
 	@cd $(PMCDIR) && $(PMCBUILD) linklibs $(PMCS)
-	@cd $(PMCDIR) && $(PMCBUILD) copy "--destination=$(DESTDIR)" $(PMCS)
+	@cd $(PMCDIR) && $(PMCBUILD) copy "--destination=$(PARROT_DYNEXT)" $(PMCS)
 
 # THIS WAS COPIED FROM THE ROOT MAKEFILE
 # Passing an empty argument in @ARGV to cc_flags.pl to indicate where extra -Is
@@ -101,22 +118,45 @@
 	@cd $(OPSDIR) && $(OPSBUILD) generate tcl
 	@cd $(OPSDIR) && $(OPSBUILD) compile  tcl
 	@cd $(OPSDIR) && $(OPSBUILD) linklibs tcl ../binary$(O)
-	@cd $(OPSDIR) && $(OPSBUILD) copy "--destination=$(DESTDIR)" tcl
+	@cd $(OPSDIR) && $(OPSBUILD) copy "--destination=$(PARROT_DYNEXT)" tcl
 
 runtime/builtins.pir: $(DEPS) tools/gen_builtins.pl
 	$(PERL) tools/gen_builtins.pl > runtime/builtins.pir
 
-runtime/tcllib.pbc: $(PARROT) runtime/tcllib.pir runtime/builtins.pir $(CLASSES)
-	$(PARROT) --output=runtime/tcllib.pbc runtime/tcllib.pir
+runtime/tcllib.pbc: runtime/tcllib.pir runtime/builtins.pir $(CLASSES)
+	$(PARROT) --output=$@ runtime/tcllib.pir
+
+$(PARROT_LIB)/tcllib.pbc: runtime/tcllib.pbc
+	$(COPY) runtime/tcllib.pbc $(PARROT_LIB)/tcllib.pbc
 
 # targets for building a standalone tclsh
 # (We're not quite ready to make this a default target.)
-tclsh@exe@: tcl.pbc $(PBC_TO_EXE)
+tclsh@exe@: tcl.pbc
 	$(PBC_TO_EXE) tcl.pbc
 	$(RENAME) tcl@exe@ tclsh@exe@
 
-$(PBC_TO_EXE):
-	$(MAKE) $(BUILD_DIR) ./pbc_to_exe@exe@
+installable : installable_tclsh@exe@ tcl.pbc $(PARROT_LIB)/tcllib.pbc
+	$(COPY) installable_tclsh@exe@ $(BUILD_DIR)
+	$(COPY) tcl.pbc $(PARROT_LIB)/tcl.pbc
+
+installable_tclsh@exe@: tcl.pbc
+	$(PBC_TO_EXE) tcl.pbc --install
+	$(RENAME) installable_tcl@exe@ installable_tclsh@exe@
+
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_tclsh@exe@ tcl_misc_28.tcl
+
+install : installable
+	$(COPY) installable_tclsh@exe@ $(DESTDIR)$(BIN_DIR)/parrot-tclsh@exe@
+	$(COPY) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(COPY) runtime/tcllib.pbc $(DESTDIR)$(LIB_DIR)/parrot/library/tcllib.pbc
+	@cd $(OPSDIR) && $(OPSBUILD) copy "--destination=$(DESTDIR)$(LIB_DIR)/parrot/dynext" tcl
+	@cd $(PMCDIR) && $(PMCBUILD) copy "--destination=$(DESTDIR)$(LIB_DIR)/parrot/dynext" $(PMCS)
+	$(COPY) runtime/tcllib.pbc $(DESTDIR)$(LIB_DIR)/parrot/library
+	$(POD2MAN) README.pod > $(DESTDIR)$(MANDIR)/man1/parrot-tclsh.1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
+	$(COPY) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
 
 test: tcl.pbc
 	prove -r t
@@ -270,6 +310,7 @@
 spectest: t_tcl tcl.pbc
     # For now, just test the ones that ``work'' with test_more
 	prove $(RUNNABLE_TCL_TESTS)
+
 t_tcl:
 	$(PERL) tools/tcl_test.pl
 
@@ -288,7 +329,7 @@
 "$(PMCDIR)/*_group.h" \
 "$(PMCDIR)/*$(LOAD_EXT)" \
 "$(PMCDIR)/*.dump" \
-#CONDITIONED_LINE(ld_parrot_exe_def):"$(PMCDIR)/*.def" \
+#IF(ld_parrot_exe_def):"$(PMCDIR)/*.def" \
 "$(PMCDIR)/*.c" \
 "$(PMCDIR)/*$(O)" \
 "$(PMCDIR)/*.exp" \
@@ -311,7 +352,11 @@
 "$(OPSDIR)/*.lib" \
 "$(OPSDIR)/*.pdb" \
 "$(TCL_LIB)/*.pir" \
-lib/*.pre_c
+lib/*.pre_c \
+installable_tclsh@exe@ \
+tcl@exe@ tclsh@exe@ \
+$(PARROT_LIB)/tcl.pbc \
+$(PARROT_LIB)/tcllib.pbc
 
 # that last line should be cleaned up for x-platform.
 
@@ -327,3 +372,8 @@
 Makefile: config/makefiles/root.in
 	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=tcl
 
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/tcl/docs/overview.pod	2008-09-17 00:16:09.000000000 +0200
+++ src/parrot-0.7.1/languages/tcl/docs/overview.pod	2008-09-18 20:27:47.421875000 +0200
@@ -1,7 +1,7 @@
 =head1 OVERVIEW
 
 This is a from-scratch implementation, based primarily on the Tcl man page(s),
-and the cvs-current test suite for Tcl.
+and the cvs-current test suite for Tcl (8.5.1)
 
 Another interesting project would have been to modify the Tcl source and have
 it generate Parrot directly. Many people smarter than I am have declared this
--- origsrc/parrot-0.7.1/languages/tcl/lib/Tcl/Test.pm	2008-09-17 00:16:08.000000000 +0200
+++ src/parrot-0.7.1/languages/tcl/lib/Tcl/Test.pm	2008-09-18 20:27:47.437500000 +0200
@@ -11,6 +11,12 @@
 use File::Spec;
 
 sub import {
+    if ($^O eq 'cygwin' or $^O eq 'MSWin32') {
+        $ENV{PATH} = $PConfig{build_dir}.":".$ENV{PATH};
+    }
+    else {
+        $ENV{LD_RUN_PATH} = $PConfig{build_dir};
+    }
     my $parrot = File::Spec->catfile( $PConfig{build_dir}, 'parrot' );
     my $tcl = File::Spec->catdir( $PConfig{build_dir}, qw(languages tcl) );
     my $test = File::Spec->abs2rel( File::Spec->rel2abs($0), $tcl );
--- origsrc/parrot-0.7.1/languages/tcl/src/tclsh.pir	2008-09-17 00:16:09.000000000 +0200
+++ src/parrot-0.7.1/languages/tcl/src/tclsh.pir	2008-09-18 20:27:47.468750000 +0200
@@ -31,8 +31,21 @@
 
 .sub _main :main
   .param pmc argv
-
-  load_bytecode 'languages/tcl/runtime/tcllib.pbc'
+  # determine location of libs from the Parrot config
+  load_bytecode 'config.pir'
+  .local pmc cfg
+  cfg  = _config()
+  .local int installed
+  .local string lib_dir, pbc_fn
+  lib_dir = ''
+  installed = cfg['installed']
+  if installed goto inst
+
+  lib_dir = cfg['build_dir']
+  lib_dir .= '/languages/tcl/runtime/'
+inst:
+  pbc_fn = concat lib_dir, 'tcllib.pbc'
+  load_bytecode pbc_fn
 
   .local pmc retval
   .local string mode,contents,filename
--- origsrc/parrot-0.7.1/languages/tcl/tools/tcl_test.pl	2008-09-17 00:16:02.000000000 +0200
+++ src/parrot-0.7.1/languages/tcl/tools/tcl_test.pl	2008-09-18 20:27:47.484375000 +0200
@@ -92,7 +92,7 @@
 sub checkout_tests {
     print "Checking out tests from CVS\n";
 
-    my $tag = 'core-8-5-4';    # For the version we're targeting.
+    my $tag = 'core-8-5-3';    # For the version we're targeting.
 
     my $command =
         'cvs -z3 -d :pserver:anonymous:\@tcl.cvs.sourceforge.net:'
--- origsrc/parrot-0.7.1/languages/unlambda/config/makefiles/root.in	2008-09-17 00:15:34.000000000 +0200
+++ src/parrot-0.7.1/languages/unlambda/config/makefiles/root.in	2008-10-03 12:30:08.734375000 +0200
@@ -1,53 +1,115 @@
 # Copyright (C) 2008, The Perl Foundation.
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # Makefile for languages/unlambda
 
 # configuration settings
-BUILD_DIR       = @build_dir@
+HLLNAME	      = unlambda
+BUILD_DIR     = @build_dir@
+LOAD_EXT      = @load_ext@
+O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
 
 # Set up commands
-PERL            = @perl@
-RM_F            = @rm_f@
-RECONFIGURE     = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+PERL          = @perl@
+RM_F          = @rm_f@
+CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
+RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+
+## places to look for things
+PARROT_LIB    = $(BUILD_DIR)/runtime/parrot/library
+
+DOCS = MAINTAINER README
 
 # The default target
-default: build
+build : $(HLLNAME).pbc
+
+all : $(HLLNAME).pbc $(HLLNAME)@exe@ Makefile installable
 
 help :
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  build:             does nothing."
+	@echo "  build:             unlambda.pbc"
 	@echo "                     This is the default target."
+	@echo "  all:               unlambda.pbc unlambda@exe@ installable"
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
 	@echo ""
+	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  testclean:         Clean up test results."
 	@echo ""
+	@echo "Cleaning:"
 	@echo "  clean:             Clean up temporary files."
-	@echo ""
 	@echo "  realclean:         Clean up generated files."
 	@echo ""
+	@echo "Misc:"
 	@echo "  help:              Print this help message."
+	@echo ""
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
 	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=unlambda
 
-# Compilation:
-build:
-	@echo "nothing to do"
+$(HLLNAME).pbc: unl.pir
+	$(PARROT) $(PARROT_ARGS) -o $@ unl.pir
 
-# cleaning up
-
-clean: 
-	@echo "nothing to do"
+$(HLLNAME)@exe@ : $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc
 
-realclean: clean
-	$(RM_F) Makefile
+installable : installable_$(HLLNAME)@exe@ $(HLLNAME).pbc
+	$(CP) installable_$(HLLNAME)@exe@ $(BUILD_DIR)
+	$(CP) $(HLLNAME).pbc $(PARROT_LIB)/$(HLLNAME).pbc
+
+installable_unlambda@exe@: $(HLLNAME).pbc
+	$(PBC_TO_EXE) $(HLLNAME).pbc --install
+
+# TODO: test for installed libs, rename build_dir. basic run for missing libs
+test-installable : installable
+	./installable_$(HLLNAME)@exe@ examples/h.unl
+
+install : installable
+	$(CP) installable_$(HLLNAME)@exe@ $(DESTDIR)$(BIN_DIR)/parrot-unlambda@exe@
+	$(CP) $(HLLNAME).pbc $(DESTDIR)$(LIB_DIR)/parrot/library/$(HLLNAME).pbc
+	$(POD2MAN) $(HLLNAME).pir > $(DESTDIR)$(MANDIR)/man1/parrot-unlambda.1
+	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/unlambda
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/unlambda
 
 # testing
 test: build
 	$(PERL) t/harness
+
+# cleaning up
+CLEANUPS = \
+  $(HLLNAME).pbc \
+  $(HLLNAME)@exe@ \
+  installable_$(HLLNAME)@exe@ \
+  $(PARROT_LIB)/$(HLLNAME).pbc \
+  $(BUILD_DIR)/installable_$(HLLNAME)@exe@ \
+
+
+clean:
+	$(RM_F) $(CLEANUPS)
+
+testclean: clean
+
+realclean: clean
+	$(RM_F) Makefile
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/languages/urm/config/makefiles/root.in	2008-09-17 00:15:41.000000000 +0200
+++ src/parrot-0.7.1/languages/urm/config/makefiles/root.in	2008-10-03 12:30:08.750000000 +0200
@@ -1,34 +1,50 @@
-# $Id: root.in 28657 2008-06-23 00:33:41Z coke $
+# $Id: root.in 31315 2008-09-21 14:25:18Z rurban $
 
 # Makefile for languages/urm
 
 # Setup of some commands
 RM_F          = @rm_f@
 PERL          = @perl@
-PARROT        = ../../parrot@exe@
+CP            = @cp@
 BUILD_DIR     = @build_dir@
+BIN_DIR       = @bin_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+
+#IF(parrot_is_shared and !(cygwin|win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
+PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
-default: build
+default: all
 
 help :
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
+	@echo "  all:               This is the default."
 	@echo "  build:             Just check whether 'urmc' compiles"
-	@echo "                     This is the default."
+	@echo "  installable:       Create self-hosting bins and libs."
+	@echo "  install:           Install the installable targets and docs."
 	@echo ""
-	@echo "  test:              run the test suite,"
-	@echo ""
-	@echo "  clean:             clean up temporary files"
-	@echo ""
-	@echo "  realclean:         clean up generated files"
+	@echo "Testing:"
+	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
+	@echo "  testclean:         Clean up test results."
+	@echo ""
+	@echo "Cleaning:"
+	@echo "  clean:             Basic cleaning up."
+	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
+	@echo "  distclean:         Removes also anything built, in theory"
 	@echo ""
+	@echo "Misc:"
 	@echo "  help:              print this help message"
 
+all: build
+
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
 	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=urm
@@ -47,6 +63,14 @@
 build: 
 	$(PERL) -c urmc
 
+# TODO: rename build_dir. basic run for missing libs
+test-installable : test
+
+install : build
+	$(CP) urmc $(DESTDIR)$(BIN_DIR)/parrot-urmc
+
+installable: build
+
 clean:
 	$(RM_F) \
 		core "*.pbc" "*~" "foo.p*" \
@@ -60,4 +84,11 @@
 
 realclean: clean
 	$(RM_F) Makefile
-	
+
+distclean: clean realclean
+
+#
+# Local variables:
+# mode: makefile
+# ex: ft=make
+# End:
--- origsrc/parrot-0.7.1/lib/Parrot/Configure/Compiler.pm	2008-09-17 00:14:43.000000000 +0200
+++ src/parrot-0.7.1/lib/Parrot/Configure/Compiler.pm	2008-09-18 20:27:47.578125000 +0200
@@ -33,6 +33,7 @@
     _run_command _build_compile_command
     move_if_diff
 );
+my $DEBUG;
 
 our %file_types_info = (
     makefile => {
@@ -210,17 +211,62 @@
 Its value will be detected automatically by target file name unless you set
 it to a special value C<none>.
 
-=item conditioned_lines
+=item conditioned_lines #IF #UNLESS #ELSIF #ELSE
 
-If C<conditioned_lines> is true, then lines in the file that begin with:
-C<#CONDITIONED_LINE(var):> are skipped if the C<var> condition is false. Lines
-that begin with C<#INVERSE_CONDITIONED_LINE(var):> are skipped if
-the C<var> condition is true.  For instance:
+If conditioned_lines is true, then several expressions at the first column
+are evaluated and replaced by the content after the C<:> dependending on
+the evaluation of the expression.
+
+Lines beginning with C<#IF(expr):> are skipped if the expr
+condition is false, otherwise the content after the C<:> is inserted.
+Lines beginning with C<#UNLESS(expr):> are skipped if the expr condition
+is true, otherwise the content after the C<:> is inserted.
+Lines beginning with C<#ELSIF(expr):> or C<#ELSE:> are evaluated if the
+former C<#IF(expr):> evaluated to false.
+
+A condition expr may be:
+
+  * a single key, which is true if a config key is true
+    - not 0 and not undef and not an empty string,
+  * or equal to the platform name, the osname - case-sensitive,
+  * or a C<key==value> expression, which checks for the config key,
+    Note that values may contain no spaces here. Quotes in values
+    are not supported.
+  * or a logical combination of C<|>, C<OR>, C<&>, C<AND>, C<!>, C<NOT>,
+    The verbose ops AND, OR and NOT are case-insensitive.
+    ! and NOT bind closer than &, AND and |, OR.
+    The order of precedence for AND and OR is undefined.
 
-  #CONDITIONED_LINE(win32): $(SRC_DIR)/atomic/gcc_x86$(O)
+A key must only consist of the chars A-Z a-z 0-9 _ -, and is checked
+case-sensitively against the config key or the platform name.
+
+For instance:
+
+  #IF(win32): $(SRC_DIR)/atomic/gcc_x86$(O)
 
 will be processed if the platform is win32.
 
+  #IF(cpuarch==i386): $(SRC_DIR)/atomic/gcc_x86$(O)
+
+will be skipped if the value of the config key "cpuarch" is not "i386".
+
+  #IF(cpuarch==i386): $(SRC_DIR)/atomic/gcc_x86$(O)
+  #ELSIF(cpuarch==sparcv9): $(SRC_DIR)/atomic/sparc_v9.s
+  #ELSE:
+
+will use " $(SRC_DIR)/atomic/gcc_x86$(O)" on cpuarch "i386",
+" $(SRC_DIR)/atomic/sparc_v9.s" on cpuarch "sparcv9"
+and print an empty line otherwise.
+
+  #IF(win32 and glut and not cygwin):
+
+will be used on win32 and if glut is defined, but not on cygwin.
+
+B<Legacy Syntax:>
+
+The old syntax #CONDITIONED_LINE(var): and
+#INVERSE_CONDITIONED_LINE(var): is still supported, but is deprecated.
+
 =item comment_type
 
 This option takes has two possible values, C<#> or C</*>. If present and
@@ -294,6 +340,7 @@
 
     open my $in,  '<', $source       or die "Can't open $source: $!";
     open my $out, '>', "$target.tmp" or die "Can't open $target.tmp: $!";
+    $DEBUG++ if $ENV{TEST_VERBOSE};
 
     if ( !exists $options{file_type}) {
         if ( $target =~ m/makefile$/i ) {
@@ -360,6 +407,8 @@
     # this loop can not be implemented as a foreach loop as the body
     # is dependent on <IN> being evaluated lazily
 
+    my $former_truth = 99;
+  LINE:
     while ( my $line = <$in> ) {
 
         # everything after the line starting with #perl is eval'ed
@@ -376,16 +425,46 @@
             $text =~ s{ \@ (\w+) \@ }{\$conf->data->get("$1")}gx;
             eval $text;
             die $@ if $@;
-            last;
+            last LINE;
         }
         if ( $options{conditioned_lines} ) {
-            if ( $line =~ m/^#CONDITIONED_LINE\(([^)]+)\):(.*)/s ) {
-                next unless $conf->data->get($1);
-                $line = $2;
-            }
-            elsif ( $line =~ m/^#INVERSE_CONDITIONED_LINE\(([^)]+)\):(.*)/s ) {
-                next if $conf->data->get($1);
-                $line = $2;
+            my ($op, $expr, $rest);
+            # allow multiple keys and nested parens here
+            if (($op,$expr,$rest)=($line =~ m/^#(IF|UNLESS|ELSIF)\((.+)\):(.*)/s)) {
+                if (($op eq 'ELSIF') and $former_truth) {
+                    next LINE;  # no useless check if former IF was true
+                }
+                my $truth = cond_eval($conf, $expr);
+                if ($op eq 'IF') {
+                    $former_truth = $truth;
+                    next LINE unless $truth;
+                }
+                elsif ($op eq 'UNLESS') {
+                    $former_truth = !$truth;
+                    next LINE if $truth;
+                }
+                elsif ($op eq 'ELSIF') {
+                    $former_truth = $truth;
+                    next LINE unless $truth;
+                }
+                $line = $rest;
+            }
+            elsif ( $former_truth != 99 and $line =~ m/^#ELSE:(.*)/s ) {
+                next LINE if $former_truth;
+                $line = $1;
+            }
+            # Legacy, DEPRECATED.
+            elsif (($expr,$rest)=($line =~ m/^#CONDITIONED_LINE\(([^)]+)\):(.*)/s)) {
+                next LINE unless cond_eval($conf, $expr);
+                $line = $rest;
+            }
+            elsif (($expr,$rest)=($line =~ m/^#INVERSE_CONDITIONED_LINE\(([^)]+)\):(.*)/s )) {
+                next LINE if cond_eval($conf, $expr);
+                $line = $rest;
+            }
+
+            else { # reset
+                $former_truth = 99; # ELSE must immediately follow a conditional.
             }
         }
 
@@ -484,6 +563,127 @@
     move_if_diff( "$target.tmp", $target, $options{ignore_pattern} );
 }
 
+# Return the next subexpression from the expression in $_[0]
+# and remove it from the input expression.
+# Allowed chars: A-Z a-z 0-9 _ -, so let's take [-\w].
+sub next_expr {
+    my $s = $_[0];
+    return "" unless $s;
+    # start of a subexpression?
+    if ($s =~ /^\((.+)\)\s*(.*)/o) {    # longest match to matching closing paren
+        $_[0] = $2 ? $2 : "";           # modify the 2nd arg
+        print "#** nextsub \"$s\" => (\"$1\",\"$_[0]\")\n" if $DEBUG;
+        return $1;
+    }
+    else {
+        $s =~ s/^\s+//;                 # left-trim to make it more robust
+        if ($s =~ m/^([-\w=]+)\s*(.*)?/o) { # shortest match to next non-word char
+            # start with word expr
+            $_[0] = $2 ? $2 : "";       # modify the 2nd arg expr in the caller
+            print "#** nextexpr \"$s\" => (\"$1\",\"$_[0]\")\n" if $DEBUG;
+            return $1;
+        }
+        else {
+            # special case: start with non-word op (perl-syntax only)
+            $s =~ m/^([|&!])\s*(.*)?/o; # shortest match to next word char
+            $_[0] = $2 ? $2 : "";       # modify the 2nd arg expr in the caller
+            print "#** nextop \"$s\" => (\"$1\",\"$_[0]\")\n" if $DEBUG;
+            return $1;
+        }
+    }
+}
+
+# Checks the logical truth of the hash value: exists and not empty.
+# Also check the platform name, the 'osname' key, if the hash key does not exist.
+# Also check for key==value, like #IF(ld==gcc)
+sub cond_eval_single {
+    my $conf = $_[0];
+    my $key  = $_[1];
+    return unless defined $key;
+    if ($key =~ /^([-\w]+)==(.+)$/) {
+        return ($2 eq $conf->data->get($1));
+    }
+    else {
+        return exists($conf->data->{c}->{$key})
+            ? ($conf->data()->get($key) ? 1 : 0)
+            : $key eq $conf->data()->get('osname');
+    }
+}
+
+sub truth { $_[0] ? "true" : "false"; }
+
+# Recursively evaluate boolean expressions with multiple keys and | & ! ops.
+# Order of precedence: Just "!" and "NOT" binds tighter than AND and OR.
+# There's no precedence for AND over OR defined, just left to right.
+sub cond_eval {
+    my $conf = $_[0];
+    my $expr = $_[1];
+    my @count = split /[\s!&|\(]+/, $expr; # optimizable with tr
+    if (@count > 1) { # multiple keys: recurse into
+        my $truth = 0;
+        my $prevtruth = 0;
+        my $key = next_expr($expr);
+        my $op  = '';
+      LOOP:
+        while ($key) {
+            if (($key eq '!') or (uc($key) eq 'NOT')) {
+                # bind next key immediately
+                $op = 'NOT';
+                $key = next_expr($expr);
+            }
+            elsif ($truth and ($op eq 'OR')) {
+                # true OR: => true
+                print "#* => ",truth(1)," rest=\"$expr\" SKIP on true OR\n" if $DEBUG;
+                last LOOP;
+            }
+            print "#* truth=",truth($truth)," op=\"$op\" key=\"$key\"\n" if $DEBUG;
+            $prevtruth = $truth;
+            if (!$truth and ($op eq 'AND')) { # false AND: => false, skip rest
+                print "#* => ",truth(0)," rest=\"$expr\" SKIP already false\n" if $DEBUG;
+                last LOOP;
+            }
+            $truth = cond_eval($conf, $key);
+            if ($op eq 'NOT') { # NOT *: invert
+                $truth = $truth ? 0 : 1;
+            }
+            elsif ($op eq 'AND' and !$truth) { # * AND false: => false
+                print "#* => ",truth(0)," rest=\"$expr\" SKIP rest\n" if $DEBUG;
+                last LOOP;
+            }
+            # * OR false => * (keep $truth). true OR * already handled before
+            print "#* => ",truth($truth)," rest=\"$expr\"\n" if $DEBUG;
+            my $prevexpr = $expr;
+            $op  = next_expr($expr);
+            if ($op) {
+                if ($op eq '|' or uc($op) eq 'OR') {
+                    $op = 'OR';
+                }
+                elsif ($op eq '&' or uc($op) eq 'AND') {
+                    $op = 'AND';
+                }
+                elsif ($op eq '!' or uc($op) eq 'NOT') {
+                    $op = 'NOT';
+                }
+                else {
+                    die "invalid op \"$op\" in \"$_[1]\" at \"$prevexpr\".\n";
+                }
+                $key = next_expr($expr);
+            }
+            elsif ($prevexpr) {
+                die "Makefile conditional syntax error: missing op in \"$_[1]\" at \"$prevexpr\".\n";
+            }
+            else {
+                last LOOP; # end of expr, nothing left
+            }
+            if ($prevexpr eq $expr) {
+                die "Makefile conditional parser error in \"$_[1]\" at \"$prevexpr\".\n";
+            }
+        }
+        return $truth;
+    }
+    cond_eval_single($conf, $expr);
+}
+
 sub append_configure_log {
     my $conf = shift;
     my $target = shift;
--- origsrc/parrot-0.7.1/lib/Parrot/Configure/Step/Methods.pm	2008-09-17 00:14:43.000000000 +0200
+++ src/parrot-0.7.1/lib/Parrot/Configure/Step/Methods.pm	2008-09-18 20:27:48.187500000 +0200
@@ -119,6 +119,7 @@
         cc              => $cc,
         win32_gcc       => '-lalpha32 -lalpha32 -lopenalpha32',
         win32_nongcc    => 'alpha.lib',
+        cygwin          => '-lalpha32 -lXalpha32', # optional
         darwin          => 'alphadarwin.lib',
         default         => '-lalpha',
     } );
@@ -138,6 +139,8 @@
 
 =item * MSWin32 with any C-compiler other than F<gcc>.
 
+=item * Cygwin to override Mingw.
+
 =item * Darwin.
 
 =back
@@ -173,7 +176,7 @@
 
 =item * C<win32_gcc>
 
-Libraries to be added where OS is mswin32 and C-compiler is F<gcc>.
+Libraries to be added where OS is mswin32 or cygwin and C-compiler is F<gcc>.
 Single whitespace-delimited string.
 
 =item * C<win32_nongcc>
@@ -181,6 +184,12 @@
 Libraries to be added where OS is mswin32 and C-compiler is not F<gcc>.
 Single whitespace-delimited string.
 
+=item * C<cygwin>
+
+Optional libraries to be added where OS is cygwin. This overrides C<win32_gcc>
+if defined.
+Single whitespace-delimited string.
+
 =item * C<darwin>
 
 Libraries to be added where OS is Darwin.  Do not supply a value if the value
@@ -197,7 +206,8 @@
     my $args = shift;
     croak "_add_to_libs() takes hashref: $!" unless ref($args) eq 'HASH';
     my $platform =
-          (($args->{osname} =~ /mswin32/i ||
+           $args->{osname} =~ /cygwin/i      ? 'cygwin'
+        :(($args->{osname} =~ /mswin32/i ||
            $args->{osname} =~ /cygwin/i) &&
            $args->{cc} =~ /^gcc/i)          ? 'win32_gcc'
         :  $args->{osname} =~ /mswin32/i    ? 'win32_nongcc'
--- origsrc/parrot-0.7.1/lib/Parrot/Configure.pm	2008-09-17 00:14:46.000000000 +0200
+++ src/parrot-0.7.1/lib/Parrot/Configure.pm	2008-09-18 20:27:48.218750000 +0200
@@ -237,13 +237,8 @@
     # We make certain that argument to --fatal-step is a comma-delimited
     # string of configuration steps, each of which is a string delimited by
     # two colons, the first half of which is one of init|inter|auto|gen
-#<<<<<<< .working
     elsif ( defined ( $fatal_step_str ) ) {
         %steps_to_die_for = _handle_fatal_step_option( $fatal_step_str );
-#=======
-#    elsif ( defined ( $fatal_step ) ) {
-#        %steps_to_die_for = $conf->_handle_fatal_step_option( $fatal_step );
-#>>>>>>> .merge-right.r30499
     }
     else {
         # No action needed; this is the default case where no step is fatal
--- origsrc/parrot-0.7.1/lib/Parrot/Pmc2c/Pmc2cMain.pm	2008-09-17 00:14:46.000000000 +0200
+++ src/parrot-0.7.1/lib/Parrot/Pmc2c/Pmc2cMain.pm	2008-09-21 16:23:17.875000000 +0200
@@ -1,9 +1,9 @@
 # Copyright (C) 2004-2006, The Perl Foundation.
-# $Id: Pmc2cMain.pm 28147 2008-06-07 02:02:31Z jkeenan $
+# $Id: Pmc2cMain.pm 31315 2008-09-21 14:25:18Z rurban $
 package Parrot::Pmc2c::Pmc2cMain;
 use strict;
 use warnings;
-use Storable ();
+use Storable 2.13;
 use Parrot::PMC ();
 use Parrot::Pmc2c::VTable ();
 use Parrot::Pmc2c::Dumper;
--- origsrc/parrot-0.7.1/runtime/parrot/include/test_more.pir	2008-09-17 00:14:08.000000000 +0200
+++ src/parrot-0.7.1/runtime/parrot/include/test_more.pir	2008-09-18 20:27:48.250000000 +0200
@@ -11,7 +11,7 @@
 
 =cut
 
-    load_bytecode 'runtime/parrot/library/Test/More.pbc'
+    load_bytecode 'Test/More.pbc'
 
     # get the testing functions
     .local pmc exports, curr_namespace, test_namespace
--- origsrc/parrot-0.7.1/runtime/parrot/library/config.pir	2008-09-17 00:14:12.000000000 +0200
+++ src/parrot-0.7.1/runtime/parrot/library/config.pir	2008-09-18 20:27:48.281250000 +0200
@@ -48,12 +48,28 @@
 .sub _config
     .local pmc CONF
     .local string conf_file
+
+    #unless find_sub('_config') goto runtime
+    #$P0 = _config()
+    #.return( $P0 )
+
+runtime:
+    # conf_file = Parrot_locate_runtime_file_str(interp, "config.fpmc", 2)
     conf_file = interpinfo .INTERPINFO_RUNTIME_PREFIX
     conf_file .= "/runtime/parrot/include/config.fpmc"
+    stat $I0, conf_file, 0
+    if $I0 goto conf
 
+    # If installed into /usr/lib/parrot, not /usr/runtime/parrot
+    # This logic has to be reversed when installed versions should run faster
+    # than source builds.
+    conf_file = interpinfo .INTERPINFO_RUNTIME_PREFIX
+    conf_file .= "/lib/parrot/include/config.fpmc"
+conf:
     open CONF, conf_file, "<"
     $I0 = defined CONF
     if $I0 goto ok1
+
     printerr "Can't read '"
     printerr conf_file
     printerr "': "
--- origsrc/parrot-0.7.1/runtime/parrot/library/parrotlib.pir	2008-09-17 00:14:12.000000000 +0200
+++ src/parrot-0.7.1/runtime/parrot/library/parrotlib.pir	2008-09-18 20:27:48.296875000 +0200
@@ -24,14 +24,13 @@
     .local pmc includes
     .local string root
 
-
-    # XXX todo: get root from config
     $P0 = new 'Env'
     root = $P0["PARROT_RUNTIME_ROOT"]
     length $I0, root
     if $I0 == 0 goto DEFAULT
     branch OKAY
 DEFAULT:
+    # lib/parrot on installed, or runtime
     root = "runtime/parrot"
 OKAY:
 
@@ -138,13 +137,22 @@
     stat $I0, name, 0
     if $I0 goto END
 
-    name = "runtime/parrot/dynext/"
+    .include "interpinfo.pasm"
+    name = interpinfo .INTERPINFO_RUNTIME_PREFIX
+    concat name, "lib/parrot/dynext/"
     concat name, request
     stat $I0, name, 0
     if $I0 goto END
 
+    concat name, ext
+    stat $I0, name, 0
+    if $I0 goto END
+
     name = "runtime/parrot/dynext/"
     concat name, request
+    stat $I0, name, 0
+    if $I0 goto END
+
     concat name, ext
     stat $I0, name, 0
     if $I0 goto END
--- origsrc/parrot-0.7.1/src/library.c	2008-09-17 00:14:30.000000000 +0200
+++ src/parrot-0.7.1/src/library.c	2008-09-18 20:27:48.328125000 +0200
@@ -1,6 +1,6 @@
 /*
 Copyright (C) 2004-2007, The Perl Foundation.
-$Id: library.c 31092 2008-09-13 22:01:35Z rurban $
+$Id: library.c 31131 2008-09-14 19:33:56Z rurban $
 
 =head1 NAME
 
@@ -121,64 +121,111 @@
 Platform code may add, delete, or replace search path entries as needed. See
 also F<include/parrot/library.h> for C<enum_lib_paths>.
 
+#ifdef ENABLE_PARROT_LIBRARY_INSTALLED
+then the config hash is checked for the path prefix. This still crashes.
+
 =cut
 
 */
 
+#undef ENABLE_PARROT_LIBRARY_INSTALLED
+
 void
 parrot_init_library_paths(PARROT_INTERP)
 {
     PMC *paths;
     STRING *entry;
+    INTVAL installed = 0;
 
     PMC * const iglobals = interp->iglobals;
     /* create the lib_paths array */
     PMC * const lib_paths = pmc_new(interp, enum_class_FixedPMCArray);
+#ifdef ENABLE_PARROT_LIBRARY_INSTALLED
+    PMC * const config_hash = VTABLE_get_pmc_keyed_int(interp, iglobals, IGLOBALS_CONFIG_HASH);
+    STRING * const key = CONST_STRING(interp, "installed");
+#endif
 
     VTABLE_set_integer_native(interp, lib_paths, PARROT_LIB_PATH_SIZE);
     VTABLE_set_pmc_keyed_int(interp, iglobals,
             IGLOBALS_LIB_PATHS, lib_paths);
+#ifdef ENABLE_PARROT_LIBRARY_INSTALLED
+    if (VTABLE_elements(interp, config_hash) &&
+        VTABLE_exists_keyed_str(interp, config_hash, key))) {
+        installed = VTABLE_get_integer_keyed_str(interp, config_hash, key);
+    }
+#endif
+
     /* each is an array of strings */
     /* define include paths */
     paths = pmc_new(interp, enum_class_ResizableStringArray);
     VTABLE_set_pmc_keyed_int(interp, lib_paths,
             PARROT_LIB_PATH_INCLUDE, paths);
-    entry = CONST_STRING(interp, "runtime/parrot/include/");
-    VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "runtime/parrot/");
-    VTABLE_push_string(interp, paths, entry);
+#ifdef ENABLE_PARROT_LIBRARY_INSTALLED
+    if (installed) {
+#endif
+        entry = CONST_STRING(interp, "lib/parrot/include/");
+        VTABLE_push_string(interp, paths, entry);
+        entry = CONST_STRING(interp, "lib/parrot/");
+        VTABLE_push_string(interp, paths, entry);
+#ifdef ENABLE_PARROT_LIBRARY_INSTALLED
+    }
+    else {
+#endif
+        entry = CONST_STRING(interp, "runtime/parrot/include/");
+        VTABLE_push_string(interp, paths, entry);
+        entry = CONST_STRING(interp, "runtime/parrot/");
+        VTABLE_push_string(interp, paths, entry);
+#ifdef ENABLE_PARROT_LIBRARY_INSTALLED
+    }
+#endif
     entry = CONST_STRING(interp, "./");
     VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "lib/parrot/include/");
-    VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "lib/parrot/");
-    VTABLE_push_string(interp, paths, entry);
 
     /* define library paths */
     paths = pmc_new(interp, enum_class_ResizableStringArray);
     VTABLE_set_pmc_keyed_int(interp, lib_paths,
             PARROT_LIB_PATH_LIBRARY, paths);
-    entry = CONST_STRING(interp, "runtime/parrot/library/");
-    VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "runtime/parrot/");
-    VTABLE_push_string(interp, paths, entry);
+#ifdef ENABLE_PARROT_LIBRARY_INSTALLED
+    if (installed) {
+#endif
+        entry = CONST_STRING(interp, "lib/parrot/library/");
+        VTABLE_push_string(interp, paths, entry);
+        entry = CONST_STRING(interp, "lib/parrot/");
+        VTABLE_push_string(interp, paths, entry);
+#ifdef ENABLE_PARROT_LIBRARY_INSTALLED
+    }
+    else {
+#endif
+        entry = CONST_STRING(interp, "runtime/parrot/library/");
+        VTABLE_push_string(interp, paths, entry);
+        entry = CONST_STRING(interp, "runtime/parrot/");
+        VTABLE_push_string(interp, paths, entry);
+#ifdef ENABLE_PARROT_LIBRARY_INSTALLED
+    }
+#endif
     entry = CONST_STRING(interp, "./");
     VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "lib/parrot/library/");
-    VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "lib/parrot/");
-    VTABLE_push_string(interp, paths, entry);
 
     /* define dynext paths */
     paths = pmc_new(interp, enum_class_ResizableStringArray);
     VTABLE_set_pmc_keyed_int(interp, lib_paths,
             PARROT_LIB_PATH_DYNEXT, paths);
-    entry = CONST_STRING(interp, "runtime/parrot/dynext/");
-    VTABLE_push_string(interp, paths, entry);
+#ifdef ENABLE_PARROT_LIBRARY_INSTALLED
+    if (installed) {
+#endif
+        entry = CONST_STRING(interp, "lib/parrot/dynext/");
+        VTABLE_push_string(interp, paths, entry);
+#ifdef ENABLE_PARROT_LIBRARY_INSTALLED
+    }
+    else {
+#endif
+        entry = CONST_STRING(interp, "runtime/parrot/dynext/");
+        VTABLE_push_string(interp, paths, entry);
+#ifdef ENABLE_PARROT_LIBRARY_INSTALLED
+    }
+#endif
     entry = CONST_STRING(interp, "");
     VTABLE_push_string(interp, paths, entry);
-    entry = CONST_STRING(interp, "lib/parrot/dynext/");
-    VTABLE_push_string(interp, paths, entry);
 
     /* shared exts */
     paths = pmc_new(interp, enum_class_ResizableStringArray);
@@ -452,7 +499,7 @@
 
 =item C<static STRING* try_bytecode_extensions>
 
-Guess extensions, so that the user can drop the extensions
+guess extensions, so that the user can drop the extensions
 leaving it up to the build process/install whether or not
 a .pbc, .pasm or a .pir file is used.
 
@@ -470,7 +517,7 @@
     int guess;
 
     /*
-      First try the path without guessing the extension to ensure compatibility
+      first try the path without guessing the extension to ensure compatibility
       with existing code.
      */
 
@@ -481,8 +528,8 @@
         return result;
 
     /*
-      Start guessing now. This version tries to find the lowest form of the
-      code, starting with bytecode and working up to PIR. Note the atypical
+      start guessing now. this version tries to find the lowest form of the
+      code, starting with bytecode and working up to PIR. note the atypical
       loop control. This is so the array can easily be processed in reverse.
      */
 
--- origsrc/parrot-0.7.1/src/pmc/hash.pmc	2008-09-17 00:14:25.000000000 +0200
+++ src/parrot-0.7.1/src/pmc/hash.pmc	2008-09-18 22:12:27.625000000 +0200
@@ -690,9 +690,9 @@
         const Hash * const hash = (Hash *)PMC_struct_val(SELF);
 
         /* check if we really have Hash_key_type_int */
-        if (hash->key_type == Hash_key_type_int)
+        if (hash->key_type == Hash_key_type_int) {
             parrot_hash_put(INTERP, hash, key, value);
-        else {
+        } else {
             SUPER(key, value);
         }
     }
--- origsrc/parrot-0.7.1/t/steps/gen_makefiles-01.t	2008-09-17 00:15:16.000000000 +0200
+++ src/parrot-0.7.1/t/steps/gen_makefiles-01.t	2008-09-18 20:27:48.359375000 +0200
@@ -5,9 +5,80 @@
 
 use strict;
 use warnings;
-use Test::More tests =>  7;
+my @cond_tests;
+my @conf_args = ( true => 1, false => 0, value => 'xx' );
+BEGIN {
+    @cond_tests =
+      (
+       # perl-syntax       true or false
+       ["IF(true)", 		1],
+       ["IF(false)", 		0],
+       ["UNLESS(true)",	        0],
+       ["UNLESS(false)",	1],
+       ["IF(true | false)",	1],
+       ["IF(true & false)",     0],
+       ["IF(true or true)",     1],
+       ["IF(true or false)",    1],
+       ["IF(false or true)",    1],
+       ["IF(false or false)",   0],
+       ["IF(true and true)",    1],
+       ["IF(true and false)",   0],
+       ["IF(false and true)",   0],
+       ["IF(false and false)",  0],
+       ["UNLESS(true|false)",   0],
+       ["UNLESS(true&false)",   1],
+       ["IF(!false)", 		1],
+       ["IF(true)", 		1],
+       ["ELSIF(value)", 	0],
+       ["ELSE", 	        0],
+       ["IF(false)", 		0],
+       ["ELSIF(value)", 	1],
+       ["ELSE", 	        0],
+       ["IF(false)", 		0],
+       ["ELSIF(false)", 	0],
+       ["ELSE", 	        1],
+       # Strangle the parser a bit
+       ["IF(true and (!false and value))",  1],
+       ["IF(true and (!false) and value)",  1],
+       ["IF(true and !false and value)",    1, 'no parens'],
+       ["IF(true and not false and value)", 1, 'no parens'],
+       ["IF(true&!false&value)",            1],
+       ["IF(false or (!false and value))",  1, 'not parser problem'],
+       ["UNLESS(!(true&!false&value))",     1, 'no ws, but nested parens'],
+       ["IF(true&(!false&false))",          0, 'not precedence'],
+       ["IF(true&(!false&value))",          1],
+       ["IF(not true and value)",           0, 'not precedence over and'],
+       ["IF(not false and value)",          1],
+       ["IF((not false) and value)",        1],
+       ["IF(not (false and value))",        1],
+       ["IF(not (false or value))",         0],
+       ["IF(true and not false)",           1],
+       # platform
+       ["IF(someplatform)",		    1],
+       ["IF(not someplatform)",		    0],
+       ["UNLESS(someplatform)",		    0],
+       ["UNLESS(not someplatform)",	    1],
+       # key==value
+       ["IF(value==xx)",                    1],
+       ["IF(value==xxy)",                   0],
+       ["UNLESS(value==xx)",                0],
+       ["UNLESS(value==xxy)",               1],
+       ["IF(true & (value==xx & (!false)))",1],
+       # These are invalid:
+       #["IF(value == xx)",                  0], # invalid op error
+       #["IF(value = xx)",                   0], # invalid op error
+       ["IF(value=xx)",                     0], # also invalid, no warning. checks for key value=xx
+
+       # Legacy syntax                 true or false
+       ["CONDITIONED_LINE(true)", 	    1],
+       ["INVERSE_CONDITIONED_LINE(true)",   0],
+       ["CONDITIONED_LINE(false)", 	    0],
+       ["INVERSE_CONDITIONED_LINE(false)",  1],
+      );
+}
+use Test::More tests => (7 + scalar(@cond_tests));
 use Carp;
-use lib qw( lib );
+use lib qw( . lib );
 use_ok('config::gen::makefiles');
 use Parrot::Configure;
 use Parrot::Configure::Options qw( process_options );
@@ -38,6 +109,52 @@
 is($missing_SOURCE, 0, "No Makefile source file missing");
 ok(-f $step->{CFLAGS_source}, "CFLAGS source file located");
 
+my $i = undef;
+sub result {
+    my $c = shift;
+    my $s = $c->[0];
+    $s =~ s/^\+/plus_/;
+    $s =~ s/^\-/minus_/;
+    $s =~ s/\|/OR/g;
+    $s =~ s/\&/AND/g;
+    $s =~ s/\!/NOT/g;
+    $s =~ s/[\()]//g;
+    $s =~ s/ /_/g;
+    $s .= ("_".++$i) if $s =~ /^(ELSE|ELSIF)/;
+    return $s."=".($c->[1]?"true":"false");
+}
+# test #+(keys):line RT #57548
+$conf->data->set( @conf_args, ('osname' => 'someplatform' ) );
+open IN, ">", "Makefile_$$.in";
+print IN "# There should only be =true results in .out\n";
+for my $c (@cond_tests) {
+    my $result = result($c);
+    print IN "#$c->[0]:$result\n";
+}
+close IN;
+$conf->genfile("Makefile_$$.in", "Makefile_$$.out",
+	       (makefile => 1, conditioned_lines => 1));
+open OUT, "<", "Makefile_$$.out";
+my $f;
+{
+    local $/;
+    $f = <OUT>;
+}
+END {
+    unlink "Makefile_$$.in", "Makefile_$$.out";
+}
+$i = undef;
+for my $c (@cond_tests) {
+    my $result = result($c);
+    if ($c->[2] and $c->[2] =~ /^TODO(.*)$/) {
+        local $TODO = $1;
+        ok(($c->[1] ? $f =~ /^$result$/m : $f !~ /^$result$/m), "$result");
+    }
+    else {
+        ok(($c->[1] ? $f =~ /^$result$/m : $f !~ /^$result$/m), "$result".($c->[2]?" $c->[2]":''));
+    }
+}
+
 pass("Completed all tests in $0");
 
 ################### DOCUMENTATION ###################
@@ -60,6 +177,8 @@
 
 James E Keenan
 
+Reini Urban (#+, #-)
+
 =head1 SEE ALSO
 
 config::gen::makefiles, F<Configure.pl>.
--- origsrc/parrot-0.7.1/tools/dev/install_files.pl	2008-09-17 00:14:40.000000000 +0200
+++ src/parrot-0.7.1/tools/dev/install_files.pl	2008-09-19 19:15:30.187500000 +0200
@@ -126,7 +126,7 @@
     bindir      => '/usr/bin',
     libdir      => '/usr/lib',
     includedir  => '/usr/include',
-    docdir      => '/usr/share/doc',
+    docdir      => '/usr/share/doc/parrot',
     'dry-run'   => 0,
 );
 
@@ -189,6 +189,7 @@
     }
     elsif ( $meta{include} ) {
         $dest =~ s/^include//;
+        $dest =~ s/^src/parrot/;
         $dest = File::Spec->catdir( $options{includedir}, $dest );
     }
     elsif ( $meta{doc} ) {
@@ -197,13 +198,15 @@
     elsif ( $meta{pkgconfig} ) {
 
         # For the time being this is hardcoded as being installed under libdir
-        # as it is typically donw with automake installed packages.  If there
+        # as it is typically done with automake installed packages.  If there
         # is a use case to make this configurable we'll add a seperate
         # --pkgconfigdir option.
         $dest = File::Spec->catdir( $options{libdir}, 'pkgconfig', $dest );
     }
     else {
-        $dest =~ s/^runtime/lib/ if /\[library]/;
+        $dest =~ s|^src/|lib/parrot/src/|;
+        next if $dest =~ /^compilers|config|language|tools/;
+        $dest =~ s/^runtime/lib/;
         $dest = File::Spec->catdir( $options{prefix}, $dest );
     }
 
@@ -243,6 +246,7 @@
     }
     else {
         next unless -e $src;
+        next if $^O eq 'cygwin' and -e "$src.exe"; # cygwin stat works, but copy not
         copy( $src, $dest ) or die "copy $src to $dest: $!\n";
         print "$dest\n";
     }
--- origsrc/parrot-0.7.1/tools/dev/mk_language_shell.pl	2008-09-17 00:14:40.000000000 +0200
+++ src/parrot-0.7.1/tools/dev/mk_language_shell.pl	2008-10-03 12:02:06.312500000 +0200
@@ -23,13 +23,19 @@
 files and directories (relative to C<path>, which defaults
 to F<languages/xyz> if an explicit C<path> isn't given):
 
+    MAINTAINER
     README
+    STATUS
     xyz.pir
     config/makefiles/root.in
+    docs/running.pod
+    docs/Xyz.pod
+    src/builtins/say.pir
     src/parser/grammar.pg
     src/parser/grammar-oper.pg
     src/parser/actions.pm
-    src/builtins/say.pir
+    src/pmc/Xyz.pmc
+    src/ops/Xyz.ops
     t/harness
     t/00-sanity.t
 
@@ -135,6 +141,20 @@
 __README__
 Language '@lang@' was created with @script@, @rev@.
 
+See docs/@lang@.pod for the documentation, and
+docs/running.pod for the command-line options.
+
+__MAINTAINER__
+# @Id@
+
+N: My Name
+E: My Email
+
+__STATUS__
+Number of tests passing:
+Percentage of implementation finished:
+TODO:
+
 __config/makefiles/root.in__
 ## @Id@
 
@@ -142,33 +162,48 @@
 PARROT_ARGS =
 
 ## configuration settings
+HLLNAME       = @lclang@
 BUILD_DIR     = @build_dir@
 LOAD_EXT      = @load_ext@
 O             = @o@
+BIN_DIR       = @bin_dir@
+LIB_DIR       = @lib_dir@
+DOC_DIR       = @doc_dir@
+MANDIR	      = @mandir@
+HLL_LIBPATH   = $(BUILD_DIR)/runtime/parrot/library
+PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
 
 ## Setup some commands
 LN_S          = @lns@
 PERL          = @perl@
 RM_RF         = @rm_rf@
 CP            = @cp@
+MKPATH        = @mkpath@
+POD2MAN       = pod2man
+#IF(parrot_is_shared and not(cygwin or win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
 PARROT        = ../../parrot@exe@
+PBC_TO_EXE    = ../../pbc_to_exe@exe@
 CAT           = $(PERL) -MExtUtils::Command -e cat
-BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
+PMCBUILD      = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
+OPSBUILD      = $(PERL) $(BUILD_DIR)/tools/build/dynoplibs.pl
 RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
-#CONDITIONED_LINE(darwin):
-#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
-#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
+#IF(darwin):
+#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
+#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@
 
 ## places to look for things
-PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
 PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
+PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
 PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
 NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
-PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
 
 PMC_DIR       = src/pmc
+OPS_DIR       = src/ops
+OPSLIB        = @lclang@
 
-all: @lclang@.pbc
+build: @lclang@.pbc
+
+all: @lclang@.pbc Makefile @lclang@@exe@ installable
 
 @UCLANG@_GROUP = $(PMC_DIR)/@lclang@_group$(LOAD_EXT)
 
@@ -176,18 +211,23 @@
   src/gen_grammar.pir \
   src/gen_actions.pir \
   src/gen_builtins.pir \
-#  $(@UCLANG@_GROUP)
+  $(@UCLANG@_GROUP)
 
 BUILTINS_PIR = \
-  src/builtins/say.pir \
+  src/builtins/say.pir
 
-# PMCS = @lclang@
-# PMC_SOURCES = $(PMC_DIR)/@lclang@.pmc
+PMCS = @lang@
+PMC_SOURCES = $(PMC_DIR)/@lang@.pmc
+OPS_SOURCES = $(OPS_DIR)/@lang@.ops
+DOCS = MAINTAINER README TODO
 
 # the default target
-@lclang@.pbc: $(PARROT) $(SOURCES)
+@lclang@.pbc: $(SOURCES)
 	$(PARROT) $(PARROT_ARGS) -o @lclang@.pbc @lclang@.pir
 
+@lclang@@exe@: @lclang@.pbc
+	$(PBC_TO_EXE) @lclang@.pbc
+
 src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg src/parser/grammar-oper.pg
 	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
 	    --output=src/gen_grammar.pir \
@@ -201,11 +241,24 @@
 src/gen_builtins.pir: $(BUILTINS_PIR)
 	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir
 
-$(@UCLANG@_GROUP): $(PARROT) $(PMC_SOURCES)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
-	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)
+$(@UCLANG@_GROUP): $(PMC_SOURCES)
+	@cd $(PMC_DIR) && $(PMCBUILD) generate $(PMCS)
+	@cd $(PMC_DIR) && $(PMCBUILD) compile  $(PMCS)
+	@cd $(PMC_DIR) && $(PMCBUILD) linklibs $(PMCS)
+	@cd $(PMC_DIR) && $(PMCBUILD) copy "--destination=$(PARROT_DYNEXT)" $(PMCS)
+
+ops/@lang@$(LOAD_EXT) : $(OPS_SOURCES)
+	@cd $(OPS_DIR) && $(OPSBUILD) generate $(OPSLIB)
+	@cd $(OPS_DIR) && $(OPSBUILD) compile  $(OPSLIB)
+	@cd $(OPS_DIR) && $(OPSBUILD) linklibs $(OPSLIB)
+	@cd $(OPS_DIR) && $(OPSBUILD) copy "--destination=$(PARROT_DYNEXT)" $(OPSLIB)
+
+installable : installable_@lclang@@exe@ $(@UCLANG@_GROUP) ops/@lang@$(LOAD_EXT)
+	cp installable_@lclang@@exe@ $(BUILD_DIR)
+	$(CP) @lclang@.pbc $(HLL_LIBPATH)/@lclang@.pbc
+
+installable_@lclang@@exe@ : @lclang@.pbc
+	$(PBC_TO_EXE) @lclang@.pbc --install
 
 # regenerate the Makefile
 Makefile: config/makefiles/root.in
@@ -216,10 +269,16 @@
 	@echo ""
 	@echo "Following targets are available for the user:"
 	@echo ""
-	@echo "  all:               @lclang@.pbc"
+	@echo "  build:             @lclang@.pbc"
 	@echo "                     This is the default."
+	@echo "  @lclang@@exe@      Self-hosting binary not to be installed."
+	@echo "  all:               @lclang@.pbc @lclang@@exe@ installable Makefile"
+	@echo "  installable:       Create libs and self-hosting binaries to be installed."
+	@echo "  install:           Install the installable targets and docs."
+	@echo ""
 	@echo "Testing:"
 	@echo "  test:              Run the test suite."
+	@echo "  test-installable:  Test self-hosting targets."
 	@echo "  testclean:         Clean up test results."
 	@echo ""
 	@echo "Cleaning:"
@@ -234,7 +293,21 @@
 test: all
 	$(PERL) t/harness
 
-# this target has nothing to do
+# TODO: rename build_dir. basic run for missing libs
+test-installable : installable
+	echo "1" | ./installable_@lclang@@exe@
+
+install : installable
+	$(CP) installable_@lclang@@exe@ $(DESTDIR)$(BIN_DIR)/parrot-@lclang@@exe@
+	@cd $(OPS_DIR) && $(OPSBUILD) copy "--destination=$(DESTDIR)$(LIB_DIR)/parrot/dynext" $(OPSLIB)
+	@cd $(PMC_DIR) && $(PMCBUILD) copy "--destination=$(DESTDIR)$(LIB_DIR)/parrot/dynext" $(PMCS)
+	$(CP) @lclang@.pbc $(DESTDIR)$(LIB_DIR)/parrot/library/@lclang@.pbc
+	-$(MKPATH) $(DESTDIR)$(MANDIR)/man1
+	$(POD2MAN) docs/running.pod > $(DESTDIR)$(MANDIR)/man1/parrot-@lclang@.1
+	-$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/@lclang@
+	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/@lclang@
+
+# clean intermediate test files
 testclean:
 
 CLEANUPS = \
@@ -252,6 +325,9 @@
   $(PMC_DIR)/*.manifest \
   $(PMC_DIR)/*.pdb \
   $(PMC_DIR)/*.lib \
+  @lclang@@exe@ \
+  $(HLL_LIBPATH)/@lclang@.pbc \
+  installable_@lclang@@exe@ \
 
 
 clean: testclean
@@ -262,7 +338,47 @@
 
 distclean: realclean
 
+__docs/@lang@.pod__
+# @Id@
+
+=head1 @lang@
+
+=head1 Design
+
+=head1 SEE ALSO
+
+=cut
+
+# Local Variables:
+#   fill-column:78
+# End:
+# vim: expandtab shiftwidth=4:
+__docs/running.pod__
+# @Id@
+
+=head1 Running
 
+This document describes how to use the command line @lclang@ program, which
+...
+
+=head2 Usage
+
+  parrot @lclang@.pbc [OPTIONS] <input>
+
+or
+
+  parrot-@lclang@@exe [OPTIONS] <input>
+
+A number of additional options are available:
+
+  -q  Quiet mode; suppress output of summary at the end.
+
+=cut
+
+# Local Variables:
+#   fill-column:78
+# End:
+# vim: expandtab shiftwidth=4:
 __@lclang@.pir__
 =head1 TITLE
 
@@ -487,6 +603,221 @@
 # End:
 # vim: expandtab shiftwidth=4:
 
+__src/pmc/@lang@.pmc__
+/*
+Copyright (C) 20xx, The Perl Foundation.
+@Id@
+
+=head1 NAME
+
+src/pmc/@lang@.pmc - @lang@
+
+=head1 DESCRIPTION
+
+These are the vtable functions for the @lang@ class.
+
+=cut
+
+=head2 Helper functions
+
+=over 4
+
+=item INTVAL size(INTERP, PMC, PMC)
+
+*/
+
+#include "parrot/parrot.h"
+
+static INTVAL
+size(Interp *interp, PMC* self, PMC* obj)
+{
+    INTVAL retval;
+    INTVAL dimension;
+    INTVAL length;
+    INTVAL pos;
+
+    if (!obj || PMC_IS_NULL(obj)) {
+        /* not set, so a simple 1D */
+        return VTABLE_get_integer(interp, self);
+    }
+
+    retval = 1;
+    dimension = VTABLE_get_integer(interp, obj);
+    for (pos = 0; pos < dimension; pos++)
+    {
+        length = VTABLE_get_integer_keyed_int(interp, obj, pos);
+        retval *= length;
+    }
+    return retval;
+}
+
+/*
+
+=back
+
+=head2 Methods
+
+=over 4
+
+=cut
+
+*/
+
+pmclass @lang@
+    extends ResizablePMCArray
+    provides array
+    group   @lclang@_group
+
+    need_ext
+    dynpmc
+    {
+/*
+
+=item C<void class_init()>
+
+initialize the pmc class. Store some constants, etc.
+
+=cut
+
+*/
+
+    /* RT#48194: move any constant string declarations here so we just do them once. */
+    void class_init() {
+    }
+
+
+/*
+
+=item C<PMC* init()>
+
+initialize the instance.
+
+=cut
+
+*/
+
+void init() {
+    SUPER();
+};
+
+=item C<PMC* get()>
+
+Returns a vector-like PMC.
+
+=cut
+
+*/
+
+    METHOD PMC* get() {
+        PMC* property;
+        INTVAL array_t;
+        STRING* property_name;
+
+        property_name = string_from_literal(INTERP, "property");
+        shape = VTABLE_getprop(INTERP, SELF, property_name);
+        if (PMC_IS_NULL(property)) {
+           /*
+            * No property has been set yet. This means that we are
+            * a simple vector
+            *
+            * we use our own type here. Perhaps a better way to
+            * specify it?
+            */
+            /*
+            array_t = pmc_type(INTERP,
+                string_from_literal(INTERP, "@lang@"));
+            */
+            property = pmc_new(INTERP, VTABLE_type(INTERP, SELF));
+
+            VTABLE_set_integer_native(INTERP, property, 1);
+            VTABLE_set_integer_keyed_int(INTERP, property, 0,
+                VTABLE_get_integer(INTERP, SELF));
+            VTABLE_setprop(INTERP, SELF, property_name, property);
+        }
+        RETURN(PMC* property);
+    }
+
+/*
+
+=item C<PMC* set()>
+
+Change the existing @lang@ by passing in an existing vector.
+
+If the new property is larger than our old property, pad the end of the APLv
+with elements from the beginning.
+
+If the new property is shorter than our old property, truncate elements from
+the end of the APLv.
+
+=cut
+
+*/
+
+    METHOD set(PMC *new_property) {
+        STRING* property_name;
+        PMC*    old_property;
+        INTVAL  old_size, new_size, pos;
+
+        /* save the old property momentarily, set the new property */
+        property_name = string_from_literal(INTERP, "property");
+        old_property = VTABLE_getprop(INTERP, SELF, property_name);
+        VTABLE_setprop(INTERP, SELF, property_name, new_property);
+
+        /* how big are these property? */
+        old_size = size(INTERP, SELF, old_property);
+        new_size = size(INTERP, SELF, new_property);
+
+        if (old_size > new_size) {
+            for (; new_size != old_size; new_size++) {
+                VTABLE_pop_pmc(INTERP, SELF);
+            }
+        } else if (new_size > old_size) {
+            pos = 0;
+            for (; new_size != old_size; old_size++, pos++) {
+                /* RT#48196 clone this? */
+                VTABLE_push_pmc(INTERP, SELF,
+                    VTABLE_get_pmc_keyed_int(INTERP, SELF, pos));
+            }
+        }
+    }
+
+/*
+
+=back
+
+=cut
+
+*/
+
+}
+
+/*
+ * Local variables:
+ *   c-file-style: "parrot"
+ * End:
+ * vim: expandtab shiftwidth=4:
+ */
+__src/ops/@lang@.ops__
+/*
+ * @id@
+ * Copyright (C) 20xx, The Perl Foundation.
+ */
+
+#include "parrot/dynext.h"
+VERSION = PARROT_VERSION;
+
+/* Op to get the address of a PMC. */
+inline op @lclang@_pmc_addr(out INT, invar PMC) :base_core {
+    $1 = (int) $2;
+    goto NEXT();
+}
+
+/*
+ * Local variables:
+ *   c-file-style: "parrot"
+ * End:
+ * vim: expandtab shiftwidth=4:
+ */
 __src/builtins/say.pir__
 # @Id@
 
--- origsrc/parrot-0.7.1/tools/install/smoke.pl	2008-09-17 00:14:38.000000000 +0200
+++ src/parrot-0.7.1/tools/install/smoke.pl	2008-09-18 20:27:48.453125000 +0200
@@ -4,6 +4,10 @@
 
 use strict;
 use warnings;
+use 5.008;
+use Getopt::Long;
+use lib qw( lib );
+use vars qw( %PConfig );
 
 use Test::More tests => 29;
 
@@ -13,39 +17,117 @@
 
 =head1 SYNOPSIS
 
+  parrot in bin
+
     % cd /usr/local/parrot-$version
-    % perl tools/install/smoke.pl
+    % perl tools/install/smoke.pl -Ilib
+
+  parrot in .
+
+    % perl tools/install/smoke.pl --bindir=.
+
+  test installation in DESTDIR:
+
+    % cd /usr/src/parrot
+    % mkdir .inst
+    % make install DESTDIR=.inst
+    % perl tools/install/smoke.pl DESTDIR=.inst
+
 
 =head1 DESCRIPTION
 
 Checks that most of things run (or just start) into the install directory,
-try to detect missing part.
+try to detect missing parts.
+
+=head1 OPTIONS
+
+=over
+
+=item -I libdir
+
+Add libdir to the libpath to find Parrot::Config
+
+=item --bindir=/usr/bin
+
+Override Parrot::Config bindir
+
+=item --libdir=/usr/lib
+
+Override Parrot::Config libdir
+
+=item --prefix=/usr
+
+Override Parrot::Config prefix and adjust
+libdir and bindir accordingly.
+
+=item DESTDIR=instpath
+
+Use the temp. installation in instpath.
+
+=back
 
 =cut
 
+my (@libdirs, $prefix, $bindir, $libdir, $DESTDIR);
+my $opts = GetOptions( 'I=s'       => \@libdirs,
+                       'prefix=s'  => \$prefix,
+                       'bindir=s'  => \$bindir,
+                       'libdir=s'  => \$libdir,
+                       'DESTDIR=s' => \$DESTDIR,
+                     );
+if (@libdirs) {
+    push @INC, @libdirs;
+}
+require Parrot::Config;
+Parrot::Config->import;
+require Parrot::Test;
+
+$bindir = $PConfig{bindir} unless $bindir;
+$libdir = $PConfig{libdir} unless $libdir;
+if ($prefix) {
+    $bindir = $prefix . "/bin";
+    $libdir = $prefix . "/lib";
+}
+# Check for DESTDIR arg and adjust the path
+if (@ARGV and $ARGV[0] =~ /^DESTDIR/) {
+    if ($ARGV[0] =~ /^DESTDIR=(\S+)/) {
+        $DESTDIR = $1;
+    }
+    else {
+        $DESTDIR = $ARGV[1];
+    }
+}
+if ($DESTDIR) {
+    my $envsep = $^O eq 'MSWin32' ? ';' : ':';
+    $ENV{PATH} = $DESTDIR.$bindir.$envsep.$ENV{PATH};
+    $bindir = $DESTDIR . $bindir;
+    $libdir = $DESTDIR . $libdir;
+}
+
 use File::Spec::Functions;
 
 my $filename;
 my $exe;
 my $out;
 my $FH;
-my $parrot = catfile('bin', 'parrot');
+my $parrot = catfile($bindir, 'parrot');
 
 #
 # parrot executable
 #
+-x $parrot or die "$parrot does not exist\n";
 
-$exe = catfile('bin', 'pbc_merge');
+$exe = catfile($bindir, 'pbc_merge');
 $out = `$exe`;
 ok($out =~ /^pbc_merge/, "check pbc_merge");
 
-$exe = catfile('bin', 'pdump');
+$exe = catfile($bindir, 'pdump');
 $out = `$exe`;
 ok($out =~ /^pdump/, "check pdump");
 
 ok(system("$parrot -V") == 0, "display parrot version");
 
-$exe = catfile('bin', 'perl6');
+$exe = catfile($bindir, 'perl6');
 $out = `$exe -v`;
 ok($out =~ /Rakudo/, "check rakudo");
 
@@ -58,10 +140,11 @@
         or die "Can't open $filename ($!).\n";
 print $FH "token TOP { \\s* }\n";
 close $FH;
-$out = `$parrot lib/parrot/library/PGE/Perl6Grammar.pir $filename`;
+$out = `$parrot $libdir/parrot/library/PGE/Perl6Grammar.pir $filename`;
 ok($out =~ /^\n## <::TOP>/, "check PGE");
 unlink($filename);
 
+# compilers/tge is typically not installed
 $filename = 'test.tg';
 open $FH, '>', $filename
         or die "Can't open $filename ($!).\n";
@@ -71,6 +154,7 @@
 ok($out =~ /^\n\.sub '_ROOT_past'/, "check TGE");
 unlink($filename);
 
+# compilers/nqp is typically not installed
 $filename = 'test.nqp';
 open $FH, '>', $filename
         or die "Can't open $filename ($!).\n";
@@ -81,8 +165,9 @@
 unlink($filename);
 
 #
-# some languages
-#
+# Some languages.
+# Now we just need to know where the HLL pbc's are installed.
+# See L<pdd30_install.pod>
 
 $filename = 'test.bc';
 open $FH, '>', $filename
@@ -129,7 +214,7 @@
         or die "Can't open $filename ($!).\n";
 print $FH "H";
 close $FH;
-$out = `$parrot languages/HQ9Plus/HQ9Plus.pbc $filename`;
+$out = `$parrot languages/hq9plus/hq9plus.pbc $filename`;
 ok($out eq "Hello, world!\n", "check HQ9Plus");
 unlink($filename);
 
@@ -240,4 +325,3 @@
 #   fill-column: 100
 # End:
 # vim: expandtab shiftwidth=4:
-
