# Copyright (C) 2001-2003 The Perl Foundation.  All rights reserved.
# $Id$

=head1 NAME

examples/assembly/getopt_demo.imc - demonstrating Getopt_Long.imc

=head1 SYNOPSIS

    % ./parrot examples/assembly/getopt_demo.imc --help
    % ./parrot examples/assembly/getopt_demo.imc --version
    % ./parrot examples/assembly/getopt_demo.imc --string=asdf --bool --integer=42 some thing

=head1 DESCRIPTION

This demo program shows how to handle command line arguments with the
PIR library F<runtime/parrot/include/Getopt_Long.imc>.

F<Getopt_Long.imc> is a library file that needs to be present in your
library search path. Currently the Parrot library search path consists
of '.' and './runtime/parrot/include'.

=head1 SUBROUTINES

=over 4

=item C<_main>

This is executed when you call F<getopt_demo.imc>.

=cut

.sub _main prototyped
  .param PerlArray argv

  # Assemble specification for get_options
  # in an array of format specifiers
  .sym PerlArray opt_spec    
  opt_spec = new PerlArray
  # --version, boolean
  push opt_spec, "version"
  # --help, boolean
  push opt_spec, "help"
  # --bool, boolean
  push opt_spec, "bool"
  # --string, string
  push opt_spec, "string=s"
  # --integer, integer
  push opt_spec, "integer=i"

  # the program name is the first element in argv
  .sym string program_name
  shift program_name, argv

  # Make a copy of argv, because this can easier be handled in get_options()
  # TODO: remove need for cloning
  .sym PerlArray argv_clone
  argv_clone = clone argv

  .sym PerlUndef opt
  .sym Sub get_options
  get_options = newsub _get_options
  .pcc_begin prototyped
    .arg argv_clone
    .arg opt_spec
    .pcc_call get_options
    ret_get_options_1:
    .result opt
  .pcc_end

  # Now we do what the passed options tell
  .sym int is_defined

  # Was '--version' passed ?
  is_defined = defined opt["version"]
  unless is_defined goto NO_VERSION_FLAG
    print "getopt_demo.imc version 0.01\n"
    end
  NO_VERSION_FLAG:

  # Was '--help' passed ?
  is_defined = defined opt["help"]
  unless is_defined goto NO_HELP_FLAG
    .sym Sub usage
    usage = newsub _usage
    .pcc_begin prototyped
      .arg program_name
      .pcc_call usage
      ret_usage_1:
    .pcc_end
    end
  NO_HELP_FLAG:

  # Say Hi
  print "Hi, I am '"
  print program_name
  print "'.\n"
  print "\n"

  # handle the bool option
  is_defined = defined opt["bool"]
  unless is_defined goto NO_BOOL_OPTION
    print "You have passed the option '--bool'.\n"
    goto END_BOOL_OPTION
  NO_BOOL_OPTION:
    print "You haven't passed the option '--bool'. This is fine with me.\n"
  END_BOOL_OPTION:

  # handle the string option
  is_defined = defined opt["string"]
  unless is_defined goto NO_STRING_OPTION
    .sym string string_option
    string_option = opt["string"]
    print "You have passed the option '--string'. The value is '"
    print string_option
    print "'.\n"
    goto END_STRING_OPTION
  NO_STRING_OPTION:
    print "You haven't passed the option '--string'. This is fine with me.\n"
  END_STRING_OPTION:

  # handle the integer option
  is_defined = defined opt["integer"]
  unless is_defined goto NO_INTEGER_OPTION
    .sym string integer_option
    integer_option = opt["integer"]
    print "You have passed the option '--integer'. The value is '"
    print integer_option
    print "'.\n"
    goto END_INTEGER_OPTION
  NO_INTEGER_OPTION:
    print "You haven't passed the option '--integer'. This is fine with me.\n"
  END_INTEGER_OPTION:

  # For some reason I can't shift from argv_clone
  .sym string other_arg
  .sym int cnt_other_args
  cnt_other_args = 0
  .sym int num_other_args
  num_other_args = argv_clone
  goto CHECK_OTHER_ARG_LOOP
  REDO_OTHER_ARG_LOOP:
    other_arg = argv_clone[cnt_other_args]
    print "You have passed the additional argument: '"
    print other_arg
    print "'.\n"
    inc cnt_other_args
  CHECK_OTHER_ARG_LOOP:
  if cnt_other_args < num_other_args goto REDO_OTHER_ARG_LOOP
  print "All args have been parsed.\n"

  # Do a lot of useful stuff here

  end
.end

=item C<_usage>

Print the usage message.

TODO: Pass a flag for EXIT_FAILURE and EXIT_SUCCESS

=cut

.sub _usage prototyped
  .param string program_name

  print "Usage: ./parrot "
  print program_name
  print " [OPTION]... [STRING]...\n"
  print "\n"
  print "Currently only long options are available.\n"
  print "\n"
  print "Operation modes:\n"
  print "      --help                   display this help and exit\n"
  print "      --version                output version information and exit\n"
  print "\n"
  print "For demo of option parsing:\n"
  print "      --string=STRING          a string option\n"
  print "      --integer=INTEGER        an integer option\n"
  print "      --bool                   a boolean option\n"
  .pcc_begin_return
  .pcc_end_return
.end

# A dummy implementation of Getopt::Long
.include "Getopt_Long.imc"

=back

=head1 AUTHOR

Bernhard Schmalhofer <Bernhard.Schmalhofer@gmx.de>

=head1 SEE ALSO

F<runtime/parrot/include/Getopt_Long.imc>
