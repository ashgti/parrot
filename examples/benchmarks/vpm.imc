# perl program by Thomas Klausner posted on Vienna-PM list
#
# timings in seconds on Athlon 800
#
# perl         vpm.pl    19.8
# perl58-th    vpm.pl    30.8
#
# parrot -j    vpm.imc   20.7
# parrot -j    vpm1.imc  16.3
# parrot -j    vpm2.imc  15.6
# parrot -C    vpm2.imc  15.9
#
# perl is 5.8.0, parrot built optimized gcc 2.95.2
# Thomas did report that 50% slowdown with threaded perl 5.8.3 too.

# vpm.imc  ... split and join simulated in a loop
# vpm1.imc ... join opcode
# vpm2.imc ... join and split opcodes

# beginn
#use strict;
#
#use warnings;

.sub _main

# my $big;
   .sym pmc big
   big = new PerlUndef
# my $string="just another perl hacker";
   .sym pmc String
   String = new PerlUndef
   String = "just another perl hacker"

# for (0 .. 299999) {
   $P0 = new PerlUndef
   $P0 = 0
loop:
#    $big++;
   inc big
#   my @str=split(//,$string);
   .sym pmc str
   str = new PerlArray
   $S0 = String
   length $I0, $S0
   $I1 = 0
 spl:
   $S1 = $S0[$I1]
   str[$I1] = $S1
   inc $I1
   if $I1 < $I0 goto spl
#    my $f=shift(@str);
   .sym pmc f
   f = new PerlUndef
   shift $P2, str
   assign f, $P2
#    push(@str,$f);
   push str, f
#    $string=join('',@str);
   String = new PerlString
   $I0 = str
   $I1 = 0
 jlp:
   $P1 = str[$I1]
   concat String, String, $P1
   inc $I1
   if $I1 < $I0 goto jlp
#}
  inc $P0
  if  $P0 <= 299999 goto loop

#print "$big;
   print big
   print "\n"
#$string
#";
   print String
   print "\n"
   end
# ende
.end



