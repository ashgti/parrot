# b6.py

# from b5 import check

#  show = True
#  def check(a, b):
#      if __debug__:
#          if show:
#              print `a`, "==", `b`
#      if not a == b:
#          raise AssertionError("%.30r != %.30r" % (a, b))
#
#
.sub check
    .param pmc a
    .param pmc b
     print a
     print " == "
     print b
     print "\n"
    if a == b goto c1
         $P0 = new Exception
	 $P1 = new FixedPMCArray
	 $P1 = 2
	 $P1[0] = a
	 $P1[1] = b
	 $S0 = sprintf "%.30Ps != %.30Ps", $P1
	 $P0["_message"] = $S0
	 throw $P0
c1:
.end


.sub main @MAIN

#  def main():
    .local pmc L
#      L = [1]*1000000
    L = new IntList
    L[0] = 1
    L *= 1000000
#      L[-1] = 42
    L[-1] = 42
    .local int n
    .local int i
#      n = 0
    .local pmc n
    n = new PerlInt
    n = 0

#      for i in L:
    .local pmc iter_1
    iter_1 = new Iterator, L
.include "iterator.pasm"
    iter_1 = .ITERATE_FROM_START
iter_1_lp:
    unless iter_1, iter_1_end
    i = shift iter_1
#          n += i
    n += i
    goto iter_1_lp
iter_1_end:
#      check(i, 42)
    $P0 = new PerlInt
    $P0 = i
    $P1 = new PerlInt
    $P1 = 42
    check($P0, $P1)

#      check(n, 1000041)
    $P3 = new PerlInt
    $P3 = 1000041
    check(n, $P3)
#      n = 0
    n = 0
#      for i in xrange(1000000):
    $P4 = new Slice [0 .. 1000000]
    $P5 = new Iterator, $P4
    $P5 = .ITERATE_FROM_START
iter_2_lp:
    unless $P5, iter_2_end
    i = shift $P5
#          n += i
    n += i
    goto iter_2_lp
iter_2_end:
#      check(i, 999999)
    $P6 = new PerlInt
    $P6 = i
    $P7 = new PerlInt
    $P7 = 999999
    check($P6, $P7)
#      check(n, 999999*1000000//2)
    $P9 = new PerlInt
    $P9 = 999999
    $P9 *= 1000000
    $P9 /= 2
    check(n, $P9)

#      d = dict.fromkeys(xrange(1000000))
    .local pmc d
    .local pmc xr
    d = new PerlHash
    xr = new Slice[0 .. 1000000]
    .local pmc sl
    sl = new Iterator, xr
    .local pmc value
    null value
    d."fromkeys"(sl, value)
#      n = 0
    n = 0
    .local pmc iter_3
    iter_3 = new Iterator, d
#      for i in d:
    iter_3 = .ITERATE_FROM_START
iter_3_lp:
    unless iter_3, iter_3_end
    i = shift iter_3
#          n += i
    n += i
    goto iter_3_lp
iter_3_end:
#      check(n, 999999*1000000//2)
    $P10 = new PerlInt
    $P10 = 999999
    $P10 *= 1000000
    $P10 /= 2
    check(n, $P10)
.end

#  if __name__ == '__main__':
#      main()

