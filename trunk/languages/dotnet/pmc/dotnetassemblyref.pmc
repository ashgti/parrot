/*
 * $Id$
 * Copyright (C) 2006-2008, The Perl Foundation.
 */

/* .NET CLI Assembly Reference Metadata PMC */


#include "parrot/extend.h"
#include "tableinfo.h"
#include "structures.h"


pmclass DotNetAssemblyRef dynpmc group dotnet {

    /* Instance initialization. We need a custom DOD marking and destroy. */
    void init()
    {
        PObj_custom_mark_SET(SELF);
        PObj_active_destroy_SET(SELF);
    }


    /* Garbage Collection mark routine. */
    void mark()
    {
        /* Tell the GC about stuff we're holding on to. */
        dotnet_assemblyref *ar = (dotnet_assemblyref *)PMC_struct_val(SELF);
        if (ar != NULL)
        {
            if (ar->str_name)
                pobject_lives(INTERP, (PObj*)ar->str_name);
            if (ar->str_culture)
                pobject_lives(INTERP, (PObj*)ar->str_culture);
        }
    }


    /* Destructor. */
    void destroy()
    {
        /* Cleanup any memory we're using. */
        if (PMC_struct_val(SELF))
        {
            dotnet_assemblyref *ar = (dotnet_assemblyref *)PMC_struct_val(SELF);
            mem_sys_free(ar);
            PMC_struct_val(SELF) = NULL;
        }
    }


    /* Get string vtable function; returns the name referenced. */
    STRING* get_string()
    {
        dotnet_assemblyref *ar = (dotnet_assemblyref *)PMC_struct_val(SELF);

        /* Handle cases where we've an invalid PMC. */
        if (!ar)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid DotNetAssemblyRef PMC");

        return ar->str_name;
    }


    /* Get major version. */
    METHOD INTVAL get_version_major()
    {
        dotnet_assemblyref *ar = (dotnet_assemblyref *)PMC_struct_val(SELF);
        INTVAL              result;

        /* Handle cases where we've an invalid PMC. */
        if (!ar)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid DotNetAssemblyRef PMC");

        result = (INTVAL)ar->version_major;
        RETURN(INTVAL result);
    }


    /* Get minor version. */
    METHOD INTVAL get_version_minor()
    {
        dotnet_assemblyref *ar = (dotnet_assemblyref *)PMC_struct_val(SELF);
        INTVAL              result;

        /* Handle cases where we've an invalid PMC. */
        if (!ar)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid DotNetAssemblyRef PMC");

        result = (INTVAL)ar->version_minor;
        RETURN(INTVAL result);
    }


    /* Get build version. */
    METHOD INTVAL get_version_build()
    {
        dotnet_assemblyref *ar = (dotnet_assemblyref *)PMC_struct_val(SELF);
        INTVAL              result;

        /* Handle cases where we've an invalid PMC. */
        if (!ar)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid DotNetAssemblyRef PMC");

        result = (INTVAL)ar->version_build;
        RETURN(INTVAL result);
    }


    /* Get revision version. */
    METHOD INTVAL get_version_revision()
    {
        dotnet_assemblyref *ar = (dotnet_assemblyref *)PMC_struct_val(SELF);
        INTVAL              result;

        /* Handle cases where we've an invalid PMC. */
        if (!ar)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid DotNetAssemblyRef PMC");

        result = (INTVAL)ar->version_revision;
        RETURN(INTVAL result);
    }


    /* Get flags. */
    METHOD INTVAL get_flags()
    {
        dotnet_assemblyref *ar = (dotnet_assemblyref *)PMC_struct_val(SELF);
        INTVAL              result;

        /* Handle cases where we've an invalid PMC. */
        if (!ar)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid DotNetAssemblyRef PMC");

        result = (INTVAL)ar->flags;
        RETURN(INTVAL result);
    }


    /* Get public key blob location. */
    METHOD INTVAL get_public_key()
    {
        dotnet_assemblyref *ar = (dotnet_assemblyref *)PMC_struct_val(SELF);
        INTVAL              result;

        /* Handle cases where we've an invalid PMC. */
        if (!ar)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid DotNetAssemblyRef PMC");

        result = (INTVAL)ar->public_key;
        RETURN(INTVAL result);
    }


    /* Get culture. */
    METHOD STRING* get_culture()
    {
        dotnet_assemblyref *ar = (dotnet_assemblyref *)PMC_struct_val(SELF);
        STRING             *result;

        /* Handle cases where we've an invalid PMC. */
        if (!ar)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid DotNetAssemblyRef PMC");

        result = ar->str_culture;
        RETURN(STRING *result);
    }


    /* Get hash value blob location. */
    METHOD INTVAL get_hash_value()
    {
        dotnet_assemblyref *ar = (dotnet_assemblyref *)PMC_struct_val(SELF);
        INTVAL              result;

        /* Handle cases where we've an invalid PMC. */
        if (!ar)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid DotNetAssemblyRef PMC");

        result = (INTVAL)ar->hash_value;
        RETURN(INTVAL result);
    }
}


/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
