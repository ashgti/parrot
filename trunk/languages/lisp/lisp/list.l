;        (in-package "COMMON-LISP")
;        
;        ;; Define some list accessing functions.
;        (defun caar (x) (car (car x)))
;        (defun cadr (x) (car (cdr x)))
;        (defun cdar (x) (cdr (car x)))
;        (defun cddr (x) (cdr (cdr x)))
;        
;        (defun caaar (x) (car (car (car x))))
;        (defun caadr (x) (car (car (cdr x))))
;        (defun cadar (x) (car (cdr (car x))))
;        (defun caddr (x) (car (cdr (cdr x))))
;        (defun cdaar (x) (cdr (car (car x))))
;        (defun cdadr (x) (cdr (car (cdr x))))
;        (defun cddar (x) (cdr (cdr (car x))))
;        (defun cdddr (x) (cdr (cdr (cdr x))))
;        
;        (defun caaaar (x) (car (car (car (car x)))))
;        (defun caaadr (x) (car (car (car (cdr x)))))
;        (defun caadar (x) (car (car (cdr (car x)))))
;        (defun caaddr (x) (car (car (cdr (cdr x)))))
;        (defun cadaar (x) (car (cdr (car (car x)))))
;        (defun cadadr (x) (car (cdr (car (cdr x)))))
;        (defun caddar (x) (car (cdr (cdr (car x)))))
;        (defun cadddr (x) (car (cdr (cdr (cdr x)))))
;        (defun cdaaar (x) (cdr (car (car (car x)))))
;        (defun cdaadr (x) (cdr (car (car (cdr x)))))
;        (defun cdadar (x) (cdr (car (cdr (car x)))))
;        (defun cdaddr (x) (cdr (car (cdr (cdr x)))))
;        (defun cddaar (x) (cdr (cdr (car (car x)))))
;        (defun cddadr (x) (cdr (cdr (car (cdr x)))))
;        (defun cdddar (x) (cdr (cdr (cdr (car x)))))
;        (defun cddddr (x) (cdr (cdr (cdr (cdr x)))))
;        
;        (defun endp (x) (eq x nil))
;        
;        (defun first (x) (car x))
;        (defun second (x) (cadr x))
;        (defun third (x) (caddr x))
;        (defun fourth (x) (cadddr x))
;        (defun fifth (x) (car (cddddr x)))
;        (defun sixth (x) (cadr (cddddr x)))
;        (defun seventh (x) (caddr (cddddr x)))
;        (defun eighth (x) (cadddr (cddddr x)))
;        (defun ninth (x) (car (cddddr (cddddr x))))
;        (defun tenth (x) (cadr (cddddr (cddddr x))))
;        
;        ;; Appends list A to list B
;        (sys:set-symbol-function 'append
;        			 #'(lambda (a b)
;        			     (if (null a)
;        				 b
;        			       (cons (car a) (append (cdr a) b)))))
;        
;        ;; Copies and returns the passed tree.
;        (defun copy-tree (tree)
;          (if (consp tree)
;              (cons (copy-tree (car tree))
;        	    (copy-tree (cdr tree)))
;            tree))
;        
;        ;; Identity returns whatever was passed to the function
;        (defun identity (object) object)
;        
;        ;; For working with association lists.
;        (defun acons (key val list)
;          (cons (cons key val) list))
;        
