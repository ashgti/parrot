/*
** object.ops
*/

#include "parrot/method_util.h"

VERSION = PARROT_VERSION;

=head1 NAME

object.ops

=cut

=head1 DESCRIPTION

Parrot's library of object ops

=cut

=item B<callmeth>()

Call a method on an object as per Parrot's calling conventions. We assume
that all the registers are properly set up.

=cut

=item B<callmethcc>

Take the continuation for the next instruction, put it in P1, then call the
method as per the calling conventions.

=cut

=item B<tailcallmeth>

Restore the continuation in P1 then call the method as per the calling
conventions.

=cut


=item B<can>(out INT, in PMC, in STR)

Sets $1 to true or false, depending on whether $2 ->can the method in
$3

=cut

inline op can(out INT, in PMC, in STR) {
  $1 = $2->vtable->can(interpreter, $2, $3);
  goto NEXT();
}

=item B<does>(out INT, in PMC, in STR)

Sets $1 to true or false, depending on whether $2 ->does the interface in
$3

=cut

inline op does(out INT, in PMC, in STR) {
  $1 = $2->vtable->does(interpreter, $2, $3);
  goto NEXT();
}


###############################################################################

=head1 COPYRIGHT

Copyright (C) 2003 Yet Another Society. All rights reserved.

=head1 LICENSE

This program is free software. It is subject to the same license
as the Parrot interpreter itself.

=cut
