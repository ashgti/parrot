/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

src/classes/retcontinuation.pmc - Return Continuation

=head1 DESCRIPTION

C<RetContinuation> extends C<Continuation>.

A return continuation is a one shot Continuation, it gets recycled
immediately after invocation.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "parrot/oplib/ops.h"
#include "parrot/method_util.h"


pmclass RetContinuation extends Continuation need_ext {

/*

=item C<void init()>

Initializes the continuation.

=cut

*/

    void init () {
        PMC_struct_val(SELF) = new_ret_continuation(INTERP);
        PMC_pmc_val(SELF) = NULL;
        PObj_custom_mark_destroy_SETALL(SELF);
    }

    /*
     * XXX when reusing SUPER.destroy() RetContinuations
     *     have to set ref_count initially to 1
     */

    void destroy () {
        struct Parrot_cont * cc = PMC_cont(SELF);
        if (cc) {
            mem_sys_free(cc);
            PMC_struct_val(SELF) = NULL;
        }
    }
/*

=item C<PMC* clone>

Return a new Continuation PMC with the context of SELF. Note: the
returned object is not a RetContinuation and creating a real
Continuation invalidates all RetContinuation all the way up the call
chain that is, these can't be recycled, they get persistent until
the GC gets at them.

=cut

*/
    PMC* clone() {
        invalidate_retc_context(INTERP, SELF);
        return SUPER();
    }
/*

=item C<void *invoke(void *next)>

Restores the "context" by calling the superclass's C<invoke()> and places
the frame pointer in the stack frame cache.

=cut

*/

    void* invoke (void* next) {
	Stack_Chunk_t *ctr_stack, *stack_now;
	struct Parrot_cont * cc = PMC_cont(SELF);
	parrot_context_t *caller_ctx;
	struct PackFile_ByteCode *seg;   /* bytecode segment */
	/*
	 * unwind control stack
	 */
	stack_now = CONTEXT(INTERP->ctx)->control_stack;
	caller_ctx = cc->to_ctx;
	ctr_stack = caller_ctx->control_stack;
	while (stack_now != ctr_stack) {
	    if (!stack_now || !ctr_stack)
		internal_exception(1, "Control stack damaged");
	    /*
	     * this automagically runs all pushed action
	     * handler during pop - see cleanup stuff
	     * in stack_pop
	     */
	    (void)stack_pop(INTERP, &stack_now,
			    NULL, NO_STACK_ENTRY_TYPE);
	}

	/* debug print before context is switched */
	if (Interp_trace_TEST(INTERP, PARROT_TRACE_SUB_CALL_FLAG)) {
	    PMC *to_sub = caller_ctx->current_sub;
	    PMC *from_sub = cc->from_ctx->current_sub;

	    PIO_eprintf(INTERP, "# Back in sub '%Ss' from '%Ss\n",
		    Parrot_full_sub_name(INTERP, to_sub),
		    Parrot_full_sub_name(INTERP, from_sub));
	}
	CONTEXT(INTERP->ctx) = caller_ctx;
	INTERP->ctx.bp = caller_ctx->bp;
	INTERP->ctx.bp_ps = caller_ctx->bp_ps;
	next = cc->address;
	Parrot_free_context(INTERP, cc->from_ctx, 1);
	seg = cc->seg;
#ifdef NDEBUG
	/* the continuation is dead - delete and destroy it */
	mem_sys_free(cc);
	{
	    struct Arenas *arena_base = interpreter->arena_base;
	    struct Small_Object_Pool *pool, *ext_pool =
		arena_base->pmc_ext_pool;
	    ext_pool->add_free_object(interpreter, ext_pool,
		    SELF->pmc_ext);
	    PObj_flags_SETTO((PObj *)SELF, PObj_on_free_list_FLAG);
	    pool = arena_base->pmc_pool;
	    pool->add_free_object(interpreter, pool, SELF);
	    pool->num_free_objects ++;
	}
#else
	cc->from_ctx = NULL;
	/*
	 * the to_ctx is marked in Continuation.mark
	 * NULLify it or turn off the custom_mark bit
	 */
	cc->to_ctx = NULL;
#endif
	INTERP->current_args = NULL;
	if (INTERP->code != seg) {
	    Parrot_switch_to_cs(INTERP, seg, 1);
	}
	return next;
    }

}

/*

=back

=head1 HISTORY

Initial revision by sean 2002/08/04.

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
