/*
Copyright (C) 2001-2009, Parrot Foundation.
$Id$

=head1 DESCRIPTION

src/pmc/managedstruct.pmc - Memory-managed C struct

=head1 DESCRIPTION

C<ManagedStruct> extends C<UnManagedStruct> to provide a class to hold C
C<struct> values that Parrot is responsible for disposing of.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"


pmclass ManagedStruct extends UnManagedStruct need_ext {

/*

=item C<void init()>

Initializes an empty struct.

=cut

*/

    VTABLE void init() {
        Parrot_ManagedStruct_attributes *attrs =
            mem_allocate_zeroed_typed(Parrot_ManagedStruct_attributes);
        PObj_active_destroy_SET(SELF);
        PMC_pmc_val(SELF) = NULL;
        PMC_int_val(SELF) = 0;
        PMC_data(SELF) = attrs;

    }

/*

=item C<void init_pmc(PMC *value)>

Initializes the struct with C<*value>.

=cut

*/

    VTABLE void init_pmc(PMC *value) {
        SELF.init();
        SUPER(value);
    }

/*

=item C<void destroy()>

Destroys the struct, freeing the allocated memory.

=cut

*/

    VTABLE void destroy() {
        if (PARROT_MANAGEDSTRUCT(SELF)->ptr)
            mem_sys_free(PARROT_MANAGEDSTRUCT(SELF)->ptr);
        mem_sys_free(PMC_data(SELF));
    }

/*

=item C<void set_integer_native(INTVAL value)>

(Re)allocates C<value> bytes for the struct.

=cut

*/

    VTABLE void set_integer_native(INTVAL value) {
        if (PARROT_MANAGEDSTRUCT(SELF)->ptr && !value) {
            mem_sys_free(PARROT_MANAGEDSTRUCT(SELF)->ptr);
            PARROT_MANAGEDSTRUCT(SELF)->ptr    = NULL;
            PMC_int_val(SELF) = 0;
        }
        else if (value && !PARROT_MANAGEDSTRUCT(SELF)->ptr) {
            PARROT_MANAGEDSTRUCT(SELF)->ptr    = mem_sys_allocate_zeroed((size_t)value);
            PMC_int_val(SELF) = value;
        }
        else if (value && PARROT_MANAGEDSTRUCT(SELF)->ptr) {
            if (PMC_int_val(SELF) != value) {
                PARROT_MANAGEDSTRUCT(SELF)->ptr =
                    mem_sys_realloc(PARROT_MANAGEDSTRUCT(SELF)->ptr, (size_t)value);
                PMC_int_val(SELF) = value;
            }
        }

        return;
    }


/*

=item C<PMC * clone()>

Creates a clone of this PMC; clones any unmanaged memory it holds too.  Note
that the latter is only a shallow copy, as there's no general way of knowing
how to clone I<that> data.

=cut

*/

    VTABLE PMC *clone() {
        PMC *dest = pmc_new_init(interp, SELF->vtable->base_type,
            PMC_pmc_val(SELF));

        if (PARROT_MANAGEDSTRUCT(SELF)->ptr)
            memmove(PARROT_MANAGEDSTRUCT(dest)->ptr,
                    PARROT_MANAGEDSTRUCT(SELF)->ptr, PMC_int_val(SELF));

        return dest;
    }

}

/*

=back

=head1 HISTORY

Initial revision by sean 2002/08/04.

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
