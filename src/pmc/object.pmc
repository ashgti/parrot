/*
Copyright (C) 2001-2007, The Perl Foundation.
$Id$

=head1 NAME

src/pmc/object.pmc - An instance of a class

=head1 DESCRIPTION

Implements an instance of a class.

=head2 Functions

=over 4

=cut

*/

#include "parrot/parrot.h"
#define PARROT_OBJECT(o) ((Parrot_Object *) PMC_data(o))

typedef struct Parrot_Object {
    PMC *class;          /* The class this is an instance of. */
    PMC *attrib_store;   /* The attributes store - a resizable PMC array. */
} Parrot_Object;


pmclass Object need_ext {

/*

=item C<void init_pmc(PMC *class)>

Instantiates an object of the given class.

=cut

*/

    void init_pmc(PMC* class) {
        Parrot_Object *obj = NULL;

        /* Custom DOD mark and destory. */
        PObj_custom_mark_SET(SELF);
        PObj_active_destroy_SET(SELF);

        /* Set up the object. */
        obj = mem_sys_allocate_zeroed(sizeof(Parrot_Object));
        obj->class = class;
        obj->attrib_store = pmc_new(interp, enum_class_ResizablePMCArray);
        PMC_data(SELF) = obj;
    }

/*

=item C<void mark()>

Free the object's underlying struct.

=cut

*/
    void destroy() {
            mem_sys_free(PMC_data(SELF));
    }

/*

=item C<void destroy()>

Mark any referenced strings and PMCs.

=cut

*/
    void mark() {
        Parrot_Object *obj = PARROT_OBJECT(SELF);
        if (obj->class)
            pobject_lives(interp, (PObj*)obj->class);
        if (obj->attrib_store)
            pobject_lives(interp, (PObj*)obj->attrib_store);
    }

/*

=item C<PMC* get_attr_str(STRING *idx)>

Gets the value of an attribute for this object. Will find the first attribute
of the given name walking up the inheritance tree.

=cut

*/
    PMC* get_attr_str(STRING *name) {
        /* Use the class to look up the index. */
        Parrot_Object *obj = PARROT_OBJECT(SELF);
        PMC *class = obj->class;
        INTVAL index;
        (INTVAL index) = PMINVOKE(interp, class, "_get_attrib_index", STRING* name);

        /* If lookup failed, exception. */
        if (index == -1) {
            real_exception(interp, NULL, ATTRIB_NOT_FOUND, "No such attribute '%S'", name);
            return PMCNULL;
        }
        else {
            return VTABLE_get_pmc_keyed_int(interp, obj->attrib_store, index);
        }
    }

/*

=item C<void set_attr_str(STRING* name, PMC* value)>

Sets the value of an attribute for this object. Will set the first attribute
of the given name walking up the inheritance tree.

=cut

*/
    void set_attr_str(STRING* name, PMC* value) {
        /* Use the class to look up the index. */
        Parrot_Object *obj = PARROT_OBJECT(SELF);
        PMC *class = obj->class;
        INTVAL index;
        (INTVAL index) = PMINVOKE(interp, class, "_get_attrib_index", STRING* name);

        /* If lookup failed, exception. */
        if (index == -1) {
            real_exception(interp, NULL, ATTRIB_NOT_FOUND, "No such attribute '%S'", name);
        }
        else {
            VTABLE_set_pmc_keyed_int(interp, obj->attrib_store, index, value);
        }
    }

}

/*

=back

=head1 SEE ALSO

F<docs/pdds/pdd15_objects.pod>.

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
