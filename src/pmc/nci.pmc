/*
Copyright (C) 2001-2010, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/nci.pmc - Native Call Interface

=head1 DESCRIPTION

The vtable functions for the native C call functions.

=head2 Methods

=over 4

=cut

*/

/* HEADERIZER HFILE: none */
/* HEADERIZER BEGIN: static */
/* Don't modify between HEADERIZER BEGIN / HEADERIZER END.  Your changes will be lost. */

PARROT_IGNORABLE_RESULT
static nci_thunk_t /*@alt void@*/
build_func(PARROT_INTERP,
    ARGMOD(Parrot_NCI_attributes *nci_info))
        __attribute__nonnull__(1)
        __attribute__nonnull__(2)
        FUNC_MODIFIES(*nci_info);

static void pcc_params(PARROT_INTERP,
    ARGIN(STRING *sig),
    ARGMOD(Parrot_NCI_attributes *nci_info),
    size_t sig_length)
        __attribute__nonnull__(1)
        __attribute__nonnull__(2)
        __attribute__nonnull__(3)
        FUNC_MODIFIES(*nci_info);

#define ASSERT_ARGS_build_func __attribute__unused__ int _ASSERT_ARGS_CHECK = (\
       PARROT_ASSERT_ARG(interp) \
    , PARROT_ASSERT_ARG(nci_info))
#define ASSERT_ARGS_pcc_params __attribute__unused__ int _ASSERT_ARGS_CHECK = (\
       PARROT_ASSERT_ARG(interp) \
    , PARROT_ASSERT_ARG(sig) \
    , PARROT_ASSERT_ARG(nci_info))
/* Don't modify between HEADERIZER BEGIN / HEADERIZER END.  Your changes will be lost. */
/* HEADERIZER END: static */

/*
typedef struct signature_t {
  char* sig_string;
  unsigned int argc;
  void* return_pmc;
  ffi_type *return_type;
  ffi_type **args;
  ffi_cif cif;
  void* arg_pmc_list; 
} signature;
*/

#   include "ffi.h"

INTVAL parse_sig(PARROT_INTERP, STRING *sig, size_t sig_length, Parrot_NCI_attributes *nci_info);

size_t parse_return(PARROT_INTERP, STRING* sig, size_t sig_length, Parrot_NCI_attributes * nci_info, ffi_type **return_type);

size_t parse_args(PARROT_INTERP, STRING* sig, size_t start, size_t sig_length, Parrot_NCI_attributes *nci_info, ffi_type ***arg_types);

size_t parse_identifier(PARROT_INTERP, STRING* sig, size_t start, size_t end, ffi_type** sig_obj, void* pmc_type);

size_t parse_structure(PARROT_INTERP, STRING* sig, size_t start, size_t end, ffi_type** sig_obj, void* pmc_type);

INTVAL parse_prefix(INTVAL c);

size_t structure_length(PARROT_INTERP, STRING* sig, size_t start, size_t end);

size_t count_args(PARROT_INTERP, STRING* sig, size_t start, size_t end);

size_t find_matching(PARROT_INTERP, STRING* sig, size_t start, size_t sig_length, INTVAL start_character, INTVAL end_character);

#define IS_DIGIT(x)               ((x == '0') || (x == '1') || (x == '2') || (x == '3') || (x == '4') || (x == '5') || (x == '6') || (x == '7') || (x == '8') || (x == '9'))
#define IS_PREFIX(x)              ((x == '*') || (x == 'u') || (x == 's'))
#define IS_OLD_TYPE(x)            ((x == 'P') || (x == 'J') || (x == 'N') || (x == 'S') || (x == 'O') || (x == '@') || (x == 'B') || (x == 'p') || (x == '2') || (x == '3') || (x == '4') || (x == 'U'))
#define IS_TYPE(x)                ((x == 'i') || (x == 'v') || (x == 'l') || (x == 't') || (x == 'c') || (x == 'b') || (x == 'f') || (x == 'd') || IS_OLD_TYPE(x))
#define IS_POSTFIX(x)             ((x == '{') || IS_DIGIT(x))
#define IS_INFIX(x)               (x == '|')
#define IS_START_CIRCUMFIX(x)     (x == '(')
#define IS_END_CIRCUMFIX(x)       (x == ')')
#define IS_NOT_END_CIRCUMFIX(x)   (x != ')')

#define PREFIX_POINTER  (1<<0)
#define PREFIX_SIGNED   (   0)
#define PREFIX_UNSIGNED (1<<1)
#define PREFIX_NATIVE   (1<<2)

INTVAL
parse_sig(PARROT_INTERP, STRING *sig, size_t sig_length, Parrot_NCI_attributes *nci_info) {
    ffi_cif cif;
    ffi_type *return_type;
    ffi_type **arg_types = calloc(1, sizeof(ffi_type*));
    
    size_t i = parse_return(interp, sig, sig_length, nci_info, &return_type);
    parse_args(interp, sig, i, sig_length, nci_info, &arg_types);
	    
    if (ffi_prep_cif(&cif, FFI_DEFAULT_ABI, nci_info->arity, return_type, arg_types) == FFI_OK) {
        nci_info->cif = (void*)malloc(sizeof(ffi_cif));
        memcpy(nci_info->cif, &cif, sizeof(ffi_cif));
        return 1;
    }
	
    // TODO: Throw Error here.
    printf("Bad signature\n");
    return 0;
}

size_t
parse_return(PARROT_INTERP, STRING *sig, size_t sig_length, Parrot_NCI_attributes* nci_info, ffi_type **return_type) {
    return parse_identifier(interp, sig, 0, sig_length, return_type, nci_info->pcc_return_signature);
}

size_t 
parse_args(PARROT_INTERP, STRING* sig, size_t start, size_t sig_length, Parrot_NCI_attributes *nci_info, ffi_type ***arg_types) {
    size_t i = start;
    size_t arg_count = 0;
    size_t argc = count_args(interp, sig, start, sig_length);
	
    /* TODO: Fix this malloc */
    *arg_types = malloc(argc + 1 * sizeof(ffi_type*));
	
    while (i < sig_length) {
        i = parse_identifier(interp, sig, i, sig_length, &(*arg_types)[arg_count], nci_info->pcc_params_signature + arg_count);
        arg_count++;
    }
	
    nci_info->arity = arg_count;
	
    return i;
}

size_t
parse_identifier(PARROT_INTERP, STRING *sig, size_t start, size_t sig_length, ffi_type **type_obj, void *type) {
    size_t i = start;
    INTVAL done = 0;
	
    while (!done && i < sig_length) {
        INTVAL c = Parrot_str_indexed(interp, sig, i);
        // printf("C: %c %d %d \n\n", (char) c, i, sig_length);
        int prefix = 0;
        while (IS_PREFIX(c)) {
            prefix |= parse_prefix(c);
			
            i++;
			
            if (i < sig_length)
                c = Parrot_str_indexed(interp, sig, i);
            else
                return i;
        }
		
        if (IS_START_CIRCUMFIX(c)) {
            i = parse_structure(interp, sig, i + 1, sig_length, type_obj, type);
            i++;
			
            if (i < sig_length)
                c = Parrot_str_indexed(interp, sig, i);
            else
                return i;
        }
        else if (IS_TYPE(c)) {
			      if (prefix & PREFIX_POINTER) {
                *type_obj = &ffi_type_pointer;
                continue;
            }
            switch (c) {
                case (INTVAL)'0':    /* null ptr or such - doesn't consume a reg */
                  break;
                case (INTVAL)'c':
                  if (prefix & PREFIX_UNSIGNED) {
                    *type_obj = &ffi_type_uchar;
                  }
                  else {
                    *type_obj = &ffi_type_schar;
                  }
                  break;
                case (INTVAL)'b':
                  if (prefix & PREFIX_UNSIGNED) {
                    *type_obj = &ffi_type_uint8;
                  }
                  else {
                    *type_obj = &ffi_type_sint8;
                  }
                  break;
                case (INTVAL)'s':
                  if (prefix & PREFIX_UNSIGNED) {
                    *type_obj = &ffi_type_ushort;
                  }
                  else {
                    *type_obj = &ffi_type_sshort;
                  }
                  break;
                case (INTVAL)'I':   /* INTVAL */
                case (INTVAL)'i':
                  if (prefix & PREFIX_UNSIGNED) {
                    *type_obj = &ffi_type_uint;
                  }
                  else {
                    *type_obj = &ffi_type_sint;
                  }
                  break;
                case (INTVAL)'l':
                  if (prefix & PREFIX_UNSIGNED) {
                    *type_obj = &ffi_type_ulong;
                  }
                  else {
                    *type_obj = &ffi_type_slong;
                  }
                  break;
                case (INTVAL)'q':
                  if (prefix & PREFIX_UNSIGNED) {
                    *type_obj = &ffi_type_uint64;
                  }
                  else {
                    *type_obj = &ffi_type_sint64;
                  }
                  break;
                case (INTVAL)'p':   /* push pmc->data */
                case (INTVAL)'P':   /* push PMC * */
                case (INTVAL)'V':   /* push PMC * */
                case (INTVAL)'2':
                case (INTVAL)'3':
                case (INTVAL)'4':
                case (INTVAL)'J':   /* interpreter */
                case (INTVAL)'S':
                case (INTVAL)'t':
                case (INTVAL)'B':
                  *type_obj = &ffi_type_pointer;
                  break;
                case (INTVAL)'v':
                  *type_obj = &ffi_type_void;
                  break;
                case (INTVAL)'f':
                  *type_obj = &ffi_type_float;
                  break;
                case (INTVAL)'N':
                case (INTVAL)'d':
                  *type_obj = &ffi_type_double;
                  break;
                case (INTVAL)'D':
                  *type_obj = &ffi_type_longdouble;
                  break;
                case (INTVAL)'O':   /* push PMC * invocant */
                  /* TODO: Fix invocant */
                  *type_obj = &ffi_type_pointer;
                  /* sig_buf[j++] = 'P';
                   sig_buf[j++] = 'i'; */
                  break;
                case (INTVAL)'@':   /* push PMC * slurpy */
                  *type_obj = &ffi_type_pointer;
                  /* 
                   sig_buf[j++] = 'P';
                   sig_buf[j++] = 's'; */
                  break;
              }
            i++;
			
            if (i < sig_length)
                c = Parrot_str_indexed(interp, sig, i);
            else
                return i;
        }
        else {
			      Parrot_ex_throw_from_c_args(interp, NULL,
                            EXCEPTION_JIT_ERROR,
                            "Unknown param Signature %c\n", (char)c);
        }
		
        // Parse postfix ops
        // TODO: Parse postfix ops, currently I skip them.
        while (IS_POSTFIX(c)) {
            i++;
            if (i < sig_length)
                c = Parrot_str_indexed(interp, sig, i);
            else
                return i;
        }
		
        // apply_modifiers(type, prefix, postfix);
		
        if ((i < sig_length) && (c == (INTVAL)'|')) {
            // Its a union, parse it special. 
        } else {
            done = 1;
        }
    }
	
    return i;
}

INTVAL
parse_prefix(INTVAL c) {
    switch (c) {
        case '*':
            return PREFIX_POINTER;
        case 'u':
            return PREFIX_UNSIGNED;
        case 's':
            return PREFIX_SIGNED;
    }
	
    return 0;
}

size_t
parse_structure(PARROT_INTERP, STRING* sig, size_t start, size_t sig_length, ffi_type **type_obj, void* pmc_type) {
    size_t i = start;
    size_t struct_len = structure_length(interp, sig, start, sig_length);
	
    // TODO: Fix Malloc
    *type_obj = malloc(sizeof(ffi_type));
    (*type_obj)->elements = calloc(struct_len + 1, sizeof(ffi_type*));
	
    (*type_obj)->size = (*type_obj)->alignment = 0;
    (*type_obj)->type = FFI_TYPE_STRUCT;
	
    size_t element_counter = 0;
	
    INTVAL c = Parrot_str_indexed(interp, sig, i);
    while (i < sig_length && IS_NOT_END_CIRCUMFIX(c)) {
        i = parse_identifier(interp, sig, i, sig_length, &(*type_obj)->elements[element_counter], NULL);
        element_counter++;
        c = Parrot_str_indexed(interp, sig, i);
    }
	
    (*type_obj)->elements[struct_len] = NULL;
	
    return i;
}

size_t 
structure_length(PARROT_INTERP, STRING* sig, size_t start, size_t sig_length) {
    size_t len = 0;
    size_t i = start;
    INTVAL depth = 0;
    INTVAL c = Parrot_str_indexed(interp, sig, i);
    while (i < sig_length && depth != -1) {
        if (IS_START_CIRCUMFIX(c)) depth++;
        else if (IS_END_CIRCUMFIX(c)) depth--;
        else if (depth == 0 && (IS_TYPE(c))) len++;
        i++;
        c = Parrot_str_indexed(interp, sig, i);
    }
	
    return len;
}

size_t
find_matching(PARROT_INTERP, STRING* sig, size_t start, size_t sig_length, INTVAL start_character, INTVAL end_character) {
    size_t i = start;
    INTVAL c = Parrot_str_indexed(interp, sig, i);
    while (i < sig_length && c != end_character) {
        if (c == start_character)
            i = find_matching(interp, sig, i, sig_length, start_character, end_character);
        i++;
        c = Parrot_str_indexed(interp, sig, i);
    }
	
    return i;
}

size_t
count_args(PARROT_INTERP, STRING* sig, size_t start, size_t sig_length) {
    size_t length = 0;
    size_t i = start;
	
    while (i < sig_length) {
        const INTVAL c = Parrot_str_indexed(interp, sig, i);    
        if (IS_START_CIRCUMFIX(c)) {
            i = find_matching(interp, sig, i + 1, sig_length, '(', ')');
            length++;
        }
        else if (IS_TYPE(c)) {
            length++;
        }
        i++; 
    }
	
    return length;
}

static void
pcc_params(PARROT_INTERP, ARGIN(STRING *sig), ARGMOD(Parrot_NCI_attributes *nci_info),
                size_t sig_length)
{
    ASSERT_ARGS(pcc_params)

    /* NCI and PCC have a 1 to 1 mapping except an
       extra char in PCC for invocant and slurpy */
    size_t       buf_length = sig_length + 2 + 1;

    /* avoid malloc churn on common signatures */
    char         static_buf[16];
    char * const sig_buf = sig_length <= sizeof static_buf ?
                            static_buf :
                            (char *)mem_sys_allocate(buf_length);

    size_t j = 0;
    size_t i;

    for (i = 0; i < sig_length; ++i) {
        const INTVAL c = Parrot_str_indexed(interp, sig, i);

        PARROT_ASSERT(j < buf_length - 1);

        switch (c) {
          case (INTVAL)'0':    /* null ptr or such - doesn't consume a reg */
            break;
          case (INTVAL)'f':
          case (INTVAL)'N':
          case (INTVAL)'d':
            sig_buf[j++] = 'N';
            break;
          case (INTVAL)'I':   /* INTVAL */
          case (INTVAL)'l':   /* long */
          case (INTVAL)'i':   /* int */
          case (INTVAL)'s':   /* short */
          case (INTVAL)'c':   /* char */
            sig_buf[j++] = 'I';
            break;
          case (INTVAL)'S':
          case (INTVAL)'t':   /* string, pass a cstring */
            sig_buf[j++] = 'S';
            break;
          case (INTVAL)'J':   /* interpreter */
            break;
          case (INTVAL)'p':   /* push pmc->data */
          case (INTVAL)'P':   /* push PMC * */
          case (INTVAL)'V':   /* push PMC * */
          case (INTVAL)'2':
          case (INTVAL)'3':
          case (INTVAL)'4':
            sig_buf[j++] = 'P';
            break;
          case (INTVAL)'v':
            /* null return */
            if (j == 0)
                sig_buf[j++] = '\0';
            break;
          case (INTVAL)'O':   /* push PMC * invocant */
            sig_buf[j++] = 'P';
            sig_buf[j++] = 'i';
            break;
          case (INTVAL)'@':   /* push PMC * slurpy */
            sig_buf[j++] = 'P';
            sig_buf[j++] = 's';
            break;
          case (INTVAL)'b': /* buffer (void*) pass Buffer_bufstart(SReg) */
          case (INTVAL)'B': /* buffer (void**) pass &Buffer_bufstart(SReg) */
            sig_buf[j++] = 'S';
            break;
          default:
            Parrot_ex_throw_from_c_args(interp, NULL,
                    EXCEPTION_JIT_ERROR,
                    "Unknown param Signature %c\n", (char)c);
            break;
        }
    }

    PARROT_ASSERT(j < buf_length);
    sig_buf[j++] = '\0';


    nci_info->pcc_return_signature =
        Parrot_str_new(interp, sig_buf, 1);

    nci_info->pcc_params_signature = j ?
        Parrot_str_new(interp, sig_buf + 1, j - 1) :
        CONST_STRING(interp, "");

    if (sig_buf != static_buf)
        mem_sys_free(sig_buf);
}

/* actually build the NCI thunk */

PARROT_IGNORABLE_RESULT
static ffi_cif*
build_func(PARROT_INTERP, ARGMOD(Parrot_NCI_attributes *nci_info))
{
    ASSERT_ARGS(build_func)

    STRING * const key      = nci_info->signature;
    const size_t key_length = Parrot_str_byte_length(interp, key);

    INTVAL r = parse_sig(interp, nci_info->signature, key_length, nci_info);
    printf("H?\n");
    if (r) {
        printf("cif worked?!\n");
    }
    else {
        printf("cif didn't work...\n");
    }

    return (ffi_cif*)nci_info->cif;
}


pmclass NCI auto_attrs provides invokable {
    /* NCI thunk handling attributes */
    ATTR STRING    *signature;              /* The signature. */
    ATTR void      *func;                   /* Function pointer to call. */
    ATTR PMC       *fb_info;                /* Frame-builder info */
    ATTR void      *cif;                    /* Function interface */

    /* Parrot Sub-ish attributes */
    ATTR STRING    *pcc_params_signature;
    ATTR STRING    *pcc_return_signature;
    ATTR INTVAL     arity;                  /* Cached arity of the NCI. */

    /* MMD fields */
    ATTR STRING    *long_signature;         /* The full signature. */
    ATTR PMC       *multi_sig;              /* type tuple array (?) */

/*

=item C<METHOD get_multisig()>

Return the MMD signature PMC, if any or a Null PMC.

=cut

*/

    METHOD get_multisig() {
        PMC *sig;
        GET_ATTR_multi_sig(INTERP, SELF, sig);
        if (PMC_IS_NULL(sig))
            sig = PMCNULL;
        RETURN(PMC *sig);
    }

/*

=item C<METHOD set_raw_nci_ptr(void *func)>

Sets the specified function pointer and raw flag.

=cut

*/

    METHOD make_raw_nci(PMC *func) {
        VTABLE_set_pointer(interp, SELF, (void *)func);
    }

/*

=item C<void init()>

Initializes the NCI with a C<NULL> function pointer.

=cut

*/

    VTABLE void init() {
        /* Mark that we're not a raw NCI. */
        PObj_flag_CLEAR(private2, SELF);
        PObj_custom_mark_SET(SELF);
    }

/*

=item C<void set_pointer_keyed_str(STRING *key, void *func)>

Sets the specified function pointer and signature (C<*key>).

=cut

*/

    VTABLE void set_pointer(void *ptr) {
        // SET_ATTR_cif(INTERP, SELF, ptr);
        //PObj_flag_SET(private2, SELF);
        printf("PRobably a bad thing\n");
    }

    VTABLE void *get_pointer() {
        return PARROT_NCI(SELF)->cif;
    }

    VTABLE void set_pointer_keyed_str(STRING *key, void *func) {
        Parrot_NCI_attributes * const nci_info   = PARROT_NCI(SELF);

        /* Store the original function and signature. */
        SET_ATTR_func(INTERP, SELF, func);

        /* ensure that the STRING signature is constant */
        if (!PObj_constant_TEST(key)) {
            char * const key_c      = Parrot_str_to_cstring(INTERP, key);
            const size_t key_length = Parrot_str_byte_length(interp, key);
            key                     = string_make(interp, key_c, key_length,
                                        NULL, PObj_constant_FLAG);
            Parrot_str_free_cstring(key_c);
        }

        nci_info->signature = key;
    }

/*

=item C<void mark()>

Mark any referenced strings and PMCs.

=cut

*/
    VTABLE void mark() {
        if (PARROT_NCI(SELF)) {
            Parrot_NCI_attributes * const nci_info = PARROT_NCI(SELF);

            Parrot_gc_mark_PMC_alive(interp, nci_info->fb_info);
            Parrot_gc_mark_STRING_alive(interp, nci_info->signature);
            Parrot_gc_mark_STRING_alive(interp, nci_info->pcc_params_signature);
            Parrot_gc_mark_STRING_alive(interp, nci_info->pcc_params_signature);
            Parrot_gc_mark_STRING_alive(interp, nci_info->long_signature);
            Parrot_gc_mark_PMC_alive(interp, nci_info->multi_sig);
        }
    }

/*

=item C<PMC *clone()>

Creates and returns a clone of the NCI.

=cut

*/

    VTABLE PMC *clone() {
        Parrot_NCI_attributes * const nci_info_self = PARROT_NCI(SELF);
        Parrot_NCI_attributes *nci_info_ret;
        void                  *cif;

        PMC * const ret     = Parrot_pmc_new(INTERP, SELF->vtable->base_type);
        nci_info_ret        = PARROT_NCI(ret);

        /* FIXME if data is malloced (JIT/i386!) then we need
         * the length of data here, to memcpy it
         * ManagedStruct or Buffer?
         */
        nci_info_ret->func                  = nci_info_self->func;
        nci_info_ret->fb_info               = nci_info_self->fb_info;
        nci_info_ret->cif                   = nci_info_self->cif;
        nci_info_ret->signature             = nci_info_self->signature;
        nci_info_ret->pcc_params_signature  = nci_info_self->pcc_params_signature;
        nci_info_ret->pcc_return_signature  = nci_info_self->pcc_params_signature;
        nci_info_ret->arity                 = nci_info_self->arity;
        PObj_get_FLAGS(ret)                |= (PObj_get_FLAGS(SELF) & 0x7);

        return ret;
    }

/*

=item C<INTVAL defined()>

Returns whether the NCI is defined.

=cut

*/

    VTABLE INTVAL defined() {
        Parrot_NCI_attributes * const nci_info = PARROT_NCI(SELF);
        return nci_info->cif != NULL;
    }

/*

=item C<opcode_t *invoke(void *next)>

Calls the associated C function, returning C<*next>. If the invocant is a
class, the PMC arguments are shifted down.

=cut

*/

    VTABLE opcode_t *invoke(void *next) {
        Parrot_NCI_attributes * const nci_info = PARROT_NCI(SELF);
        //nci_thunk_t                   func;
        char                         *sig_str;
        void                         *cif;
        PMC                          *cont;
        void* (*func)(void*);


        GET_ATTR_cif(INTERP, SELF, cif);
        GET_ATTR_func(INTERP, SELF, func);

        if (!cif) {
            /* build the thunk only when necessary */
            cif = build_func(interp, nci_info);

            if (!cif && !func)
                Parrot_ex_throw_from_c_args(INTERP, NULL,
                    EXCEPTION_INVALID_OPERATION,
                    "attempt to call NULL function");
        }

        void* result = malloc(sizeof(return_type));

        ffi_call(cif, func, return_type, values);
        cont = INTERP->current_cont;

        /*
         * If the NCI function was tailcalled, the return result
         * is already passed back to the caller of this frame
         * - see  Parrot_init_ret_nci(). We therefore invoke the
         * return continuation here, which gets rid of this frame
         * and returns the real return address
         */
        if (cont && cont != NEED_CONTINUATION
        && (PObj_get_FLAGS(cont) & SUB_FLAG_TAILCALL)) {
            cont = Parrot_pcc_get_continuation(interp, CURRENT_CONTEXT(interp));
            next = VTABLE_invoke(INTERP, cont, next);
        }

        return (opcode_t *)next;
    }

/*

=item C<INTVAL get_integer()>

Returns the function pointer as an integer.

=cut

*/

    VTABLE INTVAL get_integer() {
        Parrot_NCI_attributes * const nci_info = PARROT_NCI(SELF);
        if (!nci_info->func)
            build_func(INTERP, nci_info);
        return (INTVAL)nci_info->func;
    }

/*

=item C<INTVAL get_bool()>

Returns the boolean value of the pointer.

=cut

*/

    VTABLE INTVAL get_bool() {
        Parrot_NCI_attributes * const nci_info = PARROT_NCI(SELF);
        return (0 != (INTVAL)nci_info->cif);
    }

/*

=item C<METHOD arity()>

Return the arity of the NCI (the number of arguments).

=cut

*/
    METHOD arity() {
        Parrot_NCI_attributes * const nci_info = PARROT_NCI(SELF);
        INTVAL arity = 0;

        if (nci_info) {
            if (!nci_info->func)
                build_func(INTERP, nci_info);
            if (nci_info->func) {
                arity = nci_info->arity;
                RETURN(INTVAL arity);
            }
        }

        Parrot_ex_throw_from_c_args(INTERP, NULL,
            EXCEPTION_INVALID_OPERATION,
            "You cannot get the arity of an undefined NCI.");
    }
}

/*

=back

=head1 SEE ALSO

F<docs/pdds/pdd03_calling_conventions.pod>.

=head1 HISTORY

Initial revision by sean 2002/08/04.

Updates by John Harrison, Summer 2010, GSoC.

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */

