/*
Copyright (C) 2001-2009, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/coroutine.pmc - Co-Routine PMC

=head1 DESCRIPTION

C<Coroutine> extends C<Sub> to provide a subroutine that can
stop in the middle, and start back up later at the point at which it
stopped. See the L<Glossary|docs/glossary.pod> for more information.

=head2 Flags

=over 4

=item private0 call flip flop

=item private3 restore current sub after "flop".  Used by generators.

=back

=head2 Methods

=over 4

=cut

*/

#include "parrot/oplib/ops.h"

static void
print_sub_name(PARROT_INTERP, PMC *sub_pmc)
{
    /* It's actually a Parrot_coro, but this avoids casting warnings. */
    Parrot_Sub_attributes *co = PARROT_SUB(sub_pmc);
    Interp      * const tracer = (interp->pdb && interp->pdb->debugger) ?
        interp->pdb->debugger :
        interp;

    Parrot_io_eprintf(tracer, "# %s coro '%Ss'",
        !(PObj_get_FLAGS(sub_pmc) & SUB_FLAG_CORO_FF) ?
        "Calling" : "yielding from",
        Parrot_full_sub_name(interp, sub_pmc));

    if (co->ctx && (PObj_get_FLAGS(sub_pmc) & SUB_FLAG_CORO_FF)) {
        Parrot_io_eprintf(tracer, " to '%Ss'",
                Parrot_full_sub_name(interp,
                    Parrot_pcc_get_sub(interp, Parrot_pcc_get_caller_ctx(interp, co->ctx))));
    }

    Parrot_io_eprintf(tracer, "\n# ");
    print_pbc_location(interp);
}

pmclass Coroutine extends Sub auto_attrs {
    ATTR PackFile_ByteCode *caller_seg; /* bytecode segment */
    ATTR opcode_t *address;             /* next address to run - toggled each time */
    ATTR INTVAL yield;                  /* yield in process */

/*

=item C<void init()>

Initializes the coroutine.

=item C<PMC *clone()>

Clone the coroutine.

=cut

*/

    VTABLE void init() {
        Parrot_Coroutine_attributes *attrs = PARROT_COROUTINE(SELF);

        attrs->seg = INTERP->code;
        attrs->ctx = PMCNULL;

        PObj_custom_mark_destroy_SETALL(SELF);
    }


/*

=item C<PMC * clone()>

Clones the coroutine.

=cut

*/

    VTABLE PMC *clone() {
        PMC * const ret = pmc_new(INTERP, SELF->vtable->base_type);
        Parrot_Coroutine_attributes * const sub      = PARROT_COROUTINE(SELF);
        Parrot_Coroutine_attributes * const coro_sub = PARROT_COROUTINE(ret);

        PObj_custom_mark_destroy_SETALL(ret);

        memcpy(coro_sub, sub, sizeof (Parrot_Coroutine_attributes));

        coro_sub->name = Parrot_str_copy(INTERP, coro_sub->name);

        return ret;
    }

/*

=item C<void increment()>

Signals the start of a yield.

=cut

*/

    VTABLE void increment() {
        SET_ATTR_yield(INTERP, SELF, 1);
    }

/*

=item C<opcode_t *invoke(void *next)>

Swaps the "context".

=cut

*/

    VTABLE opcode_t *invoke(void *next) {
        PackFile_ByteCode *wanted_seg;
        Parrot_Coroutine_attributes * const co = PARROT_COROUTINE(SELF);
        opcode_t * dest = co->address;
        opcode_t * const next_op = (opcode_t *)next;

        if (Interp_trace_TEST(INTERP, PARROT_TRACE_SUB_CALL_FLAG))
            print_sub_name(INTERP, SELF);

        if (PMC_IS_NULL(co->ctx)) {
            PMC * const caller_ctx = CURRENT_CONTEXT(interp);
            PMC *ctx;
            PMC *ccont = INTERP->current_cont;

            if (ccont == NEED_CONTINUATION)
                ccont = (PMC *)new_ret_continuation_pmc(interp, next_op);

            if (PObj_get_FLAGS(ccont) & SUB_FLAG_TAILCALL)
                Parrot_ex_throw_from_c_args(INTERP, NULL, CONTROL_ERROR,
                        "tail call to coro not allowed");

            /* first time set current sub, cont, object */
            ctx = Parrot_pcc_get_signature(INTERP, caller_ctx);
            if (PMC_IS_NULL(ctx))
                ctx = pmc_new(INTERP, enum_class_CallContext);
            CURRENT_CONTEXT(INTERP) = ctx;
            Parrot_pcc_allocate_registers(INTERP, ctx, co->n_regs_used);
            Parrot_pcc_set_caller_ctx(INTERP, ctx, caller_ctx);
            Parrot_pcc_init_context(INTERP, ctx, caller_ctx);

            co->ctx = ctx;

            PARROT_CONTINUATION(ccont)->from_ctx = ctx;
            Parrot_pcc_set_sub(INTERP, ctx, SELF);
            Parrot_pcc_set_continuation(INTERP, ctx, ccont);
            Parrot_pcc_set_object(interp, ctx, PMCNULL);
            INTERP->current_object = PMCNULL;
            INTERP->current_cont   = PMCNULL;

            /* create pad if needed */
            if (!PMC_IS_NULL(co->lex_info)) {
                const INTVAL hlltype = Parrot_get_ctx_HLL_type(interp, enum_class_LexPad);
                PMC * const lexpad = pmc_new_init(INTERP, hlltype, co->lex_info);
                Parrot_pcc_set_lex_pad(INTERP, ctx, lexpad);
                VTABLE_set_pointer(INTERP, lexpad, ctx);
            }

            PObj_get_FLAGS(SELF) |= SUB_FLAG_CORO_FF;
            wanted_seg            = co->seg;
            co->caller_seg        = INTERP->code;
            co->address           = co->seg->base.data + co->start_offs;
        }

        /* if calling the Coro we need the segment of the Coro */
        else if (!(PObj_get_FLAGS(SELF) & SUB_FLAG_CORO_FF)) {
            PMC * const ctx   = co->ctx;
            PMC * const ccont = Parrot_pcc_get_continuation(INTERP, ctx);

            PObj_get_FLAGS(SELF) |= SUB_FLAG_CORO_FF;
            wanted_seg            = co->seg;

            /* remember segment of caller */
            co->caller_seg        = INTERP->code;

            /* and the recent call context */
            PARROT_CONTINUATION(ccont)->to_ctx = CURRENT_CONTEXT(interp);
            Parrot_pcc_set_caller_ctx(interp, ctx, CURRENT_CONTEXT(interp));

            /* set context to coro context */
            CURRENT_CONTEXT(interp) = ctx;
        }
        else {
            PMC * const ccont = Parrot_pcc_get_continuation(INTERP, co->ctx);
            PMC * const ctx   = PARROT_CONTINUATION(ccont)->to_ctx;
            INTVAL yield;
            GET_ATTR_yield(INTERP, SELF, yield);
            if (! yield)
                Parrot_ex_throw_from_c_args(INTERP, NULL, CONTROL_ERROR,
                               "Cannot resume dead coroutine.");
            SET_ATTR_yield(INTERP, SELF, 0);

            PObj_get_FLAGS(SELF) &= ~SUB_FLAG_CORO_FF;
            /* switch back to last remembered code seg and context */

            wanted_seg            = co->caller_seg;

            if (PMC_IS_NULL(ctx)) {
                /* This still isn't quite right, but it beats segfaulting.  See
                   the "Call an exited coroutine" case in t/pmc/coroutine.t; the
                   problem is that the defunct coroutine yields up one more
                   result before we get here.  -- rgr, 7-Oct-06.
                 * This may be unneeded after the yield fix, see TT #1003
                 */
                Parrot_ex_throw_from_c_args(INTERP, NULL, CONTROL_ERROR,
                               "Cannot resume dead coroutine.");
            }

            CURRENT_CONTEXT(interp) = ctx;
        }

        /* toggle address */
        dest        = co->address;
        co->address = (opcode_t *)next;

        if (INTERP->code != wanted_seg)
            Parrot_switch_to_cs(INTERP, wanted_seg, 1);

        return dest;
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
