/*
Copyright (C) 2008, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/pipehandle.pmc - PipeHandle PMC

=head1 DESCRIPTION

The PipeHandle PMC is an I/O handle used to access one endpoint of a Pipe pair.
It is created by the Pipe PMC.

This object may be read-only or write-only, depending on which side of the Pipe
it is.

=head2 Vtable Functions

=over 4

=cut

*/

#include "../src/io/io_private.h"

pmclass PipeHandle extends Handle {
    ATTR PIOHANDLE child;

/*

=item C<void init()>

Initializes a newly created Socket object.

=cut

*/

    VTABLE void init() {
        Parrot_PipeHandle_attributes *attrs =
                mem_allocate_zeroed_typed(Parrot_PipeHandle_attributes);

        PMC_data(SELF) = attrs;
        attrs->child     = PIO_INVALID_HANDLE;
        attrs->os_handle = PIO_INVALID_HANDLE;
        attrs->flags     = 0;

        PObj_active_destroy_SET(SELF);
    }


/*

=item C<PMC *clone()>

Create a copy of the pipe handle.

=cut

*/

    VTABLE PMC *clone() {
        PMC * copy = SUPER();
        Parrot_PipeHandle_attributes * const old_struct = PARROT_PIPEHANDLE(SELF);
        Parrot_PipeHandle_attributes * const new_struct = PARROT_PIPEHANDLE(copy);

        new_struct->child = old_struct->child;

        return SELF;
    }

/*

=item C<void destroy()>

Free structures.

=cut

*/
    VTABLE void destroy() {
        if (PARROT_PIPEHANDLE(SELF)) {
            Parrot_PipeHandle_attributes *data_struct = PARROT_PIPEHANDLE(SELF);

            if (data_struct->os_handle != PIO_INVALID_HANDLE)
                Parrot_io_close_piohandle(interp, data_struct->os_handle);
            if (data_struct->child != PIO_INVALID_HANDLE)
                Parrot_io_close_piohandle(interp, data_struct->child);
            data_struct->os_handle = PIO_INVALID_HANDLE;
        }
    }


/*

=item C<INTVAL get_bool()>

Returns whether the Pipe is currently open.

=cut

*/

    VTABLE INTVAL get_bool() {
        Parrot_PipeHandle_attributes * const attrs = PARROT_PIPEHANDLE(SELF);
        return (attrs->os_handle != PIO_INVALID_HANDLE);
    }


/*

=back

=cut

*/

} /* end pmclass */

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
