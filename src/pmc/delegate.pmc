/*
Copyright (C) 2003-2007, The Perl Foundation.
$Id$

=head1 NAME

src/pmc/delegate.pmc - Delegate PMC

=head1 DESCRIPTION

Delegate each and every function to parrot bytecode.

Almost all methods are auto-generated in lib/Parrot/Pmc2c.pm

=head2 Functions

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "delegate.str"
#include <assert.h>

/*

All these functions to run code can leak a full Parrot register file, as
well as potentially permanently unroot some PMCs or strings, if the
vtable method throws an exception. It really ought be caught rather than
let flow through.

*/

static void
vtable_meth_not_found(PARROT_INTERP, PMC *pmc, const char *meth)
{
    char *_class;

    if (PObj_is_class_TEST(pmc))
        _class = string_to_cstring(interp, PMC_str_val(
            get_attrib_num(
                (SLOTTYPE *)PMC_data(GET_CLASS(PMC_data(pmc), pmc)),
                    PCD_CLASS_NAME)));
    else
        _class = string_to_cstring(interp, pmc->vtable->whoami);

    real_exception(interp, NULL, E_LookupError,
        "Can't find vtable method '%s' in class '%s'", meth, _class);

    string_cstring_free(_class);
}

pmclass delegate {

/*

=back

=head2 Methods

=over 4

=item C<PMC* instantiate(PMC* sig)>

Calls the delegated C<__instantiate> method if it exists.

XXX Actually the PMC compiler should emit different code, if a method is
present in src/pmc/default.pmc. Some defaulted methods like this one have
useful defaults and don't throw exceptions.

=cut

*/


    void init() {
        STRING* const meth = CONST_STRING(interp, "init");
        PMC* const sub = Parrot_find_vtable_meth(INTERP, SELF, meth);
        if (!PMC_IS_NULL(sub))
            Parrot_run_meth_fromc(interp, sub, SELF, meth);
    }

    void init_pmc(PMC* initializer) {
        STRING* const meth = CONST_STRING(interp, "init_pmc");
        PMC* const sub = Parrot_find_vtable_meth(INTERP, SELF, meth);
        if (!PMC_IS_NULL(sub))
            Parrot_run_meth_fromc_args(interp, sub, pmc, meth, "vP", initializer);
    }

    PMC* instantiate(PMC* sig) {
        STRING* const meth = CONST_STRING(interp, "instantiate");
        PMC* const sub = Parrot_find_vtable_meth(INTERP, SELF, meth);
        if (PMC_IS_NULL(sub))
            return SUPER(sig);
        return (PMC*) Parrot_run_meth_fromc(INTERP, sub, SELF, meth);
    }

    void destroy() {
        /* don't delegate destroy */
    }

    void mark() {
        /* don't delegate mark */
    }

    void add_method(STRING *method_name, PMC *sub_pmc) {
        SUPER(method_name, sub_pmc);
    }

    STRING* name() {
        return SELF->vtable->whoami;
    }

    PMC* pmc_namespace() {
        return SELF->vtable->_namespace;
    }

    INTVAL type() {
        return SUPER();
    }

    INTVAL isa(STRING *classname) {
        if (SUPER(classname))
            return 1;

        return 0;
    }

/*

=item C<opcode_t *invoke(void *next)>

Invokes a subroutine.

=cut

*/

    opcode_t* invoke(void *next) {
        STRING* const meth = CONST_STRING(interp, "invoke");
        PMC* const sub = Parrot_find_vtable_meth(INTERP, SELF, meth);
        if (PMC_IS_NULL(sub))
            vtable_meth_not_found(INTERP, SELF, "invoke");
        INTERP->current_object = SELF;
        return VTABLE_invoke(interp, sub, next);
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
