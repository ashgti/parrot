/*
Copyright (C) 2008-2009, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/callsignature.pmc - CallSignature PMC

=head1 DESCRIPTION

The CallSignature PMC is used to store the argument list and argument meta
information for a multiple dispatch call.

=head2 Functions

=over 4

=cut

*/

#define CAPTURE_DATA_SIZE   2
#define CAPTURE_array_CREATE(i, obj) \
    if (!PARROT_CAPTURE(obj)->array) \
        PARROT_CAPTURE(obj)->array = pmc_new((i), enum_class_ResizablePMCArray);
#define CAPTURE_hash_CREATE(i, obj) \
    if (!PARROT_CAPTURE(obj)->hash) \
        PARROT_CAPTURE(obj)->hash = pmc_new((i), enum_class_Hash);

pmclass CallSignature extends Capture auto_attrs provides array provides hash {
    ATTR PMC    *returns;      /* Storage for return arguments */
    ATTR PMC    *type_tuple;   /* Cached argument types for multiple dispatch */
    ATTR STRING *short_sig;    /* Simple string signature args & returns */
    ATTR PMC    *arg_flags;    /* Integer array of argument flags */
    ATTR PMC    *return_flags; /* Integer array of return argument flags */

/*

=item C<void init()>

Initializes a newly created CallSignature object.

=cut

*/

    VTABLE void init() {
        Parrot_CallSignature_attributes * const sig_struct =
            (Parrot_CallSignature_attributes *) PMC_data(SELF);
        SUPER();
        sig_struct->type_tuple = PMCNULL;
        sig_struct->returns    = PMCNULL;
    }

/*

=item C<void set_string_native(STRING *value)>

Sets the short signature for the CallSignature.

=cut

*/

    VTABLE void set_string_native(STRING *value) {
        Parrot_CallSignature_attributes * const sig_struct = PARROT_CALLSIGNATURE(SELF);
        sig_struct->short_sig = value;
    }

/*

=item C<STRING *get_string()>

Returns the short signature for the CallSignature.

=cut

*/

    VTABLE STRING *get_string() {
        Parrot_CallSignature_attributes * const sig_struct = PARROT_CALLSIGNATURE(SELF);
        return sig_struct->short_sig;
    }

/*

=item C<void set_pmc(PMC *value)>

Sets a fixed-size array of integer types (a type tuple) for the CallSignature.

=cut

*/

    VTABLE void set_pmc(PMC *value) {
        Parrot_CallSignature_attributes * const sig_struct = PARROT_CALLSIGNATURE(SELF);
        sig_struct->type_tuple = value;
    }

/*

=item C<PMC *get_pmc()>

Returns a fixed-size array of integer types (a type tuple) for the
CallSignature.

=cut

*/

    VTABLE PMC *get_pmc() {
        PMC *type_tuple;

        GET_ATTR_type_tuple(INTERP, SELF, type_tuple);

        if (PMC_IS_NULL(type_tuple)) {
            type_tuple = Parrot_mmd_build_type_tuple_from_sig_obj(INTERP, SELF);
            SET_ATTR_type_tuple(INTERP, SELF, type_tuple);
        }

        return type_tuple;

    }

/*

=item C<void set_attr_str(STRING *key, PMC *value)>

Set a PMC value for an attribute by string name.

=over

=item returns

Stores the return signature, an array of PMCs.

=item arg_flags

Stores a set of flags for the call signature arguments, an array of
integers.

=item return_flags

Stores a set of flags for the call signature return arguments, an array
of integers.

=back

=cut

*/

    VTABLE void set_attr_str(STRING *key, PMC *value) {

        if (Parrot_str_equal(INTERP, key, CONST_STRING(INTERP, "returns"))) {
            SET_ATTR_returns(interp, SELF, value);
        }
        else if (Parrot_str_equal(INTERP, key, CONST_STRING(INTERP, "arg_flags"))) {
            SET_ATTR_arg_flags(interp, SELF, value);
        }
        else if (Parrot_str_equal(INTERP, key, CONST_STRING(INTERP, "return_flags"))) {
            SET_ATTR_return_flags(interp, SELF, value);
        }
        else {
            /* If unknown attribute name, throw an exception. */
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_ATTRIB_NOT_FOUND,
                "No such attribute '%S'", key);
        }
    }

/*

=item C<PMC *get_attr_str(STRING *key)>

Get a PMC value for an attribute by string name.

=over

=item returns

Retrieves the return signature, an array of PMCs.

=item arg_flags

Retrieves the flags for the call signature arguments, an array of
integers.

=item return_flags

Retrieves the flags for the call signature return arguments, an array of
integers.

=back

=cut

*/

    VTABLE PMC *get_attr_str(STRING *key) {
        PMC *value = PMCNULL;

        if (Parrot_str_equal(INTERP, key, CONST_STRING(INTERP, "returns"))) {
            GET_ATTR_returns(interp, SELF, value);
        }
        else if (Parrot_str_equal(INTERP, key, CONST_STRING(INTERP, "arg_flags"))) {
            GET_ATTR_arg_flags(interp, SELF, value);
        }
        else if (Parrot_str_equal(INTERP, key, CONST_STRING(INTERP, "return_flags"))) {
            GET_ATTR_return_flags(interp, SELF, value);
        }
        else {
            /* If unknown attribute name, throw an exception. */
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_ATTRIB_NOT_FOUND,
                "No such attribute '%S'", key);
        }

        return value;
    }

/*

=item C<void mark()>

Mark any referenced strings and PMCs.

=cut

*/
    VTABLE void mark() {
        Parrot_CallSignature_attributes * const attrs = PARROT_CALLSIGNATURE(SELF);

        if (attrs) {
            Parrot_gc_mark_PMC_alive(interp, attrs->returns);
            Parrot_gc_mark_PMC_alive(interp, attrs->type_tuple);
            Parrot_gc_mark_STRING_alive(interp, attrs->short_sig);
        }
        SUPER();
    }


/*

=back

=cut

*/

} /* end pmclass */

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
