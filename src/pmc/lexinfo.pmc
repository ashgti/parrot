/*
Copyright (C) 2008-2010, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/lexinfo.pmc - LexInfo PMC

=head1 DESCRIPTION

These are the vtable functions for the lexinfo PMC.

=head2 Functions

=over 4

=cut

*/

#include "pmc/pmc_hash.h"

/* HEADERIZER HFILE: none */
/* HEADERIZER BEGIN: static */
/* HEADERIZER END: static */

/*
 * LexInfo contains a constant Hash with constant string
 * keys and integer indices
 */

pmclass LexInfo extends Hash  provides hash no_ro auto_attrs {

/*

=item C<void class_init()>

Manipulate vtable->flags so that constant PMCs are created.
If your inherited LexInfo is not so constant, then don't
do that and provide a mark() method and set the custom_mark flag.

=item C<init_pmc(PMC *sub)>

Initialize the LexInfo PMC and remember the associate
subroutine.

=cut

*/

    void class_init() {

        /* there is no pmclass const_pmc flag yet */
        interp->vtables[entry]->flags |= VTABLE_IS_CONST_PMC_FLAG;

    }

    VTABLE void init() {
        PARROT_ASSERT(PObj_constant_TEST(SELF));

        /* Set value type to INTVAL */
        Parrot_pcc_invoke_method_from_c_args(interp, SELF, CONST_STRING(INTERP, "set_value_type"), "I->", (INTVAL)enum_type_INTVAL);
        PObj_custom_mark_destroy_SETALL(SELF);
    }

    VTABLE void init_pmc(PMC *sub) {
        UNUSED(sub);
        SELF.init();
    }

/*

=item C<void declare_lex_preg(STRING *name, INTVAL preg)>

Declare a lexical variable that is an alias for a PMC register.  The PIR
compiler calls this method in response to a ".lex STRING, PREG" directive.

=cut

*/

    METHOD declare_lex_preg(STRING *name, INTVAL preg) {
        VTABLE_set_integer_keyed_str(INTERP, SELF, name, preg);
    }


/*

=item C<PMC *inspect_str(STRING *what)>

Introspects this LexInfo structure. The only valid introspection key is
C<symbols>, which gets an array of the names of the symbols in this lexpad.

=cut

*/

    VTABLE PMC *inspect_str(STRING *what) {
        if (Parrot_str_equal(interp, what, CONST_STRING(interp, "symbols"))) {
            PMC * const result    = Parrot_pmc_new(interp, enum_class_ResizableStringArray);
            const Hash *hash      = (Hash *)SELF.get_pointer();
            const UINTVAL entries = hash->entries;

            UINTVAL found   = 0;
            INTVAL  i;

            for (i = hash->mask; i >= 0; --i) {
                HashBucket *bucket = hash->bi[i];
                while (bucket) {
                    if (++found > entries)
                        Parrot_ex_throw_from_c_args(interp, NULL, 1,
                            "Detected corruption at LexInfo hash %p entries %d",
                            hash, (int)entries);

                    PARROT_ASSERT(bucket->key);
                    VTABLE_push_string(interp, result, (STRING *)bucket->key);

                    bucket = bucket->next;
                }
            }

            return result;
        }
        else
            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
                "Unknown introspection value '%S'", what);
    }
}


/*

=back

=head1 SEE ALSO

F<docs/pdds/pdd20_lexical_vars.pod>, F<src/pmc/lexpad.pmc>.

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
