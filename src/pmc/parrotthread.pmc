/*
Copyright (C) 2001-2007, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/parrotthread.pmc - Threaded Interpreter

=head1 DESCRIPTION

ParrotThread extends ParrotInterpreter to provide a threaded interpreter
which supports:

    new P2, "ParrotThread"        # create new threaded interp
    find_method P0, P2, "thread3" # thread-run function
    find_global P5, "_th1"        # locate thread function
    invoke                        # run thread

    set I0, P2                    # get thread id

and these methods:

    thread1
    thread2
    thread3                   # start thread of type 1..3
    join
    detach
    yield
    kill

=head2 Methods

=over 4

=cut

*/

#include "parrot/embed.h"

#define PMC_interp(x) ((Parrot_ParrotInterpreter_attributes *)PMC_data(x))->interp

/*
 * can't do multi-threaded GC yet
 * XXX a quick hack to pass the few tests
 */
static void
stop_GC(Interp *parent, Interp *thread)
{
    Parrot_block_GC_mark(parent);
    Parrot_block_GC_mark(thread);
    Parrot_block_GC_sweep(parent);
    Parrot_block_GC_sweep(thread);
}

/* XXX FIXME probably not the best interface [see also list post of
   coke's]
 */

static INTVAL do_thread_run(PARROT_INTERP, PMC *thread,
                            INTVAL clone_flags, PMC *sub, PMC *args) {
    INTVAL tid = VTABLE_get_integer(interp, thread);

    if (PMC_IS_NULL(sub)) {
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
            "Invalid thread sub");
    }

    clone_interpreter(PMC_interp(thread), interp, clone_flags);

    interp->flags &= ~PARROT_THR_COPY_INTERP; /* XXX */
    pt_thread_run(interp, thread, sub, args);

    pmc_reuse(interp, thread, enum_class_ParrotRunningThread, 0);

    PObj_custom_mark_CLEAR(thread);
    VTABLE_set_integer_native(interp, thread, tid);

    return tid;
}

static INTVAL do_thread_run_clone_default(PARROT_INTERP,
                                          PMC *thread, PMC *sub, PMC *args) {
    return do_thread_run(interp, thread, PARROT_CLONE_DEFAULT, sub, args);
}


pmclass ParrotThread extends ParrotInterpreter no_ro {

/*

=item C<thread_id = thread.'run'(CLONE_FLAGS, sub, args...)>

Run the thread. This object is morphed into an appropriate
ParrotRunningThread PMC.  The CLONE_FLAGS are or'd together values
taken from C<cloneflags.pasm>.

=item C<thread_id = thread.'run_clone'(sub, args...)>

Equivalent to calling run with PARROT_CLONE_DEFAULT.

=cut

*/

    void class_init() {
        const int typ = enum_class_ParrotThread;

        register_nci_method(INTERP, typ,
                F2DPTR(do_thread_run), "run", "IJOIP@");

        /* XXX appropriate name given that this won't clone globals? */
        register_nci_method(INTERP, typ,
                F2DPTR(do_thread_run_clone_default), "run_clone", "IJOP@");
    }

/*

=item C<void init()>

Initializes the thread.

=cut

*/

    VTABLE void init() {
        /* protect interpreter creation and list handling */
        LOCK(interpreter_array_mutex);

        SUPER();
        pt_add_to_interpreters(INTERP, PMC_interp(SELF));

        UNLOCK(interpreter_array_mutex);

        /* can't allow GC runs for now */
        stop_GC(INTERP, PMC_interp(SELF));
    }

/*

=item C<void init_pmc(PMC *parent)>

Create a new thread by cloning the passed interpreter.

=cut

*/

    VTABLE void init_pmc(PMC *parent) {
        LOCK(interpreter_array_mutex);
        SUPER(parent);

        pt_add_to_interpreters(PMC_interp(parent),
                               PMC_interp(SELF));

        UNLOCK(interpreter_array_mutex);

        /* can't allow GC runs for now */
        stop_GC(INTERP, PMC_interp(SELF));
    }
}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
