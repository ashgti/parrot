/*
Copyright (C) 2001-2008, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/retcontinuation.pmc - Return Continuation

=head1 DESCRIPTION

C<RetContinuation> extends C<Continuation>.

A return continuation is a one shot Continuation.  It gets recycled immediately
after invocation.

=head2 Methods

=over 4

=cut

*/

#include "parrot/oplib/ops.h"

pmclass RetContinuation extends Continuation auto_attrs {

/*

=item C<void init()>

Initializes the continuation.

=cut

*/

    VTABLE void init() {
        Parrot_RetContinuation_attributes * const attrs = PARROT_RETCONTINUATION(SELF);

        attrs->to_ctx          = CURRENT_CONTEXT(interp);
        attrs->from_ctx        = PMCNULL;    /* filled in during a call */
        attrs->runloop_id      = 0;
        attrs->seg             = interp->code;
        attrs->address         = NULL;
    }


/*

=item C<PMC *clone>

Return a new Continuation PMC with the context of SELF. Note: the returned
object is not a RetContinuation and creating a real Continuation invalidates
all RetContinuation all the way up the call chain.  That is, these can't be
recycled; they persist until the GC gets at them.

=cut

*/
    VTABLE PMC *clone() {
        invalidate_retc_context(INTERP, SELF);
        return SUPER();
    }
/*

=item C<opcode_t *invoke(void *next)>

Transfers control to the calling context and frees the current context.

=cut

*/

    VTABLE opcode_t *invoke(void *in_next) {
        Parrot_Continuation_attributes *data = PARROT_CONTINUATION(SELF);
        PMC               *from_ctx   = data->from_ctx;
        PackFile_ByteCode * const seg = data->seg;
        opcode_t          *next       = data->address;
        UNUSED(in_next)

        Parrot_continuation_check(interp, SELF);
        Parrot_continuation_rewind_environment(interp, SELF);

        /* recycle this PMC and make sure it doesn't get marked */
        if (!PMC_IS_NULL(from_ctx))
            Parrot_pcc_set_continuation(interp, from_ctx, NULL);
        Parrot_gc_free_pmc_header(interp, SELF);

        if (INTERP->code != seg)
            Parrot_switch_to_cs(INTERP, seg, 1);

        return next;
    }
}


/*

=back

=head1 HISTORY

Initial revision by sean 2002/08/04.

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
