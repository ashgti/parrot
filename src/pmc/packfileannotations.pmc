/*
Copyright (C) 2001-2008, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/packfileannotations.pmc - PackfileAnnotations PMC

=head1 DESCRIPTION

This class implements a PackfileAnnotations object, a segment of the .pbc data
file used for listing annotations.  It is a container for PackfileAnnotation
objects.

See packfile.pmc for the toplevel Packfile interface, see packfilesegment.pmc
for the list of common methods every packfile segment pmc must implement; see
PDD13 for the design spec.

To works properly PackfileAnnotations has to be added to PackfileDirectory with
PackfileConstantTable. Otherwise PackfileAnnotationKey can't be created.

=head2 Methods

=over 4

=cut

*/

#include "pmc/pmc_packfileannotation.h"

pmclass PackfileAnnotations auto_attrs extends PackfileSegment {
    /* ConstantTable used for names lookup */
    ATTR PMC *const_table;

    /* RPA of Annotation */
    ATTR PMC *annotations;

/*

=item C<void init()>

Initialize PackfileAnnotations.

=cut

*/
    VTABLE void init() {
        Parrot_PackfileAnnotations_attributes * attrs =
                PMC_data_typed(SELF, Parrot_PackfileAnnotations_attributes*);

        attrs->annotations = pmc_new(interp, enum_class_ResizablePMCArray);
        /*
        Don't initialize C<const_table>. It will be set to NULL bu auto_attrs
        handling. And should be set to proper PMC in set_directory.
        */

        PObj_custom_mark_SET(SELF);
    }

/*

=item C<void mark()>

Marks the object as live.

=cut

*/

    VTABLE void mark() {
        Parrot_PackfileAnnotations_attributes * attrs =
                PARROT_PACKFILEANNOTATIONS(SELF);

        Parrot_gc_mark_PMC_alive(interp, attrs->const_table);
        Parrot_gc_mark_PMC_alive(interp, attrs->annotations);

        SUPER();
    }


/*

=item C<INTVAL elements()>

Get the number of elements in the array.

=cut

*/
    VTABLE INTVAL elements() {
        return VTABLE_elements(interp,
                PARROT_PACKFILEANNOTATIONS(SELF)->annotations);
    }


/*

=item C<PMC *get_pmc_keyed_int(INTVAL index)>

Fetch an annotation PMC from the array.

=cut

*/
    VTABLE PMC *get_pmc_keyed_int(INTVAL index)  {
        return VTABLE_get_pmc_keyed_int(interp,
                PARROT_PACKFILEANNOTATIONS(SELF)->annotations, index);
    }


/*

=item C<void set_pmc_keyed_int(INTVAL index, PMC *annotation)>

Add an annotation to the array at the given offset.  An exception will be
thrown unless all of the following criteria are met:

=over 4

=item - The type of the PMC passed is PackfileAnnotation

=item - The entry at the previous index is defined

=item - The offset of the previous entry is less than this entry

=item - The offset of the next entry, if it exists, is greater than this entry

=item - The key ID references a valid annotation key

=back

=cut

*/
    VTABLE void set_pmc_keyed_int(INTVAL index, PMC *annotation)  {
        Parrot_PackfileAnnotations_attributes * attrs =
                PARROT_PACKFILEANNOTATIONS(SELF);
        Parrot_PackfileAnnotation_attributes  * entity_attrs =
                PARROT_PACKFILEANNOTATION(annotation);
        INTVAL dummy;

        /* TODO: add checks desribed above */
        VTABLE_set_pmc_keyed_int(interp, attrs->annotations, index, annotation);

        /* Add required constants */
        Parrot_mmd_multi_dispatch_from_c_args(interp,
            "get_or_create_constant", "PS->I", attrs->const_table,
            entity_attrs->name, &dummy);

        switch (entity_attrs->value_type) {
            case PF_ANNOTATION_KEY_TYPE_STR:
                Parrot_mmd_multi_dispatch_from_c_args(interp,
                    "get_or_create_constant", "PS->I", attrs->const_table,
                    entity_attrs->str_value, &dummy);
                break;

            case PF_ANNOTATION_KEY_TYPE_NUM:
                Parrot_mmd_multi_dispatch_from_c_args(interp,
                    "get_or_create_constant", "PN->I", attrs->const_table,
                    entity_attrs->num_value, &dummy);
                break;

            default:
                /* Do nothing. If value_type if INT it will be stored directly */
                break;
        }
    }

/*

=item C<void set_directory()>

Handle setting of ownership.

Find PackfileConstantTable in PackfileDirectory and pass it to
PackfileAnnotationKeys.

=cut

*/

    METHOD set_directory(PMC *directory) {
        Parrot_PackfileAnnotations_attributes *attrs =
                PARROT_PACKFILEANNOTATIONS(SELF);
        STRING *name;
        PMC    *segment;

        PMC *iter = VTABLE_get_iter(interp, directory);
        while (VTABLE_get_bool(interp, iter)) {
            name = VTABLE_shift_string(interp, iter);
            segment = VTABLE_get_pmc_keyed_str(interp, directory, name);
            if (VTABLE_isa(interp, segment,
                    Parrot_str_new_constant(interp, "PackfileConstantTable"))) {
                attrs->const_table = segment;
                break;
            }
        }
    }

/*

=item C<void set_pointer(void *ptr)>

Initialize PackfileAnnotations from PackFile_Annotations*.

=cut

*/
    VTABLE void set_pointer(void *pointer) {
        PackFile_Annotations * a = (PackFile_Annotations*)pointer;
        Parrot_PackfileAnnotations_attributes *attrs =
                PARROT_PACKFILEANNOTATIONS(SELF);
        opcode_t  i;
        PMC      *annotation;
        Parrot_PackfileAnnotation_attributes *annotation_attrs;

        /* Copy annotations to own array */
        VTABLE_set_integer_native(interp, attrs->annotations, a->num_entries);
        for (i = 0; i < a->num_entries; ++i) {
            PackFile_Annotations_Entry *entry = a->entries[i];
            PackFile_Annotations_Key   *key   = a->keys[entry->key];
            annotation = pmc_new(interp, enum_class_PackfileAnnotation);

            /* Poke directly to annotation attributes. */
            annotation_attrs         = PARROT_PACKFILEANNOTATION(annotation);
            annotation_attrs->offset = entry->bytecode_offset;
            annotation_attrs->name   = VTABLE_get_string_keyed_int(interp,
                    attrs->const_table, key->name);
            switch (key->type) {
                case PF_ANNOTATION_KEY_TYPE_INT:
                    VTABLE_set_integer_native(interp, annotation, entry->value);
                    break;
                case PF_ANNOTATION_KEY_TYPE_STR:
                    VTABLE_set_string_native(interp, annotation,
                        VTABLE_get_string_keyed_int(interp, attrs->const_table, entry->value));
                    break;
                case PF_ANNOTATION_KEY_TYPE_NUM:
                    VTABLE_set_number_native(interp, annotation,
                        VTABLE_get_number_keyed_int(interp, attrs->const_table, entry->value));
                    break;
                default:
                    Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_MALFORMED_PACKFILE,
                            "Unknown value type %d in Packfile Annotation", key->type);
            }

            VTABLE_set_pmc_keyed_int(interp, attrs->annotations, i, annotation);
        }
    }

/*

=item C<void *get_pointer()>

Create PackFile_Annotations* from self.

=cut

*/
    VTABLE void *get_pointer() {
        Parrot_PackfileAnnotations_attributes *attrs =
                PARROT_PACKFILEANNOTATIONS(SELF);
        PackFile_Annotations *res = mem_allocate_zeroed_typed(PackFile_Annotations);
        INTVAL                i, num;
        INTVAL                key_type;
        PMC                  *keys;             /* Temporary representation of Keys */
        PMC                  *names;            /* Constants for Key's names */
        PMC                  *types;            /* Types of Keys */
        INTVAL                key_id;
        INTVAL                last_key_id;
        INTVAL                name_id;

        res->base.type = PF_ANNOTATIONS_SEG;

        /*
            Create keys. Hash will be created in next structure:
            keys => {
                name => [
                    $int_key_id,
                    $str_key_id,
                    $num_key_id,
                ]
            }

            Each key has name from ConstantTable. We store them in names Array.
            names => [
                $constant_id_1,
                $contsant_id_2,
                ...
            ]
        */
        keys        = pmc_new(interp, enum_class_Hash);
        names       = pmc_new(interp, enum_class_ResizableIntegerArray);
        types       = pmc_new(interp, enum_class_ResizableIntegerArray);
        last_key_id = -1;

        /* Iterate over stored annotations and create Key if required. */
        num = VTABLE_elements(interp, attrs->annotations);
        res->num_entries = num;
        res->entries = mem_allocate_n_typed(num, PackFile_Annotations_Entry*);
        for (i = 0; i < num; ++i) {
            PMC  *entity = VTABLE_get_pmc_keyed_int(interp, attrs->annotations, i);
            Parrot_PackfileAnnotation_attributes *entity_attrs = PARROT_PACKFILEANNOTATION(entity);

            /* Handle creating of Key */
            PMC * key_array = VTABLE_get_pmc_keyed_str(interp, keys, entity_attrs->name);
            if (PMC_IS_NULL(key_array)) {
                /* Never see this name before. Create new FIA and add to keys. */
                key_array = pmc_new(interp, enum_class_FixedIntegerArray);
                VTABLE_set_integer_native(interp, key_array, 3);
                VTABLE_set_integer_keyed_int(interp, key_array, 0, -1);
                VTABLE_set_integer_keyed_int(interp, key_array, 1, -1);
                VTABLE_set_integer_keyed_int(interp, key_array, 2, -1);

                VTABLE_set_pmc_keyed_str(interp, keys, entity_attrs->name, key_array);
            }

            /* PackfileAnnotation.value_type exactly the same as key.type */
            key_id = VTABLE_get_integer_keyed_int(interp, key_array, entity_attrs->value_type);

            /* If key_id is -1 it means we have to create new key. */
            if (key_id == -1) {
                key_id = ++last_key_id;
                VTABLE_set_integer_keyed_int(interp, key_array, entity_attrs->value_type, key_id);

                /* Store type */
                VTABLE_set_integer_keyed_int(interp, types, key_id, entity_attrs->value_type);


                /* Store constant for name. */
                Parrot_mmd_multi_dispatch_from_c_args(interp, "get_or_create_constant",
                            "PS->I", attrs->const_table, entity_attrs->name, &name_id);

                VTABLE_set_integer_keyed_int(interp, names, key_id, name_id);
            }

            /* At this point we have create (if nesassary) key and name constant. */
            /* Start storing real entity */
            res->entries[i] = mem_allocate_zeroed_typed(PackFile_Annotations_Entry);

            res->entries[i]->bytecode_offset = entity_attrs->offset;
            res->entries[i]->key             = key_id;

            /* Handle value */
            switch (entity_attrs->value_type) {
                case PF_ANNOTATION_KEY_TYPE_INT:
                    res->entries[i]->value = entity_attrs->int_value;
                    break;
                case PF_ANNOTATION_KEY_TYPE_STR:
                    Parrot_mmd_multi_dispatch_from_c_args(interp, "get_or_create_constant",
                            "PS->I", attrs->const_table, entity_attrs->str_value,
                            &res->entries[i]->value);
                    break;
                case PF_ANNOTATION_KEY_TYPE_NUM:
                    Parrot_mmd_multi_dispatch_from_c_args(interp, "get_or_create_constant",
                            "PN->I", attrs->const_table, entity_attrs->num_value,
                            &res->entries[i]->value);
                    break;
                default:
                    Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_MALFORMED_PACKFILE,
                            "Unknown value type in PackfileAnnotation");
            }
        }

        /* Time to pack keys */
        num = VTABLE_elements(interp, types);
        res->num_keys = num;
        res->keys = mem_allocate_n_typed(num, PackFile_Annotations_Key*);
        for (i = 0; i < num; ++i) {
            res->keys[i] = mem_allocate_typed(PackFile_Annotations_Key);
            res->keys[i]->name = VTABLE_get_integer_keyed_int(interp, names, i);
            res->keys[i]->type = VTABLE_get_integer_keyed_int(interp, types, i);
        }

        return res;
    }

/*

=item C<METHOD type()>

Get segment type.

=cut

*/

    METHOD type() {
        RETURN(INTVAL PF_ANNOTATIONS_SEG);
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
