/*
Copyright (C) 2001-2008, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/packfileannotationkeys.pmc - PackfileAnnotationKeys PMC

=head1 DESCRIPTION

This class implements a PackfileAnnotationKeys object, an array storing the
table of keys and types contained within a PackfileAnnotations container.

See packfile.pmc for the toplevel Packfile interface, see packfilesegment.pmc
for the list of common methods every packfile segment pmc must implement; see
PDD13 for the design spec.


=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

/*
Fetch PackfileConstantTable from PackfileAnnotationKeys.
Throw exception if table wasn't initilized.
*/
static PMC *
fetch_const_table(PARROT_INTERP, PMC *self) {
    PMC * table = PARROT_PACKFILEANNOTATIONKEYS(self)->const_table;
    if (!table)
        Parrot_ex_throw_from_c_args(interp, NULL,
                EXCEPTION_PARROT_USAGE_ERROR, "Wrong Annotation initialization");

    return table;
}

pmclass PackfileAnnotationKeys {
    /* ConstantTable used for names lookup */
    ATTR PMC *const_table;

    /* RIA of Names */
    ATTR PMC *names;

    /* RIA of Types */
    ATTR PMC *types;

/*

=item C<void init()>

Initialize PackfileAnnotationKeys.

=cut

*/
    VTABLE void init() {
        Parrot_PackfileAnnotationKeys_attributes * attrs =
                mem_allocate_zeroed_typed(Parrot_PackfileAnnotationKeys_attributes);

        attrs->const_table = NULL;
        attrs->names       = pmc_new(interp, enum_class_ResizableIntegerArray);
        attrs->types       = pmc_new(interp, enum_class_ResizableIntegerArray);

        PObj_custom_mark_destroy_SETALL(SELF);
        PMC_data(SELF) = attrs;
    }

/*

=item C<void mark()>

Marks the object as live.

=cut

*/

    VTABLE void mark() {
        Parrot_PackfileAnnotationKeys_attributes * attrs =
                PARROT_PACKFILEANNOTATIONKEYS(SELF);

        if (attrs->const_table)
            pobject_lives(interp, (PObj *)attrs->const_table);
        if (attrs->names)
            pobject_lives(interp, (PObj *)attrs->names);
        if (attrs->types)
            pobject_lives(interp, (PObj *)attrs->types);
    }

/*

=item C<void destroy()>

Destroys the PMC and frees all allocated memory.

=cut

*/

    VTABLE void destroy() {
        Parrot_PackfileAnnotationKeys_attributes * attrs =
                PARROT_PACKFILEANNOTATIONKEYS(SELF);

        if (attrs) {
            mem_sys_free(attrs);
            PMC_data(SELF) = NULL;
        }
    }
/*

=item C<STRING *get_string_keyed_int(INTVAL index)>

Fetch the given entry's name key.

=cut

*/
    VTABLE STRING *get_string_keyed_int(INTVAL index)  {
        Parrot_PackfileAnnotationKeys_attributes *attrs =
                PARROT_PACKFILEANNOTATIONKEYS(SELF);

        PMC     *const_table = fetch_const_table(interp, SELF);
        INTVAL   const_index = VTABLE_get_integer_keyed_int(interp,
                attrs->names, index);
        return VTABLE_get_string_keyed_int(interp, attrs->const_table, const_index);
    }


/*

=item C<void set_string_keyed_int(INTVAL index, STRING *value)>

Store the given entry's name key.

=cut

*/
    VTABLE void set_string_keyed_int(INTVAL index, STRING *value)  {
        Parrot_PackfileAnnotationKeys_attributes *attrs =
                PARROT_PACKFILEANNOTATIONKEYS(SELF);
        PMC    *const_table = fetch_const_table(interp, SELF);
        INTVAL  i;

        /* Store constant into ConstantTable. Don't check for duplicates for now. */
        i = VTABLE_elements(interp, const_table);
        VTABLE_set_string_keyed_int(interp, const_table, i, value);

        /* And store C<i> in names */
        VTABLE_set_integer_keyed_int(interp, attrs->names, index, i);
    }

/*

=item C<INTVAL get_integer_keyed_int(INTVAL index)>

Fetch the given entry's annotation type.

=cut

*/
    VTABLE INTVAL get_integer_keyed_int(INTVAL index)  {
        Parrot_PackfileAnnotationKeys_attributes *attrs =
                PARROT_PACKFILEANNOTATIONKEYS(SELF);

        /* Just ensure sematics */
        PMC * const_table = fetch_const_table(interp, SELF);

        return VTABLE_get_integer_keyed_int(interp, attrs->types, index);
    }


/*

=item C<void set_integer_keyed_int(INTVAL index, INTVAL value)>

Store the given entry's annotation type.

=cut

*/
    VTABLE void set_integer_keyed_int(INTVAL index, INTVAL value)  {
        Parrot_PackfileAnnotationKeys_attributes *attrs =
                PARROT_PACKFILEANNOTATIONKEYS(SELF);
        VTABLE_set_integer_keyed_int(interp, attrs->types, index, value);
    }

/*

=item C<void set_pointer(void *pointer)>

Initialize from PackFile_Annotation pointer.

=cut

*/
    VTABLE void set_pointer(void *pointer) {
        PackFile_Annotations *annotations = (PackFile_Annotations*)pointer;
        Parrot_PackfileAnnotationKeys_attributes *attrs =
                PARROT_PACKFILEANNOTATIONKEYS(SELF);
        opcode_t i;

        for (i = 0; i < annotations->num_keys; ++i) {
            VTABLE_set_integer_keyed_int(interp, attrs->names,
                    i, annotations->keys[i]->name);
            VTABLE_set_integer_keyed_int(interp, attrs->types,
                    i, annotations->keys[i]->type);
        }
    }

/*

=item C<INTVAL elements()>

Get the number of stored Keys.

=cut

*/
    VTABLE INTVAL elements() {
        return VTABLE_elements(interp,
                PARROT_PACKFILEANNOTATIONKEYS(SELF)->names);
    }

/*

=item C<void set_constant_table(PMC *table)>

Set PackfileConstantTable associated with Keys.

=cut

*/
    METHOD set_constant_table(PMC *table) {
        PARROT_PACKFILEANNOTATIONKEYS(SELF)->const_table = table;
    }

/*

=item C<PMC *get_constant_table()>

Get PackfileConstantTable associated with PackfileAnnotationKeys.
Solely for testing purpose only.

=cut

*/
    METHOD get_constant_table() {
        PMC * table = PARROT_PACKFILEANNOTATIONKEYS(SELF)->const_table;
        if (!table)
            table = PMCNULL;
        RETURN(PMC* table);
    }

/*

=item C<INTVAL get_name_constant(INTVAL index)>

Get constant id used for name at given C<index>.

=cut

*/
    METHOD get_name_constant(INTVAL index) {
        Parrot_PackfileAnnotationKeys_attributes *attrs =
                PARROT_PACKFILEANNOTATIONKEYS(SELF);
        INTVAL res = VTABLE_get_integer_keyed_int(interp, attrs->names, index);
        RETURN(INTVAL res);
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
