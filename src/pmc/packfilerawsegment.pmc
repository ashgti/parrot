/*
Copyright (C) 2001-2008, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/packfilerawsegment.pmc - PackfileRawSegment PMC

=head1 DESCRIPTION

This class implements a PackfileRawSegment object, a low level view of a
segment that just splits it into an array of integers.

See packfile.pmc for the toplevel Packfile interface, see packfilesegment.pmc
for the list of common methods every packfile segment pmc must implement; see
PDD13 for the design spec.


=head2 Methods

=over 4

=cut

*/

pmclass PackfileRawSegment auto_attrs extends PackfileSegment {
    /* Type of segment */
    ATTR INTVAL  type;
    /* ResizableIntegerArray of opcodes */
    ATTR PMC    *opcodes;

/*

=item C<init>

Create empty PackfileRawSegment.

=cut

*/

    VTABLE void init() {
        Parrot_PackfileRawSegment_attributes * attrs =
                PMC_data_typed(SELF, Parrot_PackfileRawSegment_attributes*);

        attrs->opcodes = pmc_new(interp, enum_class_ResizableIntegerArray);
        attrs->type    = PF_BYTEC_SEG;

        PObj_custom_mark_SET(SELF);
    }

/*

=item C<void mark()>

Marks the object as live.

=cut

*/

    VTABLE void mark() {
        Parrot_PackfileRawSegment_attributes * attrs =
                PARROT_PACKFILERAWSEGMENT(SELF);

        Parrot_gc_mark_PMC_alive(interp, attrs->opcodes);

        SUPER();
    }


/*

=item C<set_pointer>

Initialize PackfileRawSegment from PackFile_Segment

=cut

*/

    VTABLE void set_pointer(void * pointer) {
        const PackFile_Segment * const pfseg =
                (const PackFile_Segment *)pointer;
        Parrot_PackfileRawSegment_attributes * attrs =
                PARROT_PACKFILERAWSEGMENT(SELF);
        PMC * opcodes = attrs->opcodes;
        size_t i;

        /* Preserve type of unpacked segment */
        attrs->type = pfseg->type;

        if (pfseg->size) {
            /* copy data to own array */
            VTABLE_set_integer_native(interp, opcodes, pfseg->size);
            /* Not very efficient... */
            for (i = 0; i < pfseg->size; ++i) {
                VTABLE_set_integer_keyed_int(interp, opcodes, i, pfseg->data[i]);
            }
        }
    }

/*

=item C<void *get_pointer()>

=cut

*/

    VTABLE void *get_pointer() {
        PackFile_Segment * pfseg =
                (PackFile_Segment*)mem_allocate_zeroed_typed(PackFile_ByteCode);
        Parrot_PackfileRawSegment_attributes * attrs =
                PARROT_PACKFILERAWSEGMENT(SELF);
        PMC * opcodes = attrs->opcodes;
        size_t i;

        pfseg->type     = attrs->type;
        pfseg->size     = VTABLE_get_integer(interp, opcodes);
        pfseg->data     = mem_allocate_n_typed(pfseg->size, opcode_t);

        /* Not very efficient... */
        for (i = 0; i < pfseg->size; ++i) {
            pfseg->data[i] = VTABLE_get_integer_keyed_int(interp, opcodes, i);
        }

        return pfseg;
    }
/*

=item C<INTVAL elements()>

Get the number of elements in the array.

=cut

*/
    VTABLE INTVAL elements() {
        return VTABLE_elements(interp,
                PARROT_PACKFILERAWSEGMENT(SELF)->opcodes);
    }


/*

=item C<INTVAL get_integer_keyed_int(INTVAL key)>

Fetch an integer's worth of data from the segment.

=cut

*/
    VTABLE INTVAL get_integer_keyed_int(INTVAL key)  {
        return VTABLE_get_integer_keyed_int(interp,
                PARROT_PACKFILERAWSEGMENT(SELF)->opcodes, key);
    }


/*

=item C<void set_integer_keyed_int(INTVAL key, INTVAL value)>

Set an integer's worth of data in the segment.

=cut

*/
    VTABLE void set_integer_keyed_int(INTVAL key, INTVAL value)  {
        VTABLE_set_integer_keyed_int(interp,
            PARROT_PACKFILERAWSEGMENT(SELF)->opcodes, key, value);
    }

/*

=item C<void push_integer(INTVAL value)>

Append opcode to segment

=cut

*/
    VTABLE void push_integer(INTVAL value)  {
        VTABLE_push_integer(interp,
            PARROT_PACKFILERAWSEGMENT(SELF)->opcodes, value);
    }

/*

=item C<METHOD type()>

Set of get segment type.

=cut

TODO: Don't allow create Directory, Annotations, etc segments.

*/

    METHOD type(INTVAL type :optional, INTVAL got_type :opt_flag) {
        Parrot_PackfileRawSegment_attributes * attrs =
                PARROT_PACKFILERAWSEGMENT(SELF);
        INTVAL res;

        if (got_type) {
            attrs->type = type;
        }

        res = attrs->type;
        RETURN(INTVAL res);
    }

}
/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
