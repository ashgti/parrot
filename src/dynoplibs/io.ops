/*
 * $Id$
 * Copyright (C) 2010, Parrot Foundation.
** io.ops
*/

=head1 NAME

io.ops - Extended I/O Dynops

=head1 DESCRIPTION

A richer I/O API than that available in core Parrot.

=over 4

=cut

########################################

=item B<close>(invar PMC)

Close IO object $1

=cut

inline op close(invar PMC) :base_io {
    Parrot_io_close(interp, $1);
}

########################################

=item B<fdopen>(out PMC, in INT, in STR)

Create ParrotIO object in $1 as a copy of file descriptor $2.

=cut

inline op fdopen(out PMC, in INT, in STR) :filesys_open {
    $1 = Parrot_io_fdopen(interp, PMCNULL, (PIOHANDLE)$2, $3);
    if (!$1)
        $1 = Parrot_pmc_new(interp, enum_class_Undef);
}

=item B<getstdin>(out PMC)

Create a new ParrotIO object for the stdin file descriptor and
store it in $1

=item B<getstdout>(out PMC)

Create a new ParrotIO object for the stdout file descriptor and
store it in $1

=item B<getstderr>(out PMC)

Create a new ParrotIO object for the stderr file descriptor and
store it in $1

=cut

inline op getstdin(out PMC) :base_io {
    $1 = _PIO_STDIN(interp);
}

inline op getstdout(out PMC) :base_io {
    $1 = _PIO_STDOUT(interp);
}

inline op getstderr(out PMC) :base_io {
    $1 = _PIO_STDERR(interp);
}

#########################################

=item B<setstdin>(invar PMC)

Sets the standard input for a bare C<read> op to go to the supplied PMC.
Call C<getstdin> first if you care about retaining the previous PMC.

=item B<setstdout>(invar PMC)

Sets the standard output for a bare C<print> op to go to the supplied PMC.
Call C<getstdout> first if you care about retaining the previous PMC.

=item B<setstderr>(invar PMC)

Sets the standard error for a bare C<printerr> op to go to the supplied PMC.
Call C<getstderr> first if you care about retaining the previous PMC.

=cut

inline op setstdin(invar PMC) :base_io {
    _PIO_STDIN(interp) = $1;
}

inline op setstdout(invar PMC) :base_io {
    _PIO_STDOUT(interp) = $1;
}

inline op setstderr(invar PMC) :base_io {
    _PIO_STDERR(interp) = $1;
}

########################################

=back

=cut

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
