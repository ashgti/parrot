/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/pytype.pmc - Python Class

=head1 DESCRIPTION

These are the vtable functions for the Python Type base class (i.e.,
methods you would expect to see on Python Classes

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "pyconsts.h"

pmclass PyType dynpmc group python_group {

/*

=item C<void add_method(STRING *method_name, PMC *sub)>

Store the method as a property of this class.

=cut

*/

    void add_method(STRING *method_name, PMC *sub_pmc) {
        VTABLE_setprop(INTERP, SELF, method_name, sub_pmc);
    }

/*

=item C<PMC *find_method(STRING *method_name)>

Looks up the method for C<*method_name> and returns it.

=cut

*/

    PMC* find_method(STRING* method_name) {
        PMC *parent;

        PMC *method = VTABLE_getprop(INTERP, SELF, method_name);
        if (method && VTABLE_defined(INTERP, method)) {
            PMC *get;

            PMC *object = INTERP->ctx.current_object;
            if (!object) object = SELF;

            if (Interp_trace_TEST(interpreter, PARROT_TRACE_FIND_METH_FLAG)) {
                PIO_eprintf(INTERP, "# Found %Ss method %Ss on %Ss\n",
                   method->vtable->whoami, method_name,
                   VTABLE_name(INTERP, object));
            }

            get = Parrot_PyClass_call_meth_fromc_P_P(INTERP, method,
                PyString_get, object);
            if (get) return get;
            return method;
        }

        parent = VTABLE_getprop(INTERP, SELF, PyString_bases);
        if (parent && VTABLE_defined(INTERP, parent)) {
            if (INTERP->ctx.current_object)
                method = VTABLE_find_method(INTERP, parent, method_name);
            else {
                PMC *object = INTERP->ctx.current_object;
                INTERP->ctx.current_object = SELF;
                method = VTABLE_find_method(INTERP, parent, method_name);
                INTERP->ctx.current_object = object;
            }
            return method;
        }

        return 0;
    }

/*

=item C<PMC* get_attr_str(STRING *name)>

Return attribute named C<name>.

=cut

*/

    PMC* get_attr_str(STRING* idx) {
        PMC *attr = VTABLE_getprop(INTERP, SELF, idx);

        if (!attr || !VTABLE_defined(INTERP, attr)) {
            PMC *parent = VTABLE_getprop(INTERP, SELF, PyString_bases);
            if (parent && VTABLE_defined(INTERP, parent)) {
                if (INTERP->ctx.current_object)
                    attr = VTABLE_get_attr_str(INTERP, parent, idx);
                else {
                    PMC *object = INTERP->ctx.current_object;
                    INTERP->ctx.current_object = SELF;
                    attr = VTABLE_get_attr_str(INTERP, parent, idx);
                    INTERP->ctx.current_object = object;
                }
            }
        }

        if (!attr || !VTABLE_defined(INTERP, attr)) {
            PMC *object = INTERP->ctx.current_object;
            if (!object) object = SELF;
            INTERP->ctx.current_object = 0;
            real_exception(INTERP, NULL, E_AttributeError,
                "AttributeError: %Ss instance has no attribute '%Ss'",
                VTABLE_name(INTERP, object), idx);
        }

        return attr;
    }

/*

=item C<PMC *get_class()>

Return the class of this object.

=cut

*/

    PMC* get_class() {
        return PyBuiltin_PyType_class;
    }

/*

=item C<void* invoke(void* next)>

Pythonic object constructor.

=cut

*/

    void* invoke(void* next) {
        PMC *object, *init, *new;

        new = VTABLE_find_method(INTERP, SELF, PyString_new);
        init = VTABLE_find_method(INTERP, SELF, PyString_init);

        if (new) {
            int i = REG_INT(3);
            struct parrot_regs_t *bp = INTERP->ctx.bp;
            struct Parrot_Context ctx;
            save_context(INTERP, &ctx);
            INTERP->ctx.bp = new_register_frame(INTERP, &INTERP->ctx.reg_stack);
            copy_regs(INTERP, bp);
            if (new->vtable->base_type != PyBuiltin_PyBoundMeth)
                internal_exception(1, "Non-bound method encountered in proxy");
            VTABLE_set_pmc(INTERP, new, SELF);
            REG_STR(0) = PyString_new;
            bp = Parrot_PyClass_runops_fromc(INTERP, new);
            object = BP_REG_PMC(bp,5);
            restore_context(INTERP, &ctx);
        }
        else {
            object = pmc_new(INTERP, PyBuiltin_PyClass);
        }

        VTABLE_setprop(INTERP, object, PyString_class, REG_PMC(0));

        init = VTABLE_find_method(INTERP, object, PyString_init);
        if (init) {
            struct Parrot_Context ctx;
            save_context(INTERP, &ctx);
            REG_STR(0) = PyString_init;
            Parrot_PyClass_runops_fromc(INTERP, init);
            restore_context(INTERP, &ctx);
        }

        REG_INT(0) = REG_INT(3) = 1;
        REG_INT(1) = REG_INT(2) = REG_INT(4) = 0;
        REG_PMC(5) = object;
        return next;
    }

/*

=item C<PMC* subclass(STRING *name)>

Create a subclass of the given class.  Note that this merely creates
a new PyType... all the interesting details that make it a subclass
need to be filled in.

=cut

*/

    PMC* subclass(STRING* name) {
        PMC *ret = pmc_new(INTERP, PyBuiltin_PyType);
        PMC *nameprop = pmc_new(INTERP, PyBuiltin_PyString);
        VTABLE_set_string_native(INTERP, nameprop, name);
        VTABLE_setprop(INTERP, ret, PyString_name, nameprop);
        VTABLE_setprop(INTERP, ret, PyString_bases, SELF);
        VTABLE_setprop(INTERP, ret, PyString_dict,
            VTABLE_getprops(INTERP, ret));
        return ret;
    }

/*

=item C<STRING *name()>

Returns the name of this class.

*/


    STRING* name() {
        PMC *name = VTABLE_getprop(INTERP, SELF, PyString_name);
        return VTABLE_get_string(INTERP, name);
    }

/*

=item C<PMC* "__new__"(PMC *class, PMC *source)>

Create a new integer

=cut

*/

    METHOD PMC* __new__(PMC *instance, PMC *metaclass, PMC *name, PMC *bases, PMC *dict)
    {
        INTVAL argc = REG_INT(3);
        if (argc == 1)
            return VTABLE_get_class(INTERP, instance);
        else {
            /* XXX: quick hack: class method called directly */
            /* TODO: multiple bases */
            /* TODO: vars */
            PMC *base = VTABLE_get_pmc_keyed_int(INTERP, bases, 0);
            PMC *type = VTABLE_subclass(INTERP, base,
                VTABLE_get_string(INTERP, name));
            return type;
        }
    }

/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
