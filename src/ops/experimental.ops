/*
 * $Id$
** experimental.ops
*/

=head1 NAME

experimental.ops - Experimental Opcodes

=cut

=head1 DESCRIPTION

This file contains experimental opcodes.

These opcodes should be considered implicitly deprecated - that is, they
may be removed in any release.

If you rely on any of these opcodes, please open a
Trac ticket at L<https://trac.parrot.org/>.


=cut

###############################################################################

=head2 More Experimental Ops

=over 4

=item B<trap>()

Break into debugger. Implementation notes:

 - x86/gcc ... works with gdb
 - ppc/gcc ... works with gdb, to proceed: gdb> p $pc = $pc + 4
 - TODO

For other architectures, this is a C<noop>.

=back

=cut

op trap() :deprecated {
#if defined(__GNUC__) && defined(i386)
    __asm__("int3");       /* opcode 0xcc */
#endif
#if defined(__GNUC__) && defined(PPC)
    __asm__("trap");       /* opcode tr 31, 0, 0 */
#endif
}

=over 4

=item B<set_label>(invar PMC, inconst LABEL)

Sets the opcode_t* label value for the given PMC. This is basically only
useful for PMCs such as Sub, Continuation, ExceptionHandler and derivatives

=item B<get_label>(out INT, invar PMC)

Gets the opcode_t* label value from the given PMC. This is basically only
useful for PMCs such as Sub, Continuation, ExceptionHandler and derivatives

=back

=cut

inline op set_label(invar PMC, inconst LABEL) {
    VTABLE_set_pointer(interp, $1, (CUR_OPCODE + $2));
}

inline op get_label(out INT, invar PMC) {
    void * const ptr = VTABLE_get_pointer(interp, $2);
    $1 =  PTR2INTVAL(ptr);
}

=over 4

=item B<fetch>(out PMC, in PMC, in KEY, in PMC, in PMC)

Fetches a value from $2, keyed by $3 into $1.  If the resulting PMC is PMCNULL,
clones $4 and assigns the result to $1 instead.

=item B<fetch>(out PMC, in PMC, in PMC, in PMC)

=item B<fetch>(out PMC, in PMC, in INT, in PMC)

=item B<fetch>(out PMC, in PMC, in STRING, in PMC)

=back

=cut

inline op fetch(out PMC, in PMC, in KEY, in PMC) :base_core {
    $1 = VTABLE_get_pmc_keyed(interp, $2, $3);
    if (PMC_IS_NULL($1))
        $1 = VTABLE_clone(interp, $4);
}

inline op fetch(out PMC, in PMC, in PMC, in PMC) :base_core {
    $1 = VTABLE_get_pmc_keyed(interp, $2, $3);
    if (PMC_IS_NULL($1))
        $1 = VTABLE_clone(interp, $4);
}

inline op fetch(out PMC, in PMC, in INT, in PMC) :base_core {
    $1 = VTABLE_get_pmc_keyed_int(interp, $2, $3);
    if (PMC_IS_NULL($1))
        $1 = VTABLE_clone(interp, $4);
}

inline op fetch(out PMC, in PMC, in STR, in PMC) :base_core {
    $1 = VTABLE_get_pmc_keyed_str(interp, $2, $3);
    if (PMC_IS_NULL($1))
        $1 = VTABLE_clone(interp, $4);
}

=head1 COPYRIGHT

Copyright (C) 2001-2009, Parrot Foundation.

=head1 LICENSE

This program is free software. It is subject to the same license
as the Parrot interp itself.

=cut

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
