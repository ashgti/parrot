/* parrotpointer.pmc
 *  Copyright: (When this is determined...it will go here)
 *  CVS Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the ParrotPointer base class
 *  Data Structure and Algorithms:
 *  History:
 *  Notes:  The actual pointer is in ->data
 *  References:
 */

#include "parrot/parrot.h"
#define POINTER_ERROR internal_exception(PARROT_POINTER_ERROR, "An illegal operation was performed on a ParrotPointer (vtable function at %s line %d).\n", __FILE__, __LINE__);

pmclass ParrotPointer {

    void init () {
        SELF->data=NULL;
        SELF->flags=PMC_private_GC_FLAG;
    }

    void morph (INTVAL type) {
    }

    void destroy () {
    }

    INTVAL type () {
        return enum_class_ParrotPointer;
    }

    STRING* name () {
        return whoami;
    }

    PMC* clone () {
        PMC *dest;
        dest = pmc_new(INTERP, enum_class_ParrotPointer);
        dest->data=SELF->data;
        return dest;
    }

    INTVAL get_integer () {
        return (INTVAL)SELF->data;
    }

    FLOATVAL get_number () {
        return (FLOATVAL)(INTVAL)SELF->data;
    }

    STRING* get_string () {
        STRING* ret;
        char *target=mem_sys_allocate(64);

        /* XXX Dangerous if you have a 196-bit system or above
        (and if you do, you have too comfortable a life and
        deserve to be tormented by coredumps). */
        sprintf(target, "ParrotPointer=0x%p", SELF->data);
        ret=string_make(interpreter, target, strlen(target), 0, 0, 0);

        mem_sys_free(target);
        return ret;
    }

    INTVAL get_bool () {
        return (INTVAL)(SELF->data != NULL);
    }

    INTVAL is_same (PMC* pmc2) {
        return (INTVAL)(SELF->vtable == pmc2->vtable && SELF->data == pmc2->data);
    }

    void set_integer (PMC* value) {
        POINTER_ERROR;
    }

    void set_integer_native (INTVAL value) {
        POINTER_ERROR;
    }

    void set_integer_bignum (BIGNUM* value) {
        POINTER_ERROR;
    }

    void set_integer_same (PMC* value) {
        POINTER_ERROR;
    }

    void set_number (PMC* value) {
        POINTER_ERROR;
    }

    void set_number_native (FLOATVAL value) {
        POINTER_ERROR;
    }

    void set_number_bignum (BIGNUM* value) {
        POINTER_ERROR;
    }

    void set_number_same (PMC* value) {
        POINTER_ERROR;
    }

    void set_string (PMC* value) {
        POINTER_ERROR;
    }

    void set_string_native (STRING* value) {
        POINTER_ERROR;
    }

    void set_string_unicode (STRING* value) {
        POINTER_ERROR;
    }

    void set_string_other (STRING* value) {
        POINTER_ERROR;
    }

    void set_string_same (PMC* value) {
        POINTER_ERROR;
    }
}
