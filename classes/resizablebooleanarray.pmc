/*
Copyright: 2001-2005 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/resizablebooleanarray.pmc - resizable array for booleans only

=head1 DESCRIPTION

The C<ResizableBooleanArray PMC> implements an array of resizable size,
which stores booleans.
It uses the C<Boolean PMC> for all conversions.
The C<ResizableBooleanArray PMC> extends the C<FixedBooleanArray PMC>.

=head2 Functions

=over 4

=cut

*/

#include "parrot/parrot.h"


#define BITS_PER_CHAR 8

pmclass ResizableBooleanArray extends FixedBooleanArray need_ext does array {


/*

=back

=head2 Methods

=over 4


/*

=item C<INTVAL get_integer_keyed_int(INTVAL key)>

Returns the integer value of the element at index C<key>.

=cut

*/

    INTVAL get_integer_keyed_int (INTVAL key) {
        Parrot_UInt1 *sd;
        if (key < 0)
            internal_exception(OUT_OF_BOUNDS,
                "ResizableBooleanArray: index out of bounds!");
        if(key >= PMC_int_val(SELF))
            DYNSELF.set_integer_native(key+1);

        return SUPER(key);
    }

/*

=item C<void set_integer_keyed_int(INTVAL key, INTVAL value)>

Sets the integer value of the element at index C<key> to C<value>.

=cut

*/

    void set_integer_keyed_int (INTVAL key, INTVAL value) {
        if (key < 0)
            internal_exception(OUT_OF_BOUNDS,
                "ResizableBooleanArray: index out of bounds!");
        if(key >= PMC_int_val(SELF))
            DYNSELF.set_integer_native(key+1);

        SUPER(key, value);
    }

/*

=item C<void set_integer_native(INTVAL size)>

Resizes the array to C<size> elements.

=cut

*/

    void set_integer_native (INTVAL size) {
        Parrot_UInt1 *sd;
        if (size < 0)
            internal_exception(OUT_OF_BOUNDS,
                    "ResizableBooleanArray: Can't resize!");

        if ( ! PMC_data(SELF) ) {
            SUPER(size);
        } else if ( size > PMC_int_val2(SELF) ) {
            INTVAL old_size = PMC_int_val2(SELF);
            PMC_int_val2(SELF) = size < 2*old_size ? 2*old_size : (size/BITS_PER_CHAR+1)*BITS_PER_CHAR;
            sd = PMC_data(SELF);
            PMC_data(SELF) = mem_sys_realloc(sd, PMC_int_val2(SELF)/BITS_PER_CHAR);
            PMC_int_val(SELF) = size;
        } else {
            PMC_int_val(SELF) = size;
            return;
        }
    }

}

/*

=back

=head1 SEE ALSO

F<docs/pdds/pdd17_basic_types.pod>.

=head1 HISTORY

Initial version                  - Matt Fowles 2004-06-11
Changed allocator to double size - Matt Fowles 2004-06-15
Added push_integer               - Bernhard Schmalhofer 2004-10-17

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
