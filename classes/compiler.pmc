/* Compiler.pmc
 *  Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
 *  CVS Info
 *     $Id$
 *  Overview:
 *     The vtable functions for implementing assembler/compilers
 *  Data Structure and Algorithms:
 *  History:
 *     Initial revision by leo 2003/01/16
 *  Notes:
 *  References:
 *     pdd06_pasm.pod
 */

#include "parrot/parrot.h"
#include "parrot/method_util.h"
#include "parrot/interp_guts.h"

pmclass Compiler extends NCI {

    STRING* name () {
        return whoami;
    }

    void* invoke (void * code_ptr) {
        Parrot_csub_t func = (Parrot_csub_t)D2FPTR(PMC_data(SELF));
	PMC *code_seg;
        struct PackFile_ByteCode *eval_cs;


  	Parrot_push_i(interpreter, &interpreter->int_reg.registers[0]);
  	Parrot_push_i(interpreter, &interpreter->int_reg.registers[16]);
  	Parrot_push_s(interpreter, &interpreter->string_reg.registers[0]);
  	Parrot_push_s(interpreter, &interpreter->string_reg.registers[16]);
  	Parrot_push_p(interpreter, &interpreter->pmc_reg.registers[0]);
  	Parrot_push_p(interpreter, &interpreter->pmc_reg.registers[16]);

        interpreter->string_reg.registers[5] = (String*) code_ptr;
        func(INTERP, SELF);
	/* return value PMC is in P5 */
        stack_push(interpreter, &interpreter->ctx.user_stack,
        interpreter->pmc_reg.registers[5],
		STACK_ENTRY_PMC, STACK_CLEANUP_NULL);

  	Parrot_pop_p(interpreter, &interpreter->pmc_reg.registers[16]);
  	Parrot_pop_p(interpreter, &interpreter->pmc_reg.registers[0]);
  	Parrot_pop_s(interpreter, &interpreter->string_reg.registers[16]);
  	Parrot_pop_s(interpreter, &interpreter->string_reg.registers[0]);
  	Parrot_pop_i(interpreter, &interpreter->int_reg.registers[16]);
  	Parrot_pop_i(interpreter, &interpreter->int_reg.registers[0]);

	(void)stack_pop(interpreter, &interpreter->ctx.user_stack, &code_seg,
                  STACK_ENTRY_PMC);
	eval_cs = (struct PackFile_ByteCode *) PMC_data(code_seg);
	/* morph the Byte_cointer *pointer in code_seg to an invokable sub */
	code_seg->vtable = &Parrot_base_vtables[enum_class_Eval];
	VTABLE_init(interpreter, code_seg);
	VTABLE_set_integer_native(interpreter, code_seg,
		(INTVAL) eval_cs);
        return code_seg;
    }
}

