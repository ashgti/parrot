/* perlstring.pmc
 *  Copyright: (When this is determined...it will go here)
 *  CVS Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the PerlString base class
 *  Data Structure and Algorithms:
 *  History:
 *  Notes:
 *  References:
 */

#include "parrot/parrot.h"

pmclass PerlString {

    INTVAL type () {
        return 0;
    }

    STRING* name() {
        return whoami;
    }

    void init (INTVAL size) {
	SELF->data = string_make(INTERP,NULL,0,NULL,0,NULL);
    SELF->flags = PMC_is_buffer_ptr_FLAG;
    }

    void clone (PMC* dest) { 
	dest->vtable = SELF->vtable;
	dest->data = string_copy(INTERP,SELF->data);
    }

    void morph (INTVAL type) {
    }

    BOOLVAL move_to (void * destination) {
        return 0; /* You can't move me, I don't have anything to move! */
    }

    INTVAL real_size () {
	return 0; /* ->data is unused */
    }

    void destroy () {
	string_destroy(SELF->data);
    }

    INTVAL get_integer () {
	STRING* s = (STRING*) SELF->data;
 return string_to_int(s);
    }

    FLOATVAL get_number () {
	STRING* s = (STRING*) SELF->data;
 return string_to_num(s);
    }

    STRING* get_string () {
	return (STRING*)SELF->data;
    }

    BOOLVAL get_bool () {
 return string_bool(SELF->data);
    }

    void* get_value () {
        return &SELF->data;
    }

    BOOLVAL is_same (PMC* other) {
        STRING* s1 = (STRING*)SELF->data;
        STRING* s2 = (STRING*)other->data;
        return (BOOLVAL)( other->vtable == SELF->vtable &&
                          s1->bufused   == s2->bufused  &&
            (memcmp(s1->bufstart,s2->bufstart,(size_t)s1->bufused)==0));
    }

    void set_integer (PMC* value) {
	SELF->vtable = &(Parrot_base_vtables[enum_class_PerlInt]);
	SELF->cache.int_val = value->vtable->get_integer(INTERP,value);
    }

    void set_integer_native (INTVAL value) {
	SELF->vtable = &(Parrot_base_vtables[enum_class_PerlInt]);
	SELF->cache.int_val = value;
    }

    void set_integer_bigint (BIGINT value) {
    }

    void set_integer_same (PMC * value) {
	SELF->vtable = &(Parrot_base_vtables[enum_class_PerlInt]);
	SELF->cache.int_val = value->vtable->get_integer(INTERP,value);
    }

    void set_number (PMC * value) {
	SELF->vtable = &(Parrot_base_vtables[enum_class_PerlNum]);
	SELF->cache.num_val = value->vtable->get_number(INTERP,value);
    }

    void set_number_native (FLOATVAL value) {
	SELF->vtable = &(Parrot_base_vtables[enum_class_PerlNum]);
	SELF->cache.num_val = value;
    }

    void set_number_bigfloat (BIGFLOAT value) {
    }

    void set_number_same (PMC * value) {
	SELF->vtable = &(Parrot_base_vtables[enum_class_PerlNum]);
	SELF->cache.num_val = (FLOATVAL)value->cache.int_val;
    }

    void set_string (PMC * value) {
	SELF->data =
               string_copy(INTERP, (STRING*)value->data);
    }

    void set_string_native (STRING * value) {
	SELF->data = string_copy(INTERP, value);
    }

    void set_string_unicode (STRING * value) {
	SELF->data = string_copy(INTERP, value);
    }

    void set_string_other (STRING * value) {
	SELF->data = string_copy(INTERP, value);
    }

    void set_string_same (PMC * value) {
	SELF->data =
               string_copy(INTERP, (STRING*)value->data);
    }

    void set_value (void* value) {
	SELF->data = value;
    }

    void add (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) +
                value->cache.int_val
            );
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
            dest->vtable->set_number_native(INTERP, dest, 
		SELF->vtable->get_number(INTERP, SELF) +
                value->cache.num_val
            );
	}
	else {
	}
    }

    void add_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) +
            value
        );
    }

    void add_bigint (BIGINT value, PMC* dest) {
    }

    void add_float (FLOATVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
	dest->vtable->set_number_native(INTERP, dest, 
	    SELF->vtable->get_number(INTERP, SELF) +
            value
        );
    }

    void add_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void add_same (PMC * value, PMC* dest) {
    }

    void subtract (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) -
                value->cache.int_val
            );
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
            dest->vtable->set_number_native(INTERP, dest, 
		SELF->vtable->get_number(INTERP, SELF) -
                value->cache.num_val
            );
	}
	else {
	}
    }

    void subtract_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) -
            value
        );
    }

    void subtract_bigint (BIGINT value, PMC* dest) {
    }

    void subtract_float (FLOATVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
	dest->vtable->set_number_native(INTERP, dest, 
	    SELF->vtable->get_number(INTERP, SELF) -
            value
        );
    }

    void subtract_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void subtract_same (PMC * value, PMC* dest) {
    }

    void multiply (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) *
                value->cache.int_val
            );
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
            dest->vtable->set_number_native(INTERP, dest, 
		SELF->vtable->get_number(INTERP, SELF) *
                value->cache.num_val
            );
	}
	else {
	}
    }

    void multiply_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) *
            value
        );
    }

    void multiply_bigint (BIGINT value, PMC* dest) {
    }

    void multiply_float (FLOATVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
	dest->vtable->set_number_native(INTERP, dest, 
	    SELF->vtable->get_number(INTERP, SELF) *
            value
        );
    }

    void multiply_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void multiply_same (PMC * value, PMC* dest) {
    }

    void divide (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) /
                value->cache.int_val
            );
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
            dest->vtable->set_number_native(INTERP, dest, 
		SELF->vtable->get_number(INTERP, SELF) /
                value->cache.num_val
            );
	}
	else {
	}
    }

    void divide_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) /
            value
        );
    }

    void divide_bigint (BIGINT value, PMC* dest) {
    }

    void divide_float (FLOATVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
	dest->vtable->set_number_native(INTERP, dest, 
	    SELF->vtable->get_number(INTERP, SELF) /
            value
        );
    }

    void divide_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void divide_same (PMC * value, PMC* dest) {
    }

    void modulus (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) %
                value->cache.int_val
            );
	}
	else {
	}
    }

    void modulus_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) %
            value
        );
    }

    void modulus_bigint (BIGINT value, PMC* dest) {
    }

    void modulus_float (FLOATVAL value, PMC* dest) {
    }

    void modulus_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void modulus_same (PMC * value, PMC* dest) {
    }

    void concatenate (PMC * value, PMC* dest) {
	STRING* s = string_copy(INTERP, (STRING*)SELF->data);
	dest->data =
	    string_concat(INTERP,
	                  s,
			  value->vtable->get_string(INTERP, value),
			  0
			 );
	/* don't destroy s, as it is dest->data */
    }

    void concatenate_native (STRING * value, PMC* dest) {
	STRING* s = string_copy(INTERP, (STRING*)SELF->data);
	dest->data =
	    string_concat(INTERP,
			  s,
			  value,
			  0
			 );
	/* don't destroy s, as it is dest->data */
    }

    void concatenate_unicode (STRING * value, PMC* dest) {
	STRING* s = string_copy(INTERP, (STRING*)SELF->data);
	dest->data =
	    string_concat(INTERP,
	          s,
			  value,
			  0
			 );
            /* don't destroy s, as it is dest->data */
    }

    void concatenate_other (STRING * value, PMC* dest) {
	STRING* s = string_copy(INTERP, (STRING*)SELF->data);
	dest->data =
	    string_concat(INTERP,
			  s,
			  value,
			  0
			 );
	/* don't destroy s, as it is dest->data */
    }

    void concatenate_same (PMC * value, PMC* dest) {
	dest->data =
	    string_concat(INTERP,
			  SELF->data,
			  value->data,
			  0
			 );
    }

    /* == operation */
    BOOLVAL is_equal (PMC* value) {
        return (BOOLVAL)( 0 == string_compare(INTERP,
				                     SELF->data,
				                     value->vtable->get_string(INTERP, value)
				                    ));
    }

    void logical_or (PMC* value, PMC* dest) = default;

    void logical_and (PMC* value, PMC* dest) = default;

    void logical_not (PMC* value) = default;

    void match (PMC * value,REGEX* re) {
    }

    void match_native (STRING * value, REGEX* re) {
    }

    void match_unicode (STRING * value, REGEX* re) {
    }

    void match_other (STRING * value, REGEX* re) {
    }

    void match_same (PMC * value,REGEX* re) {
    }

    void repeat (PMC * value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlString];
	dest->data =
           string_repeat(INTERP, SELF->data,
	                 (UINTVAL)value->vtable->get_integer(INTERP, value), NULL
	                );
    }

    void repeat_native (STRING * value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlString];
	dest->data =
           string_repeat(INTERP, SELF->data,
                         (UINTVAL)string_to_int(value), NULL
	                );
    }

    void repeat_unicode (STRING * value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlString];
	dest->data =
           string_repeat(INTERP, SELF->data,
                         (UINTVAL)string_to_int(value), NULL
	                );
    }

    void repeat_other (STRING * value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlString];
	dest->data =
           string_repeat(INTERP, SELF->data,
                         (UINTVAL)string_to_int(value), NULL
	                );
    }

    void repeat_same (PMC * value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlString];
	dest->data =
           string_repeat(INTERP, SELF->data,
	                 (UINTVAL)value->vtable->get_integer(INTERP, value), NULL
	                );
    }
}
