/*
Copyright: 2001-2005 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/perlstring.pmc - Perl String

=head1 DESCRIPTION

C<PerlString> extends C<String> to provide Perl-specific string behaviour.
Note that the C<morph> and C<set_pmc> methods come from C<PerlScalar>,
not from C<String>.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

void Parrot_perlscalar_morph(Interp* , PMC* pmc, INTVAL type);
void Parrot_perlscalar_set_pmc(Interp* , PMC* pmc, PMC* value);

pmclass PerlString extends String {


/*

=item C<STRING* get_repr()>

Returns pythons string repr (w/o any escaping, just single quotes around)

=cut

*/

    STRING* get_repr() {
        STRING *start, *s, *q, *repr;
        q = const_string(INTERP, "'");
        s = DYNSELF.get_string();
        if (PObj_get_FLAGS(s) & PObj_private7_FLAG)
            start = const_string(INTERP, "u'");
        else
            start = q;
        repr = string_copy(INTERP, start);
        repr = string_append(INTERP, repr, s, 0);
        repr = string_append(INTERP, repr, q, 0);
        return repr;
    }

/*

=item C<void set_integer_native(INTVAL value)>

Morphs the string to a C<PerlInt> and sets its value to C<value>.

=cut

*/

    void set_integer_native (INTVAL value) {
        DYNSELF.morph(enum_class_PerlInt);
        DYNSELF.set_integer_native(value);
    }

/*

=item C<void set_number_native(FLOATVAL value)>

Morphs the string to a C<PerlNum> and sets its value to C<value>.

=cut

*/

    void set_number_native (FLOATVAL value) {
        DYNSELF.morph(enum_class_PerlNum);
        DYNSELF.set_number_native(value);
    }


/*

=item C<void set_pmc(PMC *value)>

Sets the value of the PMC to the value in C<*value>.

=cut

*/

    void set_pmc (PMC* value) {
        perlscalar.SELF.set_pmc(value);
    }

/*

=item C<void morph(INTVAL type)>

Morphs the C<PerlString> to the specified type.

=cut

*/

    void morph (INTVAL type) {
        perlscalar.SELF.morph(type);
    }

/*

=item C<void increment()>

=item C<void decrement()>

These two methods are partially implemented. They should provide
Perl 5 like string increment/decrement.

=cut

*/

    void increment () {
        STRING* s = PMC_str_val(SELF);
	PMC_str_val(SELF) = string_increment(INTERP, s);
    }

    void decrement () {
        INTVAL i = VTABLE_get_integer(INTERP, SELF);
	VTABLE_set_integer_native(INTERP, SELF, i - 1);
    }


/*

=item C<PMC *get_pmc_keyed(PMC *key)>

Returns the string value for C<SELF[key]>.

=cut

*/

    PMC* get_pmc_keyed(PMC* key) {
        STRING *s = PMC_str_val(SELF);
        PMC *ret;

        ret = pmc_new_noinit(INTERP, enum_class_PerlString);
        PMC_str_val(ret) = string_substr(INTERP, s,
                key_integer(INTERP,key), 1, NULL, 0);
        PObj_custom_mark_SET(ret);
        return ret;
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
