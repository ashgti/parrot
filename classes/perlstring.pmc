/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/perlstring.pmc - Perl String

=head1 DESCRIPTION

C<PerlString> extends C<perlscalar> to provide Perl string behaviour.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "parrot/perltypes.h"


pmclass PerlString extends perlscalar {

/*

=item C<void init()>

Initializes the string.

=cut

*/

    void init () {
        PMC_str_val(SELF) = string_make_empty(INTERP,enum_stringrep_one,0);
        PObj_custom_mark_SET(SELF);
    }

/*

=item C<void mark()>

Marks the string as live.

=cut

*/

    void mark () {
        if (PMC_str_val(SELF))
            pobject_lives(INTERP, (PObj *)PMC_str_val(SELF));
    }

/*

=item C<PMC *clone()>

Creates and returns a clone of the string.

=cut

*/

    PMC* clone () {
        PMC* dest = pmc_new_noinit(INTERP, SELF->vtable->base_type);
        PObj_custom_mark_SET(dest);
        PMC_str_val(dest) = string_copy(INTERP,PMC_str_val(SELF));
        return dest;
    }

/*

=item C<INTVAL get_integer()>

Returns the integer value of the string.

=cut

*/

    INTVAL get_integer () {
        STRING* s = (STRING*) PMC_str_val(SELF);
        return string_to_int(INTERP, s);
    }

/*

=item C<FLOATVAL get_number()>

Returns the floating-point value for the string.

=cut

*/

    FLOATVAL get_number () {
        STRING* s = (STRING*) PMC_str_val(SELF);
        return string_to_num(INTERP, s);
    }

/*

=item C<BIGNUM *get_bignum()>

Unimplemented. Returns C<NULL>.

=cut

*/

    BIGNUM* get_bignum () {
        /* XXX */
        return NULL;
    }

/*

=item C<INTVAL get_bool()>

Returns the boolean value of the string.

=cut

*/

    INTVAL get_bool () {
        return string_bool(INTERP, PMC_str_val(SELF));
    }

/*

=item C<INTVAL is_same(PMC *other)>

Returns whether the string is the same as C<*other>.

=cut

*/

    INTVAL is_same (PMC* other) {
        STRING* s1 = (STRING*)PMC_str_val(SELF);
        STRING* s2 = (STRING*)PMC_str_val(other);
        return (INTVAL)( other->vtable == SELF->vtable &&
                          s1->bufused   == s2->bufused  &&
            (memcmp(s1->strstart,PObj_bufstart(s2),(size_t)s1->bufused)==0));
    }

/*

=item C<void set_integer_native(INTVAL value)>

Morphs the string to a C<PerlInt> and sets its value to C<value>.

=cut

*/

    void set_integer_native (INTVAL value) {
        DYNSELF.morph(enum_class_PerlInt);
        DYNSELF.set_integer_native(value);
    }

/*

=item C<void set_number_native(FLOATVAL value)>

Morphs the string to a C<PerlNum> and sets its value to C<value>.

=cut

*/

    void set_number_native (FLOATVAL value) {
        DYNSELF.morph(enum_class_PerlNum);
        DYNSELF.set_number_native(value);
    }

/*

=item C<void set_string_native(STRING *value)>

Sets the string's value to the value of the specified Parrot string.

=item C<void assign_string_native(STRING *value)>

Assign a copy of the passed string value.

=cut

*/

    void set_string_native (STRING * value) {
        PMC_str_val(SELF) = value;
    }

    void assign_string_native (STRING * value) {
	PMC_str_val(SELF) = string_set(INTERP, PMC_str_val(SELF), value);
    }
/*

=item C<void set_string_same(PMC *value)>

Sets the string's value to the value of the specified C<PerlString>.

=cut

*/

    void set_string_same (PMC * value) {
        PMC_str_val(SELF) = string_set(INTERP, PMC_str_val(SELF),
        PMC_str_val(value));
    }

/*

=item C<void add(PMC *value, PMC *dest)>

Adds C<*value> to the string and returns the result in C<*dest>.

When Python mode is enabled does concat :(

=cut

*/

    void add (PMC * value, PMC* dest) {
MMD_PerlNum: {
	     if (Interp_flags_TEST(INTERP, PARROT_PYTHON_MODE)) {
		 SELF.concatenate(value, dest);
		 return;
	     }
	     VTABLE_set_number_native(INTERP, dest,
		     VTABLE_get_number(INTERP, SELF) +
		     PMC_num_val(value)
		     );
	 }
MMD_DEFAULT: {
	     FLOATVAL pmcf, valf;
	     INTVAL  pmci, vali;

	     if (Interp_flags_TEST(INTERP, PARROT_PYTHON_MODE)) {
		 SELF.concatenate(value, dest);
		 return;
	     }
	     pmcf = VTABLE_get_number(INTERP, SELF);
	     pmci = VTABLE_get_integer(INTERP, SELF);
	     valf = VTABLE_get_number(INTERP, value);
	     vali = VTABLE_get_integer(INTERP, value);

	     if (pmcf == pmci && valf == vali)
		 VTABLE_set_integer_native(INTERP, dest, pmci + vali);
	     else
		 VTABLE_set_number_native(INTERP, dest, pmcf + valf);
	 }
    }

/*

=item C<void subtract(PMC *value, PMC *dest)>

Subtracts C<*value> from the string and returns the result in C<*dest>.

=cut

*/

    void subtract (PMC* value, PMC* dest) {
        if(value->vtable == Parrot_base_vtables[enum_class_PerlInt]) {
            VTABLE_set_integer_native(INTERP, dest,
                VTABLE_get_integer(INTERP, SELF) -
                PMC_int_val(value)
            );
        }
        else if(value->vtable == Parrot_base_vtables[enum_class_PerlNum]) {
            VTABLE_set_number_native(INTERP, dest,
                VTABLE_get_number(INTERP, SELF) -
                PMC_num_val(value)
            );
        }
        else {
            SUPER(value, dest);
        }
    }

/*

=item C<void multiply(PMC *value, PMC *dest)>

Multiplies the string by C<*value> and returns the result in C<*dest>.

=cut

*/

    void multiply (PMC* value, PMC* dest) {
        if(value->vtable == Parrot_base_vtables[enum_class_PerlInt]) {
            VTABLE_set_integer_native(INTERP, dest,
                VTABLE_get_integer(INTERP, SELF) *
                PMC_int_val(value)
            );
        }
        else if(value->vtable == Parrot_base_vtables[enum_class_PerlNum]) {
            VTABLE_set_number_native(INTERP, dest,
                VTABLE_get_number(INTERP, SELF) *
                PMC_num_val(value)
            );
        }
        else {
            SUPER(value, dest);
        }
    }

/*

=item C<void divide(PMC *value, PMC *dest)>

Divides the string by C<*value> and returns the result in C<*dest>.

=cut

*/

    void divide (PMC* value, PMC* dest) {
        if(value->vtable == Parrot_base_vtables[enum_class_PerlInt]) {
            VTABLE_set_integer_native(INTERP, dest,
                VTABLE_get_integer(INTERP, SELF) /
                PMC_int_val(value)
            );
        }
        else if(value->vtable == Parrot_base_vtables[enum_class_PerlNum]) {
            VTABLE_set_number_native(INTERP, dest,
                VTABLE_get_number(INTERP, SELF) /
                PMC_num_val(value)
            );
        }
        else {
            SUPER(value, dest);
        }
    }

/*

=item C<void modulus(PMC *value, PMC *dest)>

Calculates the string C<mod> C<*value> and returns the result in
C<*dest>.

=cut

*/

    void modulus (PMC* value, PMC* dest) {
        if(value->vtable == Parrot_base_vtables[enum_class_PerlInt]) {
            VTABLE_set_integer_native(INTERP, dest,
                VTABLE_get_integer(INTERP, SELF) %
                PMC_int_val(value)
            );
        }
        else {
        internal_exception(INVALID_OPERATION,
            "modulus() not implemented for PerlString\n");
        }
    }

/*

=back

=head2 String Bitwise Operations

=over 4

=item C<void bitwise_ors(PMC* value, PMC* dest)>

=cut

*/

    void bitwise_ors (PMC* value, PMC* dest) {
        STRING* result;

        result = string_bitwise_or(interpreter, PMC_str_val(SELF),
            VTABLE_get_string(INTERP, value), NULL);
        VTABLE_set_string_native(INTERP, dest, result);
    }

/*

=item C<void bitwise_ors_str(STRING *value, PMC *dest)>

Calculates the string bitwise C<OR> for the string and C<*value> and
returns the result in C<*dest>.

=cut

*/

    void bitwise_ors_str (STRING* value, PMC* dest) {
        STRING* result;

        result = string_bitwise_or(interpreter, PMC_str_val(SELF),
            value, NULL);
        VTABLE_set_string_native(INTERP, dest, result);
    }

/*

=item C<void bitwise_xors(PMC *value, PMC *dest)>

=cut

*/

    void bitwise_xors (PMC* value, PMC* dest) {
        STRING* result;

        result = string_bitwise_xor(interpreter, PMC_str_val(SELF),
            VTABLE_get_string(INTERP, value), NULL);
        VTABLE_set_string_native(INTERP, dest, result);
    }

/*

=item C<void bitwise_xors_str(STRING *value, PMC *dest)>

Calculates the string bitwise C<XOR> for the string and C<*value> and
returns the result in C<*dest>.

=cut

*/

    void bitwise_xors_str (STRING* value, PMC* dest) {
        STRING* result;

        result = string_bitwise_xor(interpreter, PMC_str_val(SELF),
            value, NULL);
        VTABLE_set_string_native(INTERP, dest, result);
    }

/*

=item C<void bitwise_ands(PMC *value, PMC *dest)>

=cut

*/

    void bitwise_ands (PMC* value, PMC* dest) {
        STRING* result;

        result = string_bitwise_and(interpreter, PMC_str_val(SELF),
            VTABLE_get_string(INTERP, value), NULL);
        VTABLE_set_string_native(INTERP, dest, result);
    }

/*

=item C<void bitwise_ands_str(STRING *value, PMC *dest)>

Calculates the string bitwise C<AND> for the string and C<*value> and
returns the result in C<*dest>.

=cut

*/

    void bitwise_ands_str (STRING* value, PMC* dest) {
        STRING* result;

        result = string_bitwise_and(interpreter, PMC_str_val(SELF),
            value, NULL);
        VTABLE_set_string_native(INTERP, dest, result);
    }

/*

=item C<void bitwise_nots(PMC *dest)>

Calculates the string bitwise C<NOT> for the string and returns the result
in C<*dest>.

=cut

*/

    void bitwise_nots (PMC* dest) {
        VTABLE_set_string_native(INTERP, dest,
            string_bitwise_not(interpreter, PMC_str_val(SELF), NULL));
    }

/*

=item C<void concatenate(PMC *value, PMC *dest)>

Concatenates the string and the stringified form of C<*value> and
return the result in C<*dest>, morphing it to a PerlString if required.

=cut

*/

    void concatenate (PMC* value, PMC* dest) {
        STRING* s = PMC_str_val(SELF);
        VTABLE_morph(INTERP, dest, enum_class_PerlString);
        PMC_str_val(dest) =
            string_concat(INTERP, s, VTABLE_get_string(INTERP, value), 0);
    }

/*

=item C<void concatenate_str(STRING *value, PMC *dest)>

Concatenates the string and C<*value> and returns the result in
C<*dest>.

=cut

*/

    void concatenate_str (STRING* value, PMC* dest) {
        STRING* s = PMC_str_val(SELF);
        VTABLE_morph(INTERP, dest, enum_class_PerlString);
        PMC_str_val(dest) = string_concat(INTERP, s, value, 0);
    }

/*

=item C<INTVAL is_equal(PMC *value)>

The C<==> operation.

=cut

*/

    INTVAL is_equal (PMC* value) {
	return (INTVAL)( 0 == string_compare(INTERP,
		    PMC_str_val(SELF),
		    VTABLE_get_string(INTERP, value)
		    ));
    }

/*

=item C<INTVAL cmp(PMC *value)>

Returns the result of comparing the string with C<*value>.

=cut

*/

    INTVAL cmp(PMC* value) {
        return string_compare(INTERP, PMC_str_val(SELF),
                  VTABLE_get_string(INTERP, value));
    }

/*

=item C<void repeat(PMC *value, PMC *dest)>

Returns in C<*dest> the string repeated C<*value> times.

=cut

*/

    void repeat (PMC* value, PMC* dest) {
        VTABLE_morph(INTERP, dest, enum_class_PerlString);
        PMC_str_val(dest) =
           string_repeat(INTERP, PMC_str_val(SELF),
                         (UINTVAL)VTABLE_get_integer(INTERP, value), NULL
                        );
    }

/*

=item C<void repeat_int(INTVAL value, PMC *dest)>

Returns in C<*dest> the string repeated C<value> times.

=cut

*/

    void repeat_int (INTVAL value, PMC* dest) {
	VTABLE_morph(INTERP, dest, enum_class_PerlString);
	PMC_str_val(dest) = string_repeat(INTERP,
		PMC_str_val(SELF), (UINTVAL)value, NULL);
    }

/*

=item C<void increment()>

=item C<void decrement()>

These two methods are partially implemented. They should provide
Perl 5 like string increment/decrement.

=cut

*/

    void increment () {
        STRING* s = PMC_str_val(SELF);
	PMC_str_val(SELF) = string_increment(INTERP, s);
    }

    void decrement () {
        INTVAL i = VTABLE_get_integer(INTERP, SELF);
	VTABLE_set_integer_native(INTERP, SELF, i - 1);
    }

/*

=item C<void substr(INTVAL offset, INTVAL length, PMC *dest)>

Returns in C<*dest> the C<length> character substring of the string
starting at C<offset>.

=cut

*/

    void substr (INTVAL offset, INTVAL length, PMC* dest) {
        DYNSELF.morph(enum_class_PerlString);
        VTABLE_morph(INTERP, dest, enum_class_PerlString);
        PMC_str_val(dest) = string_substr(INTERP,
            PMC_str_val(SELF), offset, length, NULL, 0);
    }

/*

=item C<STRING *substr_str(INTVAL offset, INTVAL length)>

Returns the C<length> character substring of the string starting at
C<offset>.


=cut

*/

    STRING* substr_str (INTVAL offset, INTVAL length) {
        return string_substr(INTERP, PMC_str_val(SELF), offset,
            length, NULL, 0);
    }

/*

=back

=head2 Iterator Interface

=over 4

=item C<PMC* slice (PMC *key)>

Return a new iterator for the slice PMC C<key>

=item C<PMC* get_iter (PMC *key)>

Return a new iterator for this string.


=item C<INTVAL elements ()>

Return length of the string.


=cut

*/

    INTVAL elements () {
	return string_length(INTERP, PMC_str_val(SELF));
    }

    PMC* slice (PMC* key) {
	PMC *iter = pmc_new_init(interpreter, enum_class_Iterator, SELF);
        PMC_struct_val(iter) = key;
        return iter;
    }

    PMC* get_iter () {
	PMC *iter = pmc_new_init(interpreter, enum_class_Iterator, SELF);
        PMC *key =  pmc_new(interpreter, enum_class_Key);
        PMC_struct_val(iter) = key;
        PObj_get_FLAGS(key) |= KEY_integer_FLAG;
        PMC_int_val(key) = 0;
        if (!string_length(INTERP, PMC_str_val(SELF)))
            PMC_int_val(key) = -1;
        return iter;
    }

/*

=item C<STRING *get_string_keyed(PMC *key)>

=item C<PMC *get_pmc_keyed(PMC *key)>

Returns the string value for C<SELF[key]>.

=cut

*/

    STRING* get_string_keyed(PMC* key) {
        STRING *s = PMC_str_val(SELF);

        return string_substr(INTERP, s, key_integer(INTERP,key), 1, NULL, 0);
    }
    PMC* get_pmc_keyed(PMC* key) {
        STRING *s = PMC_str_val(SELF);
        PMC *ret = pmc_new_noinit(INTERP, enum_class_PerlString);
        PMC_str_val(ret) = string_substr(INTERP, s,
		key_integer(INTERP,key), 1, NULL, 0);
        PObj_custom_mark_SET(ret);
	return ret;
    }

/*

=item C<INTVAL get_integer_keyed(PMC *key)>

Returns the integer value for C<*key>.

=cut

*/

    INTVAL get_integer_keyed(PMC* key) {
        STRING *s = PMC_str_val(SELF);

        return string_ord(INTERP, s, PMC_int_val(key));
    }

/*

=item C<void freeze(visit_info *info)>

Used to archive the string.

=cut

*/
    void freeze(visit_info *info) {
        IMAGE_IO *io = info->image_io;
        SUPER(info);
        io->vtable->push_string(INTERP, io, PMC_str_val(SELF));
    }

/*

=item C<void thaw(visit_info *info)>

Used to unarchive the string.

=cut

*/
    void thaw(visit_info *info) {
        IMAGE_IO *io = info->image_io;
        SUPER(info);
        if (info->extra_flags == EXTRA_IS_NULL)
            PMC_str_val(SELF) = io->vtable->shift_string(INTERP, io);
    }
}

/*

=back

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
