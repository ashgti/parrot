/* perlarray.pmc
 *  Copyright: (When this is determined...it will go here)
 *  CVS Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the PerlArray base class
 *  Data Structure and Algorithms:
 *  History:
 *  Notes:
 *  References:
 */

#include "parrot/parrot.h"

pmclass PerlArray {

    INTVAL type () {
        return 0;
    }

    STRING* name() {
        return whoami;
    }

    void init () {
	SELF->cache.struct_val = key_new(INTERP);
	key_set_size(INTERP,SELF->cache.struct_val,0);
    }

    void clone (PMC* dest) { 
    }

    void morph (INTVAL type) {
    }

    BOOLVAL move_to (void * destination) {
        return 0; /* You can't move me, I don't have anything to move! */
    }

    INTVAL real_size () {
	return 0; /* ->data is unused */
    }

    void destroy () {
	key_destroy(INTERP,SELF->cache.struct_val);
    }

    INTVAL get_integer () {
	KEY* key = SELF->cache.struct_val;
	INTVAL size = key_size(INTERP,key);
	return size;
    }

    INTVAL get_integer_index ( INTVAL index ) {
	KEY* key = SELF->cache.struct_val;
	KEY_PAIR* key_pair;
	INTVAL size = key_size(INTERP,key);
	if(index<0) {
	    key_pair = key_element_value_i(INTERP,key,size+index);
	}
	else {
	    key_pair = key_element_value_i(INTERP,key,index);
	}
	return key_pair->cache.int_val;
    }

    FLOATVAL get_number () {
	KEY* key = SELF->cache.struct_val;
	INTVAL size = key_size(INTERP,key);
	return (FLOATVAL)size;
    }

    FLOATVAL get_number_index ( INTVAL index ) {
	KEY* key = SELF->cache.struct_val;
	KEY_PAIR* key_pair = key_element_value_i(INTERP,key,index);
	return key_pair->cache.num_val;
    }

    STRING* get_string () {
	return (STRING*)SELF->cache.struct_val;
    }

    STRING* get_string_index ( INTVAL index ) {
	KEY* key = SELF->cache.struct_val;
	KEY_PAIR* key_pair = key_element_value_i(INTERP,key,index);
	return key_pair->cache.struct_val;
    }

    BOOLVAL get_bool () {
    }

    void* get_value () {
        return &SELF->cache;
    }

    BOOLVAL is_same (PMC* other) {
	STRING* s1 = (STRING*)SELF->cache.struct_val;
	STRING* s2 = (STRING*)other->cache.struct_val;
        return other->vtable == SELF->vtable
	    && (strcmp(s1->bufstart,s2->bufstart)==0);
    }

    void set_integer (PMC* value) {
	INTVAL size = value->vtable->get_integer(INTERP,value);
	KEY* key = SELF->cache.struct_val;
	key_set_size(INTERP,key,size);
    }

    void set_integer_native (INTVAL size) {
	KEY* key = SELF->cache.struct_val;
	key_set_size(INTERP,key,size);
    }

    void set_integer_bigint (BIGINT value) {
    }

    void set_integer_same (PMC * value) {
	INTVAL size = value->cache.int_val;
	KEY* key = SELF->cache.struct_val;
	key_set_size(INTERP,key,size);
    }

    void set_integer_index (INTVAL value, INTVAL index) {
	KEY* key = SELF->cache.struct_val;
	KEY_PAIR key_pair;
	INTVAL size = key_size(INTERP,key);
	if(index >= size) {
	    key_set_size(INTERP,key,index+1);
	}
	key_pair.type = enum_key_int;
	key_pair.cache.int_val = value;
	key_set_element_value_i(INTERP,key,index,&key_pair);
    }

    void set_number (PMC * value) {
	INTVAL size = (INTVAL)value->cache.num_val;
	KEY* key = SELF->cache.struct_val;
	key_set_size(INTERP,key,size);
    }

    void set_number_native (FLOATVAL size) {
	KEY* key = SELF->cache.struct_val;
	key_set_size(INTERP,key,(INTVAL)size);
    }

    void set_number_bigfloat (BIGFLOAT value) {
    }

    void set_number_same (PMC * value) {
	INTVAL size = value->cache.int_val;
	KEY* key = SELF->cache.struct_val;
	key_set_size(INTERP,key,size);
    }

    void set_number_index (FLOATVAL value, INTVAL index) {
	KEY* key = SELF->cache.struct_val;
	KEY_PAIR key_pair;
	if(index >= key_size(INTERP,key)) {
	    key_set_size(INTERP,key,index);
	}
	key_pair.type = enum_key_num;
	key_pair.cache.num_val = value;
	key_set_element_value_i(INTERP,key,index,&key_pair);
    }

    void set_string (PMC * value) {
    }

    void set_string_native (STRING * value) {
    }

    void set_string_unicode (STRING * value) {
    }

    void set_string_other (STRING * value) {
    }

    void set_string_same (PMC * value) {
    }

    void set_string_index (STRING * value, INTVAL index) {
	KEY* key = SELF->cache.struct_val;
	KEY_PAIR key_pair;
	if(index >= key_size(INTERP,key)) {
	    key_set_size(INTERP,key,index);
	}
	key_pair.type = enum_key_string;
	key_pair.cache.struct_val = value;
	key_set_element_value_i(INTERP,key,index,&key_pair);
    }

    void set_value (void* value) {
    }

    void add (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) +
                value->cache.int_val
            );
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
            dest->vtable->set_number_native(INTERP, dest, 
		SELF->vtable->get_number(INTERP, SELF) +
                value->cache.num_val
            );
	}
	else {
	}
    }

    void add_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) +
            value
        );
    }

    void add_bigint (BIGINT value, PMC* dest) {
    }

    void add_float (FLOATVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
	dest->vtable->set_number_native(INTERP, dest, 
	    SELF->vtable->get_number(INTERP, SELF) +
            value
        );
    }

    void add_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void add_same (PMC * value, PMC* dest) {
    }

    void subtract (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) -
                value->cache.int_val
            );
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
            dest->vtable->set_number_native(INTERP, dest, 
		SELF->vtable->get_number(INTERP, SELF) -
                value->cache.num_val
            );
	}
	else {
	}
    }

    void subtract_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) -
            value
        );
    }

    void subtract_bigint (BIGINT value, PMC* dest) {
    }

    void subtract_float (FLOATVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
	dest->vtable->set_number_native(INTERP, dest, 
	    SELF->vtable->get_number(INTERP, SELF) -
            value
        );
    }

    void subtract_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void subtract_same (PMC * value, PMC* dest) {
    }

    void multiply (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) *
                value->cache.int_val
            );
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
            dest->vtable->set_number_native(INTERP, dest, 
		SELF->vtable->get_number(INTERP, SELF) *
                value->cache.num_val
            );
	}
	else {
	}
    }

    void multiply_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) *
            value
        );
    }

    void multiply_bigint (BIGINT value, PMC* dest) {
    }

    void multiply_float (FLOATVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
	dest->vtable->set_number_native(INTERP, dest, 
	    SELF->vtable->get_number(INTERP, SELF) *
            value
        );
    }

    void multiply_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void multiply_same (PMC * value, PMC* dest) {
    }

    void divide (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) /
                value->cache.int_val
            );
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
            dest->vtable->set_number_native(INTERP, dest, 
		SELF->vtable->get_number(INTERP, SELF) /
                value->cache.num_val
            );
	}
	else {
	}
    }

    void divide_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) /
            value
        );
    }

    void divide_bigint (BIGINT value, PMC* dest) {
    }

    void divide_float (FLOATVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
	dest->vtable->set_number_native(INTERP, dest, 
	    SELF->vtable->get_number(INTERP, SELF) /
            value
        );
    }

    void divide_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void divide_same (PMC * value, PMC* dest) {
    }

    void modulus (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) %
                value->cache.int_val
            );
	}
	else {
	}
    }

    void modulus_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) %
            value
        );
    }

    void modulus_bigint (BIGINT value, PMC* dest) {
    }

    void modulus_float (FLOATVAL value, PMC* dest) {
    }

    void modulus_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void modulus_same (PMC * value, PMC* dest) {
    }

    void concatenate (PMC * value, PMC* dest) {
	dest->cache.struct_val =
	    string_concat(INTERP,
			  SELF->cache.struct_val,
			  value->vtable->get_string(INTERP, value),
			  0
			 );
    }

    void concatenate_native (STRING * value, PMC* dest) {
	dest->cache.struct_val =
	    string_concat(INTERP,
			  SELF->cache.struct_val,
			  value,
			  0
			 );
    }

    void concatenate_unicode (STRING * value, PMC* dest) {
	dest->cache.struct_val =
	    string_concat(INTERP,
			  SELF->cache.struct_val,
			  value,
			  0
			 );
    }

    void concatenate_other (STRING * value, PMC* dest) {
	dest->cache.struct_val =
	    string_concat(INTERP,
			  SELF->cache.struct_val,
			  value,
			  0
			 );
    }

    void concatenate_same (PMC * value, PMC* dest) {
	dest->cache.struct_val =
	    string_concat(INTERP,
			  SELF->cache.struct_val,
			  value->cache.struct_val,
			  0
			 );
    }

    /* == operation */
    BOOLVAL is_equal (PMC* value) {
    }

    void logical_or (PMC* value, PMC* dest) {
    }

    void logical_and (PMC* value, PMC* dest) {
    }

    void logical_not (PMC* value) {
    }

    void match (PMC * value,REGEX* re) {
    }

    void match_native (STRING * value, REGEX* re) {
    }

    void match_unicode (STRING * value, REGEX* re) {
    }

    void match_other (STRING * value, REGEX* re) {
    }

    void match_same (PMC * value,REGEX* re) {
    }

    void repeat (PMC * value, PMC* dest) {
    }

    void repeat_native (STRING * value, PMC* dest) {
    }

    void repeat_unicode (STRING * value, PMC* dest) {
    }

    void repeat_other (STRING * value, PMC* dest) {
    }

    void repeat_same (PMC * value, PMC* dest) {
    }
}
