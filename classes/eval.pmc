/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/eval.pmc - Dynamic code evaluation

=head1 DESCRIPTION

C<Eval> extends C<Closure> to provide C<eval>-like dynamic code
evaluation and execution.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "parrot/runops_cores.h"
#include "parrot/interp_guts.h"
#include "parrot/packfile.h"

pmclass Eval extends Closure {

/*

=item C<void destroy()>

TODO - When this PMC gets out of scope it should destroy the attached
PackFile.

=cut

*/

    void destroy () {
    }

/*

=item C<void *invoke (void *next)>

Invokes the PMC's code.

=cut

*/

    void* invoke (void* next) {
        struct PackFile_ByteCode *old_cs;
        /* invoke on Sub returns the address */
        struct PackFile *eval_pf = (struct PackFile *)SUPER(next);
#if EXEC_CAPABLE
        extern int Parrot_exec_run;
        if (Interp_core_TEST(interpreter, PARROT_EXEC_CORE)) {
            Parrot_exec_run = 2;
        }
#endif

        /* switch to code segment */
        old_cs = Parrot_switch_to_cs(interpreter, eval_pf->cur_cs);
        if (Interp_flags_TEST(interpreter, PARROT_TRACE_FLAG)) {
            PIO_eprintf(interpreter, "*** invoking %s\n",
                eval_pf->cur_cs->base.name);
        }
        runops_int(interpreter, 0);
        if (Interp_flags_TEST(interpreter, PARROT_TRACE_FLAG)) {
            PIO_eprintf(interpreter, "*** back from %s\n",
                eval_pf->cur_cs->base.name);
        }
        /* restore ctx */
        interpreter->ctx.pad_stack =
            ((struct Parrot_Sub*) PMC_sub(SELF))->ctx.pad_stack;
        /* if code jumped to different code segment, branch_cs
         * is setting the resum_flag to 2, so that the
         * runloop was left
         */
        if (interpreter->resume_flag & 2) {
            interpreter->resume_flag = 1;
            next = 0;
        }
        else
            (void)Parrot_switch_to_cs(interpreter, old_cs);
        return next;
    }

/*

=item C<INTVAL get_integer_keyed(PMC *key)>

Returns the pointer to the start of the PMC's code as an integer.

C<*key> is ignored.

=cut

*/

    INTVAL get_integer_keyed (PMC* key) {
        opcode_t *code = ((struct PackFile *)PMC_struct_val(SELF))->byte_code;
        /*
        int i = 0;
        for (i=0; i < 16; i++) {
            printf("At %p there is an %i\n", code+i, *(code+i));
        }
        */
        return (INTVAL) code;
    }

/*

=item C<STRING *get_string()>

Returns the PMC's code as a Parrot string.

=cut

*/

    STRING* get_string () {
        size_t size;
        opcode_t *packed;
        struct PackFile *pf = (struct PackFile *) PMC_struct_val(SELF);
        STRING *s;
    
        size = PackFile_pack_size(pf) * sizeof(opcode_t);
        packed = (opcode_t*) mem_sys_allocate(size);
        PackFile_pack(pf, packed);
        s = string_make(interpreter, packed, size, NULL,0,NULL);
        mem_sys_free(packed);
        return s;
    }
}

/*

=back

=head1 HISTORY

Initial version by leo 2003/01/16.

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
