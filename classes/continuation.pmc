/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/continuation.pmc - Continuation PMC

=head1 DESCRIPTION

C<Continuation> extends C<Closure> to provide a subroutine with
associated "context". See the L<Glossary|docs/glossary.pod> for more
information.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "parrot/method_util.h"

pmclass Continuation extends Closure {

/*

=item C<void init()>

Initializes the continuation.

=cut

*/

void init () {
        PMC_sub(SELF) = new_continuation(INTERP);
        PMC_struct_val(SELF) = NULL;
        PObj_custom_mark_destroy_SETALL(SELF);
    }

/*

=item C<void mark()>

Marks the continuation as live.

=cut

*/

    void mark () {
        struct Parrot_Sub * cc = (struct Parrot_Sub*)PMC_sub(SELF);
        mark_context(INTERP, &cc->ctx);
    }

/*

=item C<PMC *clone()>

Creates and returns a clone of the continuation.

=cut

*/

    PMC* clone() {
        struct Parrot_Sub * sub;
        PMC* ret = pmc_new_noinit(INTERP, SELF->vtable->base_type);
        PObj_custom_mark_destroy_SETALL(ret);
        sub = PMC_sub(ret) = mem_sys_allocate(sizeof(struct Parrot_Sub));
        memcpy(sub, PMC_sub(SELF), sizeof(struct Parrot_Sub));
        cow_copy_context(INTERP, &sub->ctx, &PMC_sub(SELF)->ctx);
        PMC_struct_val(ret) = PMC_struct_val(SELF);
        return ret;
    }

/*

=item C<void *invoke(void *next)>

Restores the "context" and calls the superclass's C<invoke()>.

=cut

*/

    void* invoke (void* next) {
        struct Parrot_Sub * cc = (struct Parrot_Sub*)PMC_sub(SELF);
        restore_context(interpreter, &cc->ctx);
        return SUPER(next);
    }
}

/*

=back

=head1 HISTORY

Initial revision by sean 2002/08/04.

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
