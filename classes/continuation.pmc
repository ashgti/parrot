/* Continuation.pmc
 *  Copyright: (When this is determined...it will go here)
 *  CVS Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the Continuation base class
 *  Data Structure and Algorithms:
 *  History:
 *     Initial revision by sean 2002/08/04
 *  Notes:
 *  References:
 */

#include "parrot/parrot.h"
#include "parrot/method_util.h"

pmclass Continuation {

    void init () {
        struct Parrot_Continuation * cc;
        cc = new_continuation(interpreter, 0);
        PMC_data(SELF) = cc;
        PObj_custom_mark_destroy_SETALL(SELF);
    }

    void destroy () {
        mem_sys_free(PMC_data(SELF));
    }

    void set_integer_native (INTVAL value) {
        ((struct Parrot_Continuation *)PMC_data(SELF))->continuation
            = (opcode_t *)value;
    }

    void mark () {
        mark_stack(
            INTERP,
            ((struct Parrot_Continuation *)PMC_data(SELF))->ctx.user_stack
        );
        mark_stack(
            INTERP,
            ((struct Parrot_Continuation *)PMC_data(SELF))->ctx.control_stack
        );
    }

    INTVAL type () {
        return enum_class_Continuation;
    }

    STRING* name () {
        return whoami;
    }

    void clone (PMC *ret) {
        struct Parrot_Continuation * retc
            = mem_sys_allocate(sizeof(struct Parrot_Continuation));
        PMC_data(ret) = retc;
        PObj_custom_mark_destroy_SETALL(ret);
        memcpy(retc, PMC_data(SELF), sizeof(struct Parrot_Continuation));
        /* we may have copied our stack already, so we need to re-COW
         * it */
        stack_mark_cow(retc->ctx.user_stack);
        stack_mark_cow(retc->ctx.control_stack);
    }

    PMC* get_pmc () {
        return SELF;
    }

    INTVAL is_same (PMC* value) {
        return SELF == value;
    }

    void set_same (PMC* value) {
        PMC_data(SELF) = PMC_data(value);
    }

    INTVAL is_equal (PMC* value) {
        return (SELF->vtable == value->vtable
                && memcmp(PMC_data(value), PMC_data(SELF),
                          sizeof(struct Parrot_Continuation)) == 0);
    }

    INTVAL defined () {
        return ((struct Parrot_Continuation *)PMC_data(SELF))->continuation != NULL;
    }

    void* invoke (void* next) {
        struct Parrot_Continuation * cc
            = (struct Parrot_Continuation*)PMC_data(SELF);
        restore_context(interpreter, &cc->ctx);
        return cc->continuation; /* interp will jump to this address */
    }
}
