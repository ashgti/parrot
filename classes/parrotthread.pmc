/* parrotthread.pmc
 *  Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
 *  CVS Info
 *     $Id$
 *  Overview:
 *     ParrotThread is a threaded ParrotInterpreter subclass
 *  Data Structure and Algorithms:
 *  History:
 *     2003.12.18 leo initial rev
 *  Notes:
 *     Additionally to ParrotInterpreter a ParrotThread supports:
 *
 *     new P0, .ParrotThread     # create new threaded interp
 *     getinterp P2
 *     new P0, .ParrotThread, P2 # create thread P0 from interp P2
 *     set I0, P0                # get thread id
 *
 *     and these methods:
 *
 *     thread1
 *     thread2
 *     thread3                   # start thread of type 1..3
 *     join
 *     detach
 *     yield
 *     kill
 *
 *  References:
 */

#include "parrot/parrot.h"
#include "parrot/embed.h"
#include <assert.h>

pmclass ParrotThread extends ParrotInterpreter need_ext {

    void class_init() {
        /*
         * inherit interpreter methods - needs interpreter already
         * initialized
         */
        Parrot_base_vtables[enum_class_ParrotThread]->method_table =
            Parrot_base_vtables[enum_class_ParrotInterpreter]->method_table;
    }

    void init () {
        PMC *parent;
        /*
         * protect interpreter creation and list handling
         */
        LOCK(interpreter_array_mutex);
        SUPER();
        pt_add_to_interpreters(interpreter, PMC_data(SELF));
        UNLOCK(interpreter_array_mutex);
    }

    /*
     * create a new thread by cloning the passed interpreter
     */
    void init_pmc (PMC *parent) {
        LOCK(interpreter_array_mutex);
        SUPER(parent);
        pt_add_to_interpreters(PMC_data(parent), PMC_data(SELF));
        UNLOCK(interpreter_array_mutex);
    }
}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
