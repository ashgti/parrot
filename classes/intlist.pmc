/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/intlist.pmc - Array of integers

=head1 DESCRIPTION

C<IntList> provides an integer-only array.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

#define THROW_UNSUPPORTED internal_exception(INTERP_ERROR, "Operation not supported\n")

pmclass IntList need_ext {

/*

=item C<PMC *clone()>

Creates and returns a clone of the list.

=cut

*/

    PMC* clone () {
        PMC* dest = pmc_new_noinit(INTERP, SELF->vtable->base_type);
        PObj_custom_mark_SET(dest);
        PMC_data(dest) = intlist_clone(INTERP, (IntList *) PMC_data(SELF));
        return dest;
    }

/*

=item C<void init()>

Initializes the list.

=cut

*/

    void init () {
        PMC_data(SELF) = intlist_new(INTERP);
        PMC_int_val(SELF) = 0;
        PObj_custom_mark_SET(SELF);
    }

/*

=item C<void mark()>

Marks the list as live.

=cut

*/

    void mark () {
        intlist_mark(INTERP, (IntList *) PMC_data(SELF));
    }

/*

=item C<void set_integer_keyed_int(INTVAL key, INTVAL value)>

Sets C<value> at index C<key>.

=cut

*/

    void set_integer_keyed_int (INTVAL key, INTVAL value) {
        intlist_assign(INTERP, (IntList*) PMC_data(SELF), key, value);
    }

/*

=item C<void set_integer_keyed (PMC *key, INTVAL value)>

Sets C<value> at index C<*key>.

=cut

*/

    void set_integer_keyed (PMC* key, INTVAL value) {
        INTVAL ix;

        if (!key) return;

        ix = key_integer(INTERP, key);
        intlist_assign(INTERP, (IntList*) PMC_data(SELF), ix, value);
    }

/*

=item C<INTVAL get_integer()>

Returns the number of elements in the list.

=cut

*/

    INTVAL get_integer () {
        return intlist_length(INTERP, (IntList*) PMC_data(SELF));
    }

/*

=item C<INTVAL get_integer_keyed_int(INTVAL key)>

Returns the value of the element at index C<key>.

=cut

*/

    INTVAL get_integer_keyed_int (INTVAL key) {
        return intlist_get(INTERP, (IntList*) PMC_data(SELF), key);
    }

/*

=item C<INTVAL get_integer_keyed(PMC *key)>

Returns the value of the element at index C<*key>.

=cut

*/

    INTVAL get_integer_keyed (PMC* key) {
        INTVAL ix;
        if (!key) return 0;
        ix = key_integer(INTERP, key);
        return intlist_get(INTERP, (IntList*) PMC_data(SELF), ix);
    }

/*

=item C<void push_integer(INTVAL value)>

Adds C<value> to the end of the list.

=cut

*/

    void push_integer (INTVAL value) {
        intlist_push(INTERP, (IntList*) PMC_data(SELF), value);
    }

/*

=item C<INTVAL pop_integer()>

Removes and returns the last element in the list.

=cut

*/

    INTVAL pop_integer() {
        return intlist_pop(INTERP, (IntList*) PMC_data(SELF));
    }

/*

=item C<void unshift_integer(INTVAL value)>

Adds C<value> to the start of the list.

=cut

*/

    void unshift_integer (INTVAL value) {
        intlist_unshift(INTERP, (IntList**) &PMC_data(SELF), value);
    }

/*

=item C<INTVAL shift_integer()>

Removes and returns the first element in the list.

=cut

*/

    INTVAL shift_integer() {
        return intlist_shift(INTERP, (IntList**) &PMC_data(SELF));
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
