/* Sub.pmc
 *  Copyright: (When this is determined...it will go here)
 *  CVS Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the Sub (subroutine) base class
 *  Data Structure and Algorithms:
 *  History:
 *     Initial version by Melvin on 2002/06/6
 *  Notes:
 *  References:
 */

#include "parrot/parrot.h"

pmclass Sub {

   STRING* name () {
	return whoami;
   }

   void init () {
       INTVAL address = 0; /* XXX this was originally passed as a
                            * parameter, but that's not valid.  So
                            * this is totally broken now. */
       PMC_data(SELF) = new_sub(INTERP, (opcode_t*)address);
       PObj_custom_mark_destroy_SETALL(SELF);
   }

   void mark () {
       PMC * pad = ((struct Parrot_Sub *)PMC_data(SELF))->lex_pad;
       if (pad) {
           pobject_lives(INTERP, (PObj *)pad);
       }
   }

   void destroy () {
       mem_sys_free(PMC_data(SELF));
   }

   void set_integer (PMC * value) {
       ((struct Parrot_Sub*)PMC_data(SELF))->init = (opcode_t*)VTABLE_get_integer(INTERP, value);
   }

   void set_integer_native (INTVAL value) {
       ((struct Parrot_Sub*)PMC_data(SELF))->init = (opcode_t*)value;
   }

   void* invoke (void* next) {
       PMC * pad = ((struct Parrot_Sub *)PMC_data(SELF))->lex_pad;

       if (pad) {
           /* put the correct pad in place */
           stack_push(INTERP, &INTERP->ctx.pad_stack, pad,
                      STACK_ENTRY_PMC, STACK_CLEANUP_NULL);
       }

       return ((struct Parrot_Sub*)PMC_data(SELF))->init;
   }

   void clone (PMC *ret) {
        PObj_custom_mark_destroy_SETALL(ret);
	PMC_data(ret) = mem_sys_allocate(sizeof(struct Parrot_Sub));
	memcpy(PMC_data(ret), PMC_data(SELF), sizeof(struct Parrot_Sub));
   }

}
