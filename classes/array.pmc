/* array.pmc
 *  Copyright: (When this is determined...it will go here)
 *  CVS Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the Array base class
 *  Data Structure and Algorithms:
 *  History:
 *  Notes:
 *  References:
 */

#include "parrot/parrot.h"

static INTVAL kp2int(struct Parrot_Interp *interpreter, KEY_PAIR kp) {
    switch ((int)kp.type) {
        case enum_key_undef:
        default:
            return 0;
        case enum_key_int:
            return kp.cache.int_val;
        case enum_key_num:
            return (INTVAL)kp.cache.num_val;
        case enum_key_pmc:
            return kp.cache.pmc_val->vtable->get_integer(interpreter, kp.cache.pmc_val);
    }
}

static void resize_array ( struct Parrot_Interp *interpreter, PMC* self, INTVAL size ) {
    size++;
    if(self->data != NULL) {
	if(size >= 0) {
	    ((Buffer *)self->data)->bufstart = (DPOINTER*)mem_realloc(interpreter, ((Buffer *)self->data)->bufstart,self->cache.int_val*sizeof(PMC *), sizeof(PMC*)*size);
	    self->cache.int_val = size;
	}
	else {
            internal_exception(OUT_OF_BOUNDS,
                               "Array resize out of bounds!\n");
	}
    }
    else {
	((Buffer *)self->data)->bufstart = Parrot_allocate(interpreter, sizeof(PMC*)*size);
    }
}

pmclass Array {

    INTVAL type () {
        return 0;
    }

    STRING* name() {
        return whoami;
    }

    void init (INTVAL size) {
	SELF->data = new_pmc_header(interpreter);
	((Buffer *)SELF->data)->bufstart = NULL;
	SELF->flags |= (PMC_is_buffer_ptr_FLAG | PMC_is_PMC_ptr_FLAG);
	SELF->cache.int_val = 0;
    }

    void clone (PMC* dest) { 
    }

    void morph (INTVAL type) {
    }

    BOOLVAL move_to (void * destination) {
        destination = *(PMC**)(SELF->data);
        SELF->data = &destination;
        return 1;
    }

    INTVAL real_size () {
	return SELF->cache.int_val * sizeof(PMC*);
    }

    void destroy () {
	/* XXX Hook into GC */
	/* key_destroy(INTERP,SELF->data); */
    }

    INTVAL get_integer () {
	return SELF->cache.int_val;
    }

    INTVAL get_integer_keyed (KEY * key) {
        KEY_PAIR* kp;
        INTVAL ix;
        PMC* value;

        if (!key) {
            return 0;
        }

        kp = (key->keys)[0];
        ix = kp2int(INTERP, *kp);

        if (ix > SELF->cache.int_val || ix < 0) {
            internal_exception(OUT_OF_BOUNDS, "Array element out of bounds!\n");
        }

        value = ((PMC**)(((Buffer *)SELF->data)->bufstart))[ix];
        return value->vtable->get_integer(INTERP, value);
    }

    FLOATVAL get_number () {
	return (FLOATVAL)(SELF->cache.int_val);
    }

    FLOATVAL get_number_keyed (KEY * key) {
        KEY_PAIR* kp;
        INTVAL ix;
        PMC* value;

        if (!key) {
            return 0;
        }

        kp = (key->keys)[0];
        ix = kp2int(INTERP, *kp);

        if (ix > SELF->cache.int_val || ix < 0) {
            internal_exception(OUT_OF_BOUNDS, "Array element out of bounds!\n");
        }

        value = ((PMC**)(((Buffer *)SELF->data)->bufstart))[ix];
        return value->vtable->get_number(INTERP, value);
    }

    STRING* get_string () {
	return NULL;
    }

    STRING* get_string_keyed (KEY * key) {
        KEY_PAIR* kp;
        INTVAL ix;
        PMC* value;

        if (!key) {
            return 0;
        }

        kp = (key->keys)[0];
        ix = kp2int(INTERP, *kp);

        if (ix > SELF->cache.int_val || ix < 0) {
            internal_exception(OUT_OF_BOUNDS, "Array element out of bounds!\n");
        }

        value = ((PMC**)(((Buffer *)SELF->data)->bufstart))[ix];
        return value->vtable->get_string(INTERP, value);
    }

    BOOLVAL get_bool () {
	return (BOOLVAL)(SELF->cache.int_val != 0);
    }

    void* get_value () {
        return &SELF->data;
    }

    BOOLVAL is_same (PMC* other) {
        STRING* s1 = (STRING*)SELF->cache.struct_val;
        STRING* s2 = (STRING*)other->cache.struct_val;
        return (BOOLVAL)( other->vtable == SELF->vtable &&
                          s1->bufused   == s2->bufused  &&
            (memcmp(s1->bufstart,s2->bufstart,(size_t)s1->bufused)==0));
    }

    void set_integer (PMC* value) {
	INTVAL size = value->vtable->get_integer(INTERP,value);
	resize_array(interpreter, SELF,size);
    }

    void set_integer_native (INTVAL size) {
	resize_array(interpreter, SELF,size);
    }

    void set_integer_bigint (BIGINT value) {
    }

    void set_integer_same (PMC * value) {
	INTVAL size = value->cache.int_val;
	resize_array(interpreter, SELF,size);
    }

    void set_integer_keyed (KEY * key, INTVAL value) {
        KEY_PAIR* kp;
        INTVAL ix;
        PMC* mypmc;

        if (!key) {
            return;
        }

        kp = (key->keys)[0];
        ix = kp2int(INTERP, *kp);

        if (ix > SELF->cache.int_val || ix < 0) {
            internal_exception(OUT_OF_BOUNDS, "Array element out of bounds!\n");
        }

	mypmc = ((PMC**)(((Buffer *)SELF->data)->bufstart))[ix];
        mypmc->vtable->set_integer_native(INTERP, mypmc, value);
    }

    void set_number (PMC * value) {
	INTVAL size = (INTVAL)value->cache.num_val;
	resize_array(interpreter, SELF,size);
    }

    void set_number_native (FLOATVAL size) {
	resize_array(interpreter, SELF,(INTVAL)size);
    }

    void set_number_bigfloat (BIGFLOAT value) {
    }

    void set_number_same (PMC * value) {
	INTVAL size = value->cache.int_val;
	resize_array(interpreter, SELF,size);
    }

    void set_number_keyed (KEY * key, FLOATVAL value) {
        KEY_PAIR* kp;
        INTVAL ix;
        PMC* mypmc;

        if (!key) {
            return;
        }

        kp = (key->keys)[0];
        ix = kp2int(INTERP, *kp);

        if (ix > SELF->cache.int_val || ix < 0) {
            internal_exception(OUT_OF_BOUNDS, "Array element out of bounds!\n");
        }

	mypmc = ((PMC**)(((Buffer *)SELF->data)->bufstart))[ix];
        mypmc->vtable->set_number_native(INTERP, mypmc, value);
    }

    void set_string (PMC * value) {
    }

    void set_string_native (STRING * value) {
    }

    void set_string_unicode (STRING * value) {
    }

    void set_string_other (STRING * value) {
    }

    void set_string_same (PMC * value) {
    }

    void set_string_keyed (KEY * key, STRING * value) {
        KEY_PAIR* kp;
        INTVAL ix;
        PMC* mypmc;

        if (!key) {
            return;
        }

        kp = (key->keys)[0];
        ix = kp2int(INTERP, *kp);

        if (ix > SELF->cache.int_val || ix < 0) {
            internal_exception(OUT_OF_BOUNDS, "Array element out of bounds!\n");
        }

	mypmc = ((PMC**)(((Buffer *)SELF->data)->bufstart))[ix];
        mypmc->vtable->set_string_native(INTERP, mypmc, value);
    }

    void set_value (void* value) {
    }

    void set_pmc_keyed(KEY * dest_key, PMC* src, KEY* src_key) {
        if (src_key) {
            src = src->vtable->get_pmc_keyed(INTERP, src, src_key);
        }
        if (dest_key) {
            INTVAL ix = kp2int(INTERP, *((dest_key->keys)[0]));
            PMC* dest = ((PMC**)(((Buffer *)SELF->data)->bufstart))[ix];
            dest->vtable->set_pmc(INTERP, dest, src);
        } 
        else {
            /* $#array = $foo[$bar] */
            resize_array(interpreter, SELF, src->vtable->get_integer(INTERP, src));
        }       
    }

    void add (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) +
                value->cache.int_val
            );
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
            dest->vtable->set_number_native(INTERP, dest, 
		SELF->vtable->get_number(INTERP, SELF) +
                value->cache.num_val
            );
	}
	else {
	}
    }

    void add_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) +
            value
        );
    }

    void add_bigint (BIGINT value, PMC* dest) {
    }

    void add_float (FLOATVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
	dest->vtable->set_number_native(INTERP, dest, 
	    SELF->vtable->get_number(INTERP, SELF) +
            value
        );
    }

    void add_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void add_same (PMC * value, PMC* dest) {
    }

    void subtract (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) -
                value->cache.int_val
            );
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
            dest->vtable->set_number_native(INTERP, dest, 
		SELF->vtable->get_number(INTERP, SELF) -
                value->cache.num_val
            );
	}
	else {
	}
    }

    void subtract_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) -
            value
        );
    }

    void subtract_bigint (BIGINT value, PMC* dest) {
    }

    void subtract_float (FLOATVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
	dest->vtable->set_number_native(INTERP, dest, 
	    SELF->vtable->get_number(INTERP, SELF) -
            value
        );
    }

    void subtract_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void subtract_same (PMC * value, PMC* dest) {
    }

    void multiply (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) *
                value->cache.int_val
            );
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
            dest->vtable->set_number_native(INTERP, dest, 
		SELF->vtable->get_number(INTERP, SELF) *
                value->cache.num_val
            );
	}
	else {
	}
    }

    void multiply_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) *
            value
        );
    }

    void multiply_bigint (BIGINT value, PMC* dest) {
    }

    void multiply_float (FLOATVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
	dest->vtable->set_number_native(INTERP, dest, 
	    SELF->vtable->get_number(INTERP, SELF) *
            value
        );
    }

    void multiply_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void multiply_same (PMC * value, PMC* dest) {
    }

    void divide (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) /
                value->cache.int_val
            );
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
            dest->vtable->set_number_native(INTERP, dest, 
		SELF->vtable->get_number(INTERP, SELF) /
                value->cache.num_val
            );
	}
	else {
	}
    }

    void divide_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) /
            value
        );
    }

    void divide_bigint (BIGINT value, PMC* dest) {
    }

    void divide_float (FLOATVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlNum];
	dest->vtable->set_number_native(INTERP, dest, 
	    SELF->vtable->get_number(INTERP, SELF) /
            value
        );
    }

    void divide_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void divide_same (PMC * value, PMC* dest) {
    }

    void modulus (PMC * value, PMC* dest) {
	if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
	    dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
            dest->vtable->set_integer_native(INTERP, dest, 
		SELF->vtable->get_integer(INTERP, SELF) %
                value->cache.int_val
            );
	}
	else {
	}
    }

    void modulus_int (INTVAL value, PMC* dest) {
	dest->vtable = &Parrot_base_vtables[enum_class_PerlInt];
        dest->vtable->set_integer_native(INTERP, dest, 
	    SELF->vtable->get_integer(INTERP, SELF) %
            value
        );
    }

    void modulus_bigint (BIGINT value, PMC* dest) {
    }

    void modulus_float (FLOATVAL value, PMC* dest) {
    }

    void modulus_bigfloat (BIGFLOAT value, PMC* dest) {
    }

    void modulus_same (PMC * value, PMC* dest) {
    }

    void concatenate (PMC * value, PMC* dest) {
	dest->cache.struct_val =
	    string_concat(INTERP,
			  SELF->cache.struct_val,
			  value->vtable->get_string(INTERP, value),
			  0
			 );
    }

    void concatenate_native (STRING * value, PMC* dest) {
	dest->cache.struct_val =
	    string_concat(INTERP,
			  SELF->cache.struct_val,
			  value,
			  0
			 );
    }

    void concatenate_unicode (STRING * value, PMC* dest) {
	dest->cache.struct_val =
	    string_concat(INTERP,
			  SELF->cache.struct_val,
			  value,
			  0
			 );
    }

    void concatenate_other (STRING * value, PMC* dest) {
	dest->cache.struct_val =
	    string_concat(INTERP,
			  SELF->cache.struct_val,
			  value,
			  0
			 );
    }

    void concatenate_same (PMC * value, PMC* dest) {
	dest->cache.struct_val =
	    string_concat(INTERP,
			  SELF->cache.struct_val,
			  value->cache.struct_val,
			  0
			 );
    }

    /* == operation */
    BOOLVAL is_equal (PMC* value) {
        return 0;
    }

    void logical_or (PMC* value, PMC* dest) {
    }

    void logical_and (PMC* value, PMC* dest) {
    }

    void logical_not (PMC* value) {
    }

    void match (PMC * value,REGEX* re) {
    }

    void match_native (STRING * value, REGEX* re) {
    }

    void match_unicode (STRING * value, REGEX* re) {
    }

    void match_other (STRING * value, REGEX* re) {
    }

    void match_same (PMC * value,REGEX* re) {
    }

    void repeat (PMC * value, PMC* dest) {
    }

    void repeat_native (STRING * value, PMC* dest) {
    }

    void repeat_unicode (STRING * value, PMC* dest) {
    }

    void repeat_other (STRING * value, PMC* dest) {
    }

    void repeat_same (PMC * value, PMC* dest) {
    }
}
