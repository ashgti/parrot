/* NCI.pmc
 *  Copyright: 2002 Yet Another Society
 *  CVS Info
 *     $Id$
 *  Overview:
 *     The vtable functions for the native C call functions
 *  Data Structure and Algorithms:
 *  History:
 *     Initial revision by sean 2002/08/04
 *  Notes:
 *  References:
 */

#include "parrot/parrot.h"
#include "parrot/method_util.h"

pmclass NCI {

    void init() {
	SELF->cache.struct_val = NULL;
    }

    void set_string_keyed (PMC* func, STRING* value) {
	/* key = func_ptr, value = signature */
	SELF->cache.struct_val = (DPOINTER *)func;
	SELF->data = build_call_func(INTERP, SELF, value);
    }

    STRING* name () {
        return whoami;
    }

    void destroy() {
	if (SELF->data)
	    mem_sys_free(SELF->data);
    }

    void clone (PMC *ret) {
        ret->cache.struct_val = SELF->cache.struct_val;
	/* FIXME if data is malloced (JIT/i386!) then we need
	 * the length of data here, to memcpy it
	 * ManagedStruct or Buffer?
	 */
	ret->data = SELF->data;
    }

    INTVAL defined () {
        return SELF->data != NULL;
    }

    void* invoke (void * next) {
        Parrot_csub_t func = (Parrot_csub_t)D2FPTR(SELF->data);
        func(INTERP, SELF);
        return next;
    }
}
