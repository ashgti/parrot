/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/floatval.pmc - Array of FLOATVALs

=head1 DESCRIPTION

C<FloatvalArray> provides an floatval-only array.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"


pmclass FloatvalArray does array  {

/*

=item C<void init()>

Initializes the list.

=cut

*/

    void init () {
        PMC_struct_val(SELF) = list_new(INTERP, enum_type_FLOATVAL);
        PObj_custom_mark_SET(SELF);
    }

/*

=item C<PMC *clone()>

Creates and returns a clone of the list.

=cut

*/

    PMC* clone () {
        PMC* dest = pmc_new_noinit(INTERP, SELF->vtable->base_type);
        PObj_custom_mark_SET(dest);
        PMC_struct_val(dest) = list_clone(INTERP, (List *)PMC_struct_val(SELF));
        return dest;
    }

/*

=item C<void mark()>

Marks the list as live.

=cut

*/

    void mark () {
        list_mark(INTERP, (List *) PMC_struct_val(SELF));
    }

/*

=item C<void set_number_keyed_int(INTVAL key, FLOATVAL value)>

Sets C<value> at index C<key>.

=cut

*/

    void set_number_keyed_int (INTVAL key, FLOATVAL value) {
        list_assign(INTERP, (List*) PMC_struct_val(SELF), key, &value,
                enum_type_FLOATVAL);
    }

    void set_integer_native(INTVAL len) {
        FLOATVAL nul = 0.0;
        list_assign(INTERP, (List*) PMC_struct_val(SELF), len-1, &nul,
                enum_type_FLOATVAL);
    }

    INTVAL get_integer() {
        return list_length(INTERP, (List*) PMC_struct_val(SELF));
    }

/*

=item C<void set_number_keyed (PMC *key, FLOATVAL value)>

Sets C<value> at index C<*key>.

=cut

*/

    void set_number_keyed (PMC* key, FLOATVAL value) {
        FLOATVAL ix;

        if (!key) return;

        ix = key_number(INTERP, key);
        list_assign(INTERP, (List*) PMC_struct_val(SELF),
                ix, &value, enum_type_FLOATVAL);
    }

/*

=item C<FLOATVAL get_number()>

Returns the number of elements in the list.

=cut

*/

    FLOATVAL get_number () {
        return list_length(INTERP, (List*) PMC_struct_val(SELF));
    }

/*

=item C<FLOATVAL get_number_keyed_int(INTVAL key)>

Returns the value of the element at index C<key>.

=cut

*/

    FLOATVAL get_number_keyed_int (INTVAL key) {
        void *ret = list_get(INTERP, (List*) PMC_struct_val(SELF), key,
                enum_type_FLOATVAL);
        return !ret || ret == (void*)-1 ? 0.0 : *(FLOATVAL*)ret;
    }

/*

=item C<FLOATVAL get_number_keyed(PMC *key)>

Returns the value of the element at index C<*key>.

=cut

*/

    FLOATVAL get_number_keyed (PMC* key) {
        FLOATVAL ix;
        void *ret;
        ix = key_number(INTERP, key);
        ret = list_get(INTERP, (List*) PMC_struct_val(SELF), ix,
                enum_type_FLOATVAL);
        return !ret || ret == (void*)-1 ? 0.0 : *(FLOATVAL*)ret;
    }

/*

=item C<void push_float(FLOATVAL value)>

Adds C<value> to the end of the list.

=cut

*/

    void push_float (FLOATVAL value) {
        list_push(INTERP, (List*) PMC_struct_val(SELF), &value,
                enum_type_FLOATVAL);
    }

/*

=item C<FLOATVAL pop_float()>

Removes and returns the last element in the list.

=cut

*/

    FLOATVAL pop_float() {
        void *ret = list_pop(INTERP, (List*) PMC_struct_val(SELF),
                enum_type_FLOATVAL);
        return !ret || ret == (void*)-1 ? 0.0 : *(FLOATVAL*)ret;
    }

/*

=item C<void unshift_float(FLOATVAL value)>

Adds C<value> to the start of the list.

=cut

*/

    void unshift_float (FLOATVAL value) {
        list_unshift(INTERP, (List*) PMC_struct_val(SELF), &value,
                enum_type_FLOATVAL);
    }

/*

=item C<FLOATVAL shift_float()>

Removes and returns the first element in the list.

=cut

*/

    FLOATVAL shift_float() {
        void *ret = list_shift(INTERP, (List*) PMC_struct_val(SELF),
                enum_type_FLOATVAL);
        return !ret || ret == (void*)-1 ? 0.0 : *(FLOATVAL*)ret;
    }
}

/*

=back

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
