/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/coroutine.pmc - Co-Routine PMC

=head1 DESCRIPTION

C<Coroutine> extends C<Continuation> to provide a subroutine that can
stop in the middle, and start back up later at the point at which it
stopped. See the L<Glossary|docs/glossary.pod> for more information.

=head2 Flags

=over 4

=item private0 call flip flop

=item private3 restore current sub after "flop".  Used by generators.

=back

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "parrot/method_util.h"
#include <assert.h>

/*
 * XXX put these into exceptions.h
 */


#define TRY \
    do { \
        new_internal_exception(INTERP); \
        if (!setjmp(INTERP->exceptions->destination))

#define CATCH \
    else

#define ENDTRY \
    } while(0); \
    do { \
        Parrot_exception *e = INTERP->exceptions; \
        INTERP->exceptions = e->prev; \
        INTERP->exc_free_list = e; \
    } while(0)


#define THROW(e)  \
    do { \
	exceptions->err = e; \
	longjmp(exceptions->dest, 1); \
    } while(0)

pmclass Coroutine extends Sub {

/*

=item C<void init()>

Initializes the co-routine.

=cut

*/

    void init () {
        PMC_coro(SELF) = new_coroutine(INTERP);
        PMC_pmc_val(SELF) = NULL;
        PObj_custom_mark_destroy_SETALL(SELF);
    }

/*

=item C<void *invoke(void *next)>

Swaps the "context".

=cut

*/

    void* invoke (void* next) {
        struct Parrot_coro * sub = PMC_coro(SELF);
        struct PackFile_ByteCode *wanted_seg;
        void * dest = sub->address;
        int argcP = REG_INT(3);

        sub->address = next;
        /* if calling the Coro we need the segment of the Coro */
        if (!(PObj_get_FLAGS(SELF) & SUB_FLAG_CORO_FF)) {
            wanted_seg = sub->seg;
            /* remember segment of caller */
            sub->caller_seg = INTERP->code->cur_cs;
        }
        else {
            wanted_seg = sub->caller_seg;
        }
        swap_context(INTERP, SELF);

        if (INTERP->code->cur_cs != wanted_seg) {
            Parrot_switch_to_cs(INTERP, wanted_seg, 1);
        }
        return dest;
    }

/*

=item C<void mark()>

Marks the coroutine as live.

=cut

*/

    void mark () {
        struct Parrot_coro *c = PMC_coro(SELF);
        mark_stack(INTERP, c->co_control_stack);
        mark_stack(INTERP, c->co_control_base);
        /* mark_stack(INTERP, c->co_pad_stack); */
        mark_context(INTERP, &c->ctx);
    }
}

/*

=back

=head1 HISTORY

Initial version by Melvin on 2002/06/6.

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
