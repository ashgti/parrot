/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/env.pmc - System Environment

=head1 DESCRIPTION

C<Env> is a singleton class which provides access to the system
environment.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

static PMC * Env_PMC;
pmclass Env singleton {

    void* get_pointer() {
        return Env_PMC;
    }

/*

=item C<void* get_pointer()>

=item C<void set_pointer(void *ptr)>

These two functions are part of the singleton creation interface. For more
information see F<src/pmc.c>.

=cut

*/

    void set_pointer(void* ptr) {
        Env_PMC = (PMC*) ptr;
    }
/*

=item C<STRING *get_string_keyed(PMC *key)>

Returns the Parrot string value for the environment variable C<*key>.

=cut

*/

    STRING* get_string_keyed(PMC* key) {
        char *keyname = string_to_cstring(interpreter,
            VTABLE_get_string(interpreter, key));
        int free_it = 0;
        STRING *retval;
        char *val = NULL;

        if (keyname) {
            val = Parrot_getenv(keyname, &free_it);
            string_cstring_free(keyname);
            if (val) {
                retval = string_from_cstring(interpreter, val, 0);
            } else {
                retval = string_from_cstring(interpreter, "", 0);
            }
        } else {
            retval = string_from_cstring(interpreter, "", 0);
        }
        if (free_it && val) mem_sys_free(val);
        return retval;
    }

/*

=item C<void set_string_keyed(PMC *key, STRING *value)>

Sets the environment variable C<*key> to C<*value>.

=cut

*/

    void set_string_keyed(PMC* key, STRING* value) {
        char *keyname = string_to_cstring(interpreter,
            VTABLE_get_string(interpreter, key));
        char *env_val = string_to_cstring(interpreter, value);
        if (keyname && env_val) {
            Parrot_setenv(keyname, env_val);
        }
        if (keyname) {
            string_cstring_free(keyname);
        }
        if (env_val) {
            string_cstring_free(env_val);
        }
    }

/*

=item C<INTVAL exists_keyed(PMC *key)>

Returns whether the environment variable for C<*key> exists.

=cut

*/

    INTVAL exists_keyed(PMC* key) {
        char *keyname = string_to_cstring(interpreter,
            VTABLE_get_string(interpreter, key));
        int free_it;

        if (keyname) {
            char *val = Parrot_getenv(keyname, &free_it);
            string_cstring_free(keyname);
            if (val) {
                if (free_it) mem_sys_free(val);
                return 1;
            }
        }

        return 0;
    }

/*

=item C<void delete_keyed(PMC *key)>

Deletes the the environment variable for C<*key>.

=cut

*/

    void delete_keyed(PMC* key) {
        char *keyname = string_to_cstring(interpreter,
            VTABLE_get_string(interpreter, key));
        int free_it;

        if (keyname) {
            char *val = Parrot_getenv(keyname, &free_it);
            if (val) {
                if (free_it) mem_sys_free(val);
                Parrot_unsetenv(keyname);
            }
            string_cstring_free(keyname);
        }
    }
}

/*

=back

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
