/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/resizableintegerarray.pmc - resizable size array for integers only

=head1 DESCRIPTION

This class, ResizableIntegerArray, implements an array of resizable size, which stored INTVALs,
it uses Integer PMCs for all of the conversions

=head2 Functions

=over 4

=cut

*/

#include "parrot/parrot.h"

typedef struct _SizeIntData {
    INTVAL size;
    INTVAL data[1];
} SizeIntData;
#define NEEDED_SIZE(n) ((n-1)*sizeof(INTVAL) + sizeof(SizeIntData))

pmclass ResizableIntegerArray extends FixedIntegerArray need_ext does array {
    
/*

=item C<INTVAL get_integer_keyed_int(INTVAL key)>

Returns the integer value of the element at index C<key>.

=cut

*/

    INTVAL get_integer_keyed_int (INTVAL key) {
        SizeIntData *sd;
        if (key < 0) 
            internal_exception(OUT_OF_BOUNDS, 
                "ResizableIntegerArray: index out of bounds!\n");
        if(key >= PMC_int_val(SELF))
            DYNSELF.set_integer_native(key+1);
        
        sd = (SizeIntData *)PMC_data(SELF);
        return sd->data[key];
    }

/*

=item C<void set_integer_keyed_int(INTVAL key, INTVAL value)>

Sets the integer value of the element at index C<key> to C<value>.

=cut

*/

    void set_integer_keyed_int (INTVAL key, INTVAL value) {
        SizeIntData *sd;
        if (key < 0) 
            internal_exception(OUT_OF_BOUNDS, 
                "ResizableIntegerArray: index out of bounds!\n");
        if(key >= PMC_int_val(SELF))
            DYNSELF.set_integer_native(key+1);

        sd = (SizeIntData *)PMC_data(SELF);
        sd->data[key] = value;
    }

/*

=item C<void set_integer_native(INTVAL size)>

Resizes the array to C<size> elements.

=cut

*/

    void set_integer_native (INTVAL size) {
        SizeIntData *sd;
        if (size < 0)
            internal_exception(OUT_OF_BOUNDS, 
                    "ResizableIntegerArray: Can't resize!\n");

        sd = PMC_data(SELF);
        PMC_int_val(SELF) = size;
        if(sd == NULL) {
            sd = mem_sys_allocate(NEEDED_SIZE(size));
            sd->size = size;
        } else if(size >= sd->size) {
            sd->size =  size < 2*sd->size ? sd->size*2 : size;
            sd = mem_sys_realloc(sd, NEEDED_SIZE(sd->size));
        } else {
            return;
        }

        PMC_data(SELF) = sd;
        PObj_active_destroy_SET(SELF);
    }

/*

=item C<PMC *clone()>

Creates and returns a copy of the array.

=cut

*/

    PMC* clone () {
        SizeIntData *sd;
        PMC * dest = pmc_new(INTERP, SELF->vtable->base_type);
    
        if (!PMC_data(SELF))
            return dest;
        PMC_int_val(dest) = PMC_int_val(SELF);
        sd = PMC_data(SELF);
        
        PMC_data(dest) = mem_sys_allocate(NEEDED_SIZE(sd->size));
        mem_sys_memcopy(PMC_data(dest), PMC_data(SELF), NEEDED_SIZE(sd->size));
        PObj_active_destroy_SET(dest);
        return dest;
    }

}

/*

=back

=head1 SEE ALSO

F<docs/pdds/pdd03_calling_conventions.pod>.

=head1 HISTORY

Initial version 2004.06.11 by Matt Fowles
Changed allocator to double size - MF 2004.06.15

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
