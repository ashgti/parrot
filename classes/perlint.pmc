/* perlint.pmc
 *  Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
 *  CVS Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the PerlInt base class
 *  Data Structure and Algorithms:
 *  History:
 *  Notes:
 *  References:
 */

#include "parrot/parrot.h"
#include "parrot/perltypes.h"

pmclass PerlInt extends perlscalar {

    void init () {
        SELF->cache.int_val = 0;
    }

    FLOATVAL get_number () {
        return (FLOATVAL)SELF->cache.int_val;
    }

    BIGNUM* get_bignum () {
        /* XXX */
        return NULL;
    }

    STRING* get_string () {
        return string_from_int(INTERP, SELF->cache.int_val);
    }


    void set_integer_same (PMC * value) {
        SELF->cache.int_val = value->cache.int_val;
    }

    void set_number (PMC* value) {
	DYNSELF.morph(enum_class_PerlNum);
        DYNSELF.set_number(value);
    }

    void set_number_native (FLOATVAL value) {
	DYNSELF.morph(enum_class_PerlNum);
        DYNSELF.set_number_native(value);
    }

    void set_bignum (PMC* value) {
        /* XXX not sure if this can be optimized further safely */
        SELF->cache.struct_val = (DPOINTER*)VTABLE_get_bignum(INTERP, value);
	/* SELF->vtable = &(Parrot_base_vtables[enum_class_PerlBigNum]); */
    }

    void set_bignum_native (BIGNUM* value) {
        /* XXX Some of this bignum stuff is starting to look pretty redundant -DML */
        SELF->cache.struct_val = value; /* Maybe we need a copy */
        /* SELF->vtable = &(Parrot_base_vtables[enum_class_PerlBignum]); */
    }

    void set_string (PMC* value) {
	DYNSELF.morph(enum_class_PerlString);
        DYNSELF.set_string(value);
    }

    void set_string_native (STRING* value) {
	DYNSELF.morph(enum_class_PerlString);
        DYNSELF.set_string_native(value);
    }

    /* XXX -lt: only add done yet, others will follow, when
     * vtable changes are carved in electrons
     */
    void add (PMC* value, PMC* dest) {
        INTVAL pmci;
	int dtype = enum_class_PerlInt;
	int vtype = VTABLE_type(INTERP, value);

	pmci = VTABLE_get_integer(INTERP, SELF);
	if (vtype == enum_class_PerlNum) {
	    dtype = enum_class_PerlNum;
	}
	else if (vtype == enum_class_PerlString) {
	    FLOATVAL valf = VTABLE_get_number(INTERP, value);
	    INTVAL vali = VTABLE_get_integer(INTERP, value);
	    if (valf == vali)
		VTABLE_set_integer_native(INTERP, dest, pmci + vali);
	    else
		VTABLE_set_number_native(INTERP, dest, pmci + valf);
	    return;

	}
	/* no add_int here: SELF may be dest */
	if (dtype == enum_class_PerlNum)
            VTABLE_set_number_native(INTERP, dest,
		pmci + VTABLE_get_number(INTERP, value));
	else
            VTABLE_set_integer_native(INTERP, dest,
		pmci + VTABLE_get_integer(INTERP, value));
    }

    void add_same (PMC* value, PMC* dest) {
        dest->cache.int_val = SELF->cache.int_val + value->cache.int_val;
    }

    void subtract (PMC* value, PMC* dest) {
	int type = enum_class_PerlInt;
	INTVAL i;

	if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    type = enum_class_PerlNum;
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlString]) {
	    FLOATVAL f = VTABLE_get_number(INTERP, value);
	    i = VTABLE_get_integer(INTERP, value);
	    if(f != i) {
		type = enum_class_PerlNum;
	    }
	}
	i = SELF->cache.int_val;
	if(type == enum_class_PerlNum)
            VTABLE_set_number_native(INTERP, dest,
		i - VTABLE_get_number(INTERP, value));
	else
            VTABLE_set_integer_native(INTERP, dest,
		i - VTABLE_get_integer(INTERP, value));
    }

    void subtract_int (INTVAL value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val - value
        );
    }

    void subtract_same (PMC* value, PMC* dest) {
        dest->cache.int_val = SELF->cache.int_val - value->cache.int_val;
    }

    void multiply (PMC* value, PMC* dest) {
	int type = enum_class_PerlInt;
	INTVAL i;

	if(value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    type = enum_class_PerlNum;
	}
	else if(value->vtable == &Parrot_base_vtables[enum_class_PerlString]) {
	    FLOATVAL f = VTABLE_get_number(INTERP, value);
	    i = VTABLE_get_integer(INTERP, value);
	    if(f != i) {
		type = enum_class_PerlNum;
	    }
	}
	i = SELF->cache.int_val;
	if(type == enum_class_PerlNum)
            VTABLE_set_number_native(INTERP, dest,
		i * VTABLE_get_number(INTERP, value));
	else
            VTABLE_set_integer_native(INTERP, dest,
		i * VTABLE_get_integer(INTERP, value));
    }

    void multiply_int (INTVAL value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val * value
        );
    }

    void multiply_same (PMC* value, PMC* dest) {
        dest->cache.int_val = SELF->cache.int_val * value->cache.int_val;
    }

    void divide (PMC* value, PMC* dest) {
	VTABLE_set_number_native(INTERP, dest,
		SELF->cache.int_val / VTABLE_get_number(INTERP, value));
    }

    void divide_int (INTVAL value, PMC* dest) {
        VTABLE_set_number_native(INTERP, dest,
            (FLOATVAL)SELF->cache.int_val / value
        );
    }

    void divide_same (PMC* value, PMC* dest) {
        dest->cache.int_val = SELF->cache.int_val / value->cache.int_val;
    }

    void modulus (PMC* value, PMC* dest) {
        INTVAL i;
        FLOATVAL f;
        switch(VTABLE_type(INTERP, value)) {
            case enum_class_PerlNum:
                internal_exception(INVALID_OPERATION,
		    "modulus() not implemented for mix of INTs and FLOATs\n");
                break;
            case enum_class_PerlString:
                /* Is the string an integer or a number? */
                f = VTABLE_get_number(INTERP, value);
                i = VTABLE_get_integer(INTERP, value);
                if(f != i) {
                    internal_exception(INVALID_OPERATION,
                     "modulus() not implemented for mix of INTs and FLOATs\n");
                }
                break;
        }
        /* If we're here, then we can assume that get_integer will return
         *  something sensible
         */
        VTABLE_set_integer_native(INTERP, dest,
                                  SELF->cache.int_val %
                                  VTABLE_get_integer(INTERP, value));
    }

    void modulus_int (INTVAL value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val % value
        );
    }

    void modulus_same (PMC* value, PMC* dest) {
        dest->cache.int_val = SELF->cache.int_val % value->cache.int_val;
    }

    void neg (PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest, -SELF->cache.int_val);
    }

    void bitwise_or (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val |
            VTABLE_get_integer(INTERP, value)
        );
    }

    void bitwise_or_int (INTVAL value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val | value
        );
    }

    void bitwise_or_same (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val |
            value->cache.int_val
        );
    }

    void bitwise_and (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val &
            VTABLE_get_integer(INTERP, value)
        );
    }

    void bitwise_and_int (INTVAL value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val & value
        );
    }

    void bitwise_and_same (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val &
            value->cache.int_val
        );
    }

    void bitwise_xor (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val ^
            VTABLE_get_integer(INTERP, value)
        );
    }

    void bitwise_xor_int (INTVAL value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val ^ value
        );
    }

    void bitwise_xor_same (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val ^
            value->cache.int_val
        );
    }

    void bitwise_not (PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest, ~SELF->cache.int_val);
    }

    void bitwise_shr (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val >>
            VTABLE_get_integer(INTERP, value)
        );
    }

    void bitwise_shr_int (INTVAL value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val >> value
        );
    }

    void bitwise_shr_same (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val >> value->cache.int_val
        );
    }

    void bitwise_shl (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val <<
            VTABLE_get_integer(INTERP, value)
        );
    }

    void bitwise_shl_int (INTVAL value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val << value
        );
    }

    void bitwise_shl_same (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val << value->cache.int_val
        );
    }


    /* == operation */
    INTVAL is_equal (PMC* value) {
        return (INTVAL)(SELF->cache.int_val ==
	VTABLE_get_integer(INTERP, value));
    }

    INTVAL cmp(PMC* value) {
	if (value->vtable == &Parrot_base_vtables[enum_class_PerlString]) {
	    FLOATVAL fdiff = SELF->cache.int_val
		- VTABLE_get_number(INTERP, value);
	    if (fdiff == 0) {
		INTVAL idiff = SELF->cache.int_val
		    - VTABLE_get_integer(INTERP, value);
		return idiff > 0 ? 1 : idiff < 0 ? -1 : 0;
	    } else {
		return fdiff > 0 ? 1 : -1;
	    }
	}
	else if (value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    FLOATVAL diff;
	    diff = (FLOATVAL)SELF->cache.int_val
		- VTABLE_get_number(INTERP, value);
	    return diff > 0 ? 1 : diff < 0 ? -1 : 0;
	}
	else {
	    /* int or undef */
	    INTVAL diff = SELF->cache.int_val
		- VTABLE_get_integer(INTERP, value);
	    return diff > 0 ? 1 : diff < 0 ? -1 : 0;
	}
    }

    INTVAL cmp_num(PMC* value) {
	if (value->vtable == &Parrot_base_vtables[enum_class_PerlString]) {
	    FLOATVAL fdiff = SELF->cache.int_val
		- VTABLE_get_number(INTERP, value);
	    if (fdiff == 0) {
		INTVAL idiff = SELF->cache.int_val
		    - VTABLE_get_integer(INTERP, value);
		return idiff > 0 ? 1 : idiff < 0 ? -1 : 0;
	    } else {
		return fdiff > 0 ? 1 : -1;
	    }
	}
	else if (value->vtable == &Parrot_base_vtables[enum_class_PerlNum]) {
	    FLOATVAL diff;
	    diff = (FLOATVAL)SELF->cache.int_val
		- VTABLE_get_number(INTERP, value);
	    return diff > 0 ? 1 : diff < 0 ? -1 : 0;
	}
	else {
	    /* int or undef */
	    INTVAL diff = SELF->cache.int_val
		- VTABLE_get_integer(INTERP, value);
	    return diff > 0 ? 1 : diff < 0 ? -1 : 0;
	}
    }

    void logical_or (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val ||
            VTABLE_get_bool(INTERP, value)
        );
    }

    void logical_and (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            SELF->cache.int_val &&
            VTABLE_get_bool(INTERP, value)
        );
    }

    void logical_xor (PMC* value, PMC* dest) {
        VTABLE_set_integer_native(INTERP, dest,
            ( SELF->cache.int_val ? 1 : 0 ) ^
            VTABLE_get_bool(INTERP, value)
        );
    }

    void logical_not (PMC* value) {
	    VTABLE_set_integer_native(INTERP, value,
	    !SELF->cache.int_val);
    }

    void repeat (PMC* value, PMC* dest) {
	internal_exception(INVALID_OPERATION,
		"repeat() not implemented in class 'PerlInt'\n");
    }

    void repeat_int (INTVAL value, PMC* dest) {
	internal_exception(INVALID_OPERATION,
		"repeat() not implemented in class 'PerlInt'\n");
    }

    void increment () {
        SELF->cache.int_val ++;
    }

    void decrement () {
        SELF->cache.int_val --;
    }

}
