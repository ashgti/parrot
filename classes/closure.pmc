/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/closure.pmc - Closure PMC

=head1 DESCRIPTION

This class implements a closure, i.e. a subroutine which take a context
structure.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "parrot/method_util.h"

pmclass Closure extends Sub need_ext {

/*

=item C<void init()>

Initializes the closure.

=cut

*/

    void init () {
        PMC_sub_ASSIGN(SELF, new_closure(INTERP));
        PMC_pmc_val(SELF) = NULL;
        PObj_custom_mark_destroy_SETALL(SELF);
#if 0
        if (Interp_flags_TEST(INTERP, PARROT_DEBUG_FLAG))
            printf("Address of base segment is %p\n",
                    (PMC_sub(SELF))->seg->base.pf->base.data);
#endif
    }

/*

=item C<void mark()>

Marks the closure as live.

=cut

*/

    void mark () {
        struct Parrot_sub * sub = PMC_sub(SELF);
        SUPER();
        if (sub->outer_sub)
            pobject_lives(INTERP, (PObj*)sub->outer_sub);
    }


/*

=item C<void* invoke(void* next)>

Invokes the closure.

=cut

*/

    void* invoke (void* next) {
        struct Parrot_sub * sub = PMC_sub(SELF);
        next = SUPER(next);
        if (sub->outer_ctx) {
            /* during newclosure, outer's ctx was stored in
             * sub->outer_ctx
             */
            sub->ctx->outer_ctx = sub->outer_ctx;
        }
        return next;
    }
}

/*

=back

=head1 HISTORY

Initial version by Leo.

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
