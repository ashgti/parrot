/* perlundef.pmc
 *  Copyright: (When this is determined...it will go here)
 *  CVS Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the perlundef base class
 *  Data Structure and Algorithms:
 *  History:
 *  Notes:
 *  References:
 */

#include "parrot/parrot.h"

pmclass PerlUndef {

   INTVAL type () {
      return 0;
   }

   STRING* name () {
      return whoami;
   }

   void init (INTVAL size) {
      /* Nothing */
   }

   void clone (PMC* dest) {
      dest->vtable = pmc->vtable;
   }

   void morph (INTVAL type) {
   }

   INTVAL real_size () {
      return 0;
   }

   void destroy () {
      /* Nothing */
   }

   INTVAL get_integer () {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in integer context");
      return 0;
   }

   FLOATVAL get_number () {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in numeric context");
      return 0;
   }

   STRING* get_string () {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in string context");
      return NULL;
   }

   BOOLVAL get_bool () {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in boolean context");
      return 0;
   }

   void* get_value () {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of unintialized value");
      return NULL;
   }

   BOOLVAL is_same (PMC* pmc2) {
      return (BOOLVAL)(pmc2->vtable == pmc->vtable);
   }

   void set_integer (PMC * value) {
      pmc->vtable = &Parrot_base_vtables[enum_class_PerlInt];
      pmc->vtable->set_integer(interpreter, pmc, value);
   }

   void set_integer_native (INTVAL value) {
      pmc->vtable = &Parrot_base_vtables[enum_class_PerlInt];
      pmc->vtable->set_integer_native(interpreter, pmc, value);
   }

   void set_integer_bigint (BIGINT value) {
      pmc->vtable = &Parrot_base_vtables[enum_class_PerlInt];
      pmc->vtable->set_integer_bigint(interpreter, pmc, value);
   }

   void set_integer_same (PMC * value) {
      /* Do nothing; Can't happen? */ 
   }

   void set_number (PMC * value) {
      pmc->vtable = &Parrot_base_vtables[enum_class_PerlNum];
      pmc->vtable->set_number(interpreter, pmc, value);
   }

   void set_number_native (FLOATVAL value) {
      pmc->vtable = &Parrot_base_vtables[enum_class_PerlNum];
      pmc->vtable->set_number_native(interpreter, pmc, value);
   }

   void set_number_bigfloat (BIGFLOAT value) {
      pmc->vtable = &Parrot_base_vtables[enum_class_PerlNum];
      pmc->vtable->set_number_bigfloat(interpreter, pmc, value);
   }

   void set_number_same (PMC * value) {
      /* Do nothing; Can't happen? */ 
   }

   void set_string (PMC * value) {
      pmc->vtable = &Parrot_base_vtables[enum_class_PerlString];
      pmc->vtable->set_string(interpreter, pmc, value);
   }

   void set_string_native (STRING * value) {
      pmc->vtable = &Parrot_base_vtables[enum_class_PerlString];
      pmc->vtable->set_string_native(interpreter, pmc, value);
   }

   void set_string_unicode (STRING * value) {
      pmc->vtable = &Parrot_base_vtables[enum_class_PerlString];
      pmc->vtable->set_string_unicode(interpreter, pmc, value);
   }

   void set_string_other (STRING * value) {
      pmc->vtable = &Parrot_base_vtables[enum_class_PerlString];
      pmc->vtable->set_string_other(interpreter, pmc, value);
   }

   void set_string_same (PMC * value) {
      /* Do nothing; Can't happen? */ 
   }

   void set_value (void* value) {
      /* Do nothing; Can't happen? */ 
   }

   void add (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in addition");
      
      if(value->vtable == &Parrot_base_vtables[enum_class_PerlUndef]) {
         dest->vtable->set_integer_native(INTERP, dest, 0);
      }
      else if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
         dest->vtable->set_integer(INTERP, dest, value);
      }
      else {
         dest->vtable->set_number(INTERP, dest, value);
      }
   }

   void add_int (INTVAL value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in integer addition");
      dest->vtable->set_integer_native(INTERP, dest, value);
   }

   void add_bigint (BIGINT value,  PMC* dest) {
   }

   void add_float (FLOATVAL value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in numeric addition");
      dest->vtable->set_number_native(INTERP, dest, value);
   }

   void add_bigfloat (BIGFLOAT value,  PMC* dest) {
   }

   void add_same (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of two uninitialized values in addition");
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void subtract (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in subtraction");
      
      if(value->vtable == &Parrot_base_vtables[enum_class_PerlUndef]) {
         dest->vtable->set_integer_native(INTERP, dest, 0);
      }
      else if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
         dest->vtable->set_integer_native(
           INTERP, dest, 0-value->vtable->get_integer(INTERP, value) 
           /* It doesn't hurt to be more explicit */
         );
      }
      else {
         dest->vtable->set_number_native(INTERP, dest, 0-value->vtable->get_number(INTERP, value));
      }
   }

   void subtract_int (INTVAL value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in integer subtraction");
      dest->vtable->set_integer_native(INTERP, dest, 0-value);
   }

   void subtract_bigint (BIGINT value,  PMC* dest) {
   }

   void subtract_float (FLOATVAL value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in numeric subtraction");
      dest->vtable->set_number_native(INTERP, dest, 0-value);
   }

   void subtract_bigfloat (BIGFLOAT value,  PMC* dest) {
   }

   void subtract_same (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of two uninitialized values in subtraction");
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void multiply (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in multiplication");
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void multiply_int (INTVAL value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in integer multiplication");
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void multiply_bigint (BIGINT value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in bigint multiplication");
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void multiply_float (FLOATVAL value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in numeric multiplication");
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void multiply_bigfloat (BIGFLOAT value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in bigfloat multiplication");
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void multiply_same (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of two uninitialized values in multiplication");
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void divide (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in division");
      if(value->vtable == &Parrot_base_vtables[enum_class_PerlUndef]) {
         internal_exception(DIV_BY_ZERO, "division by zero!\n");
      }
      else if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
         if(value->vtable->get_integer(INTERP, value) == 0) {
            internal_exception(DIV_BY_ZERO, "division by zero!\n");
         }
      }
      else if(value->vtable->get_number(INTERP, value) == 0) {
         internal_exception(DIV_BY_ZERO, "division by zero!\n");
      }
      
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void divide_int (INTVAL value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in integer division");
      if(value == 0) {
         internal_exception(DIV_BY_ZERO, "division by zero!\n");
      }
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void divide_bigint (BIGINT value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in bigint division");
      /* need test for value == 0 */
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void divide_float (FLOATVAL value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in numeric division");
      if(value == 0) {
         internal_exception(DIV_BY_ZERO, "division by zero!\n");
      }
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void divide_bigfloat (BIGFLOAT value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in bigfloat division");
      /* need test for value == 0 */
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void divide_same (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of two uninitialized values in division");
      internal_exception(DIV_BY_ZERO, "division by zero!\n");
   }

   void modulus (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in modulus");
      if(value->vtable == &Parrot_base_vtables[enum_class_PerlUndef]) {
         internal_exception(DIV_BY_ZERO, "division by zero!\n");
      }
      else if(value->vtable == &Parrot_base_vtables[enum_class_PerlInt]) {
         if(value->vtable->get_integer(INTERP, value) == 0) {
            internal_exception(DIV_BY_ZERO, "division by zero!\n");
         }
      }
      else if(value->vtable->get_number(INTERP, value) == 0) {
         internal_exception(DIV_BY_ZERO, "division by zero!\n");
      }
      
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void modulus_int (INTVAL value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in integer modulus");
      if(value == 0) {
         internal_exception(DIV_BY_ZERO, "division by zero!\n");
      }
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void modulus_bigint (BIGINT value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in bigint modulus");
      /* need test for value == 0 */
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void modulus_float (FLOATVAL value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in numeric modulus");
      if(value == 0) {
         internal_exception(DIV_BY_ZERO, "division by zero!\n");
      }
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void modulus_bigfloat (BIGFLOAT value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in bigfloat modulus");
      /* need test for value == 0 */
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void modulus_same (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of two uninitialized values in modulus");
      internal_exception(DIV_BY_ZERO, "division by zero!\n");
   }

   void concatenate (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in concatenation");
      dest->vtable->set_string(INTERP, dest, value);
   }

   void concatenate_native (STRING * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in concatenation");
      dest->vtable->set_string_native(INTERP, dest, value);
   }

   void concatenate_unicode (STRING * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in concatenation");
      dest->vtable->set_string_native(INTERP, dest, value);
   }

   void concatenate_other (STRING * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in concatenation");
      dest->vtable->set_string_native(INTERP, dest, value);
   }

   void concatenate_same (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in concatenation");
      dest->vtable->set_string_native(INTERP, dest, NULL);
   }

   BOOLVAL is_equal (PMC* value) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in equals");
      if(value->vtable==SELF->vtable) {
         return 1;
      }
      else if(value->vtable->get_integer(INTERP, value) == 0) {
         return 1;
      }
      else if(0==string_compare(INTERP, value->vtable->get_string(INTERP, value), NULL)) {
         return 1;
      }
      else {
         return 0;
      }
   }

   void logical_or (PMC* value,  PMC* dest) {
      dest->vtable->set_integer_native(INTERP, dest, value->vtable->get_bool(INTERP, value));
   }

   void logical_and (PMC* value,  PMC* dest) {
      dest->vtable->set_integer_native(INTERP, dest, 0);
   }

   void logical_not (PMC* dest) {
      dest->vtable->set_integer_native(INTERP, dest, 1);
   }

   void match (PMC * value,  REGEX* re) {
   }

   void match_native (STRING * value,  REGEX* re) {
   }

   void match_unicode (STRING * value,  REGEX* re) {
   }

   void match_other (STRING * value,  REGEX* re) {
   }

   void match_same (PMC * value,  REGEX* re) {
   }

   void repeat (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in repeat");
      dest->vtable->set_string(INTERP, dest, NULL);
   }

   void repeat_native (STRING * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in repeat");
      dest->vtable->set_string(INTERP, dest, NULL);
   }

   void repeat_unicode (STRING * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in repeat");
      dest->vtable->set_string(INTERP, dest, NULL);
   }

   void repeat_other (STRING * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in repeat");
      dest->vtable->set_string(INTERP, dest, NULL);
   }

   void repeat_same (PMC * value,  PMC* dest) {
      Parrot_warn(INTERP, PARROT_WARNINGS_UNDEF_FLAG, "Use of uninitialized value in repeat");
      dest->vtable->set_string(INTERP, dest, NULL);
   }

}
