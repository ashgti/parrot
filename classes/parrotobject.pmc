/* parrotobject.pmc
 *  Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
 *  CVS Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the ParrotObject base class
 *  Data Structure and Algorithms:
 *  History:
 *  Notes:
 *  References:
 */

#include "parrot/parrot.h"

/* A Parrot Object is reasonably simple. It's data pointer points to
   an array with the attributes of the object in it. The int cache
   value holds the offset in that array of the first attribute, so we
   can front-load the array with invisible options.

   The array holds:

   0: The first element of the attribute array is a pointer to the class
      PMC for this object.
   1: The class name (taken from the class PMC)
   2+: Attributes.

   The object is actually constructed by the instantiation code in
   objects.c, at least for right now.

*/

pmclass ParrotObject need_ext {

    INTVAL type() {		/* pmc2c.pl doesn't like empty classes */
	return SELF->vtable->base_type;
    }

    INTVAL isa(STRING * classname) {
        return Parrot_object_isa(INTERP, SELF, classname);
    }    

    /* Figure out which method PMC we need. By default we just defer to the
     * system method lookup code
     */
    PMC* find_method(STRING* name) {
	PMC *class = VTABLE_get_pmc_keyed_int(INTERP, (PMC *)PMC_data(SELF), 0);
	return Parrot_find_method_with_cache(INTERP, class, name);
    }

}
