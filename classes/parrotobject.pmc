/* parrotobject.pmc
 *  Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
 *  CVS Info
 *     $Id$
 *  Overview:
 *     These are the vtable functions for the ParrotObject base class
 *  Data Structure and Algorithms:
 *  History:
 *  Notes:
 *  References:
 */

#include "parrot/parrot.h"

/* A Parrot Object is reasonably simple. It's data pointer points to
   an array with the attributes of the object in it. The int cache
   value holds the offset in that array of the first attribute, so we
   can front-load the array with invisible options.

   The array holds:

   0: The first element of the attribute array is a pointer to the class
      PMC for this object.
   1: The class name (taken from the class PMC)
   2+: Attributes.

   The object is actually constructed by the instantiation code in
   objects.c, at least for right now.

*/

pmclass ParrotObject extends ParrotClass need_ext {

    void init() {
	/* make sure all users "new" the register class and not
	 * the ParrotObject itself.
	 * During Parrot_class_register this init() method
	 * gets replaced by Parrot_instantiate_object
	 */
	internal_exception(1, "Can't create new ParrotObjects\n",
		"use the registered class instead");
    }

    void init_pmc(PMC* init) {
	SELF.init();
    }

    void init_pmc_props(PMC* init, PMC* props) {
	SELF.init();
    }

    /*
     * attrib count
     */
    INTVAL elements() {
	PMC* data_array = (PMC*) PMC_data(SELF);
	return VTABLE_elements(interpreter, data_array) - SELF->cache.int_val;
    }

    INTVAL get_integer() {
	return SELF.elements();
    }
}
