/* default.pmc
 *  Copyright: (When this is determined...it will go here)
 *  CVS Info $Id$
 *  Overview:
 *     These are the vtable functions for the default PMC class
 *  Data Structure and Algorithms:
 *  History:
 *  Notes:
 *  References:
 */

#include "parrot/parrot.h"

#define INT2KEY(i,k) ((k) ? key_new_integer((i), *(k)) : NULL)

static const char * caller(Parrot_Interp interp, PMC * pmc);

static const char * caller(Parrot_Interp interp, PMC * pmc)
{
    return pmc && pmc->vtable && pmc->vtable->name ?
	pmc->vtable->name(interp, pmc)->strstart : "(null)";
}

pmclass default abstract noinit {

    void init () {
    }

    void init_pmc (PMC* value) {
        DYNSELF.init();
    }

    void morph (INTVAL type) {
	internal_exception(ILL_INHERIT,
		"morph() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void mark () {
        PANIC("custom_mark flag set but no custom mark routine defined");
    }

    void destroy () {
        internal_exception(ILL_INHERIT,
		"custom_destroy flag set but no custom destroy routine defined"
		" in class '%s'\n", caller(INTERP, SELF));
    }

    PMC* getprop(STRING* key) {
        PMC* p_key = key_new_string(interpreter, key);
	if (SELF->metadata) {
	  return (SELF->metadata->vtable->get_pmc_keyed(interpreter, SELF->metadata, p_key));
	} else {
	  PMC* undef = pmc_new(INTERP, enum_class_PerlUndef);
          PObj_constant_SET(undef);
	  return undef;
	}
    }

    void setprop(STRING* key, PMC* value) {
        PMC* p_key;
	if (SELF->metadata) {
          p_key = key_new_string(interpreter, key);
	  SELF->metadata->vtable->set_pmc_keyed(interpreter,
			  SELF->metadata, p_key, value, NULL);
	} else {
          /* first make new hash */
	  SELF->metadata = pmc_new_noinit(interpreter, enum_class_PerlHash);
	  SELF->metadata->vtable->init(interpreter, SELF->metadata);
	  /* then the key, else it vanishes with --gc-debug */
          p_key = key_new_string(interpreter, key);
	  SELF->metadata->vtable->set_pmc_keyed(interpreter,
			  SELF->metadata, p_key, value, NULL);
	}
	return;
    }

    void delprop(STRING* key) {
	if (SELF->metadata) {
          PMC* p_key = key_new_string(interpreter, key);
	  SELF->metadata->vtable->delete_keyed(interpreter, SELF->metadata, p_key);
	}
        return;
    }

    PMC* getprops() {
	if (!SELF->metadata) {
	  SELF->metadata = pmc_new_noinit(interpreter, enum_class_PerlHash);
	  SELF->metadata->vtable->init(interpreter, SELF->metadata);
	}
    	return SELF->metadata;
    }

    INTVAL type () {
        return SELF->vtable->base_type;
    }

    INTVAL type_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"type_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL type_keyed_int (INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.type_keyed(r_key);
    }

    UINTVAL subtype (INTVAL type) {
	internal_exception(ILL_INHERIT,
		"subtype() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    UINTVAL subtype_keyed (PMC* key, INTVAL type) {
	internal_exception(ILL_INHERIT,
		"subtype_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    UINTVAL subtype_keyed_int (INTVAL* key, INTVAL type) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.subtype_keyed(r_key, type);
    }

    STRING* name () {
	internal_exception(ILL_INHERIT,
		"name() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    STRING* name_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"name_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    STRING* name_keyed_int (INTVAL *key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.name_keyed(r_key);
    }

    void clone (PMC *dest) {
	internal_exception(ILL_INHERIT,
		"clone() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void clone_keyed (PMC* key, PMC *dest) {
	internal_exception(ILL_INHERIT,
		"clone_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void clone_keyed_int (INTVAL* key, PMC *dest) {
        PMC* r_key = INT2KEY(INTERP, key);
        DYNSELF.clone_keyed(r_key, dest);
    }

    PMC* find_method(STRING* method_name) {
	internal_exception(ILL_INHERIT,
		"find_method() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    PMC* find_method_keyed(PMC* key, STRING* method_name) {
	internal_exception(ILL_INHERIT,
		"find_method_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    PMC* find_method_keyed_int(INTVAL *key, STRING* method_name) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.find_method_keyed(r_key, method_name);
    }

    INTVAL get_integer () {
	internal_exception(ILL_INHERIT,
		"get_integer() not implemented in class '%s'\n",
		caller(INTERP, SELF));
	return 0;
    }

    INTVAL get_integer_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"get_integer_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL get_integer_keyed_int (INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.get_integer_keyed(r_key);
    }

    FLOATVAL get_number () {
	internal_exception(ILL_INHERIT,
		"get_number() not implemented in class '%s'\n",
		caller(INTERP, SELF));
	return 0.0;
    }

    FLOATVAL get_number_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"get_number_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0.0;
    }

    FLOATVAL get_number_keyed_int (INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.get_number_keyed(r_key);
    }

    BIGNUM* get_bignum () {
	internal_exception(ILL_INHERIT,
		"get_bignum() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    BIGNUM* get_bignum_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"get_bignum_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    BIGNUM* get_bignum_keyed_int (INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.get_bignum_keyed(r_key);
    }

    STRING* get_string () {
	internal_exception(ILL_INHERIT,
		"get_string() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    STRING* get_string_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"get_string_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    STRING* get_string_keyed_int (INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.get_string_keyed(r_key);
    }

    INTVAL get_bool () {
	internal_exception(ILL_INHERIT,
		"get_bool() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL get_bool_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"get_bool_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL get_bool_keyed_int (INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.get_bool_keyed(r_key);
    }

    INTVAL elements () {
	internal_exception(ILL_INHERIT,
		"elements() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL elements_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"elements_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL elements_keyed_int (INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.elements_keyed(r_key);
    }

    PMC* get_pmc () {
        return SELF;
    }

    PMC* get_pmc_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"get_pmc_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    PMC* get_pmc_keyed_int (INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.get_pmc_keyed(r_key);
    }

    INTVAL is_same (PMC* value) {
        return SELF == value;
    }

    INTVAL is_same_keyed (PMC* key, PMC* value, PMC* value_key) {
	internal_exception(ILL_INHERIT,
		"is_same_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL is_same_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        return DYNSELF.is_same_keyed(r_key, value, r_value_key);
    }

    void set_integer (PMC* value) {
	internal_exception(ILL_INHERIT,
		"set_integer() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_integer_native (INTVAL value) {
	internal_exception(ILL_INHERIT,
		"set_integer_native() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_integer_same (PMC* value) {
	internal_exception(ILL_INHERIT,
		"set_integer_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_integer_keyed (PMC* key, INTVAL value) {
	internal_exception(ILL_INHERIT,
		"set_integer_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_integer_keyed_int (INTVAL* key, INTVAL value) {
        PMC* r_key = INT2KEY(INTERP, key);
        SELF->vtable->set_integer_keyed(INTERP, SELF, r_key, value);
    }

    void set_number (PMC* value) {
	internal_exception(ILL_INHERIT,
		"set_number() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_number_native (FLOATVAL value) {
	internal_exception(ILL_INHERIT,
		"set_number_native() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_number_same (PMC* value) {
	internal_exception(ILL_INHERIT,
		"set_number_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_number_keyed (PMC* key, FLOATVAL value) {
	internal_exception(ILL_INHERIT,
		"set_number_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_number_keyed_int (INTVAL* key, FLOATVAL value) {
        PMC* r_key = INT2KEY(INTERP, key);
        SELF->vtable->set_number_keyed(INTERP, SELF, r_key, value);
    }

    void set_bignum (PMC* value) {
	internal_exception(ILL_INHERIT,
		"set_bignum() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_bignum_native (BIGNUM* value) {
	internal_exception(ILL_INHERIT,
		"set_bignum_native() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_bignum_same (PMC* value) {
	internal_exception(ILL_INHERIT,
		"set_bignum_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_bignum_keyed (PMC* key, BIGNUM* value) {
	internal_exception(ILL_INHERIT,
		"set_bignum_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_bignum_keyed_int (INTVAL* key, BIGNUM* value) {
        PMC* r_key = INT2KEY(INTERP, key);
        SELF->vtable->set_bignum_keyed(INTERP, SELF, r_key, value);
    }

    void set_string (PMC* value) {
	internal_exception(ILL_INHERIT,
		"set_string() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_string_native (STRING* value) {
	internal_exception(ILL_INHERIT,
		"set_string_native() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_string_same (PMC* value) {
	internal_exception(ILL_INHERIT,
		"set_string_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_string_keyed (PMC* key, STRING* string) {
	internal_exception(ILL_INHERIT,
		"set_string_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_string_keyed_int (INTVAL* key, STRING* string) {
        PMC* r_key = INT2KEY(INTERP, key);
        SELF->vtable->set_string_keyed(INTERP, SELF, r_key, string);
    }

    void set_pmc (PMC* value) {
        SELF->cache.struct_val = value->vtable->get_pmc(INTERP, value);
    }

    void set_pmc_keyed (PMC* key, PMC* value, PMC* value_key) {
	internal_exception(ILL_INHERIT,
		"set_pmc_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_pmc_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        DYNSELF.set_pmc_keyed(r_key, value, r_value_key);
    }

    void set_same (PMC* value) {
        SELF->cache.struct_val = value->cache.struct_val;
	SELF->data = value->data;
    }

    void set_same_keyed (PMC* dest_key, PMC* src, PMC* src_key) {
	internal_exception(ILL_INHERIT,
		"set_keyed_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void set_same_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        DYNSELF.set_same_keyed(r_key, value, r_value_key);
    }

    INTVAL pop_integer() {
	internal_exception(ILL_INHERIT,
		"pop_integer() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL pop_integer_keyed(PMC* key) {
	internal_exception(ILL_INHERIT,
		"pop_integer_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL pop_integer_keyed_int(INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.pop_integer_keyed(r_key);
    }

    FLOATVAL pop_float() {
	internal_exception(ILL_INHERIT,
		"pop_float() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0.0;
    }

    FLOATVAL pop_float_keyed(PMC* key) {
	internal_exception(ILL_INHERIT,
		"pop_float_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0.0;
    }

    FLOATVAL pop_float_keyed_int(INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.pop_float_keyed(r_key);
    }

    BIGNUM* pop_bignum() {
	internal_exception(ILL_INHERIT,
		"pop_bignum() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    BIGNUM* pop_bignum_keyed(PMC* key) {
	internal_exception(ILL_INHERIT,
		"pop_bignum_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    BIGNUM* pop_bignum_keyed_int(INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.pop_bignum_keyed(r_key);
    }

    STRING* pop_string() {
	internal_exception(ILL_INHERIT,
		"pop_string() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    STRING* pop_string_keyed(PMC* key) {
	internal_exception(ILL_INHERIT,
		"pop_string_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    STRING* pop_string_keyed_int(INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.pop_string_keyed(r_key);
    }

    PMC* pop_pmc() {
	internal_exception(ILL_INHERIT,
		"pop_pmc() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    PMC* pop_pmc_keyed(PMC* key) {
	internal_exception(ILL_INHERIT,
		"pop_pmc_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    PMC* pop_pmc_keyed_int(INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.pop_pmc_keyed(r_key);
    }

    void push_integer (INTVAL value) {
	internal_exception(ILL_INHERIT,
		"push_integer() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void push_integer_keyed (PMC* key, INTVAL value) {
	internal_exception(ILL_INHERIT,
		"push_integer_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void push_integer_keyed_int (INTVAL* key, INTVAL value) {
        PMC* r_key = INT2KEY(INTERP, key);
        DYNSELF.push_integer_keyed(r_key, value);
    }

    void push_float (FLOATVAL value) {
	internal_exception(ILL_INHERIT,
		"push_float() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void push_float_keyed (PMC* key, FLOATVAL value) {
	internal_exception(ILL_INHERIT,
		"push_float_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void push_float_keyed_int (INTVAL* key, FLOATVAL value) {
        PMC* r_key = INT2KEY(INTERP, key);
        DYNSELF.push_float_keyed(r_key, value);
    }

    void push_bignum (BIGNUM* value) {
	internal_exception(ILL_INHERIT,
		"push_bignum() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void push_bignum_keyed (PMC* key, BIGNUM* value) {
	internal_exception(ILL_INHERIT,
		"push_bignum_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void push_bignum_keyed_int (INTVAL* key, BIGNUM* value) {
        PMC* r_key = INT2KEY(INTERP, key);
        DYNSELF.push_bignum_keyed(r_key, value);
    }

    void push_string (STRING* value) {
	internal_exception(ILL_INHERIT,
		"push_string() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void push_string_keyed (PMC* key, STRING* value) {
	internal_exception(ILL_INHERIT,
		"push_string_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void push_string_keyed_int (INTVAL* key, STRING* value) {
        PMC* r_key = INT2KEY(INTERP, key);
        DYNSELF.push_string_keyed(r_key, value);
    }

    void push_pmc (PMC* value) {
	internal_exception(ILL_INHERIT,
		"push_pmc() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void push_pmc_keyed (PMC* key, PMC* value, PMC* value_key) {
	internal_exception(ILL_INHERIT,
		"push_pmc_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void push_pmc_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        DYNSELF.push_pmc_keyed(r_key, value, r_value_key);
    }

    INTVAL shift_integer() {
	internal_exception(ILL_INHERIT,
		"shift_integer() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL shift_integer_keyed(PMC* key) {
	internal_exception(ILL_INHERIT,
		"shift_integer_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL shift_integer_keyed_int(INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.shift_integer_keyed(r_key);
    }

    FLOATVAL shift_float() {
	internal_exception(ILL_INHERIT,
		"shift_float() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0.0;
    }

    FLOATVAL shift_float_keyed(PMC* key) {
	internal_exception(ILL_INHERIT,
		"shift_float_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0.0;
    }

    FLOATVAL shift_float_keyed_int(INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.shift_float_keyed(r_key);
    }

    BIGNUM* shift_bignum() {
	internal_exception(ILL_INHERIT,
		"shift_bignum() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    BIGNUM* shift_bignum_keyed(PMC* key) {
	internal_exception(ILL_INHERIT,
		"shift_bignum_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    BIGNUM* shift_bignum_keyed_int(INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.shift_bignum_keyed(r_key);
    }

    STRING* shift_string() {
	internal_exception(ILL_INHERIT,
		"shift_string() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    STRING* shift_string_keyed(PMC* key) {
	internal_exception(ILL_INHERIT,
		"shift_string_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    STRING* shift_string_keyed_int(INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.shift_string_keyed(r_key);
    }

    PMC* shift_pmc() {
	internal_exception(ILL_INHERIT,
		"shift_pmc() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    PMC* shift_pmc_keyed(PMC* key) {
	internal_exception(ILL_INHERIT,
		"shift_pmc_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    PMC* shift_pmc_keyed_int(INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.shift_pmc_keyed(r_key);
    }

    void unshift_integer (INTVAL value) {
	internal_exception(ILL_INHERIT,
		"unshift_integer() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void unshift_integer_keyed (PMC* key, INTVAL value) {
	internal_exception(ILL_INHERIT,
		"unshift_integer_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void unshift_integer_keyed_int (INTVAL* key, INTVAL value) {
        PMC* r_key = INT2KEY(INTERP, key);
        DYNSELF.unshift_integer_keyed(r_key, value);
    }

    void unshift_float (FLOATVAL value) {
	internal_exception(ILL_INHERIT,
		"unshift_float() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void unshift_float_keyed (PMC* key, FLOATVAL value) {
	internal_exception(ILL_INHERIT,
		"unshift_float_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void unshift_float_keyed_int (INTVAL* key, FLOATVAL value) {
        PMC* r_key = INT2KEY(INTERP, key);
        DYNSELF.unshift_float_keyed(r_key, value);
    }

    void unshift_bignum (BIGNUM* value) {
	internal_exception(ILL_INHERIT,
		"unshift_bignum() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void unshift_bignum_keyed (PMC* key, BIGNUM* value) {
	internal_exception(ILL_INHERIT,
		"unshift_bignum_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void unshift_bignum_keyed_int (INTVAL* key, BIGNUM* value) {
        PMC* r_key = INT2KEY(INTERP, key);
        DYNSELF.unshift_bignum_keyed(r_key, value);
    }

    void unshift_string (STRING* value) {
	internal_exception(ILL_INHERIT,
		"unshift_string() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void unshift_string_keyed (PMC* key, STRING* value) {
	internal_exception(ILL_INHERIT,
		"unshift_string_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void unshift_string_keyed_int (INTVAL* key, STRING* value) {
        PMC* r_key = INT2KEY(INTERP, key);
        DYNSELF.unshift_string_keyed(r_key, value);
    }

    void unshift_pmc (PMC* value) {
	internal_exception(ILL_INHERIT,
		"unshift_pmc() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void unshift_pmc_keyed (PMC* key, PMC* value, PMC* value_key) {
	internal_exception(ILL_INHERIT,
		"unshift_pmc_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void unshift_pmc_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        DYNSELF.unshift_pmc_keyed(r_key, value, r_value_key);
    }

    void splice(PMC* value, INTVAL offset, INTVAL count) {
	internal_exception(ILL_INHERIT,
		"splice() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void add (PMC* value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"add() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void add_int (INTVAL value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"add_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void add_bignum (BIGNUM* value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"add_bignum() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void add_float (FLOATVAL value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"add_float() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void add_same (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"add_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void add_keyed (PMC* key, PMC* value, PMC* value_key,
        PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"add_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void add_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.add_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void subtract (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"subtract() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void subtract_int (INTVAL value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"subtract_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void subtract_bignum (BIGNUM* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"subtract_bignum() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void subtract_float (FLOATVAL value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"subtract_float() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void subtract_same (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"subtract_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void subtract_keyed (PMC* key, PMC* value, PMC* value_key,
            PMC* dest, PMC* dest_key) {

	internal_exception(ILL_INHERIT,
		"subtract_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void subtract_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.subtract_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void multiply (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"multiply() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void multiply_int (INTVAL value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"multiply_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void multiply_bignum (BIGNUM* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"multiply_bignum() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void multiply_float (FLOATVAL value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"multiply_float() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void multiply_same (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"multiply_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void multiply_keyed (PMC* key, PMC* value, PMC* value_key,
            PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"multiply_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void multiply_keyed_int (INTVAL* key, PMC* value,
	    INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.multiply_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void divide (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"divide() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void divide_int (INTVAL value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"divide_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void divide_bignum (BIGNUM* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"divide_bignum() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void divide_float (FLOATVAL value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"divide_float() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void divide_same (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"divide_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void divide_keyed (PMC* key, PMC* value, PMC* value_key,
            PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"divide_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void divide_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.divide_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void modulus (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"modulus() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void modulus_int (INTVAL value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"modulus_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void modulus_bignum (BIGNUM* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"modulus_bignum() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void modulus_float (FLOATVAL value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"modulus_float() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void modulus_same (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"modulus_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void modulus_keyed (PMC* key, PMC* value, PMC* value_key,
            PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"modulus_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));

    }

    void modulus_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.modulus_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void neg (PMC* dest) {
	internal_exception(ILL_INHERIT,
		"neg() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void neg_keyed (PMC* key, PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"neg_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void neg_keyed_int (INTVAL* key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);
        DYNSELF.neg_keyed(r_key, dest, r_dest_key);
    }

    void bitwise_or (PMC* value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_or() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_or_int (INTVAL value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_or_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_or_same (PMC* value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_or_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_or_keyed (PMC* key, PMC* value, PMC* value_key,
            PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"bitwise_or_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_or_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.bitwise_or_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void bitwise_and (PMC* value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_and() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_and_int (INTVAL value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_and_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_and_same (PMC* value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_and_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_and_keyed (PMC* key, PMC* value, PMC* value_key,
            PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"bitwise_and_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_and_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.bitwise_and_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void bitwise_xor (PMC* value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_xor() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_xor_int (INTVAL value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_xor_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_xor_same (PMC* value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_xor_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_xor_keyed (PMC* key, PMC* value, PMC* value_key,
            PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"bitwise_xor_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_xor_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.bitwise_xor_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void bitwise_not (PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_not() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_not_keyed (PMC* key, PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"bitwise_not_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_not_keyed_int (INTVAL* key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);
        DYNSELF.bitwise_not_keyed(r_key, dest, r_dest_key);
    }

    void bitwise_shr (PMC* value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_shr() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_shr_int (INTVAL value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_shr_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_shr_same (PMC* value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_shr_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_shr_keyed (PMC* key, PMC* value, PMC* value_key,
            PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"bitwise_shr_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_shr_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.bitwise_shr_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void bitwise_shl (PMC* value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_shl() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_shl_int (INTVAL value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_shl_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_shl_same (PMC* value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"bitwise_shl_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_shl_keyed (PMC* key, PMC* value, PMC* value_key,
            PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"bitwise_shl_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void bitwise_shl_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.bitwise_shl_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void concatenate (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"concatenate() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void concatenate_native (STRING* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"concatenate_native() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void concatenate_same (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"concatenate_same() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void concatenate_keyed (PMC* key, PMC* value, PMC* value_key,
            PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"concatenate_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void concatenate_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.concatenate_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    INTVAL is_equal (PMC* value) {
        return (SELF->vtable == value->vtable
                && SELF->cache.struct_val == value->cache.struct_val
		&& SELF->data == value->data);
    }

    INTVAL is_equal_keyed (PMC* key, PMC* value, PMC* value_key) {
	internal_exception(ILL_INHERIT,
		"is_equal_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL is_equal_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        return DYNSELF.is_equal_keyed(r_key, value, r_value_key);
    }

    INTVAL cmp (PMC* value) {
	internal_exception(ILL_INHERIT,
		"cmp() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL cmp_keyed (PMC* key, PMC* value, PMC* value_key) {
	internal_exception(ILL_INHERIT,
		"cmp_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL cmp_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        return DYNSELF.cmp_keyed(r_key, value, r_value_key);
    }

    INTVAL cmp_num (PMC* value) {
	internal_exception(ILL_INHERIT,
		"cmp_num() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL cmp_num_keyed (PMC* key, PMC* value, PMC* value_key) {
	internal_exception(ILL_INHERIT,
		"cmp_num_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL cmp_num_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        return DYNSELF.cmp_num_keyed(r_key, value, r_value_key);
    }

    INTVAL cmp_string (PMC* value) {
	internal_exception(ILL_INHERIT,
		"cmp_string() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL cmp_string_keyed (PMC* key, PMC* value, PMC* value_key) {
	internal_exception(ILL_INHERIT,
		"cmp_string_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL cmp_string_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        return DYNSELF.cmp_string_keyed(r_key, value, r_value_key);
    }

    void logical_or (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"logical_or() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void logical_or_keyed (PMC* key, PMC* value, PMC* value_key, PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"logical_or_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void logical_or_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.logical_or_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void logical_and (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"logical_and() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void logical_and_keyed (PMC* key, PMC* value, PMC* value_key, PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"logical_and_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void logical_and_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.logical_and_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void logical_xor (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"logical_xor() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void logical_xor_keyed (PMC* key, PMC* value, PMC* value_key, PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"logical_xor_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }


    void logical_xor_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.logical_xor_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void logical_not (PMC* dest) {
	internal_exception(ILL_INHERIT,
		"logical_not() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void logical_not_keyed (PMC* key, PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"logical_not_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void logical_not_keyed_int (INTVAL* key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);
        DYNSELF.logical_not_keyed(r_key, dest, r_dest_key);
    }

    void repeat (PMC* value,  PMC* dest) {
	internal_exception(ILL_INHERIT,
		"repeat() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void repeat_keyed (PMC* key, PMC* value, PMC* value_key, PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"repeat_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void repeat_keyed_int (INTVAL* key, PMC* value, INTVAL* value_key, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_value_key = INT2KEY(INTERP, value_key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);

        DYNSELF.repeat_keyed(r_key, value, r_value_key, dest, r_dest_key);
    }

    void repeat_int (INTVAL value, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"repeat_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void repeat_int_keyed (PMC* key, INTVAL value, PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"repeat_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void repeat_int_keyed_int (INTVAL* key, INTVAL value, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);
        DYNSELF.repeat_int_keyed(r_key, value, dest, r_dest_key);
    }

    void increment () {
	internal_exception(ILL_INHERIT,
		"increment() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void increment_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"increment_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void increment_keyed_int (INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        DYNSELF.increment_keyed(r_key);
    }

    void decrement () {
	internal_exception(ILL_INHERIT,
		"decrement() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void decrement_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"decrement_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void decrement_keyed_int (INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        DYNSELF.decrement_keyed(r_key);
    }

    INTVAL exists_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"exists_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL exists_keyed_int (INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.exists_keyed(r_key);
    }

    INTVAL defined () {
        return 1;
    }

    INTVAL defined_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"defined_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return 0;
    }

    INTVAL defined_keyed_int (INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.defined_keyed(r_key);
    }

    void delete_keyed(PMC* key) {
	internal_exception(ILL_INHERIT,
		"delete_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void delete_keyed_int(INTVAL* key) {
        PMC* r_key = INT2KEY(INTERP, key);
        DYNSELF.delete_keyed(r_key);
    }

    PMC* nextkey_keyed (PMC* key) {
	internal_exception(ILL_INHERIT,
		"nextkey_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    PMC* nextkey_keyed_int (INTVAL* key) {
        /* XXX - Something's not right with this method */
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.nextkey_keyed(r_key);
    }

    void substr(INTVAL offset, INTVAL length, PMC* dest) {
	internal_exception(ILL_INHERIT,
		"substr() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void substr_keyed(PMC* key, INTVAL offset, INTVAL length, PMC* dest, PMC* dest_key) {
	internal_exception(ILL_INHERIT,
		"substr_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    void substr_keyed_int(INTVAL* key, INTVAL offset, INTVAL length, PMC* dest, INTVAL* dest_key) {
        PMC* r_key = INT2KEY(INTERP, key);
        PMC* r_dest_key = INT2KEY(INTERP, dest_key);
        DYNSELF.substr_keyed(r_key, offset, length, dest, r_dest_key);
    }

    STRING* substr_str(INTVAL offset, INTVAL length) {
	internal_exception(ILL_INHERIT,
		"substr_str() not implemented in class '%s'\n",
		caller(INTERP, SELF));
	return NULL;
    }

    STRING* substr_str_keyed(PMC* key, INTVAL offset, INTVAL length) {
	internal_exception(ILL_INHERIT,
		"substr_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    STRING* substr_str_keyed_int (INTVAL* key, INTVAL offset, INTVAL length) {
        PMC* r_key = INT2KEY(INTERP, key);
        return DYNSELF.substr_str_keyed(r_key, offset, length);
    }

    void* invoke (void* next) {
	internal_exception(ILL_INHERIT,
		"invoke() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    void* invoke_pmc (PMC* sub, void* next) {
	internal_exception(ILL_INHERIT,
		"invoke() not implemented in class '%s'\n",
		caller(INTERP, SELF));
        return NULL;
    }

    INTVAL can (STRING* method) {
	internal_exception(ILL_INHERIT,
		"can() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    INTVAL can_keyed (PMC* key, STRING* method) {
	internal_exception(ILL_INHERIT,
		"can_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    INTVAL can_keyed_int (INTVAL* key, STRING* method) {
	internal_exception(ILL_INHERIT,
		"can_keyed_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    INTVAL does (STRING* method) {
	internal_exception(ILL_INHERIT,
		"can() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    INTVAL does_keyed (PMC* key, STRING* method) {
	internal_exception(ILL_INHERIT,
		"can_keyed() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

    INTVAL does_keyed_int (INTVAL* key, STRING* method) {
	internal_exception(ILL_INHERIT,
		"can_keyed_int() not implemented in class '%s'\n",
		caller(INTERP, SELF));
    }

}
