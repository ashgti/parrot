/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/retcontinuation.pmc - Return Continuation

=head1 DESCRIPTION

C<RetContinuation> extends C<Continuation>.

A return continuation is like a Continuation, only its context isn't marked,
because that's just some previous state of the interpreter.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "parrot/method_util.h"


pmclass RetContinuation extends Continuation {

/*

=item C<void init()>

Initializes the continuation.

=cut

*/

    void init () {
        PMC_cont(SELF) = new_continuation(INTERP);
        PMC_struct_val(SELF) = NULL;
        PObj_custom_mark_destroy_SETALL(SELF);
    }

/*

=item C<PMC* clone>

Return a new Continuation PMC with the context of SELF. Note: the
returned object is not a RetContinuation and creating a real
Continuation invalidates all RetContinuation all the way up the call
chain that is, these can't be recycled, they get persistent until
the GC gets at them.

=cut

*/
    PMC* clone() {
        PMC *ret = SUPER();
        ret->vtable = Parrot_base_vtables[enum_class_Continuation];
        SELF->vtable = Parrot_base_vtables[enum_class_Continuation];
        invalidate_retc_context(INTERP, &PMC_cont(ret)->ctx);
        return ret;
    }
/*

=item C<void *invoke(void *next)>

Restores the "context" by calling the superclass's C<invoke()> and places
the frame pointer in the stack frame cache.

=cut

*/

    void* invoke (void* next) {
        Stack_Chunk_t *stack_p;

        stack_p = interpreter->ctx.reg_stack;
        next = SUPER(next);
        add_to_fp_cache(INTERP, stack_p);
        add_to_retc_cache(INTERP, SELF);
        return next;
    }

}

/*

=back

=head1 HISTORY

Initial revision by sean 2002/08/04.

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
