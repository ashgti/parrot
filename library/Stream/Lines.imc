=head1 TITLE

Stream::Lines - process a stream one line per read

=head1 VERSION

version 0.1

=head1 SYNOPSIS

please see F<examples/streams/Lines.imc> and F<examples/streams/FileLines.imc>

=head1 DESCRIPTION

TBD

=head1 METHODS

=over 4

=cut

.include "library/Data/Escape.imc"

.sub __stream_lines_onload @LOAD
    .local int i
    .local pmc base
    .local pmc lines
    
    find_type i, "Stream::Lines"
    if i > 1 goto END
    
    getclass base, "Stream::Base"
    subclass lines, base, "Stream::Lines"

    addattribute lines, "buffer"    
END:
.end

.namespace ["Stream::Lines"]

.sub __init method
    .local pmc temp
    
    classoffset I0, self, "Stream::Lines"
    temp = new .PerlString
    setattribute self, I0, temp
    
    .pcc_begin_return
    .pcc_end_return
.end

=item is = stream."connected"()

...

=cut

.sub connected method
    # XXX: check if the buffer is empty if the source stream is not connected
    save I0
    classoffset I0, self, "Stream::Base"
    getattribute self, self, I0
    isnull self, NOT
    typeof I0, self
    if I0 == .PerlUndef goto NOT
    restore I0
    callmethod
NOT:
    restore I0
    .pcc_begin_return
    .return 0
    .pcc_end_return
.end

=item is = stream."rawRead"() (B<internal>)

...

=cut

.sub rawRead method
    .local pmc temp
    .local string buffer
    .local string ret
    .local int i
    
    buffer = self."buffer"()
    i = length buffer
    if i > 0 goto BUFFER_OK
BUFFER_FILL:
    (buffer, i) = self."fillBuffer"()
    ret = buffer
    if i == 0 goto BUFFER_END
#    if i != 0 goto BUFFER_OK
#    self."close"()
#    branch BUFFER_END
BUFFER_OK:
    
    index i, buffer, "\n"
    
    if i == -1 goto BUFFER_FILL
    
    substr ret, buffer, 0, i
    inc i
    substr buffer, buffer, i

    self."setBuffer"( buffer )

BUFFER_END:
    .pcc_begin_return
    .return ret
    .pcc_end_return
.end

=item is = stream."buffer"() (B<internal>)

...

=cut

.sub buffer method
    .local pmc temp
    .local string buffer

    classoffset I0, self, "Stream::Lines"
    getattribute temp, self, I0
    buffer = temp

    .pcc_begin_return
    .return temp
    .return buffer
    .pcc_end_return
.end

=item is = stream."setBuffer"() (B<internal>)

...

=cut

.sub setBuffer method
    .param string buffer
    .local pmc temp
    
    new temp, .PerlString
    temp = buffer
    classoffset I0, self, "Stream::Lines"
    setattribute self, I0, temp
.end

=item stream."fillBuffer"() (B<internal>)

...

=cut

.sub fillBuffer method
    .local pmc temp
    .local string buffer
    .local string str
    .local int code

    # read
    temp = self."source"()
    str = temp."read"()

    classoffset I0, self, "Stream::Lines"
    getattribute temp, self, I0
    buffer = temp
    code = 0

    isnull str, END
    
    # concat to the buffer
    concat buffer, str
    temp = buffer
    setattribute self, I0, temp
    code = 1

END:
    if code == 1 goto NO_CLOSE
    self = self."source"()
    self."close"()
    null buffer
    null temp
NO_CLOSE:
    .pcc_begin_return
    .return temp
    .return buffer
    .return code
    .pcc_end_return
.end

=back

=head1 AUTHOR

Jens Rieks E<lt>parrot at jensbeimsurfen dot deE<gt> is the author
and maintainer.
Please send patches and suggestions to the Perl 6 Internals mailing list.

=head1 COPYRIGHT

Copyright (c) 2004, the Perl Foundation.

=cut
