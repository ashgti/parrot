=head1 Parrot Cage Cleaners high-level goals

=head2 Smoke testing on many platforms with many compilers

The more platforms we have, the more likely we are to find portability
problems.  Parrot has to be the most portable thing we've created.

More platforms also means more compilers.  Maybe your DEC compiler
is more picky than gcc, and spews more warnings.  Good!  More
opportunities for cleaning!

=head2 Compiler pickiness

Use as many compiler warnings as we possibly can.  The more warnings
we enable, the less likely something will pass the watchful eye of
the compiler.

Note that warnings may not just be -W flags.  Some warnings in gcc
only show up when optimization is enabled.

=head2 Static code analysis

There are a number of lint-like tools out there that can do static
code analysis.  Make targets for them.

=over 4

=item * splint

Splint (http://www.splint.org) is a very very picky lint tool, and
setup and configuration is a pain.  Andy has tried to get Perl 5
running under it nicely, but has met with limited success.  Maybe
the Parrot will be nicer.

=item * Solaris lint

Sun has made its dev tools freely available at
http://developers.sun.com/prodtech/cc/.  Its lint is the best one
out there, except from Gimpel's FlexeLint
(http://www.gimpel.com/html/flex.htm) which costs many dollars.

=back

=head2 Bounds-checkers

=head2 Enforcing coding standards, naming conventions, etc

=over 4

=item * Automatic standards checking

The docs in F<filename here> explains what our code should look
like.  Write something that automatically validates it in a .t file.

=item * C<const> checking

Declaring variables as C<const> wherever possible lets the compiler
do lots of checking that wouldn't normally be possible.  Walk the
source code adding the C<const> qualifier wherever possible.  The
biggest bang is always in passing pointers into functions.

=item * C<const> explaining

The description above is pretty sparse.  A good decscription of
C<const> and its benefit would be helpful for newcomers.

=back

=head2 Decreasing the amount of repeated code

PMD (http://pmd.sourceforge.net/) has been used on C code, even
though it's a Java tool.

=head2 Automated generation of C headers

This has started significantly with the F<headerizer.pl> program.
Right now, it extracts the function headers correctly, but now I
have to have it create the F<.h> files.

=head2 Improve low-level code quality

=head2 Creating automated code checking tools

=head2 Documenting function behavior and structure members

=head2 Developing coverage tools

=head2 Automatically running the coverage tools

=head2 Run on many different C compilers

Most of Andy's work right now is with GCC 4.2 on Linux.  We need
many more.

=head2 Run under valgrind

Valgrind (http://valgrind.org/) is a profiler/debugger most notable
for the way it magically monitors memory accesses and management.

=head2 Run under Coverity Prevent

Coverity already runs Prevent on the Perl 5 source.  Let's get
Parrot running under it, too. http://scan.coverity.com/

=head2 IMCC cleanup

From #parrot:

    vsoni: there seems to be some dead code/feature....I had a chat
    with leo and I am going to send and email to p6i for deprecation
    of certain old features

=head2 Helping other contributors hack their patches into Parrot-style industrial-strength C code.

From chip's comment at http://www.oreillynet.com/onlamp/blog/2006/07/calling_for_parrot_janitors.html

    We've just had contributed an improved register allocation
    implementation, but since the contributor is new to Parrot,
    there are some style and coding standards issues that need to
    be worked out. It'd be great if a Cage Cleaner could step up
    and help our new contributor bang the code into Parrotish form.

=head1 See Also

Also look at F<docs/BROKEN.pod>, F<docs/ROADMAP.pod>, and
the list of Cage items on RT: http://xrl.us/owsd (Link to rt.perl.org)
