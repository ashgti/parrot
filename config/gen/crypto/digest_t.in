#! perl
# Copyright (C) 2009, Parrot Foundation.
# $Id$

use strict;
use warnings;
use lib qw( . lib ../lib ../../lib );
use Test::More;
use Parrot::Test;
use Parrot::Config;

=head1 NAME

t/dynpmc/@TEMP_md_file@.t - test the @TEMP_md_name@ PMC (part of digest_group)

=head1 SYNOPSIS

        % perl -Ilib t/dynpmc/@TEMP_md_file@.t

=head1 DESCRIPTION

Tests the C<digest_group> a libcrypto wrapper.

=cut

if ( !$PConfig{has_crypto} ) {
    plan skip_all => "No crypto library available";
}
elsif ( $PConfig{openssl_version} lt '@TEMP_md_skip@' ) {
    plan skip_all => "Too old library";
}
else {
    plan tests => 2;
}

pir_output_is( << 'CODE', << 'OUTPUT', '@TEMP_md_name@ typeof' );
.sub test :main
    $P0 = loadlib 'digest_group'
    .local pmc md
    md = new '@TEMP_md_name@'
    $S0 = typeof md
    say $S0
.end
CODE
@TEMP_md_name@
OUTPUT

pir_output_like( << 'CODE', << 'OUTPUT', '@TEMP_md_name@ digest' );
.sub test :main
    $P0 = loadlib 'digest_group'
    .local pmc md
    md = new '@TEMP_md_name@'
    md.'Init'()
    $S0 = 'message digest'
    md.'Update'($S0)
    $S0 = md.'Final'()
    $P0 = split '', $S0
    new $P1, 'FixedPMCArray'
    set $P1, 1
  L1:
    unless $P0 goto L2
    $S1 = shift $P0
    $I1 = ord $S1
    $P1[0] = $I1
    $S2 = sprintf '%02x', $P1
    print $S2
    goto L1
  L2:
    print "\n"
.end
CODE
/^@TEMP_md_result@$/
OUTPUT

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4:
