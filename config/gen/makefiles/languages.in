# $Id$

# setup of commands
${make_set_make}
PERL      = ${perl}
MAKE      = ${make_c}
RM_F      = ${rm_f}

# add new languages here
# remove obsolete languages here
LANGUAGES = \
    BASIC \
    Zcode \
    bc \
    befunge \
    bf \
    cola \
    forth \
    jako \
    lisp \
    lua \
    m4 \
    miniperl \
    ook \
    parrot_compiler \
    punie \
    regex \
    scheme \
    tcl \
    urm

# the default target
all: $(LANGUAGES)

# This is a listing of all targets, that are meant to be called by users
help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  all:          Make a lot of language implementations."
	@echo "                This is the default."
	@echo "  test:         Unified test suite for a lot of languages."
	@echo ""
	@echo "  clean:        Clean up a lot of languages."
	@echo ""
	@echo "  help:         Print this help message."
	@echo ""
	@echo "  smoke:        Run the test suite and send smoke.html to "
	@echo "                http://smoke.parrotcode.org/"
	@echo ""
	@echo "  smoke-clean:  clean up smoke.html"
	@echo ""
	@echo ""
	@echo "Following languages are available:"
	@echo "  $(LANGUAGES)"
	@echo "A particular language <lang> can be built, tested and cleand up"
	@echo "  make <lang>"
	@echo "  make <lang>.test"
	@echo "  make <lang>.clean"
	@echo "For the status of individual languages see LANGUAGES.STATUS"
	@echo ""

test:   all
	$(PERL) testall

smoke:  all
	$(PERL) testall --html
	$(PERL) ../tools/util/smokeserv-client.pl languages_smoke.html

smoke-clean :
	$(RM_F) languages_smoke.html

clean: \
    BASIC.clean \
    Zcode.clean \
    bc.clean \
    befunge.clean \
    bf.clean \
    cola.clean \
    forth.clean \
    jako.clean \
    lisp.clean \
    lua.clean \
    m4.clean \
    miniperl.clean \
    ook.clean \
    parrot_compiler.clean \
    punie.clean \
    regex.clean \
    scheme.clean \
    tcl.clean \
    urm.clean \
    smoke-clean


#
# Language specific targets
#

# The *.dummy targets are a replacement for the target .PHONY in 'GNU make'

BASIC : BASIC.dummy
BASIC.dummy:
# don't know how to build BASIC
BASIC.test:
# Don't know how to test BASIC
BASIC.clean:
# Don't know how to clean BASIC

Zcode : Zcode.dummy
Zcode.dummy:
# Do nothing. make Zcode requires an Inform compiler
Zcode.test:
	- $(MAKE) Zcode test
Zcode.clean:
	- $(MAKE) Zcode clean

bc : bc.dummy
bc.dummy:
	- $(MAKE) bc
bc.test:
	- $(MAKE) bc test
bc.clean:
	- $(MAKE) bc clean

befunge : befunge.dummy
befunge.dummy:
	- $(MAKE) befunge
befunge.test:
	- $(MAKE) befunge test
befunge.clean:
	- $(MAKE) befunge clean

bf : bf.dummy
bf.dummy:
	- $(MAKE) bf
bf.test:
	- $(MAKE) bf test
bf.clean:
	- $(MAKE) bf clean

cola : cola.dummy
cola.dummy:
	- $(MAKE) cola
cola.test:
	- $(MAKE) cola test
cola.clean:
# don't clean cola, as files in MANIFEST are removed

forth : forth.dummy
forth.dummy:
# Nothing to do for forth
forth.test:
# Looks like there are no tests for forth
forth.clean:
# no Makefile

jako: jako.dummy
jako.dummy:
# don't make jako, as tests are executed by default
jako.test:
	- $(MAKE) jako test
jako.clean:
	- $(MAKE) jako clean

lisp: lisp.dummy
lisp.dummy:
	- $(MAKE) lisp
lisp.test:
	- $(MAKE) lisp test
lisp.clean:
	- $(MAKE) lisp clean

lua: lua.dummy
lua.dummy:
	- $(MAKE) lua
lua.test:
	- $(MAKE) lua test
lua.clean:
	- $(MAKE) lua clean

m4: m4.dummy
m4.dummy:
	- $(MAKE) m4
m4.test:
	- $(MAKE) m4 test
m4.clean:
	- $(MAKE) m4 clean

miniperl : miniperl.dummy
miniperl.dummy:
# miniperl is missing t/harness
# $(MAKE) miniperl
miniperl.test:
	- $(MAKE) miniperl test
miniperl.clean:
	- $(MAKE) miniperl clean

ook : ook.dummy
ook.dummy:
	- $(MAKE) ook
ook.test:
	- $(MAKE) ook test
ook.clean:
	- $(MAKE) ook clean

parrot_compiler: parrot_compiler.dummy
parrot_compiler.dummy:
	- $(MAKE) parrot_compiler
parrot_compiler.test:
	- $(MAKE) parrot_compiler test
parrot_compiler.clean:
	- $(MAKE) parrot_compiler clean

punie : punie.dummy
punie.dummy:
	- $(MAKE) punie
punie.test:
	- $(MAKE) punie test
punie.clean:
	- $(MAKE) punie clean

regex: regex.dummy
regex.dummy:
	- $(MAKE) regex
regex.test :
	- $(MAKE) regex test
regex.clean :
# No target clean for regex

scheme: scheme.dummy
scheme.dummy:
	@echo "SKIPPED: scheme: (nothing to make, but should not default to make test)"
scheme.test :
	- $(MAKE) scheme test
scheme.clean :
	- $(MAKE) scheme clean

tcl: tcl.dummy
tcl.dummy:
	- $(MAKE) tcl
tcl.test:
	- $(MAKE) tcl test
tcl.clean:
	- $(MAKE) tcl clean

urm: urm.dummy
urm.dummy:
	- $(MAKE) urm
urm.test:
	- $(MAKE) urm test
urm.clean:
	- $(MAKE) urm clean
