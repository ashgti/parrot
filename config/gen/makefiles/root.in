# Copyright: 2001-2005 The Perl Foundation.  All Rights Reserved.
# $Id$

###############################################################################
#
# INSTALL CONFIGURATIONS:
#
###############################################################################

VERSION     = ${VERSION}${DEVEL}

# Override at least PREFIX with the install location if you're going
# to be using this outside of your build area.
BUILDPREFIX =
PREFIX      = ${prefix}
EXEC_PREFIX = $(PREFIX)
BINDIR      = $(EXEC_PREFIX)/bin
LIBDIR      = $(EXEC_PREFIX)/lib
INCLUDEDIR  = $(EXEC_PREFIX)/include

###############################################################################
#
# SOURCE CONFIGURATIONS:
#
# Set up information about directies, where the sources can be found.
#
###############################################################################

# imcc, ast dir
IMCC_DIR = imcc
AST_DIR  = ast

# source dir
SRC = src

# Ops dir
OPS = ops

# directory for packfile files
PF  = pf

# Build tools
BUILD_TOOL = build_tools

# file containing main
PARROT_MAIN = $(IMCC_DIR)/main

###############################################################################
#
# COMMANDS CONFIGURATIONS:
#
# Set up some commands which are used below.
#
###############################################################################

# programs and utils used for build
RM_F      = ${rm_f}
RM_RF     = ${rm_rf}
AR_CR     = ${ar} ${ar_flags}
RANLIB    = ${ranlib}
LINK      = ${link}
LD        = ${ld}
TOUCH     = $(PERL) -e ${PQ}open(A,qq{>>$$_}) or die foreach @ARGV${PQ}
YACC      = ${yacc}
LEX       = ${lex}

# file extensions and util flags
O               = ${o}
SHARE_EXT       = ${share_ext}
LOAD_EXT        = ${load_ext}
A               = ${a}
LD_OUT          = ${ld_out}
LD_SHARE_FLAGS  = ${ld_share_flags}
LD_LOAD_FLAGS   = ${ld_load_flags}

INC=./${inc}

# generated by config/init/headers.pl

NONGEN_HEADERS = ${TEMP_nongen_headers}

###############################################################################
#
# "STICKY" GENERATED FILES:
#
# These files are created when Configure.pl runs.
#
# We don't delete these on 'clean' only on 'realclean'.
# That way, we don't have to re-Configure.pl after making
# clean.
#
###############################################################################

GEN_MAKEFILES = \
    Makefile \
    languages/Makefile \
#CONDITIONED_LINE(perldoc):    docs/Makefile \
    dynclasses/Makefile \
    dynoplibs/Makefile \
    languages/cola/Makefile \
    languages/parrot_compiler/Makefile \
    languages/jako/Makefile \
    languages/miniperl/Makefile \
    languages/scheme/Makefile \
    languages/befunge/Makefile \
    languages/bf/Makefile \
    imcc/Makefile \
    languages/ook/Makefile \
    languages/m4/Makefile \
    languages/perl6/Makefile \
    languages/urm/Makefile \
    languages/tcl/Makefile \
    languages/tcl/examples/Makefile

GEN_CONFIGS = \
    include/parrot/config.h \
    include/parrot/platform.h \
    include/parrot/platform_interface.h \
    include/parrot/has_header.h \
    include/parrot/feature.h \
    include/parrot/core_pmcs.h \
    include/parrot/exec_dep.h \
    lib/Parrot/Config.pm \
    lib/Parrot/PMC.pm \
    runtime/parrot/include/config.fpmc \
    $(SRC)/platform.c \
#CONDITIONED_LINE(platform_asm):    $(SRC)/platform_asm.s \
    $(SRC)/core_pmcs.c \
    CFLAGS imcc/CFLAGS \
    config_lib.pasm \
       $(SRC)/nci_test$(O) \
    libparrot.def \
    ast/ast.y.flag \
    dynclasses/build.pl \
    imcc/imcc.y.flag \
    ops/core_ops.c \
    ops/core_ops_switch.c

# most of these are generated by config/gen/parrot_include.pl

GEN_PASM_INCLUDES = \
    runtime/parrot/include/signal.pasm \
    ${TEMP_gen_pasm_includes}

STICKY_FILES = $(GEN_CONFIGS) $(GEN_MAKEFILES) myconfig $(GEN_PASM_INCLUDES)


###############################################################################
#
# "FLUID" GENERATED FILES:
#
# These files are created during the build process.
#
# We *do* delete these on 'clean'.
#
###############################################################################

GEN_OPSFILES =

GEN_HEADERS = \
    $(INC)/vtable.h \
    $(INC)/oplib/core_ops.h \
    $(INC)/oplib/ops.h \
    $(SRC)/parrot_config.h \
    $(INC)/oplib/core_ops_switch.h

GEN_SOURCES = \
    $(SRC)/core_ops.c \
    $(SRC)/fingerprint.c \
    $(SRC)/nci.c \
    $(SRC)/core_ops_switch.c \
    $(SRC)/jit_cpu.c \
    $(SRC)/exec_cpu.c

GEN_MODULES = lib/Parrot/OpLib/core.pm

GEN_LIBRARY = \
    runtime/parrot/library/config.pbc \
    runtime/parrot/library/Data/Dumper/Base.pbc \
    runtime/parrot/library/Data/Dumper/Default.pbc \
    runtime/parrot/library/Data/Dumper.pbc \
    runtime/parrot/library/Data/Escape.pbc \
    runtime/parrot/library/Data/Sort.pbc \
    runtime/parrot/library/dumper.pbc \
    runtime/parrot/library/Getopt/Long.pbc \
    runtime/parrot/library/ncurses.pbc \
    runtime/parrot/library/parrotlib.pbc \
    runtime/parrot/library/pcre.pbc \
    runtime/parrot/library/Stream/Base.pbc \
    runtime/parrot/library/Stream/Combiner.pbc \
    runtime/parrot/library/Stream/Coroutine.pbc \
    runtime/parrot/library/Stream/Filter.pbc \
    runtime/parrot/library/Stream/Lines.pbc \
    runtime/parrot/library/Stream/ParrotIO.pbc \
    runtime/parrot/library/Stream/Replay.pbc \
    runtime/parrot/library/Stream/Sub.pbc \
    runtime/parrot/library/Stream/Writer.pbc
# XXX Why don't these build?
    #runtime/parrot/library/libpcre.pbc \
    #runtime/parrot/library/Data/Replace.pbc \
    #runtime/parrot/library/postgres.pbc \

# the dependencies of jit_emit.h are done explicitely
# including this file in GEN_HEADERS causses unnecessary recompile of all
FLUID_FILES = \
    $(GEN_OPSFILES) \
    $(GEN_HEADERS) \
    $(GEN_SOURCES) \
    $(GEN_MODULES) \
    $(GEN_LIBRARY) \
    $(INC)/jit_emit.h \
    runtime/parrot/include/parrotlib.pbc



###############################################################################
#
# OTHER FILE GROUPS:
#
###############################################################################

# these are private to the imcc subsystem
IMCC_H_FILES = \
    $(IMCC_DIR)/imc.h \
    $(IMCC_DIR)/stacks.h \
    $(IMCC_DIR)/cfg.h \
    $(IMCC_DIR)/class.h \
    $(IMCC_DIR)/instructions.h \
    $(IMCC_DIR)/debug.h \
    $(IMCC_DIR)/sets.h \
    $(IMCC_DIR)/unit.h \
    $(IMCC_DIR)/symbol.h \
    $(IMCC_DIR)/symreg.h \
    $(IMCC_DIR)/pbc.h \
    $(IMCC_DIR)/optimizer.h \
    $(IMCC_DIR)/parser.h \
    $(IMCC_DIR)/imcparser.h

IMCC_O_FILES = \
    $(IMCC_DIR)/imcparser$(O) \
    $(IMCC_DIR)/imclexer$(O) \
    $(IMCC_DIR)/imc$(O) \
    $(IMCC_DIR)/stacks$(O) \
    $(IMCC_DIR)/symbol$(O) \
    $(IMCC_DIR)/class$(O) \
    $(IMCC_DIR)/symreg$(O) \
    $(IMCC_DIR)/instructions$(O) \
    $(IMCC_DIR)/cfg$(O) \
    $(IMCC_DIR)/reg_alloc$(O) \
    $(IMCC_DIR)/sets$(O) \
    $(IMCC_DIR)/debug$(O) \
    $(IMCC_DIR)/optimizer$(O) \
    $(IMCC_DIR)/pbc$(O) \
    $(IMCC_DIR)/parser_util$(O) \
    $(IMCC_DIR)/jit$(O) \
    $(IMCC_DIR)/sub$(O) \
    $(IMCC_DIR)/fastcall$(O) \
    $(IMCC_DIR)/pcc$(O)

AST_H_FILES = \
    $(AST_DIR)/ast.h \
    $(AST_DIR)/astparser.h

AST_O_FILES = \
    $(AST_DIR)/astparser$(O) \
    $(AST_DIR)/astlexer$(O) \
    $(AST_DIR)/ast_main$(O) \
    $(AST_DIR)/node$(O)

GENERAL_H_FILES = $(NONGEN_HEADERS) $(GEN_HEADERS) ${TEMP_cg_h}

ICU_H_FILES = ${icu_headers}

ALL_H_FILES = $(GENERAL_H_FILES)

CHARSET_O_FILES = ${TEMP_charset_o}

CLASS_PMC_FILES = ${TEMP_pmc_classes_pmc}

CLASS_O_FILES = ${TEMP_pmc_classes_o}

CLASS_STR_FILES = ${TEMP_pmc_classes_str}

ENCODING_O_FILES = ${TEMP_encoding_o}


IO_O_FILES = \
    io/io$(O) \
    io/io_buf$(O) \
    io/io_layers$(O) \
    io/io_unix$(O) \
    io/io_utf8$(O) \
    io/io_win32$(O) \
    io/io_stdio$(O) \
    io/io_passdown$(O)

INTERP_O_FILES = \
    $(SRC)/charset$(O) \
    $(SRC)/encoding$(O) \
    $(SRC)/exceptions$(O) \
    $(SRC)/global_setup$(O) \
    $(SRC)/interpreter$(O)  \
    $(SRC)/inter_cb$(O)  \
    $(SRC)/inter_create$(O)  \
    $(SRC)/inter_misc$(O)  \
    $(SRC)/inter_run$(O)  \
    $(SRC)/register$(O) \
    $(SRC)/memory$(O) \
    $(SRC)/objects$(O) \
    $(SRC)/packfile$(O) \
    $(SRC)/stacks$(O) \
    $(SRC)/stack_common$(O) \
    $(SRC)/string$(O) \
    $(SRC)/string_primitives$(O) \
    $(SRC)/sub$(O) \
    $(SRC)/lexical$(O) \
    $(SRC)/runops_cores$(O) \
    $(SRC)/trace$(O) \
    $(SRC)/pmc$(O) \
    $(SRC)/pmc_freeze$(O) \
    $(SRC)/key$(O) \
    $(SRC)/hash$(O) \
    $(SRC)/core_pmcs$(O) \
#CONDITIONED_LINE(platform_asm):    $(SRC)/platform_asm$(O) \
    $(SRC)/platform$(O) ${TEMP_jit_o} \
    $(SRC)/rx$(O) \
    $(SRC)/rxstacks$(O) \
    $(SRC)/intlist$(O) \
    $(SRC)/list$(O) \
    $(SRC)/library$(O) \
    $(SRC)/global$(O) \
    $(SRC)/embed$(O) \
    $(SRC)/warnings$(O) \
    $(SRC)/packout$(O) \
    $(SRC)/byteorder$(O) \
    $(SRC)/debug$(O) \
    $(SRC)/smallobject$(O) \
    $(SRC)/headers$(O) \
    $(SRC)/dod$(O) \
    $(SRC)/gc_ims$(O) \
    $(SRC)/gc_gms$(O) \
    $(SRC)/method_util$(O) \
    $(SRC)/exit$(O) \
    $(SRC)/misc$(O) \
    $(SRC)/spf_render$(O) \
    $(SRC)/spf_vtable$(O) \
    $(SRC)/datatypes$(O) \
    $(SRC)/fingerprint$(O) \
    $(SRC)/nci$(O) \
    $(SRC)/cpu_dep$(O) \
    $(SRC)/tsq$(O) \
    $(SRC)/longopt$(O) \
    $(SRC)/events$(O) \
    $(SRC)/thread$(O) \
    $(SRC)/dynext$(O) \
    $(SRC)/utils$(O) \
    $(SRC)/vtables$(O) \
    $(SRC)/pic$(O) \
    $(SRC)/mmd$(O) \
    $(SRC)/mmd_fallback$(O) \
    $(SRC)/extend$(O) \
    $(SRC)/py_func$(O)  \
    $(PF)/pf_items$(O) \
    $(OPS)/core_ops$(O) \
    $(OPS)/core_ops_switch$(O) \
    ${asmfun_o} \
    ${TEMP_cg_o} \
    ${TEMP_exec_o} \
    ${TEMP_gc_o}

O_FILES = \
    $(INTERP_O_FILES) \
    $(CHARSET_O_FILES) \
    $(IO_O_FILES) $(CLASS_O_FILES) \
    $(ENCODING_O_FILES) \
    $(IMCC_O_FILES) \
    $(AST_O_FILES)

OPS_FILES = ${ops} $(GEN_OPSFILES)

###############################################################################
#
# BUILD TOOL CONFIGURATIONS:
#
# DO NOT ADD C COMPILER FLAGS HERE
# Add them in Configure.pl--look for the
# comment 'ADD C COMPILER FLAGS HERE'
#
###############################################################################

CFLAGS = ${ccflags} ${cc_debug} ${ccwarn} ${cc_inc} ${cc_hasjit} ${cg_flag} ${gc_flag}

LINKFLAGS = ${linkflags} ${link_debug} ${ld_debug}
LDFLAGS = ${ldflags} ${ld_debug}

C_LIBS = ${libs}

CC = ${cc}
PERL = ${perl}

# Make directory; do not die if dir exists.
MKDIR = $(PERL) -e ${PQ}-d or mkdir $$_,0777 or die foreach @ARGV${PQ}

# lclint has changed name to splint at v3.0
LINT = splint

# note: +distinctinternalnames with +externalnamelen at 8 characters
#       (the ANSI standard) is not going to fly for us.
LINTFLAGS = -weak +showscan +showsummary +posixstrictlib -abstract \
    +aliasunique +ansireserved +ansireservedinternal +assignexpose \
    +bitwisesigned +boolcompare +booltype BOOLVAL +casebreak -castfcnptr \
    -charint +continuecomment +controlnestdepth 15 +cppnames +declundef \
    +distinctinternalnames +evalorder +fielduse +forcehints -globs \
    +imptype +includenest 8 +incondefs +incondefslib +linelen 9999 \
    +longintegral +macroassign +macroempty +macroredef +matchanyintegral \
    +nestedextern +noeffect +readonlystrings +realcompare +shadow -type

# slightly weaker, more realistic variant.
LINTFLAGS2 = $(LINTFLAGS) -ansireserved -retvalother -bitwisesigned

# added to lint target to simplify experimentation,
# ex: make LINTOPTS='-posixstrictlibs +posixlibs' lint
LINTOPTS =

###############################################################################
#
# BUILD TARGET CONFIGURATIONS:
#
###############################################################################

# Executables
TEST_PROG       = ${test_prog}${exe}
TEST_PROG_SO    = ${test_prog}_so${exe}
DIS             = disassemble${exe}
PDUMP           = pdump${exe}
PINFO           = pbc_info${exe}
PDB             = pdb${exe}

# libs
LIBPARROT       = ${blib_lib_libparrot_a}
LIBICUCORE      = ${blib_lib_libsicuuc_a}
LIBICUDATA      = ${blib_lib_libsicudata_a}
ALL_PARROT_LIBS = $(LIBPARROT) $(LIBICUCORE) $(LIBICUDATA) $(C_LIBS)

# dynamic extensions
DYNEXT_DIR      = runtime/parrot/dynext
LIBNCI_SO       = $(DYNEXT_DIR)/libnci_test$(LOAD_EXT)

###############################################################################
#
# MAKE CONFIGURATION:
#
###############################################################################

# This is set to  MAKE=$make if your $make command doesn't
# do it for you.
${make_set_make}
MAKE_C = ${make_c}

# These need to be above lines that define suffix rules to be portable
# (certainly FreeBSD make doesn't grok the .imc.pbc rule otherwise)

.SUFFIXES : .c .h .pmc .dump $(O) .str .imc .pir .pbc

# Passing an empty argument in @ARGV to cc_flags.pl to indicate where extra -Is
# (etc) should go. Otherwise it will insert them after the first space, which
# makes life go horribly wrong if $(CC) contains spaces but can't have -I
# arguments (etc) injected in the middle.
# There is probably a better way to do this, but I can't work it out right now.
.c$(O) :
	@$(PERL) tools/dev/cc_flags.pl ./CFLAGS $(CC) "" $(CFLAGS) -I$(@D) ${cc_o_out}$@ -c $<

.imc.pbc:
	.${slash}$(TEST_PROG) -o $@ $<

.pir.pbc:
	.${slash}$(TEST_PROG) -o $@ $<

###############################################################################
#
# USER TARGETS:
#
# These targets are supposed to be called by the user.
#
###############################################################################

all : flags_dummy $(TEST_PROG) runtime/parrot/include/parrotlib.pbc runtime/parrot/include/config.fpmc docs $(LIBNCI_SO) $(GEN_LIBRARY) dynclasses

# constant string support
.c.str :
	$(PERL) build_tools/c2str.pl $< > $@

STR_FILES = \
    $(SRC)/inter_cb.str \
    $(SRC)/inter_misc.str \
    $(SRC)/global.str \
    $(SRC)/library.str \
    $(SRC)/pmc.str \
    $(SRC)/py_func.str \
    $(SRC)/objects.str \
    $(CLASS_STR_FILES)

$(INC)/string_private_cstring.h : $(STR_FILES) build_tools/c2str.pl
	$(PERL) build_tools/c2str.pl --all

# classes PMC build utils and rules
PMC2CD=$(PERL) classes/pmc2c2.pl --dump
PMC2CC=$(PERL) classes/pmc2c2.pl --c --no-lines
PMC2CV=$(PERL) classes/pmc2c2.pl --vt

.pmc.dump :
	$(PMC2CD) $<

.pmc.c :
	$(PMC2CC) $<

# not all makes might understant this, so the rules are generated
#classes/pmc_%.h : classes/%.c
#	$(PMC2CC) $<

vtable.dump : vtable.tbl
	$(PMC2CV)


# This is a listing of all targets, that are meant to be called by users
help :
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "Executables:"
	@echo "  all:               'parrot' and the documentation."
	@echo "                     This is the default."
	@echo "  world:             'all' and 'parrot_utils'."
	@echo "  parrot_utils:      $(PDUMP), $(DIS), $(PINFO) and $(PDB)"
	@echo "  $(PDUMP):             Parrot Dumper"
	@echo "  $(DIS):       Parrot Disassembler"
	@echo "  $(PINFO):          Information about Parrot Byte Code"
	@echo "  $(PDB):               Parrot Debugger"
	@echo ""
	@echo "Installation:"
	@echo "  install:           Install under '/usr/local/parrot' on Unix systems"
	@echo ""
	@echo "Documentation:"
	@echo "  docs:              Generate documentation from POD in the sources."
	@echo "  html:              Generate HTML documentation from POD in the sources."
	@echo "  html-clean:        Remove the HTML documentation."
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite."
	@echo "  test_imcc:         Run the test suite only for IMCC tests."
	@echo "  fulltest:          Run test suite with various options."
	@echo "  fulltest_imcc:     Run IMCC test suite with various options."
	@echo "  src_tests:         Run test in C-file."
	@echo "  testX:             Run the test suite with core -X"
	@echo ""
	@echo "Creating reports:"
	@echo "  ok:                Print a report."
	@echo "  okfile:            Save a report into 'parrot.ok."
	@echo "  nok:               Print a report."
	@echo "  nokfile:           Save a report into 'parrot.nok."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
	@echo "  distclean:         Remove everything not in MANIFEST."
	@echo "  cvsclean:          Like 'distclean', but keep CVS files."
	@echo "  reconfig:          'clean' and redo configuration."
	@echo "  manitest:          Check for new files."
	@echo ""
	@echo "Dynamic PMCs:"
	@echo "  dynclasses:        Proxy for default target of dynclasses/Makefile"
	@echo "  dynclasses-clean:  Proxy for target 'clean' of dynclasses/Makefile"
	@echo ""
	@echo "Language implementations:"
	@echo "  languages:         Proxy for default target of languages/Makefile"
	@echo "  languages-test:    Proxy for target 'test' of languages/Makefile"
	@echo "  languages-clean:   Proxy for target 'clean' of languages/Makefile"
	@echo ""
	@echo "fetch from source repository:"
	@echo "  update:            cvs update."
	@echo "  status:            cvs status."
	@echo "  patch:             create a patc for sending to bugs-parrot."
	@echo "  rsync:             update with rsync."
	@echo ""
	@echo "Development:"
	@echo "  lint:              code checking with lint."
	@echo "  lint2:             another code checking whit lint."
	@echo ""
	@echo "Release:"
	@echo "  release:           create a TAR ball."
	@echo "  rpm:               create RPMs."
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo "  hello:             'Hello World' in PASM"
	@echo "  mops:              Currently not working???"
	@echo ""

world : all parrot_utils

parrot_utils : $(PDUMP) $(DIS) $(PINFO) $(PDB)

flags_dummy :
	@echo Compiling with:
	@$(PERL) tools/dev/cc_flags.pl ./CFLAGS echo $(CC) $(CFLAGS) -I$(@D) ${cc_o_out} xx$(O) -c xx.c

runtime/parrot/include/parrotlib.pbc: runtime/parrot/library/parrotlib.imc $(TEST_PROG)
	./parrot -o $@ runtime/parrot/library/parrotlib.imc

runtime/parrot/include/config.fpmc : myconfig config_lib.pasm $(TEST_PROG)
	@echo Invoking Parrot to generate runtime/parrot/include/config.fpmc --cross your fingers
	./parrot config_lib.pasm
	@echo If the next line prints $(VERSION), it did help.
	./parrot parrot-config.imc VERSION DEVEL

mops : examples/assembly/mops${exe} examples/mops/mops${exe}

$(TEST_PROG) : $(PARROT_MAIN)$(O) $(GEN_HEADERS) $(LIBPARROT) lib/Parrot/OpLib/core.pm $(LIBICUCORE) $(LIBICUDATA)
	$(LINK) ${ld_out}$(TEST_PROG) $(LINKFLAGS) $(PARROT_MAIN)$(O) $(ALL_PARROT_LIBS)

lib_deps_object : $(O_FILES)
	$(PERL) tools/dev/lib_deps.pl object $(O_FILES)

lib_deps_source : $(GENERAL_H_FILES)
	$(PERL) tools/dev/lib_deps.pl source all_source

lib_deps : lib_deps_object lib_deps_source

check_source : $(GENERAL_H_FILES)
	$(PERL) tools/dev/check_source_standards.pl all_source

###############################################################################
#
# Shared Library Targets:
#
###############################################################################

shared : $(GEN_HEADERS) blib/lib/libparrot$(SHARE_EXT) $(LIBPARROT)
static : $(GEN_HEADERS) $(LIBPARROT)

# XXX changes don't always propagate into libparrot
# e.g. when I change debug:fataly to xfataly, nm still shows the old symbol
# and parrot builds fine (except for the unproto warning
# so always delete the lib -leo

$(LIBPARROT) : $(O_FILES)
	$(RM_F) $@
	$(MKDIR) blib blib/lib
	$(AR_CR) ${ar_out}$@ ${ar_extra} $(O_FILES)
	$(RANLIB) $@

blib/lib/libparrot$(SHARE_EXT) : $(O_FILES)
	$(MKDIR) blib blib/lib
	$(LD) $(LD_SHARE_FLAGS) $(LDFLAGS) $(LD_OUT)blib/lib/libparrot$(SHARE_EXT) $(O_FILES) $(C_LIBS) $(LIBICUCORE) $(LIBICUDATA)

$(TEST_PROG_SO) : $(PARROT_MAIN)$(O) blib/lib/libparrot$(SHARE_EXT) lib/Parrot/OpLib/core.pm
	$(LINK) $(LINKFLAGS) $(LD_OUT)$(TEST_PROG) $(PARROT_MAIN)$(O) -Lblib/lib -lparrot $(C_LIBS)

#
# Parrot Debugger
#

$(SRC)/pdb$(O) : $(GENERAL_H_FILES)

$(PDB) : $(SRC)/pdb$(O) $(LIBPARROT)
	$(LINK) ${ld_out}$(PDB) $(SRC)/pdb$(O) $(LINKFLAGS) $(ALL_PARROT_LIBS)

#
# Parrot Disassembler
#

$(SRC)/disassemble$(O) : $(GENERAL_H_FILES)

$(DIS) : $(SRC)/disassemble$(O) $(LIBPARROT)
	$(LINK) ${ld_out}$(DIS) $(SRC)/disassemble$(O) $(LINKFLAGS) $(ALL_PARROT_LIBS)

#
# Parrot Dump
#

$(PDUMP) : $(SRC)/pdump$(O) $(SRC)/packdump$(O) $(LIBPARROT)
	$(LINK) ${ld_out}$(PDUMP) $(SRC)/pdump$(O) $(SRC)/packdump$(O) $(LINKFLAGS) $(ALL_PARROT_LIBS)


# pbc_info
$(PINFO) : $(SRC)/pbc_info$(O) $(LIBPARROT)
	$(LINK) ${ld_out}$(PINFO) $(SRC)/pbc_info$(O) $(LINKFLAGS) $(ALL_PARROT_LIBS)

###############################################################################
#
# Other Dependencies and Build Rules:
#
###############################################################################

$(PARROT_MAIN)$(O) : $(PARROT_MAIN).c $(GENERAL_H_FILES)

lib/Parrot/OpLib/core.pm : $(OPS_FILES) $(BUILD_TOOL)/ops2pm.pl \
    lib/Parrot/OpsFile.pm lib/Parrot/Op.pm $(OPS)/ops.num
	$(PERL) $(BUILD_TOOL)/ops2pm.pl $(OPS_FILES)

$(SRC)/fingerprint.c : $(BUILD_TOOL)/fingerprint_c.pl PBC_COMPAT
	$(PERL) $(BUILD_TOOL)/fingerprint_c.pl > $(SRC)/fingerprint.c

$(SRC)/parrot_config.h : $(BUILD_TOOL)/parrot_config_c.pl config_lib.pasm
	$(PERL) $(BUILD_TOOL)/parrot_config_c.pl > $(SRC)/parrot_config.h

###############################################################################
#
# Examples (Assembly):
#
###############################################################################

examples/assembly/mops.pbc : examples/assembly/mops.pasm
	$(MAKE_C) examples/assembly mops.pbc

examples/assembly/mops.c : examples/assembly/mops.pbc $(BUILD_TOOL)/pbc2c.pl
	$(PERL) $(BUILD_TOOL)/pbc2c.pl examples/assembly/mops.pbc > examples/assembly/mops.c

examples/assembly/mops${exe} : examples/assembly/mops$(O) $(LIBPARROT)
	$(LINK) $(LINKFLAGS) ${ld_out}examples/assembly/mops${exe} examples/assembly/mops$(O) $(LIBPARROT) $(C_LIBS)

examples/assembly/life.pbc : examples/assembly/life.pasm
	$(MAKE_C) examples/assembly life.pbc

examples/assembly/life.c : examples/assembly/life.pbc $(BUILD_TOOL)/pbc2c.pl
	$(PERL) $(BUILD_TOOL)/pbc2c.pl examples/assembly/life.pbc > examples/assembly/life.c

examples/assembly/life${exe} : examples/assembly/life$(O) $(LIBPARROT)
	$(LINK) $(LINKFLAGS) ${ld_out}examples/assembly/life${exe} examples/assembly/life$(O) $(LIBPARROT) $(C_LIBS)

###############################################################################
#
# Examples (MOPS) - Comparative:
#
###############################################################################

examples/mops/mops$(O) : examples/mops/mops.c

examples/mops/mops${exe} : examples/mops/mops$(O)
	$(LINK) $(LINKFLAGS) ${ld_out}examples/mops/mops${exe} \
    examples/mops/mops$(O) $(LIBPARROT) $(C_LIBS)


###############################################################################
#
# Dependencies:
#
###############################################################################

$(SRC)/global_setup$(O) : $(GENERAL_H_FILES)

$(SRC)/global$(O) : $(GENERAL_H_FILES) $(SRC)/global.str

$(SRC)/pmc$(O) : $(GENERAL_H_FILES)

$(SRC)/pmc_freeze$(O) : $(GENERAL_H_FILES)

$(SRC)/hash$(O) : $(GENERAL_H_FILES)

$(SRC)/intlist$(O) : $(GENERAL_H_FILES)

$(SRC)/list$(O) : $(GENERAL_H_FILES)

$(SRC)/library$(O) : $(GENERAL_H_FILES) src/parrot_config.h

$(SRC)/jit$(O) : $(GENERAL_H_FILES) ${TEMP_jit_h} $(INC)/jit_emit.h

$(SRC)/jit_debug$(O) : $(GENERAL_H_FILES) ${TEMP_jit_h}

$(SRC)/jit_debug_xcoff$(O) : $(GENERAL_H_FILES) ${TEMP_jit_h}

$(SRC)/jit_cpu$(O) : $(GENERAL_H_FILES) ${TEMP_jit_h} $(INC)/jit_emit.h

$(SRC)/exec$(O) : $(GENERAL_H_FILES) ${TEMP_exec_h} ${TEMP_jit_h} $(INC)/jit_emit.h

$(SRC)/exec_cpu$(O) : $(GENERAL_H_FILES) ${TEMP_exec_h} ${TEMP_jit_h} $(INC)/jit_emit.h

$(SRC)/exec_start$(O) : $(GENERAL_H_FILES) ${TEMP_exec_h}

$(SRC)/exec_save$(O) : $(GENERAL_H_FILES) ${TEMP_exec_h}

$(SRC)/key$(O) : $(GENERAL_H_FILES)

$(SRC)/smallobject$(O) : $(GENERAL_H_FILES)

$(SRC)/headers$(O) : $(GENERAL_H_FILES)

$(SRC)/dod$(O) : $(GENERAL_H_FILES)

$(SRC)/gc_ims$(O) : $(GENERAL_H_FILES)

$(SRC)/gc_gms$(O) : $(GENERAL_H_FILES)

$(SRC)/resources$(O) : $(GENERAL_H_FILES)

$(SRC)/platform$(O) : $(GENERAL_H_FILES)

#CONDITIONED_LINE(platform_asm):$(SRC)/platform_asm$(O) : $(GENERAL_H_FILES)
#CONDITIONED_LINE(platform_asm):
$(SRC)/core_pmcs$(O) : $(GENERAL_H_FILES)

$(SRC)/trace$(O) : $(GENERAL_H_FILES)

$(SRC)/debug$(O) : $(GENERAL_H_FILES) $(INC)/debug.h

$(SRC)/method_util$(O) : $(GENERAL_H_FILES)

$(SRC)/sub$(O) : $(GENERAL_H_FILES)

$(SRC)/lexical$(O) : $(GENERAL_H_FILES)

$(SRC)/string$(O) : $(GENERAL_H_FILES) $(INC)/string_private_cstring.h

$(SRC)/string_primitives$(O) : $(GENERAL_H_FILES) $(ICU_H_FILES)

$(SRC)/longopt$(O) : $(GENERAL_H_FILES)

$(SRC)/dynext$(O) : $(GENERAL_H_FILES)

$(SRC)/exceptions$(O) : $(GENERAL_H_FILES)

$(SRC)/events$(O) : $(GENERAL_H_FILES)

$(SRC)/thread$(O) : $(GENERAL_H_FILES)

$(SRC)/extend$(O) : $(GENERAL_H_FILES) $(INC)/extend.h

$(SRC)/interpreter$(O) : $(SRC)/interpreter.c $(GENERAL_H_FILES) \
    ${TEMP_jit_h}

$(SRC)/inter_cb$(O) : $(SRC)/inter_cb.c $(GENERAL_H_FILES) \
    $(SRC)/inter_cb.str

$(SRC)/inter_misc$(O) : $(SRC)/inter_misc.c $(GENERAL_H_FILES) \
    $(SRC)/inter_misc.str

$(SRC)/inter_create$(O) : $(SRC)/inter_create.c $(GENERAL_H_FILES)

$(SRC)/inter_run$(O) : $(SRC)/inter_run.c $(GENERAL_H_FILES)

$(SRC)/py_func$(O) : $(SRC)/py_func.c $(GENERAL_H_FILES) \
    $(SRC)/py_func.str classes/pmc_default.h

io/io$(O) : $(GENERAL_H_FILES) io/io_private.h

io/io_buf$(O) : $(GENERAL_H_FILES) io/io_private.h

io/io_layers$(O) : $(GENERAL_H_FILES) io/io_private.h

io/io_unix$(O) : $(GENERAL_H_FILES) io/io_private.h

io/io_utf8$(O) : $(GENERAL_H_FILES) io/io_private.h

io/io_win32$(O) : $(GENERAL_H_FILES) io/io_private.h

io/io_stdio$(O) : $(GENERAL_H_FILES) io/io_private.h

io/io_passdown$(O) : $(GENERAL_H_FILES) io/io_private.h

$(SRC)/memory$(O) : $(GENERAL_H_FILES)

$(SRC)/pic$(O) : $(GENERAL_H_FILES)

$(SRC)/mmd$(O) : $(GENERAL_H_FILES)

$(SRC)/mmd_fallback$(O) : $(GENERAL_H_FILES)

$(SRC)/objects$(O) : $(GENERAL_H_FILES) $(SRC)/objects.str

$(SRC)/packfile$(O) : $(GENERAL_H_FILES)

$(PF)/pf_items$(O) : $(GENERAL_H_FILES)

$(SRC)/packout$(O) : $(GENERAL_H_FILES)

$(SRC)/parrot$(O) : $(GENERAL_H_FILES)

$(SRC)/register$(O) : $(GENERAL_H_FILES) $(SRC)/generic_register.c

$(SRC)/runops_cores$(O) : $(GENERAL_H_FILES)

$(SRC)/rx$(O) : $(GENERAL_H_FILES)

$(SRC)/rxstacks$(O) : $(GENERAL_H_FILES)

$(SRC)/stacks$(O) : $(GENERAL_H_FILES)

$(SRC)/stack_common$(O) : $(GENERAL_H_FILES)

$(SRC)/tsq$(O) : $(GENERAL_H_FILES)

$(SRC)/embed$(O) : $(GENERAL_H_FILES) $(INC)/debug.h

$(SRC)/dataypes$(O) : $(GENERAL_H_FILES) $(SRC)/dataypes.c

$(SRC)/exit$(O) : $(GENERAL_H_FILES) $(SRC)/exit.c

$(SRC)/nci$(O) : $(GENERAL_H_FILES) $(SRC)/nci.c

$(SRC)/vtables$(O) : $(GENERAL_H_FILES) $(SRC)/vtables.c

$(SRC)/cpu_dep$(O) : $(GENERAL_H_FILES)

$(SRC)/nci.c : $(SRC)/call_list.txt $(BUILD_TOOL)/build_nativecall.pl
	$(PERL) $(BUILD_TOOL)/build_nativecall.pl $(SRC)/call_list.txt

$(SRC)/warnings$(O) : $(GENERAL_H_FILES)

$(SRC)/misc$(O) : $(GENERAL_H_FILES)

$(SRC)/utils$(O) : $(GENERAL_H_FILES)

$(SRC)/spf_render$(O) : $(GENERAL_H_FILES)

$(SRC)/spf_vtable$(O) : $(GENERAL_H_FILES)

$(SRC)/encoding$(O) : $(SRC)/encoding.c $(GENERAL_H_FILES)

$(SRC)/charset$(O) : $(SRC)/charset.c $(GENERAL_H_FILES)

$(OPS)/core_ops$(O) : $(GENERAL_H_FILES) $(OPS)/core_ops.c

#core_ops depends upon config.h so that it gets updated along with updates to config.h's version numbers
$(OPS)/core_ops.c $(INC)/oplib/core_ops.h : $(OPS_FILES) $(BUILD_TOOL)/ops2c.pl lib/Parrot/OpsFile.pm lib/Parrot/Op.pm $(INC)/config.h lib/Parrot/OpLib/core.pm
	$(PERL) $(BUILD_TOOL)/ops2c.pl C --core

$(OPS)/core_ops_switch$(O) : $(GENERAL_H_FILES) $(OPS)/core_ops_switch.c

$(OPS)/core_ops_switch.c $(INC)/oplib/core_ops_switch.h : $(OPS_FILES) $(BUILD_TOOL)/ops2c.pl lib/Parrot/OpsFile.pm lib/Parrot/Op.pm $(INC)/config.h lib/Parrot/OpLib/core.pm
	$(PERL) $(BUILD_TOOL)/ops2c.pl CSwitch --core

${TEMP_cg_c}

${TEMP_gc_c}

${TEMP_pmc_build}

${TEMP_charset_build}

${TEMP_encoding_build}

# $(STICKY_FILES) : Configure.pl
#	$(PERL) Configure.pl

$(INC)/vtable.h : vtable.tbl $(BUILD_TOOL)/vtable_h.pl lib/Parrot/Vtable.pm
	$(PERL) $(BUILD_TOOL)/vtable_h.pl

$(INC)/jit_emit.h : jit/${jitcpuarch}/jit_emit.h
	$(PERL) -MFile::Copy=cp -e ${PQ}cp q|jit/${jitcpuarch}/jit_emit.h|, q|$(INC)/jit_emit.h|${PQ}
$(INC)/exec_dep.h : jit/${jitcpuarch}/exec_dep.h
	$(PERL) -MFile::Copy=cp -e ${PQ}cp q|jit/${jitcpuarch}/exec_dep.h|, q|$(INC)/exec_dep.h|${PQ}
$(SRC)/jit_cpu.c : lib/Parrot/OpLib/core.pm $(INC)/jit_emit.h \
    jit/${jitcpuarch}/core.jit $(BUILD_TOOL)/jit2h.pl
	$(PERL) $(BUILD_TOOL)/jit2h.pl ${jitcpuarch} $(SRC)/jit_cpu.c
$(SRC)/exec_cpu.c : lib/Parrot/OpLib/core.pm $(INC)/jit_emit.h \
    jit/${jitcpuarch}/core.jit ${TEMP_exec_h} $(INC)/exec_dep.h $(BUILD_TOOL)/jit2h.pl
	$(PERL) $(BUILD_TOOL)/jit2h.pl ${jitcpuarch} $(SRC)/exec_cpu.c

######## imcc files deps
#
# The .flag files are needed because we are keeping some derived files in CVS,
# which does not keep accurate timestamps on the files, relative to each other.
# Note that YACC or LEX may be null commands, so we must `touch` all the
# target files, instead of just the .flag files.

$(IMCC_DIR)/imcc.y.flag $(IMCC_DIR)/imcparser.c $(IMCC_DIR)/imcparser.h : $(IMCC_DIR)/imcc.y
	$(YACC) $(IMCC_DIR)/imcc.y -d -o $(IMCC_DIR)/imcparser.c
	$(TOUCH) $(IMCC_DIR)/imcc.y.flag $(IMCC_DIR)/imcparser.c $(IMCC_DIR)/imcparser.h

$(IMCC_DIR)/imcc.l.flag $(IMCC_DIR)/imclexer.c : $(IMCC_DIR)/imcc.l
	$(LEX) -o$(IMCC_DIR)/imclexer.c $(IMCC_DIR)/imcc.l
	$(TOUCH) $(IMCC_DIR)/imcc.l.flag $(IMCC_DIR)/imclexer.c

$(IMCC_O_FILES) : $(IMCC_H_FILES) $(ALL_H_FILES)

# ast files

$(AST_DIR)/ast.y.flag $(AST_DIR)/astparser.c $(AST_DIR)/astparser.h : $(AST_DIR)/ast.y
	$(YACC) $(AST_DIR)/ast.y -d -o $(AST_DIR)/astparser.c -p AST
	$(TOUCH) $(AST_DIR)/ast.y.flag $(AST_DIR)/astparser.c $(AST_DIR)/astparser.h

$(AST_DIR)/ast.l.flag $(AST_DIR)/astlexer.c : $(AST_DIR)/ast.l
	$(LEX) -o$(AST_DIR)/astlexer.c -PAST $(AST_DIR)/ast.l
	$(TOUCH) $(AST_DIR)/ast.l.flag $(AST_DIR)/astlexer.c

$(AST_O_FILES) : $(IMCC_H_FILES) $(AST_H_FILES) $(ALL_H_FILES)


###############################################################################
#
# Documentation targets:
#
###############################################################################

#CONDITIONED_LINE(perldoc):docs : docs.dummy
#CONDITIONED_LINE(notperldoc):docs : docs.stub

#CONDITIONED_LINE(perldoc):html : html.dummy
#CONDITIONED_LINE(notperldoc):html : html.stub

html.stub:
	echo "Perldoc is required, but not detected."

docs.stub:
	echo "Perldoc is required, but not detected."

docs.dummy :
	$(MAKE_C) docs

docs-clean :
	$(MAKE_C) docs clean

html.dummy :
	$(MAKE_C) docs html

html-clean :
	$(MAKE_C) docs html-clean

###############################################################################
#
# dynamic PMC targets:
#
###############################################################################

dynclasses : dynclasses.dummy

dynclasses.dummy :
	$(MAKE_C) dynclasses

dynclasses-clean :
	$(MAKE_C) dynclasses clean


###############################################################################
#
# language implementation targets:
#
###############################################################################

languages : languages.dummy

languages.dummy :
	$(MAKE_C) languages

languages-test :
	$(MAKE_C) languages test

languages-clean :
	$(MAKE_C) languages clean


${TEMP_icu_make}

###############################################################################
#
# Testing Targets:
#
###############################################################################

# The --running-make-test argument is currently used by long-running tests
# to disable GC_DEBUG.
EXTRA_TEST_ARGS = --gc-debug --running-make-test
IMCC_TEST_FILES = imcc/t/*/*.t
TEST_FILES      = t/library/*.t t/op/*.t t/pmc/*.t t/native_pbc/*.t $(IMCC_TEST_FILES) t/dynclass/*.t
SRC_TEST_FILES  = t/src/*.t

# Run test cases with a single call of t/harness
# Users have to look at only one report.
test : all test_prep
	$(PERL) t/harness $(EXTRA_TEST_ARGS) $(TEST_PROG_ARGS) -b $(TEST_FILES) $(SRC_TEST_FILES)

fulltest :  testg testC testj testS testb testr src_tests

# Common prep for all test targets
test_prep : $(TEST_PROG)

# src tests
src_tests :
	$(PERL) t/harness $(SRC_TEST_FILES)

# cgoto runloop
testg : test_prep
	$(PERL) t/harness $(EXTRA_TEST_ARGS) $(TEST_PROG_ARGS) -g $(TEST_FILES)

# CGP runloop
testC : test_prep
	$(PERL) t/harness $(EXTRA_TEST_ARGS) $(TEST_PROG_ARGS) -C $(TEST_FILES)

# JIT core
testj : test_prep
	$(PERL) t/harness $(EXTRA_TEST_ARGS) $(TEST_PROG_ARGS) -j $(TEST_FILES)

# switched core
testS : test_prep
	$(PERL) t/harness $(EXTRA_TEST_ARGS) $(TEST_PROG_ARGS) -S $(TEST_FILES)

# bounds checking slow core
testb : test_prep
	$(PERL) t/harness $(EXTRA_TEST_ARGS) $(TEST_PROG_ARGS) -b $(TEST_FILES)

# normal core, write and run pbc
testr : test_prep
	$(PERL) t/harness $(EXTRA_TEST_ARGS) $(TEST_PROG_ARGS) --run-pbc $(TEST_FILES)

# Running a benchmark
mopstest : test_prep
	$(TEST_PROG) $(TEST_PROG_ARGS) examples/assembly/mops.pasm

# all benchmarks
testbench: test_prep
	$(PERL) t/harness t/benchmarks.t

# Running the game of live
lifetest : test_prep
	$(TEST_PROG) $(TEST_PROG_ARGS) examples/assembly/life.pasm

# Running the IMCC test suite
test_imcc :
	$(PERL) t/harness $(IMCC_TEST_FILES)

testj_imcc :
	$(PERL) t/harness -j $(IMCC_TEST_FILES)

testC_imcc :
	$(PERL) t/harness -C $(IMCC_TEST_FILES)

testb_imcc :
	$(PERL) t/harness -b $(IMCC_TEST_FILES)

testS_imcc :
	$(PERL) t/harness -S $(IMCC_TEST_FILES)

testr_imcc :
	$(PERL) t/harness -r $(IMCC_TEST_FILES)


fulltest_imcc : test_imcc testj_imcc testC_imcc testS_imcc \
                testb_imcc testr_imcc

# For reporting success or failure with different configurations
ok :
	$(PERL) tools/dev/genrpt.pl --ok

okfile :
	$(PERL) tools/dev/genrpt.pl --ok --File parrot.ok

nok :
	$(PERL) tools/dev/genrpt.pl --nok

nokfile :
	$(PERL) tools/dev/genrpt.pl --nok --File parrot.nok

###############################################################################
#
# Cleaning Targets:
#
###############################################################################

clean : testclean progclean languages-clean docs-clean dynclasses-clean
	${TEMP_cg_r}
	$(RM_F) *.s *~ $(FLUID_FILES) \
    examples/assembly/mops${exe} examples/assembly/mops.c \
    examples/assembly/mops$(O) examples/assembly/mops.pbc \
    examples/mops/mops$(O) examples/mops/mops${exe}

progclean :
	$(RM_F) $(O_FILES) \
    $(TEST_PROG) $(PARROT_MAIN)$(O) \
    $(PDUMP) $(SRC)/pdump$(O) $(SRC)/packdump$(O) \
    $(SRC)/pbc_info$(O) $(PINFO) \
    $(PDB) $(SRC)/pdb$(O) \
    $(DIS) $(SRC)/disassemble$(O) \
    $(LIBNCI_SO)
	$(RM_F) $(LIBPARROT)
	$(PERL) build_tools/c2str.pl --init
	$(RM_F) $(STR_FILES) $(INC)/string_private_cstring.h
	$(RM_F) classes/*.c classes/*.h classes/*.dump vtable.dump
# win32 import library (shared object is deleted by LIBNCI_SO above)
	$(RM_F) $(DYNEXT_DIR)/libnci_test.lib
# win32 program data base - contains debugging info
	$(RM_F) *.pdb $(DYNEXT_DIR)/*.pdb
# win32 incremental link status files
	$(RM_F)	*.ilk $(DYNEXT_DIR)/*.ilk
# win32 exported functions and data items
	$(RM_F)	$(DYNEXT_DIR)/*.exp


testclean :
	$(RM_F) t/op/*.pasm
	$(RM_F) t/op/*.imc
	$(RM_F) t/op/*.pbc
	$(RM_F) t/op/*.out
	$(RM_F) t/op/*.o
	$(RM_F) t/op/*.stabs.s
	$(RM_F) t/library/*.imc
	$(RM_F) t/library/*.pbc
	$(RM_F) t/pmc/*.pasm
	$(RM_F) t/pmc/*.imc
	$(RM_F) t/pmc/*.pbc
	$(RM_F) t/pmc/*.out
	$(RM_F) t/pmc/*.o
	$(RM_F) t/pmc/*.stabs.s
	$(RM_F) t/stress/*.pasm
	$(RM_F) t/stress/*.pbc
	$(RM_F) t/stress/*.out
	$(RM_F) t/stress/*.o
	$(RM_F) t/stress/*.stabs.s
	$(RM_F) t/src/*_*
	$(MAKE_C) $(IMCC_DIR) testclean

realclean : clean
	$(RM_F) $(STICKY_FILES)
	$(RM_RF) blib

distclean :
	$(PERL) "-MExtUtils::Manifest=filecheck" -le ${PQ}sub ExtUtils::Manifest::_maniskip{sub{0}};$$ExtUtils::Manifest::Quiet=1;unlink $$_ for filecheck()${PQ}

cvsclean :
	$(PERL) "-MExtUtils::Manifest=filecheck" -le ${PQ}sub ExtUtils::Manifest::_maniskip{sub{0}};$$ExtUtils::Manifest::Quiet=1; do { unlink $$_ unless $$_ =~ m!(?:CVS/|\.cvs)! } for filecheck()${PQ}

reconfig :
	$(MAKE) clean; $(PERL) Configure.pl --reconfig

manitest :
	$(PERL) "-MExtUtils::Manifest=fullcheck" -e fullcheck

###############################################################################
#
# CVS Targets:
#
###############################################################################

update :
	cvs -q update -dP

rsync :
	rsync -av cvs.perl.org::parrot-HEAD .

status :
	cvs -n -q upd -dP

patch :
	cvs -q diff -u


lint : ${test_prog}
	$(LINT) ${cc_inc} ${cc_hasjit} "-Iclasses" $(LINTFLAGS) $(LINTOPTS) `echo $(O_FILES) | sed ${PQ}s/\.o/\.c/g${PQ}`
	$(LINT) ${cc_inc} $(LINTFLAGS) $(LINTOPTS) $(PARROT_MAIN).c

lint2 : ${test_prog}
	$(LINT) ${cc_inc} ${cc_hasjit} "-Iclasses" $(LINTFLAGS2) $(LINTOPTS) `echo $(O_FILES) | sed ${PQ}s/\.o/\.c/g${PQ}`
	$(LINT) ${cc_inc} $(LINTFLAGS2) $(LINTOPTS) $(PARROT_MAIN).c


###############################################################################
#
# installation
#
###############################################################################

install :
	$(PERL) tools/dev/install_files.pl --buildprefix=$(BUILDPREFIX) --prefix=$(PREFIX) --exec-prefix=$(EXEC_PREFIX) --bindir=$(BINDIR) --libdir=$(LIBDIR) --includedir=$(INCLUDEDIR) MANIFEST MANIFEST.generated

###############################################################################
#
# release targets (probably unix only)
#
###############################################################################

release : MANIFEST MANIFEST.generated
	[ -d parrot-$(VERSION) ] || ln -s . parrot-$(VERSION)
	cp MANIFEST MANIFEST.real
	grep -v DEVELOPING MANIFEST.real > MANIFEST
	tar zcvf parrot-$(VERSION).tar.gz $$(perl -lane 'print"parrot-$(VERSION)/$$F[0]"unless!length||/#/' MANIFEST)
	mv MANIFEST.real MANIFEST
	rm parrot-$(VERSION)

rpms : release
	sudo cp parrot-$(VERSION).tar.gz /usr/src/*/SOURCES
	sudo cp parrot.spec /usr/src/*/SPECS
	cd /usr/src/*/SPECS ${make_and} sudo rpm -ba parrot.spec

###############################################################################
#
# miniparrot targets:
#
###############################################################################

miniparrot-prebuild : $(GEN_CONFIGS) $(FLUID_FILES)
	@tools/dev/rebuild_miniparrot.pl --action=clean
	@tools/dev/rebuild_miniparrot.pl --action=prebuild_classes $(CLASS_O_FILES)
	@tools/dev/rebuild_miniparrot.pl --action=copy_src $(GEN_CONFIGS) $(FLUID_FILES) $(ALL_H_FILES)
	@tools/dev/rebuild_miniparrot.pl --action=copy_src classes/*.h $(PARROT_MAIN).c $(INC)/debug.h
	@tools/dev/rebuild_miniparrot.pl --action=copy_src_from_obj $(O_FILES)
	@tools/dev/rebuild_miniparrot.pl --action=write_buildscripts --executable=parrot $(O_FILES) $(PARROT_MAIN)$(O)

miniparrot-update :
	tools/dev/rebuild_miniparrot.pl

###############################################################################
#
# exec:
#
###############################################################################

exec : $(SRC)/exec_start$(O) $(LIBPARROT)
	$(LINK) ${ld_out}$(EXEC) $(LINKFLAGS) $(EXEC)$(O) $(SRC)/exec_start$(O) $(ALL_PARROT_LIBS)

exec_so : $(SRC)/exec_start$(O) blib/lib/libparrot$(SHARE_EXT)
	$(LINK) ${ld_out}$(EXEC) $(LINKFLAGS) $(EXEC)$(O) $(SRC)/exec_start$(O) -lparrot $(C_LIBS)

###### OS depend targets ##########

# for use by t/pmc/nci.t
$(LIBNCI_SO): $(SRC)/nci_test$(O)
	$(LD) $(LD_LOAD_FLAGS) ${ncilib_link_extra} $(LDFLAGS) \
	    $(LD_OUT)$@ $(SRC)/nci_test$(O)

# vim ctags
# this needs exuberant-ctags

tags:	tags.dummy
	$(RM_F) tags
	ctags -R --links=no .
	$(PERL) editor/addtags ops/*.ops

tags.dummy:

# test the EXEC stuff

testexec: hello-parrot hello-clean

hello-clean:
	@$(RM_F) hello.pasm hello$(O) hello

hello-parrot: hello

hello.pasm:
	echo 'print "Hello World\n"' > hello.pasm
	echo  'end' >> hello.pasm

hello.pbc:	hello.pasm
	./parrot -o hello.pbc hello.pasm

hello$(O):	hello.pbc
	./parrot -o hello$(O) hello.pbc

hello:	hello$(O)
	$(MAKE) EXEC=hello exec
	./hello
