#
# Makefile.in
#
# $Id$
#

PERL = ${perl}
RM_F = ${rm_f}

DIR=languages/jako
TOOL_DIR=../..
ASM=$(PERL) -I ../../lib ../../assemble.pl
IMCC=imcc
JAKOC=$(PERL) jakoc
INTERP=../../${test_prog}

.SUFFIXES: .jako .imc .pasm .pbc


#
# Default target:
#

all: bench.pbc euclid.pbc fact.pbc fib.pbc hello.pbc leibniz.pbc \
mandelbrot.pbc mandelzoom.pbc mops.pbc primes.pbc queens.pbc sub.pbc


#
# Compilation:
#

.jako.imc:
	$(JAKOC) $< > $@ || (rm -f $@ && false)

bench.imc: bench.jako jakoc
euclid.imc: euclid.jako jakoc
fact.imc: fact.jako jakoc
fib.imc: fib.jako jakoc
hello.imc: hello.jako jakoc
leibniz.imc: leibniz.jako jakoc
mandelbrot.imc: mandelbrot.jako jakoc
mandelzoom.imc: mandelzoom.jako jakoc
mops.imc: mops.jako jakoc
primes.imc: primes.jako jakoc
queens.imc: queens.jako jakoc
sub.imc: sub.jako jakoc


#
# Intermediate Compilation:
#

.imc.pasm:
	$(IMCC) -o $@ $< || (rm -f $@ && false)

../imcc/imcc:
	@cd ../imcc make

imcc: ../imcc/imcc
	ln -s ../imcc/imcc imcc

bench.pasm: bench.imc imcc
euclid.pasm: euclid.imc imcc
fact.pasm: fact.imc imcc
fib.pasm: fib.imc imcc
hello.pasm: hello.imc imcc
leibniz.pasm: leibniz.imc imcc
mandelbrot.pasm: mandelbrot.imc imcc
mandelzoom.pasm: mandelzoom.imc imcc
mops.pasm: mops.imc imcc
primes.pasm: primes.imc imcc
queens.pasm: queens.imc imcc
sub.pasm: sub.imc imcc


#
# Assembly:
#

.pasm.pbc:
	$(ASM) $< > $@

bench.pbc: bench.pasm
euclid.pbc: euclid.pasm
fact.pbc: fact.pasm
fib.pbc: fib.pasm
hello.pbc: hello.pasm
leibniz.pbc: leibniz.pasm
mandelbrot.pbc: mandelbrot.pasm
mandelzoom.pbc: mandelzoom.pasm
mops.pbc: mops.pasm
primes.pbc: primes.pasm
queens.pbc: queens.pasm
sub.pbc: sub.pasm


#
# Other targets:
#

clean:
	$(RM_F) imcc *.imc *.pasm *.list *.pbc

over:
	@$(MAKE) clean
	@$(MAKE) all

test: all
	$(INTERP) bench.pbc
	$(INTERP) euclid.pbc
	$(INTERP) fact.pbc
	$(INTERP) fib.pbc
	$(INTERP) hello.pbc
	$(INTERP) leibniz.pbc
	$(INTERP) mandelbrot.pbc
	$(INTERP) mandelzoom.pbc
	$(INTERP) mops.pbc
	$(INTERP) primes.pbc
	$(INTERP) queens.pbc
	$(INTERP) sub.pbc


#
# End of file.
#
