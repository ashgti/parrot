# Copyright (C) 2003-2010, Parrot Foundation.
# $Id$

PERL          = @perl@
RM_F          = @rm_f@
CP            = @cp@
CHMOD         = @chmod@
LOAD_EXT      = @load_ext@
BUILD_DIR     = @build_dir@
RECONFIGURE   = $(PERL) $(BUILD_DIR)/tools/dev/reconfigure.pl
INSTALL_DIR   = $(BUILD_DIR)/runtime/parrot/dynext
O             = @o@
CC            = @cc@
LD            = @ld@
LDFLAGS       = @ldflags@ @ld_debug@ @rpath_blib@
LD_LOAD_FLAGS = @ld_load_flags@
CFLAGS        = @ccflags@ @cc_shared@ @cc_debug@ @ccwarn@ @cc_hasjit@ @gc_flag@ @optimize@
LIBPARROT     = @libparrot_ldflags@

BUILD_TOOLS_DIR = $(BUILD_DIR)/tools/build
BUILD_LIB_DIR   = $(BUILD_DIR)/blib/lib
PMC2C           = $(PERL) $(BUILD_TOOLS_DIR)/pmc2c.pl
INCLUDES        = -I$(BUILD_DIR)/include -I@build_dir@/include/pmc
LINKARGS        = $(LDFLAGS) $(LD_LOAD_FLAGS) $(LIBPARROT) @icu_shared@ @libs@

PMC2CD = $(PERL) $(BUILD_TOOLS_DIR)/pmc2c.pl --dump
PMC2CC = $(PERL) $(BUILD_TOOLS_DIR)/pmc2c.pl --c

# add your dynamic pmcs here
PMC_TARGETS = \
  dynlexpad$(LOAD_EXT) \
  foo_group$(LOAD_EXT) \
  pccmethod_test$(LOAD_EXT) \
  rotest$(LOAD_EXT) \
  rational$(LOAD_EXT) \
#IF(has_zlib):  gziphandle$(LOAD_EXT) \
  subproxy$(LOAD_EXT)

PMCS_FOO = \
  foo.pmc \
  foo2.pmc

OBJS_FOO = \
  foo$(O) \
  foo2$(O)

#IF(win32 and cc==gcc):LIB_ZLIB = -lz
#ELSIF(win32):LIB_ZLIB = zlib.lib
#ELSE:LIB_ZLIB = -lz

CLEANUPS = \
  "*.c" \
  "pmc_*.h" \
  "*_group.h" \
  "*.dump" \
#IF(o):  "*@o@" \
#IF(win32):  "*.lib" \
#IF(win32):  "*.pdb" \
#IF(win32):  "*.ilk" \
#IF(win32):  "*.exp" \
#IF(win32):  "*.def" \
#IF(win32):  "*.manifest" \
#IF(load_ext):  "*@load_ext@"


all : install

install : $(PMC_TARGETS)
#IF(cygwin or hpux):	$(CHMOD) 0775 *$(LOAD_EXT)
	$(CP) *$(LOAD_EXT) $(INSTALL_DIR)
#IF(cygwin or hpux):	$(CHMOD) 0775 $(INSTALL_DIR)/*$(LOAD_EXT)

Makefile: ../../config/gen/makefiles/dynpmc.in
	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::makefiles --target=src/dynpmc/Makefile

dynlexpad$(LOAD_EXT): dynlexpad$(O)
	$(LD) @ld_out@dynlexpad$(LOAD_EXT) dynlexpad$(O) $(LINKARGS)
#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;2

dynlexpad$(O): dynlexpad.c
	$(CC) -c @cc_o_out@dynlexpad$(O) $(INCLUDES) $(CFLAGS) dynlexpad.c

dynlexpad.c: dynlexpad.dump
	$(PMC2CC) dynlexpad.pmc

dynlexpad.dump: dynlexpad.pmc
	$(PMC2CD) dynlexpad.pmc

foo_group$(LOAD_EXT): $(OBJS_FOO) lib-foo_group$(O)
	$(LD) @ld_out@foo_group$(LOAD_EXT) lib-foo_group$(O) $(OBJS_FOO) $(LINKARGS)
#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;2

lib-foo_group$(O): foo_group.c
	$(CC) -c @cc_o_out@lib-foo_group$(O) $(INCLUDES) $(CFLAGS) foo_group.c

foo_group.c: $(OBJS_FOO)
	$(PMC2C) --library foo_group --c $(PMCS_FOO)

foo$(O): foo.c
	$(CC) -c @cc_o_out@foo$(O) $(INCLUDES) $(CFLAGS) foo.c

foo.c: foo.dump
	$(PMC2CC) foo.pmc

foo.dump: foo.pmc
	$(PMC2CD) foo.pmc

foo2$(O): foo.c foo2.c
	$(CC) -c @cc_o_out@foo2$(O) $(INCLUDES) $(CFLAGS) foo2.c

foo2.c: foo2.dump foo.pmc
	$(PMC2CC) foo2.pmc

foo2.dump: foo2.pmc foo.dump
	$(PMC2CD) foo2.pmc

pccmethod_test$(LOAD_EXT): pccmethod_test$(O)
	$(LD) @ld_out@pccmethod_test$(LOAD_EXT) pccmethod_test$(O) $(LINKARGS)
#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;2

pccmethod_test$(O): pccmethod_test.c
	$(CC) -c @cc_o_out@pccmethod_test$(O) $(INCLUDES) $(CFLAGS) pccmethod_test.c

pccmethod_test.c: pccmethod_test.dump
	$(PMC2CC) pccmethod_test.pmc

pccmethod_test.dump: pccmethod_test.pmc
	$(PMC2CD) pccmethod_test.pmc

rotest$(LOAD_EXT): rotest$(O)
	$(LD) @ld_out@rotest$(LOAD_EXT) rotest$(O) $(LINKARGS)
#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;2

rotest$(O): rotest.c
	$(CC) -c @cc_o_out@rotest$(O) $(INCLUDES) $(CFLAGS) rotest.c

rotest.c: rotest.dump
	$(PMC2CC) rotest.pmc

rotest.dump: rotest.pmc
	$(PMC2CD) rotest.pmc

rational$(LOAD_EXT): rational$(O)
	$(LD) @ld_out@rational$(LOAD_EXT) rational$(O) $(LINKARGS)
#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;2

rational$(O): rational.c
	$(CC) -c @cc_o_out@rational$(O) $(INCLUDES) $(CFLAGS) rational.c

rational.c: rational.dump
	$(PMC2CC) rational.pmc

rational.dump: rational.pmc
	$(PMC2CD) rational.pmc

subproxy$(LOAD_EXT): subproxy$(O)
	$(LD) @ld_out@subproxy$(LOAD_EXT) subproxy$(O) $(LINKARGS)
#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;2

subproxy$(O): subproxy.c
	$(CC) -c @cc_o_out@subproxy$(O) $(INCLUDES) $(CFLAGS) subproxy.c

subproxy.c: subproxy.dump
	$(PMC2CC) subproxy.pmc

subproxy.dump: subproxy.pmc
	$(PMC2CD) subproxy.pmc

gziphandle$(LOAD_EXT): gziphandle$(O)
	$(LD) @ld_out@gziphandle$(LOAD_EXT) gziphandle$(O) $(LINKARGS) $(LIB_ZLIB)
#IF(win32):	if exist $@.manifest mt.exe -nologo -manifest $@.manifest -outputresource:$@;2

gziphandle$(O): gziphandle.c
	$(CC) -c @cc_o_out@gziphandle$(O) $(INCLUDES) $(CFLAGS) gziphandle.c

gziphandle.c: gziphandle.dump
	$(PMC2CC) gziphandle.pmc

gziphandle.dump: gziphandle.pmc
	$(PMC2CD) gziphandle.pmc


test : all
	cd ../.. && $(PERL) -Ilib t/harness t/dynpmc/*.t

testclean :
	$(RM_F) "../../t/dynpmc/*.pir"

clean :
	$(RM_F) $(CLEANUPS)

realclean:
	$(RM_F) $(CLEANUPS) Makefile

distclean: realclean

# Local variables:
#   mode: makefile
# End:
# vim: ft=make:
