# $Id$

=head1 NAME

What's Broken in Parrot Right Now

=head1 PURPOSE

=head2 Missing Features

Ways to emulate these would be nice too.

=over 4

=item * Lexical Classes

=item * Anonymous Classes

=item * Submethods

=item * ParrotIO objects that work on strings

It should be possible to redirect input from and output to ParrotIO objects
that don't actually perform IO, instead working with memory.  Unfortunately, it
looks like there are no vtable methods for read and write operations.

See the C<setstdout> and C<setstderr> ops.

=back

=head2 Broken Features

=over 4

=item * Nested *Struct PMCs Share State

chromatic has a test case almost ready to show this.

=back

=head2 Miscellaneous

=over 4

=item * Generate accurate file/line number information in stack traces.  

=item * Give invokable PMCs a canonical way to store their associated HLL
source and argument information. languages/tcl/src/class/tclproc.pir shows
a way to do this using a parrotobject wrapper and attributes.

=item * Allow Runtime Compiler Registration

Leo suggests an eventual startup sequence of:

=over 4

=item * start main in F<src/parrot.c>

=item * determine source file type to compile/run

=item * handle execution over to xxx-compiler or to pbc-run.

=back

Currently F<src/parrot.c> does nothing and startup occurs in F<imcc/main.c>.

=back
