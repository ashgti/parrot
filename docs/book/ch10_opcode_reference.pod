=pod

=head1 Parrot Reference

Z<CHP-13>

This chapter contains a condensed list of PASM opcodes, PIR directives
and instructions, and Parrot command-line options, sorted alphabetically
for easy reference. Any PASM opcode is valid in PIR code, so if you're
looking up PIR syntax you should check A<CHP-10-SECT-1>"PASM Opcodes",
A<CHP-10-SECT-2>"PIR Directives", and A<CHP-10-SECT-3>"PIR
Instructions".

=head2 pasm opcodes

z<chp-13-sect-1>

x<pasm (parrot assembly language);opcodes, quick reference>
for complete details on each opcode and the latest changes, read the
documentation in f<docs/ops/>, or look at all the c<.ops> files in the
f<ops/> directory.

we've followed a few conventions. c<dest> is always the register where
the result of the operation is stored. sometimes the original value of
c<dest> is one of the source values. c<val> indicates that the actual
value might be a literal integer, float, or string, or a register
containing an integer, float, string, or pmc. see the f<.ops> files
for the combinations allowed with a particular operation.

=head3 abs

x<abs opcode (pasm)>

  abs r<dest>
  abs r<dest>, r<val>

return the absolute value of a number. if r<val> is left out, r<dest>
gets the absolute value of itself.

i<arguments: ir or nr or ir, i or ir, n or nr, i or nr, n>

=head3 acos

x<acos opcode (pasm)>

  acos r<dest>, r<val>

the arc cosine of r<val> in radians.

i<arguments: nr, n or nr, i>

=head3 add

x<add opcode (pasm)>

  add r<dest>, r<val>
  add r<dest>, r<val>, r<val>

add two values and return the sum. if only one r<val>, add r<val> to
r<dest>.

i<arguments: ir, i or nr, i or nr, n or p, i or p, n or p, p or ir, i, i
or nr, n, i or nr, n, n or p, p, i or p, p, n or p, p, p>

=head3 addattribute

x<addattribute opcode (pasm)>

  addattribute r<class>, r<attr>

add the attribute name r<attr> to class r<class>.

i<arguments: p, s>

=head3 addparent

x<addparent opcode (pasm)>

  addparent r<class1>, r<class2>

add class r<class2> to the list of parent classes for r<class1>.

i<arguments: p, p>

=head3 and

x<and opcode (pasm)>

  and r<dest>, r<val1>, r<val2>

logical and. return r<val1> if it's false; otherwise, return r<val2>.

i<arguments: ir, i, i or p, p, p>

=head3 asec

x<asec opcode (pasm)>

  asec r<dest>, r<val>

the arc secant of r<val> in radians.

i<arguments: nr, i or nr, n>

=head3 asin

x<asin opcode (pasm)>

  asin r<dest>, r<val>

the arc sine of r<val> in radians.

i<arguments: nr, i or nr, n>

=head3 assign

x<assign opcode (pasm)>

  assign r<dest>, r<val>

assign a value to a pmc.

i<arguments: sr, s or p, i or p, n or p, s or p, p>

=head3 atan

x<atan opcode (pasm)>

  atan r<dest>, r<val>
  atan r<dest>, r<val1>, r<val2>

the arc tangent of r<val1> / r<val2> in radians (sign significant). if
r<val2> is omitted, then just the arc tangent of r<val>.

i<arguments: nr, i or nr, n or nr, i, i or nr, i, n or nr, n, i or nr,
n, n>

=head3 band

x<band opcode (pasm)>

  band r<dest>, r<val>
  band r<dest>, r<val>, r<val>

bitwise and on two values. if only one r<val>, bitwise and on r<dest>
and r<val>.

i<arguments: ir, i or p, i or p, p or ir, i, i or p, p, i or p, p, p>

=head3 bands

x<bands opcode (pasm)>

  bands r<dest>, r<val>
  bands r<dest>, r<val>, r<val>

bitwise and on two strings. if only one r<val>, bitwise and on r<dest>
and r<val>.

i<arguments: sr, s or p, s or p, p or sr, s, s or p, p, s or p, p, p>

=head3 bnot

x<bnot opcode (pasm)>

  bnot r<dest>, r<val>

bitwise not on r<val>.

i<arguments: ir, i or p, p>

=head3 bnots

x<bnots opcode (pasm)>

  bnots r<dest>, r<val>

bitwise not on string r<val>.

i<arguments: sr, s or p, p>

=head3 bor

x<bor opcode (pasm)>

  bor r<dest>, r<val>, r<val>

bitwise or on two values. if only one r<val>, bitwise or on r<dest>
and r<val>.

i<arguments: ir, i or p, i or p, p or ir, i, i or p, p, i or p, p, p>

=head3 bors

x<bors opcode (pasm)>

  bors r<dest>, r<val>, r<val>

bitwise or on two strings. if only one r<val>, bitwise or on r<dest>
and r<val>.

i<arguments: sr, s or p, s or p, p or sr, s, s or p, p, s or p, p, p>

=head3 bounds

x<bounds opcode (pasm)>

  bounds r<int>

toggle bytecode bounds checking in the interpreter (0 for off, any other
value for on).

i<arguments: i>

=head3 branch

x<branch opcode (pasm)>

  branch r<label>

branch to a label. the label is calculated as a relative offset.

i<arguments: i>

=head3 branch_cs

x<branch_cs opcode (pasm)>

  branch_cs r<fixup_entry>

intersegment branch to the location of the given fixup table entry.

i<arguments: s>

=head3 bsr

x<bsr opcode (pasm)>

  bsr r<label>

branch to a label, like c<branch>, but also push the current location
onto the call stack so c<ret> can return to it.

i<arguments: i>

=head3 bxor

x<bxor opcode (pasm)>

  bxor r<dest>, r<val>
  bxor r<dest>, r<val>, r<val>

bitwise xor on two values. if only one r<val>, bitwise xor on r<dest>
and r<val>.

i<arguments: ir, i or p, i or p, p or ir, i, i or p, p, i or p, p, p>

=head3 bxors

x<bxors opcode (pasm)>

  bxors r<dest>, r<val>
  bxors r<dest>, r<val>, r<val>

bitwise xor on two strings. if only one r<val>, bitwise xor on r<dest>
and r<val>.

i<arguments: sr, s or p, s or p, p or sr, s, s or p, p, s or p, p, p>

=head3 callmethod

x<callmethod opcode (pasm)>

  callmethod
  callmethod r<methodname>

call the method named r<methodname> on the object stored in c<p2>
according to the parrot calling conventions. if no method name, pull the
name from c<s0>.

i<arguments: s>

=head3 callmethodcc

x<callmethodcc opcode (pasm)>

  callmethodcc
  callmethodcc r<methodname>

call the method named r<methodname> on the object stored in c<p2>
according to the parrot calling conventions. if no method name, pull the
name from c<s0>. also create a return continuation and store it in
c<p1>.

i<arguments: s>

=head3 can

x<can opcode (pasm)>

  can r<dest>, r<object>, r<methodname>

return a true value if r<object> i<can> do the r<methodname> method,
otherwise return a false value.

i<arguments: ir, p, s>

=head3 ceil

x<ceil opcode (pasm)>

  ceil r<dest>
  ceil r<dest>, r<val>

set r<dest> to the smallest integral value less than or equal to r<val>
(if present) or itself (if not).

i<arguments: nr or ir, n or nr, n>

=head3 checkevents

x<checkevents opcode (pasm)>

  checkevents

check the interpreter's task queue for unhandled events and run the associated
event handlers.

=head3 chopn

x<chopn opcode (pasm)>

  chopn r<dest>, r<val1>
  chopn r<dest>, r<val1>, r<val2>

remove r<val2> number of characters from string r<val1>. if no
r<val2>, remove r<val> number of characters from string r<dest>.

i<arguments: sr, i or sr, s, i>

=head3 chr

x<chr opcode (pasm)>

  chr r<dest>, r<int>

return the character represented by the given number.

i<arguments: sr, i>

=head3 class

x<class opcode (pasm)>

  class r<class>, r<object>

return the r<class> of the given r<object>.

i<arguments: p, p>

=head3 clear_eh

x<clear_eh>

  clear_eh

clear the most recent exception handler.

see also: c<set_eh>, c<throw>.

=head3 clearx

x<cleari opcode (pasm)>
x<clearn opcode (pasm)>
x<clearp opcode (pasm)>
x<clears opcode (pasm)>

  cleari
  clearn
  clearp
  clears

clear all registers of the given type ("i" = integer, "n" = float, "p"
= pmc, "s" = string). integer and float registers clear to zero; string
and pmc registers clear to null.

=head3 clone

x<clone opcode (pasm)>

  clone r<dest>, r<val>

clone (deep copy) a string or pmc and return the result.

i<arguments: sr, s or p, p>

=head3 close

x<close opcode (pasm)>

  close r<dest>

close the filehandle in the given register.

i<arguments: p>

=head3 cmod

x<cmod opcode (pasm)>

  cmod r<dest>, r<val1>, r<val2>

c's built-in mod operator.

see also c<mod>.

i<arguments: ir, i, i or nr, n, n or p, p, i or p, p, n or p, p, p>

=head3 cmp

x<cmp (comparison);opcode (pasm)>

  cmp r<dest>, r<val1>, r<val2>

set r<dest> to 1 if r<val1> is greater then r<val2>, to -1 if it's less then
r<val2> or to zero if both are equal. if r<val1> and r<val2> are both pmcs,
then the type of comparison depends on r<val1>.

i<arguments: ir, i, i or ir, n, n or ir, s, s or ir, p, i or ir, p, n
ir, p, s or ir, p, p>

=head3 cmp_num

x<cmp_num opcode (pasm)>

  cmp_num r<dest>, r<val1>, r<val2>

like c<cmp>, but forces numeric comparison.

i<arguments: ir, p, p>

=head3 cmp_str

x<cmp_str opcode (pasm)>

  cmp_str r<dest>, r<val1>, r<val2>

like c<cmp>, but forces string comparison.

i<arguments: ir, p, p>

=head3 collect

x<collect opcode (pasm)>

  collect

trigger a garbage collection (gc) run.

=head3 collectoff

x<collectoff opcode (pasm)>

  collectoff

disable garbage collection runs (nestable).

=head3 collecton

x<collecton opcode (pasm)>

  collecton

re-enable garbage collection runs.

=head3 compile

x<compile opcode (pasm)>

  compile r<dest>, r<compiler>, r<source>

compile a string of source code with a given compiler pmc and store
the result.

i<arguments: p, p, s>

=head3 compreg

x<compreg opcode (pasm)>

  compreg r<dest>, r<type>

return a compiler pmc for a particular type of source code.

i<arguments: p, s>

  compreg r<type>, r<sub>

register r<sub> as a compiler for language r<type>.

i<arguments: s, p>

=head3 concat

x<concat opcode (pasm)>

  concat r<dest>, r<val>
  concat r<dest>, r<val>, r<val>

concatenate two strings. if only one r<val>, concatenate r<val> onto
r<dest>.

i<arguments: sr, s or sr, s, s or p, p, s or p, p, p>

=head3 cos

x<cos opcode (pasm)>

  cos r<dest>, r<val>

the cosine of r<val> in radians.

i<arguments: nr, i or nr, n>

=head3 cosh

x<cosh opcode (pasm)>

  cosh r<dest>, r<val>

the hyperbolic cosine of r<val> in radians.

i<arguments: nr, i or nr, n>

=head3 debug

x<debug opcode (pasm)>

  debug r<flag>

toggle debugging in the interpreter (0 for off, any other value for on).

i<arguments: i>

=head3 dec

x<dec opcode (pasm)>

  dec r<dest>

decrement a value by 1.

i<arguments: i or n or p>

=head3 decodelocaltime

x<decodelocaltime opcode (pasm)>

  decodelocaltime r<dest>, r<val>

set r<dest> to a new array which represents the decoded time of the
given epoch-seconds value shifted to local time.

i<arguments: p, i>

=head3 decodetime

x<decodetime opcode (pasm)>

  decodetime r<dest>, r<val>

set r<dest> to a new array which represents the decoded time of the
given epoch-seconds value.

i<arguments: p, i>

=head3 defined

x<defined opcode (pasm)>

  defined r<dest>, r<pmc>
  defined r<dest>, r<pmc>[r<key>]

test a keyed pmc value for definedness. if no r<key>, test a pmc for
definedness.

i<arguments: ir, p>

=head3 delete

x<delete opcode (pasm)>

  delete r<dest>[r<key>]

delete a keyed value from an aggregate pmc.

i<arguments: p>

=head3 delprop

x<delprop opcode (pasm)>

  delprop r<pmc>, r<name>

delete a named property from a pmc.

i<arguments: p, s>

see also: c<setprop> and c<getprop>.

=head3 deref

x<deref opcode (pasm)>

  deref r<dest>, r<ref>

set r<dest> to the pmc that r<ref> refers to.

i<arguments: p, p>

=head3 die_hard

x<die_hard opcode (pasm)>

  die_hard r<level>, r<error>

die at a given level of severity, and with the given error code.

i<arguments: i, i>

see also: c<exit>.

=head3 div

x<div opcode (pasm)>

  div r<dest>, r<val>
  div r<dest>, r<val1>, r<val2>

divide r<val1> by r<val2>. if r<val2> is left out, divide r<dest> by
r<val>.

i<arguments: ir, i or nr, i or nr, n or p, i or p, n or p, p or ir, i, i
or nr, n, i or nr, n, n or p, p, i or p, p, n or p, p, p>

=head3 dlfunc

x<dlfunc opcode (pasm)>

  dlfunc r<dest>, r<library>, r<symbol>, r<signature>

look up a symbol in a dynamic link library pmc and create a subroutine
pmc for that symbol with the given signature.

i<arguments: p, p, s, s>

=head3 dlvar

x<dlvar opcode (pasm)>

  dlvar r<dest>, r<library>, r<symbol>

look up a symbol in a dynamic link library pmc and create a
pmc for that symbol.

i<arguments: p, p, s>

=head3 does

x<does opcode (pasm)>

  does r<dest>, r<object>, r<val>

return a true value if r<object> i<does> provide the interface r<val>,
otherwise return a false value.

i<arguments: i, p, s>

=head3 downcase

x<downcase opcode (pasm)>

  downcase r<dest>
  downcase r<dest>, r<val>

create a copy of the string in r<val> with all characters converted to
lower case, and store it in r<dest>. if r<val> is omitted, convert and
replace the string in r<dest>.

i<arguments: s or s, s>

see also: c<upcase>, c<titlecase>.

=head3 end

x<end opcode (pasm)>

  end

end execution within the current code segment or halt the interpreter
if in the main code segment.

=head3 enternative

x<enternative opcode (pasm)>

  enternative

run the c<run_native> c function.

=head3 eq

x<eq opcode (pasm)>

  eq r<val>, r<val>, r<label>

jump to a label if the two values are equal.

i<arguments: i, i, ic or n, n, ic or s, s, ic or p, i, ic or p, n, ic
or p, s, ic or p, p, ic>

=head3 eq_addr

x<eq_addr opcode (pasm)>

  eq_addr r<val1>, r<val2>, r<label>

jump to a label if r<val1> and r<val2> point to the same string or pmc.
note that this op compares the addresses of the two strings or pmcs,
not simply their values.

i<arguments: s, s, ic or p, p, ic>

=head3 eq_num

x<eq_num opcode (pasm)>

  eq_num r<val>, r<val>, r<label>

jump to a label if the two values are numerically equal.

i<arguments: p, p, ic>

=head3 eq_str

x<eq_str opcode (pasm)>

  eq_str r<val>, r<val>, r<label>

jump to a label if the two strings are equal.

i<arguments: p, p, ic>

=head3 err

x<err opcode (pasm)>

  err r<dest>
  err r<dest>, r<code>

return the system error code to an integer destination or the system
error message to a string destination. the two-argument version returns
the system error message for a given code.

i<arguments: ir or sr or sr, i>

=head3 errorsoff

x<errorsoff opcode (pasm)>

  errorsoff r<val>

turn off errors of type r<val>.

i<arguments: i>

=head3 errorson

x<errorson opcode (pasm)>

  errorson r<val>

turn on errors of type r<val>.

i<arguments: i>

=head3 exchange

x<exchange opcode (pasm)>

  exchange r<reg>, r<reg>

exchange the contents of two registers.

i<arguments: ir, ir or nr, nr or sr, sr or p, p>

=head3 exists

x<exists opcode (pasm)>

  exists r<dest>, r<pmc>[r<key>]

test a pmc key for existence.

i<arguments: ir, p>

=head3 exit

x<exit opcode (pasm)>

  exit r<status>

exit the interpreter with a given r<status>. (for extended exit status,
throw an exception with severity c<except_exit>.)

i<arguments: i>

see also: c<throw>, c<die_hard>.

=head3 exp

x<exp opcode (pasm)>

  exp r<dest>, r<val>

base of the natural logarithm, i<e>, to the power of r<val>.

i<arguments: nr, i or nr, n>

=head3 exsec

x<exsec opcode (pasm)>

  exsec r<dest>, r<val>

the exsecant of r<val> in radians.

i<arguments: nr, n>

=head3 fact

x<fact opcode (pasm)>

  fact r<dest>, r<int>

return the factorial of r<int>.

i<arguments: ir, i or nr, i>

=head3 fdopen

x<fdopen opcode (pasm)>

  fdopen r<dest>, r<int>, r<mode>

get a parrotio object for handle r<int> with open mode r<mode>.

i<arguments: p, i, s>

=head3 find_chartype

x<find_chartype opcode (pasm)>

  find_chartype r<dest>, r<name>

find the chartype named r<name> and return its number in r<dest>.

i<arguments: ir, s>

=head3 find_encoding

x<strings;encoding>
x<find_encoding opcode (pasm)>

  find_encoding r<dest>, r<name>

find the encoding named r<name> and return its number in r<dest>.

i<arguments: ir, s>

=head3 find_global

x<find_global opcode (pasm)>

  find_global r<dest>, r<name>

return a global variable with the given name.

i<arguments: p, s>

  find_global r<dest>, r<namespace>, r<name>

return a global variable with the given name from the given namespace.

i<arguments: p, s, s or p, p, s>

see also: c<store_global>.

=head3 find_lex

x<find_lex opcode (pasm)>

  find_lex r<dest>, r<name>
  find_lex r<dest>, r<depth>, r<name>
  find_lex r<dest>, r<depth>, r<position>

return the lexical variable of the given name from a lexical
scratchpad. if r<depth> is provided, only return a variable from the
scratchpad at that depth. a find by position returns the variable at a
particular position in the scratchpad.

i<arguments: p, s or p, i, s or p, i, i>

see also: c<store_lex>.

=head3 find_method

x<find_method opcode (pasm)>

  find_method r<dest>, r<pmc>, r<name>

look up a method by name in a pmc's vtable. return a method pmc.

i<arguments: p, p, s>

=head3 find_type

x<find_type opcode (pasm)>

  find_type r<dest>, r<name>

find the integer identifier for a pmc type or native parrot datatype by name.

i<arguments: ir, s>

see also: c<typeof>.

=head3 findclass

x<findclass opcode (pasm)>

  findclass r<dest>, r<name>

return 1 if the class r<name> exists, and 0 otherwise.

i<arguments: ir, s>

see also: c<typeof>.

=head3 floor

x<floor opcode (pasm)>

  floor r<dest>
  floor r<dest>, r<val>

return the largest integral value less than or equal to r<val> (if
present) or itself (if not).

i<arguments: nr or ir, n or nr, n>

=head3 foldup

x<foldup opcode (pasm)>

  foldup r<dest>
  foldup r<dest>, r<skip>

return a new array holding all passed subroutine parameters. r<skip>
defines an optional offset.

i<arguments: p or p, i>

=head3 freeze

x<freeze opcode (pasm)>

  freeze r<dest>, r<val>

create a frozen image r<dest> from pmc r<val>.

i<arguments: sr, p>

see also: c<thaw>.

=head3 gc_debug

x<gc_debug opcode (pasm)>

  gc_debug r<int>

toggle garbage collection debugging in the interpreter (0 for off, any
other value for on).

i<arguments: i>

=head3 gcd

x<gcd opcode (pasm)>

  gcd r<dest>, r<val>, r<val>

return the greatest common divisor of two values.

i<arguments: ir, i, i or ir, n, n>

=head3 ge

x<ge (greater than or equal);opcode (pasm)>

  ge r<val1>, r<val2>, r<label>

jump to a label if r<val1> is greater than or equal to r<val2>.

i<arguments: i, i, ic or n, n, ic or s, s, ic or p, i, ic or p, n, ic
or p, s, ic or p, p, ic>

=head3 ge_num

x<ge_num opcode (pasm)>

  ge_num r<val1>, r<val2>, r<label>

jump to a label if r<val1> is numerically greater than or equal to r<val2>.

i<arguments: p, p, ic>

=head3 ge_str

x<ge_str opcode (pasm)>

  ge_str r<val1>, r<val2>, r<label>

jump to a label if r<val1> is stringwise greater than or equal to r<val2>.

i<arguments: p, p, ic>

=head3 get_addr

x<get_addr opcode (pasm)>

  get_addr r<dest>, r<sub>

get the absolute address of a subroutine pmc.

i<arguments: ir, p>

see also: c<set_addr>.

=head3 getattribute

x<getattribute opcode (pasm)>

  getattribute r<dest>, r<object>, r<offs>

get a reference to attribute number r<offs> from object r<object>.

i<arguments: p, p, i>

see also: c<setattribute>, c<classoffset>.

=head3 get_class

x<get_class opcode (pasm)>

  get_class r<dest>, r<name>

return the class pmc of the given name.

i<arguments: p, s>

=head3 getfile

x<getfile opcode (pasm)>

  getfile r<dest>

return the name of the current file.

i<arguments: sr>

=head3 getinterp

x<getinterp opcode (pasm)>

  getinterp r<dest>

get a pmc representing the current interpreter.

i<arguments: p>

=head3 getline

x<getline opcode (pasm)>

  getline r<dest>

return the current line number.

i<arguments: ir>

=head3 getpackage

x<getpackage opcode (pasm)>

  getpackage r<dest>

return the current package name.

i<arguments: sr>

=head3 getprop

x<getprop opcode (pasm)>

  getprop r<dest>, r<name>, r<pmc>

return the value of a named property on a pmc.

i<arguments: p, s, p>

see also: c<setprop> and c<prophash>.

=head3 getstd*

x<getstderr opcode (pasm)>
x<getstdin opcode (pasm)>
x<getstdout opcode (pasm)>

  getstderr r<dest>
  getstdin r<dest>
  getstdout r<dest>

get a parrotio object for the given standard handle.

i<arguments: p>

=head3 gmtime

x<gmtime opcode (pasm)>

  gmtime r<dest>, r<val>

take the integer, which represents gmt epoch-seconds, and turn it into a
formatted string.

i<arguments: sr, i>

see also: c<localtime>.

=head3 gt

x<gt opcode (pasm)>

  gt r<val1>, r<val2>, r<label>

jump to a label if r<val1> is greater than r<val2>.

i<arguments: i, i, ic or n, n, ic or s, s, ic or p, i, ic or p, n, ic or
p, s, ic or p, p, ic>

=head3 gt_num

x<gt_num opcode (pasm)>

  gt_num r<val1>, r<val2>, r<label>

jump to a label if r<val1> is numerically greater than r<val2>.

i<arguments: p, p, ic>

=head3 gt_str

x<gt_str opcode (pasm)>

  gt_str r<val1>, r<val2>, r<label>

jump to a label if r<val1> is stringwise greater than r<val2>.

i<arguments: p, p, ic>

=head3 hav

x<hav opcode (pasm)>

  hav r<dest>, r<val>

the haversine of r<val> in radians.

i<arguments: nr, n>

=head3 if

x<if (conditional);opcode (pasm)>

  if r<condition>, r<label>

jump to a label if the condition is a true value.

i<arguments: i, ic or n, ic or s, ic or p, ic>

=head3 inc

x<inc opcode (pasm)>

  inc r<dest>

increment a value by one.

i<arguments: ir or nr or p>

=head3 index

x<index opcode (pasm)>

  index r<dest>, r<string>, r<search>
  index r<dest>, r<string>, r<search>, r<pos>

return the position of the first occurrence of the string r<search> in
the string r<string>, starting at the position r<pos>. if the starting
position is unspecified, start at the beginning of the string.

i<arguments: ir, s, s or ir, s, s, i>

=head3 interpinfo

x<interpinfo opcode (pasm)>

  interpinfo r<dest>, r<flag>

return information about the interpreter. an integer flag selects
which information to return, as listed in
a<chp-13-table-1>table 13-1.

=begin table picture interpinfo flags

z<chp-13-table-1>

=headrow

=row

=cell flag

=cell returns

=bodyrows

=row

=cell c<1>

=cell allocated memory, in bytes.

=row

=cell c<2>

=cell number of gc mark runs performed.

=row

=cell c<3>

=cell number of gc runs performed.

=row

=cell c<4>

=cell number of active pmcs.

=row

=cell c<5>

=cell number of active buffers.

=row

=cell c<6>

=cell number of allocated pmcs.

=row

=cell c<7>

=cell number of allocated buffers.

=row

=cell c<8>

=cell number of new pmc or buffer headers allocated since last mark run.

=row

=cell c<9>

=cell number of memory blocks allocated since last gc run.

=row

=cell c<10>

=cell amount of memory copied during gc runs, in bytes.

=end table

i<arguments: ir, i>

=head3 invoke

x<invoke opcode (pasm)>

  invoke
  invoke r<sub>

call a subroutine, coroutine, or continuation stored in a pmc. if no
pmc register is specified, it calls the subroutine in c<p0> and uses
the standard calling conventions.  otherwise, no calling convention is
defined. also c<yield> from a coroutine.

i<arguments: p>

=head3 invokecc

x<invokecc opcode (pasm)>

  invokecc
  invokecc r<sub>

call a subroutine like c<invoke>, but also generate a return
continuation in c<p1>.

i<arguments: p>

see also: c<updatecc>.

=head3 isa

x<isa opcode (pasm)>

  isa r<dest>, r<object>, r<class>

return a true value if r<object> i<isa> member of class r<class>, or of
one of its subclasses, otherwise return a false value.

i<arguments: ir, p, s>

=head3 isnull

x<isnull opcode (pasm)>

  isnull r<val>, r<label>

jump to r<label> if the given pmc is a null pmc.

i<arguments: p, ic>

=head3 join

x<join opcode (pasm)>

  join r<dest>, r<delim>, r<array>

create a new string by joining all elements from array with the given
delimiter.

i<arguments: sr, s, p>

=head3 jsr

x<jsr opcode (pasm)>

  jsr r<address>

jump to an address, like c<jump>, but also push the current location
onto the call stack so c<ret> can return to it.

i<arguments: i>

=head3 jump

x<jump opcode (pasm)>

  jump r<address>

jump to a specified absolute address.

i<arguments: i>

see also: c<set_addr>.

=head3 lcm

x<lcm opcode (pasm)>

  lcm r<dest>, r<val>, r<val>

return the least common multiple of two values.

i<arguments: ir, i, i or nr, i, i>

=head3 le

x<le (less than or equal);opcode (pasm)>

  le r<val1>, r<val2>, r<label>

jump to a label if r<val1> is less than or equal to r<val2>.

i<arguments: i, i, ic or n, n, ic or s, s, ic or p, i, ic or p, n, ic or
p, s, ic or p, p, ic>

=head3 le_num

x<le_num opcode (pasm)>

  le_num r<val1>, r<val2>, r<label>

jump to a label if r<val1> is numerically less than or equal to r<val2>.

i<arguments: p, p, ic>

=head3 le_str

x<le_str opcode (pasm)>

  le_str r<val1>, r<val2>, r<label>

jump to a label if r<val1> is stringwise less than or equal to r<val2>.

i<arguments: p, p, ic>

=head3 length

x<length opcode (pasm)>

  length r<dest>, r<string>

return the character length of a string.

i<arguments: ir, s>

=head3 ln

x<ln opcode (pasm)>

  ln r<dest>, r<val>

the natural logarithm of r<val>.

i<arguments: nr, i or nr, n>

=head3 load_bytecode

x<load_bytecode>

  load_bytecode r<file>

load parrot bytecode from a file.

i<arguments: s>

=head3 loadlib

x<loadlib opcode (pasm)>

  loadlib r<dest>, r<library>

load a dynamic link library by name and store it in a pmc.

i<arguments: p, s>

see also: c<dlfunc>.

=head3 localtime

x<localtime opcode (pasm)>

  localtime r<dest>, r<val>

take the integer, which represents gmt epoch-seconds, and turn it into a
formatted string after adjusting to localtime.

i<arguments: sr, i>

see also: c<gmtime>.

=head3 log10

x<log10 opcode (pasm)>

  log10 r<dest>, r<val>

the base 10 logarithm of r<val>.

i<arguments: nr, i or nr, n>

=head3 log2

x<log2 opcode (pasm)>

  log2 r<dest>, r<val>

the base 2 logarithm of r<val>.

i<arguments: nr, i or nr, n>

=head3 lsr

x<lsr opcode (pasm)>

  lsr r<dest>, r<bits>
  lsr r<dest>, r<val>, r<bits>

logically shift a value right by a given number of bits.

i<arguments: ir, i or ir, i, i>

=head3 lt

x<lt (less than);opcode (pasm)>

  lt r<val1>, r<val2>, r<label>

jump to a label if r<val1> is less than r<val2>.

i<arguments: i, i, ic or n, n, ic or s, s, ic or p, i, ic or p, n, ic or
p, s, ic or p, p, ic>

=head3 lt_num

x<lt_num opcode (pasm)>

  lt_num r<val1>, r<val2>, r<label>

jump to a label if r<val1> is numerically less than r<val2>.

i<arguments: p, p, ic>

=head3 lt_str

x<lt_str opcode (pasm)>

  lt_str r<val1>, r<val2>, r<label>

jump to a label if r<val1> is stringwise less than r<val2>.

i<arguments: p, p, ic>

=head3 mod

x<mod opcode (pasm)>

  mod r<dest>, r<val>
  mod r<dest>, r<val1>, r<val2>

divide r<val1> by r<val2> and return the remainder. if r<val2> is omitted,
divide r<dest> by r<val>.  the operation is defined as:

  x mod y = x - y * floor(x / y)

i<arguments: p, i or ir, i, i or nr, n, n or p, p, i or p, p, n>

see also: c<cmod>.

=head3 mul

x<mul opcode (pasm)>

  mul r<dest>, r<val>
  mul r<dest>, r<val>, r<val>

multiply two values and return the result. if only one r<val>,
multiply r<dest> by r<val>.

i<arguments: ir, i or nr, i or nr, n or p, i or p, n or p, p or ir, i,
i or nr, n, i or nr, n, n or p, p, i or p, p, n or p, p, p>

=head3 ne

x<ne (not equal);opcode (pasm)>

  ne r<val>, r<val>, r<label>

jump to a label if the two values are not equal.

i<arguments: i, i, ic or n, n, ic or s, s, ic or p, i, ic or p, n, ic or
p, s, ic or p, p, ic>

=head3 ne_addr

x<ne_addr opcode (pasm)>

  ne_addr r<val>, r<val>, r<label>

jump to a label if r<val1> and r<val2> do not point to the same string
or pmc.

i<arguments: s, s, ic or p, p, ic>

=head3 ne_num

x<ne_num opcode (pasm)>

  ne_num r<val>, r<val>, r<label>

jump to a label if the two values are numerically different.

i<arguments: p, p, ic>

=head3 ne_str

x<ne_str opcode (pasm)>

  ne_str r<val>, r<val>, r<label>

jump to a label if the two strings are not equal.

i<arguments: p, p, ic>

=head3 needs_destroy

x<needs_destroy opcode (pasm)>

  needs_destroy r<pmc>

mark the pmc as requiring timely destruction.

i<arguments: p>

see also: c<sweep>.

=head3 neg

x<neg opcode (pasm)>

  neg r<dest>
  neg r<dest>, r<val>

return the negative of a number. if there is no r<val>, r<dest> is the
negative of itself.

i<arguments: ir or nr or p or ir, i or nr, n or p, p>

=head3 new

x<new opcode (pasm)>

  new r<dest>, r<type>
  new r<dest>, r<type>, r<initialize>
  new r<dest>, r<type>, r<initialize>, r<props>

create a new pmc of type r<type>. r<initialize> is an array pmc
containing initialization data for the new pmc. r<props> is a property hash.

i<arguments: p, i or p, i, p or p, i, p, p>

  new r<dest>
  new r<dest>, r<length>
  new r<dest>, r<length>, r<encoding>
  new r<dest>, r<length>, r<encoding>, r<type>

allocate a new empty string with a given r<length>, r<encoding>, and
r<type>.

i<arguments: sr or sr, i or sr, i, i or sr, i, i, i>

=head3 new_callback

x<new_callback opcode (pasm)>

  new_callback r<dest>, r<sub>, r<data>, r<sig>

create a callback stub r<dest> for a pasm subroutine r<sub> with user
data r<data> and function signature r<sig>.

i<arguments: p, p, p, s>

=head3 new_pad

x<new_pad opcode (pasm)>

  new_pad r<depth>
  new_pad r<dest>, r<depth>

create a new lexical scratchpad. if a destination pmc is provided,
store the pad in the pmc, otherwise push it onto the pad stack.
r<depth> specifies the static nesting depth for the pad (lower static
depths are copied from the current static nesting).

i<arguments: i or p, i>

=head3 newclass

x<newclass opcode (pasm)>

  newclass r<dest>, r<name>

create a new class with the given name.

i<arguments: p, s>

=head3 newsub

x<newsub opcode (pasm)>

  newsub r<dest>, r<class>, r<label>

generate a new subroutine object of the given r<class>, located at the
given r<label>, and store the object in the destination pmc.

i<arguments: p, i, ic>

  newsub r<class>, r<retclass>, r<label>, r<retaddr>

generate a new subroutine object of the given r<class>, located at the
given r<label>, and store the object in c<p0>. also generate a return
continuation of class r<retclass> with the return address r<retaddr> and
store it in c<p1>.

i<arguments: i, i, ic, ic>

=head3 noop

x<noop opcode (pasm)>

  noop

do nothing.

=head3 not

x<not opcode (pasm)>

  not r<dest>, r<val>

logical not. true if r<val> is false.

i<arguments: ir, i or p, p>

=head3 null

x<null opcode (pasm)>

  null r<dest>

set r<dest> (which must be a register) to 0, 0.0 or a null pointer,
depending on its type.

i<arguments: ir or nr or sr or p>

=head3 open

x<open opcode (pasm)>

  open r<dest>, r<filename>
  open r<dest>, r<filename>, r<mode>

open a file in the specified mode ("r", "w", etc.) and return
a filehandle. without the mode it defaults to read/write.

i<arguments: p, s, s or p, s>

=head3 or

x<or opcode (pasm)>

  or r<dest>, r<val1>, r<val2>

logical or. return r<val1> if it's true; otherwise, return r<val2>.

i<arguments: ir, i, i or p, p, p>

=head3 ord

x<ord opcode (pasm)>

  ord r<dest>, r<string>
  ord r<dest>, r<string>, r<pos>

return the character at position r<pos> in r<string>. if r<pos> isn't
specified, return the 0th character.

i<arguments: ir, s or ir, s, i>

=head3 peek

x<peek opcode (pasm)>

  peek r<dest>
  peek r<dest>, r<pio>

read the next byte from the given parrotio object or from c<stdin> but
don't remove it.

i<arguments: sr or sr, p>

=head3 peek_pad

x<peek_pad opcode (pasm)>

  peek_pad r<dest>

store the current lexical scope pad in a pmc.

i<arguments: p>

=head3 pin

x<pin opcode (pasm)>

  pin r<dest>

make the string in r<dest> immobile. this prevents the garbage collector
from moving it to a different location in memory (which it otherwise may
choose to do).

i<arguments: sr>

see also: c<unpin>.

=head3 pop

x<pop opcode (pasm)>

  pop r<dest>, r<pmc>

pop the last entry off an aggregate pmc and return it.

i<arguments: ir, p or nr, p or sr, p or p, p>

=head3 pop_pad

x<pop_pad opcode (pasm)>

  pop_pad

pop the current lexical scope pad off the lexical scope stack.

see also: c<peek_pad>.

=head3 popx

x<popi opcode (pasm)>
x<popn opcode (pasm)>
x<popp opcode (pasm)>
x<pops opcode (pasm)>

  popi
  popn
  popp
  pops

restore all the registers of one type from the stack ("i" = integer,
"n" = float, "p" = pmc, "s" = string).

  popbottomi
  popbottomn
  popbottomp
  popbottoms

restore registers in the range 0..15.

  poptopi
  poptopn
  poptopp
  poptops

restore registers in the range 16..31.

see also: c<push>r<x>.

=head3 pow

x<pow opcode (pasm)>

  pow r<dest>, r<val1>, r<val2>

return r<val1> raised to the power of r<val2>.

i<arguments: nr, i, i or nr, i, n or nr, n, i or nr, n, n>

=head3 print

x<print opcode (pasm)>

  print r<val>
  print r<io>, r<val>

print a value to an i/o object or file descriptor. if no r<io> is
given, print the value to standard output.

i<arguments: i or n or s or p or p, i or p, n or p, s or p, p>

=head3 printerr

x<printerr opcode (pasm)>

  printerr r<val>

print a value to c<stderr>.

i<arguments: i or n or s or p>

=head3 profile

x<profile opcode (pasm)>

  profile r<int>

toggle profiling in the interpreter (0 for off, any other value for on).

i<arguments: i>

=head3 prophash

x<prophash opcode (pasm)>

  prophash r<dest>, r<pmc>

return a hash containing all the properties from a pmc.

i<arguments: p, p>

see also: c<getprop>.

=head3 push

x<push opcode (pasm)>

  push r<pmc>, r<val>

push a value onto the end of an aggregate pmc.

i<arguments: p, i or p, n or p, s or p, p>

=head3 push_pad

x<push_pad opcode (pasm)>

  push_pad r<pad>

push a scratchpad stored in a pmc onto the lexical scope stack.

i<arguments: p>

=head3 pushx

x<pushi opcode (pasm)>
x<pushn opcode (pasm)>
x<pushp opcode (pasm)>
x<pushs opcode (pasm)>

  pushi
  pushn
  pushp
  pushs

save all the registers of one type to the stack ("i" = integer, "n" =
float, "p" = pmc, "s" = string). restore with c<pop>r<x>.

  pushbottomi
  pushbottomn
  pushbottomp
  pushbottoms

push registers 0..15.

  pushtopi
  pushtopn
  pushtopp
  pushtops

push registers 16..31.

=head3 read

x<read opcode (pasm)>

  read r<dest>, r<bytes>
  read r<dest>, r<io>, r<bytes>

read the specified number of bytes from a parrot i/o object. read from
c<stdin> if no r<io> is provided.

i<arguments: sr, i or sr, p, i>

=head3 readline

x<readline opcode (pasm)>

  readline r<dest>, r<io>

read a line from a parrot i/o object.

i<arguments: sr, p>

=head3 register

x<register opcode (pasm)>

  register r<pmc>

register the given pmc in the interpreter's root set, so that it's
visible during the mark phase.

i<arguments: p>

see also: c<unregister>.

=head3 removeparent

x<removeparent opcode (pasm)>

  removeparent r<class1>, r<class2>

remove r<class2> from class c<class1>'s list of parents.

i<arguments: p, p>

=head3 repeat

x<repeat opcode (pasm)>

  repeat r<dest>, r<val>, r<repeat>

repeat a string r<repeat> number of times.

i<arguments: sr, s, i or p, p, i or p, p, p>

=head3 restoretop

x<restoretop opcode (pasm)>

  restoretop

restore registers 16..31. does a c<pop>r<x> for every type.

see also: c<savetop>.

=head3 ret

x<ret opcode (pasm)>

  ret

pop a location off the top of the call stack, and go there.
often used with c<bsr> and c<jsr>.

=head3 rethrow

x<rethrow opcode (pasm)>

  rethrow r<exception>

rethrow an exception. only valid inside an exception handler.

i<arguments: p>

see also: c<throw>

=head3 runinterp

x<runinterp opcode (pasm)>

  runinterp r<interpreter>, r<offset>

use an interpreter stored in pmc to run code starting at a given
offset.

i<arguments: p, i>

see also: c<newinterp>.

=head3 say

x<say opcode (pasm)>

  say r<val>

print a value to c<stdout> with a trailing newline.

i<arguments: i or n or s or p>

=head3 sec

x<sec opcode (pasm)>

  sec r<dest>, r<val>

the secant of r<val> in radians.

i<arguments: nr, i or nr, n>

=head3 sech

x<sech opcode (pasm)>

  sech r<dest>, r<val>

the hyperbolic secant of r<val> in radians.

i<arguments: nr, i or nr, n>

=head3 seek

x<seek opcode (pasm)>

  seek r<dest>, r<io>, r<offset>, r<startflag>
  seek r<dest>, r<io>, r<upper32>, r<lower32>, r<startflag>

set the file position of a parrot i/o object to a given offset from a
starting position (startflag: 0 is the beginning of the file, 1 is
current the position, 2 is the end of the file).  r<dest> is the
success or failure of the seek.

64-bit c<seek> combines r<upper32> and r<lower32> to get one 64-bit
r<offset>.

i<arguments: p, i, i or p, i, i, i>

=head3 set

x<set opcode (pasm)>

  set r<dest>, r<val>

set a register to a value.

i<arguments: ir, i or ir, n or ir, s or ir, p or nr, i or nr, n or nr,
s or nr, p or sr, i or sr, n or sr, s or sr, p or p, i or p, n or p, s
or p, p>

  set r<dest[key]>, r<val>

a keyed set operation on a pmc.

i<arguments: p, i or p, n or p, s or p, p>

  set r<dest>, r<pmc[key]>

a keyed get operation on a pmc.

i<arguments: i, p or n, p or s, p or p, p>

=head3 setx_ind

x<seti_ind opcode (pasm)>
x<setn_ind opcode (pasm)>
x<sets_ind opcode (pasm)>
x<setp_ind opcode (pasm)>

  seti_ind r<reg>, r<val>
  setn_ind r<reg>, r<val>
  sets_ind r<reg>, r<val>
  setp_ind r<reg>, r<val>

set register number r<reg> of the specified type to r<val>. bypasses
the register allocator, so use with care.

i<arguments: i, i or i, s or i, n or i, p>

=head3 set_addr

x<set_addr opcode (pasm)>

  set_addr r<dest>, r<label>

return the current address plus the offset to r<label>. often used to
calculate absolute addresses for c<jump> or c<jsr>.

i<arguments: ir, ic>

  set_addr r<sub>, r<label>

set the subroutine address pointing to the given label.

i<arguments: p, i>

=head3 set_chartype

x<set_chartype opcode (pasm)>

  set_chartype r<string>, r<chartype>

set the chartype of a string.

i<arguments: s, i>

=head3 set_eh

x<set_eh opcode (pasm)>

  set_eh r<handler>

push an exception handler on the control stack.

i<arguments: p>

see also: c<clear_eh>, c<throw>.

=head3 set_encoding

x<set_encoding opcode (pasm)>
x<strings;encoding>

  set_encoding r<string>, r<encoding>

set the encoding of a string.

i<arguments: s, i>

=head3 setattribute

x<setattribute opcode (pasm)>

  setattribute r<object>, r<offset>, r<attribute>

set the given attribute at r<offset> for object r<object>.

i<arguments: p, i, p>

see also: c<getattribute>, c<classoffset>.

=head3 setprop

x<setprop opcode (pasm)>

  setprop r<pmc>, r<name>, r<value>

set the value of a named property on a pmc.

i<arguments: p, s, p>

see also: c<getprop> and c<delprop>.

=head3 setstd*

x<setstderr opcode (pasm)>
x<setstdout opcode (pasm)>

  setstderr r<dest>
  setstdout r<dest>

set a parrotio object for the given standard handle.

i<arguments: p>

=head3 shift

x<shift opcode (pasm)>

  shift r<dest>, r<pmc>

shift a value off the front of an aggregate pmc.

i<arguments: ir, p or nr, p or sr, p or p, p>

=head3 shl

x<shl opcode (pasm)>

  shl r<dest>, r<val>, r<bits>

bitwise shift a value left by a given number of bits.

i<arguments: ir, i or p, i or p, p or ir, i, i or p, p, i or p, p, p>

=head3 shr

x<shr opcode (pasm)>

  shr r<dest>, r<val>, r<bits>

bitwise shift a value right by a given number of bits.

i<arguments: ir, i or p, i or p, p or ir, i, i or p, p, i or p, p, p>

=head3 sin

x<sin opcode (pasm)>

  sin r<dest>, r<val>

the sine of r<val> in radians.

i<arguments: nr, i or nr, n>

=head3 singleton

x<singleton opcode (pasm)>

  singleton r<dest>

take the given object and put it into its own singleton class.

i<arguments: p>

=head3 sinh

x<sinh opcode (pasm)>

  sinh r<dest>, r<val>

the hyperbolic sine of r<val> in radians.

i<arguments: nr, i or nr, n>

=head3 sizeof

x<sizeof opcode (pasm)>

  sizeof r<dest>, r<type>

set r<dest> to the size in bytes of the given natural type.

i<arguments: ir, i>

=head3 sleep

x<sleep opcode (pasm)>

  sleep r<seconds>

sleep for the given number of seconds.

i<arguments: i or n>

=head3 spawnw

x<spawnw opcode (pasm)>

  spawnw r<dest>, r<command>

spawn a subprocess to run the given r<command>, wait for it to finish,
and return the result.

i<arguments: ir, s>

=head3 splice

x<splice opcode (pasm)>

  splice r<dest>, r<replace>, r<offset>, r<count>

starting at r<offset>, replace r<count> number of values in the
destination pmc with values provided in the r<replace> pmc.

i<arguments: p, p, i, i>

=head3 sprintf

x<sprintf opcode (pasm)>

  sprintf r<dest>, r<format>, r<args>

format arguments in an aggregate pmc, using format string r<format>.

i<arguments: sr, s, p or p, p, p>

=head3 stat

x<stat opcode (pasm)>

  stat r<dest>, r<val>, r<val>

stat the val1 file and return stat element val2, as listed in
a<chp-13-table-2>table 13-2.

i<arguments: ir, s, i or ir, i, i>

=begin table picture stat arguments

z<chp-13-table-2>

=headrow

=row

=cell flag

=cell flagname

=cell returns

=bodyrows

=row

=cell c<0>

=cell exists

=cell does the file exist?

=row

=cell c<1>

=cell filesize

=cell size of file, in bytes

=row

=cell c<2>

=cell isdir

=cell is the file a directory?

=row

=cell c<3>

=cell isdev

=cell is the file a device?

=row

=cell c<4>

=cell createtime

=cell time file was created

=row

=cell c<5>

=cell accesstime

=cell time file was last accessed

=row

=cell c<6>

=cell modifytime

=cell time file data was changed

=row

=cell c<7>

=cell changetime

=cell time file metadata was changed

=row

=cell c<8>

=cell backuptime

=cell time of last backup

=row

=cell c<9>

=cell uid

=cell id of file owner

=row

=cell c<10>

=cell gid

=cell id of file group

=end table

=head3 store_global

x<store_global opcode (pasm)>

  store_global r<name>, r<object>
  store_global r<name>, r<namespace>, r<object>

store a global variable as a named symbol.

i<arguments: s, p or s, s, p or p, s, p>

see also: c<find_global>.

=head3 store_lex

x<store_lex opcode (pasm)>

  store_lex r<name>, r<object>
  store_lex r<depth>, r<name>, r<object>
  store_lex r<depth>, r<position>, r<object>

store an object as a lexical variable with a given name. if the symbol
doesn't exist, it will be created in the lexical scratchpad at the
specified depth (a negative depth counts back from the current scope).
if r<depth> isn't provided, the symbol must already exist. if a
position is provided instead of a name, the symbol will be stored at
the given position in the scratchpad.

i<arguments: s, p or i, i, p or i, s, p>

see also: c<find_lex>.

=head3 string_chartype

x<string_chartype opcode (pasm)>

  string_chartype r<dest>, r<string>

return the chartype of the string.

i<arguments: ir, s>

=head3 string_encoding

x<string_encoding opcode (pasm)>
x<strings;encoding>

  string_encoding r<dest>, r<string>

return the encoding of the string.

i<arguments: ir, s>

=head3 stringinfo

x<stringinfo opcode (pasm)>

  stringinfo r<dest>, r<string>, r<flag>

return information about a string. an integer flag selects which
information to return, as listed in a<chp-13-table-3>table 13-3.

=begin table picture stringinfo arguments

z<chp-13-table-3>

=headrow

=row

=cell flag

=cell returns

=bodyrows

=row

=cell c<1>

=cell location of string buffer header.

=row

=cell c<2>

=cell location of start of string memory.

=row

=cell c<3>

=cell allocated length, in bytes.

=row

=cell c<4>

=cell string flags.

=row

=cell c<5>

=cell length of string buffer currently used, in bytes.

=row

=cell c<6>

=cell string length, in characters.

=end table

i<arguments: ir, s, i>

=head3 sub

x<sub opcode (pasm)>

  sub r<dest>, r<val>
  sub r<dest>, r<val1>, r<val2>

subtract r<val2> from r<val1>. if no r<val2>, subtract r<val> from
r<dest>.

i<arguments: ir, i or nr, i or nr, n or p, i or p, n or p, p or ir, i,
i or nr, n, i or nr, n, n or p, p, i or p, p, n or p, p, p>

=head3 subclass

x<subclass opcode (pasm)>

  subclass r<dest>, r<class>
  subclass r<dest>, r<class>, r<name>

create a subclass of r<class>. without r<name> an anonymous subclass is
created.

i<arguments: p, s or p, p or p, s, s or p, p, s>

=head3 substr

x<substr opcode (pasm)>

  substr r<dest>, r<string>, r<offset>
  substr r<dest>, r<string>, r<offset>, r<length>

return a substring of r<string>, beginning at r<offset> and with length
r<length>.

i<arguments: sr, s, i or sr, s, i, i or sr, p, i, i>

  substr r<dest>, r<string>, r<offset>, r<length>, r<replace>

if r<replace> is given, use it to replace the returned substring in
r<string>.

i<arguments: sr, s, i, i, s>

  substr r<dest>, r<offset>, r<length>, r<replace>

if r<string> is omitted, operate on the string in r<dest>.

i<arguments: sr, i, i, s>


=head3 substr_r

x<substr_r opcode (pasm)>

  substr_r r<dest>, r<string>, r<offset>, r<length>

acts like c<substr>, but reuses the destination string instead of
creating a new string. deprecated.

i<arguments: sr, s, i, i>

=head3 sweep

x<sweep opcode (pasm)>

  sweep r<lazy>

trigger a gc mark run. if r<lazy> is set to 1, only objects that need timely
destruction may be destroyed.

i<arguments: ic>

=head3 sweepoff

x<sweepoff opcode (pasm)>

  sweepoff

disable gc mark runs (nestable).

=head3 sweepon

x<sweepon opcode (pasm)>

  sweepon

re-enable gc mark runs.

=head3 sysinfo

x<sysinfo opcode (pasm)>

  sysinfo r<dest>, r<item>

return os-specific details given by c<item>.

i<arguments: ir, i or sr, i>

=head3 tan

x<tan opcode (pasm)>

  tan r<dest>, r<val>

the tangent of r<val> in radians.

i<arguments: nr, i or nr, n>

=head3 tanh

x<tanh opcode (pasm)>

  tanh r<dest>, r<val>

the hyperbolic tangent of r<val> in radians.

i<arguments: nr, i or nr, n>

=head3 tell

x<tell opcode (pasm)>

  tell r<dest>, r<pio>
  tell r<upper32>, r<lower32>, r<pio>

return the file position of the given parrotio object.

i<arguments: ir, p or ir, i, p>

see also: c<seek>.

=head3 thaw

x<thaw opcode (pasm)>

  thaw r<dest>, r<str>

create a new pmc representing the frozen image.

i<arguments: p, s>

see also: c<freeze>.

=head3 throw

x<throw opcode (pasm)>

  throw r<exception>

throw an exception.

i<arguments: p>

see also: c<rethrow>, c<set_eh>, c<clear_eh>

=head3 time

x<time opcode (pasm)>

  time r<dest>

return the current system time.

i<arguments: ir or nr>

=head3 titlecase

x<titlecase opcode (pasm)>

  titlecase r<dest>
  titlecase r<dest>, r<val>

create a copy of the string in r<val> with all characters converted to
title case, and store it in r<dest>. if r<val> is omitted, convert and
replace the string in r<dest>.

i<arguments: sr or sr, s>

see also: c<upcase>, c<downcase>.

=head3 trace

x<trace opcode (pasm)>

  trace r<int>

toggle tracing in the interpreter (0 for off, any other value for on).

i<arguments: i>

=head3 transcode

x<transcode opcode (pasm)>

  transcode r<dest>, r<encoding>
  transcode r<dest>, r<source>, r<encoding>
  transcode r<dest>, r<source>, r<encoding>, r<chartype>

transcode a string to the given r<chartype> and r<encoding>. if
r<chartype> is omitted, it is assumed to be the same as the original.

i<arguments: sr, i or sr, s, i or sr, s, i, i>

=head3 typeof

x<typeof opcode (pasm)>

  typeof r<dest>, r<val>
  typeof r<dest>, r<pmc[key]>

return the type of a pmc or parrot data type, either its class name (to a
string destination) or integer identifier (to an integer destination).

i<arguments: ir, p or sr, i or sr, p>

=head3 unless

x<unless (conditional);opcode (pasm)>

  unless r<condition>, r<label>

jump to a label unless the condition is a true value.

i<arguments: i, ic or n, ic or s, ic or p, ic>

=head3 unpin

x<unpin opcode (pasm)>

  unpin r<dest>

make the string in r<dest> movable again. this is the default, so
c<unpin> is a no-op unless the string has been pinned with c<pin>.

see also: c<pin>.

i<arguments: sr>

=head3 unregister

x<unregister opcode (pasm)>

  unregister r<pmc>

remove one reference to pmc from the root set registry.

i<arguments: p>

see also: c<register>.

=head3 unshift

x<unshift opcode (pasm)>

  unshift r<dest>, r<val>

unshift a value onto the front of an aggregate pmc.

i<arguments: p, i or p, n or p, s or p, p>

=head3 upcase

x<upcase opcode (pasm)>

  upcase r<dest>
  upcase r<dest>, r<val>

create a copy of the string in r<val> with all characters converted to
upper case, and store it in r<dest>. if r<val> is omitted, convert and
replace the string in r<dest>.

i<arguments: sr or sr, s>

see also: c<downcase>, c<titlecase>.

=head3 updatecc

x<updatecc>

  updatecc

update the state of a return continuation stored in c<p1>. used when
context information changes after the return continuation is created
but before it's invoked.

see also: c<invokecc>.

i<arguments: ir, i>

=head3 vers

x<vers opcode (pasm)>

  vers r<dest>, r<val>

the versine of r<val> in radians.

i<arguments: nr, n>

=head3 warningsoff

x<warningsoff opcode (pasm)>

  warningsoff r<category>

turn off a particular category of warnings by category number. turning
off one category will not affect the status of other warnings
categories. see c<warningson> for the list of categories.

i<arguments: i>

=head3 warningson

x<warningson opcode (pasm)>

  warningson r<category>

turn on a particular category of warnings by category number. the
default is all warnings off. turning on one category will not turn off
other categories. combine category numbers with a bitwise or to turn on
more than one at a time. if you include f<warnings.pasm>, the category
numbers are available by name as:

  .parrot_warnings_all_flag
  .parrot_warnings_undef_flag
  .parrot_warnings_io_flag
  .parrot_warnings_platform_flag

i<arguments: i>

=head3 xor

x<xor opcode (pasm)>

  xor r<dest>, r<val1>, r<val2>

logical xor. if r<val1> is true and r<val2> is false, return r<val1>.
if r<val1> is false and r<val2> is true, return r<val2>. otherwise,
return a false value.

i<arguments: ir, i, i or p, p, p>


=cut

# Local variables:
#   c-file-style: "parrot"
# End:
# vim: expandtab shiftwidth=4:
