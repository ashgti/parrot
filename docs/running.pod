=head1 Running Parrot code

This file briefly describes the current set of executables and what
they're for. But mostly, it mentions all the restrictions and
incomplete bits of these commands, in the hopes that people will fix
them and modify this document accordingly.

=over 3

=item C<assemble.pl>

Converts a Parrot Assembly file to Parrot ByteCode.

  perl assemble.pl foo.pasm > foo.pbc

Usage information: C<assemble.pl -h>. Detailed documentation on the
underlying module can be read with C<perldoc -F lib/Parrot/Assembler.pm>.

=item C<test_parrot>

Interprets a Parrot ByteCode file.

  test_parrot <filename>.pbc

C<test_parrot> has two alternate modes of operation: prederef mode
(C<test_parrot -P>) and jit mode (C<test_parrot -j>).

Jit mode works for any program that doesn't use the stack ops.
That's because we use fixed address for registers, this problem will
be solved soon.

Prederef mode only works as a shared library. For example, on most
Unix platforms:

  make clean
  make shared
  LD_LIBRARY_PATH=blib/lib ./test_parrot -P <filename>.pbc

You will not be able to use any of the automatic testing targets after
running C<make shared>.

C<test_parrot> also has several debugging and tracing flags; see the
usage description (currently, a comment in test_main.c) for details.

=item C<optimizer.pl>

Does something. Use it by running

  something

Usage information: none available.

=item C<pdump>

Causes a segmentation fault and dumps core. (Not its intention,
despite the name!) Use it by running

  something

Usage information: none available.

=item C<pbc2c.pl>

Converts a bytecode file to a native .c file.

  perl pbc2c.pl foo.pbc > foo.c

Usage information (and malformed pod error message): C<perldoc -F pbc2c.pl>

To convert the generated foo.c file to a binary, do (on Unix only):

  make libparrot.a
  gcc -O3 -g -Iinclude -c foo.c -o foo.o
  gcc -g -o foo foo.o -L. -lparrot -ldl
  ./foo # Runs it

=item B<tests>

C<make test> will compile anything that needs to be compiled and run
all standard regression tests. To look at a test more closely, run the
appropriate test file in the t/ directory:

  perl -Ilib t/op/basic.t

To keep a copy of all of the test C<.pasm> and C<.pbc> files
generated, set the environment variable POSTMORTEM to 1:

  POSTMORTEM=1 perl -Ilib t/op/basic.t 
  ls t/op/basic*

To run tests with a different dispatcher, edit
C<$Parrot::Config::PConfig{test_prog}> in lib/Parrot/Config.pm:

               'test_prog' => 'test_parrot -P',

and then use any of the above methods for running tests.

=back
