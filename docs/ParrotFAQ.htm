<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0039)http://www.panix.com/~ziggy/parrot.html -->
<HTML><HEAD><TITLE>Parrot FAQ</TITLE>
<META http-equiv=Content-Type content="text/html; charset=ISO-8859-1">
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY text=black vLink=#840084 aLink=#0000ff link=#0000ff bgColor=white>
<DIV class=article>
<DIV class=titlepage>
<DIV>
<H2 class=title>Parrot FAQ </H2></DIV>
<DIV>
<H3 class=author>Adam Turoff</H3></DIV>
<DIV>
<DIV class=revhistory>
<TABLE width="100%" summary="Revision history" border=1>
  <TBODY>
  <TR>
    <TH vAlign=top align=left colSpan=2><B>Revision History</B></TH></TR>
  <TR>
    <TD align=left>Revision 0.2</TD>
    <TD align=left>03 December 2001</TD></TR>
  <TR>
    <TD align=left colSpan=2>Added the "Parrot and Perl" section, and "Why 
      Reimplement Perl". Incorporated Dan's Q&amp;A items. </TD></TR>
  <TR>
    <TD align=left>Revision 0.1</TD>
    <TD align=left>03 December 2001</TD></TR>
  <TR>
    <TD align=left colSpan=2>Adapted from Simon Cozen's article, "Parrot : A 
      Cross-Language Virtual Machine Architecture" 
</TD></TR></TBODY></TABLE></DIV></DIV>
<HR>
</DIV>
<DIV class=qandaset>
<H2 class=title>Parrot FAQ</H2>
<DL>
  <DT>1 <A href="http://www.panix.com/~ziggy/parrot.html#id335540">General 
  Questions</A>
  <DD>
  <DL>
    <DT>1. <A href="http://www.panix.com/~ziggy/parrot.html#id335527">What is 
    Parrot? </A>
    <DT>2. <A href="http://www.panix.com/~ziggy/parrot.html#id335495">Why 
    "Parrot"? </A>
    <DT>3. <A href="http://www.panix.com/~ziggy/parrot.html#id335608">Is Parrot 
    the same thing as Perl6? </A>
    <DT>4. <A href="http://www.panix.com/~ziggy/parrot.html#id335566">Can I use 
    Parrot today? </A>
    <DT>5. <A href="http://www.panix.com/~ziggy/parrot.html#id335649">Why should 
    I program in Parrot Assembly language? </A>
    <DT>6. <A href="http://www.panix.com/~ziggy/parrot.html#id335734">When can I 
    expect to use Parrot with a real programming language? </A>
    <DT>7. <A href="http://www.panix.com/~ziggy/parrot.html#id335812">What 
    language is Parrot written in? </A>
    <DT>8. <A href="http://www.panix.com/~ziggy/parrot.html#id332693">For the 
    love of god, man, why?!?!?!? </A>
    <DT>9. <A href="http://www.panix.com/~ziggy/parrot.html#id333857">That's 
    sad. </A>
    <DT>10. <A href="http://www.panix.com/~ziggy/parrot.html#id333746">Why not 
    write it in insert favorite language here </A>
    <DT>11. <A href="http://www.panix.com/~ziggy/parrot.html#id333518">Why your 
    own virtual machine? Why not compile to JVM/.NET? </A>
    <DT>12. <A href="http://www.panix.com/~ziggy/parrot.html#id333545">So you 
    won't run on the JVM/.NET? </A></DT></DL>
  <DT>2 <A href="http://www.panix.com/~ziggy/parrot.html#id308320">Parrot and 
  Perl</A>
  <DD>
  <DL>
    <DT>1. <A href="http://www.panix.com/~ziggy/parrot.html#id308546">Why 
    reimplement Perl? </A>
    <DT>2. <A href="http://www.panix.com/~ziggy/parrot.html#id309128">You want 
    to write the Perl compiler in Perl? </A>
    <DT>3. <A href="http://www.panix.com/~ziggy/parrot.html#id309305">Isn't 
    there a bootstrapping problem? </A>
    <DT>4. <A href="http://www.panix.com/~ziggy/parrot.html#id304989">How will 
    Parrot handle both Perl5 and Perl6? </A>
    <DT>5. <A href="http://www.panix.com/~ziggy/parrot.html#id303224">Is this 
    how Parrot will run Python, Ruby and Tcl code? </A>
    <DT>6. <A href="http://www.panix.com/~ziggy/parrot.html#id303924">Latin and 
    Klingon too? </A>
    <DT>7. <A href="http://www.panix.com/~ziggy/parrot.html#id305187">Huh? 
    </A></DT></DL>
  <DT>3 <A href="http://www.panix.com/~ziggy/parrot.html#id305886">Parrot 
  Implementation issues</A>
  <DD>
  <DL>
    <DT>1. <A href="http://www.panix.com/~ziggy/parrot.html#id305765">What's 
    with this whole register machine thing? </A>
    <DT>2. <A href="http://www.panix.com/~ziggy/parrot.html#id306735">Don't you 
    know that stack machines are the way to go in software? </A>
    <DT>3. <A href="http://www.panix.com/~ziggy/parrot.html#id306717">But look 
    at all the successful stack-based VMs! </A>
    <DT>4. <A href="http://www.panix.com/~ziggy/parrot.html#id307312">What about 
    all the others? </A>
    <DT>5. <A href="http://www.panix.com/~ziggy/parrot.html#id307491">Yeah, 
    them! </A>
    <DT>6. <A href="http://www.panix.com/~ziggy/parrot.html#id307714">Right, 
    smarty. Then name a successful register-based VM! </A>
    <DT>7. <A href="http://www.panix.com/~ziggy/parrot.html#id308673">Really? 
    </A></DT></DL></DD></DL>
<DIV class=qandadiv>
<H3 class=title><A name='id335540'>1 General Questions</A></H3>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id335527'><B>1.  </B>What is Parrot? </A></P></DIV>
<DIV class=answer>
<P><B></B>Parrot is the new interpreter being designed from scratch to support 
the upcoming Perl6 language. It is being designed as a standalone virtual 
machine that can be used to execute bytecode compiled dynamic languages such as 
Perl6, but also Perl5. Ideally, Parrot can be used to support other dynamic, 
bytecode-compiled languages such as Python, Ruby and Tcl. </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id335495'><B>2.  </B>Why "Parrot"? </A></P></DIV>
<DIV class=answer>
<P><B></B>The name "Parrot" relates to Simon Cozen's <A 
href="http://www.perl.com/pub/a/2001/04/01/parrot.htm" target=_top>April Fool's 
Joke</A> where Larry Wall and Guido van Rossum announced the merger of the Perl 
and Python languages. </P>
<P>When not orchestrating elaborate pranks such as this, Simon spends a modicum 
of time as Parrot's lead developer. </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id335608'><B>3.  </B>Is Parrot the same thing as Perl6? </A></P></DIV>
<DIV class=answer>
<P><B></B>No. Parrot is an implementation that is expected to be used to execute 
Perl6 programs. The Perl6 language definition is currently (December 2001) being 
crafted by Larry Wall. While the true nature of Perl6 is still unknown, it will 
be substantially similar to Perl as we know it today, and will need a runtime 
system. For more information on the nascent Perl6 language definition, check out 
Larry's <A href="http://www.panix.com/~ziggy/" target=_top>apocolypses</A>. 
</P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id335566'><B>4.  </B>Can I use Parrot today? </A></P></DIV>
<DIV class=answer>
<P><B></B>Well, almost. :-) </P>
<P>Parrot is in the early phases of its implementation. The primary way to use 
Parrot is to write Parrot assembly code, described in <A 
href="http://dev.perl.org/perl6/pdd/pdd6.html" target=_top>Perl Design Document 
#6</A>. Examples can be found at <A href="http://www.parrotcode.org/examples/" 
target=_top>parrotcode.org</A>. </P>
<P>You can also create dynamic content within Apache using Ask Bjorn Hansen's <A 
href="http://www.advogato.org/proj/mod_parrot/" 
target=_top><TT>mod_parrot</TT></A> module. You are strongly advised that 
<TT>mod_parrot</TT> is a toy, and should not be used with any production code. 
</P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id335649'><B>5.  </B>Why should I program in Parrot Assembly language? </A></P></DIV>
<DIV class=answer>
<P><B></B>Lots of reasons, actually. :-) 
<DIV class=itemizedlist>
<UL>
  <LI>
  <P>All the <A href="http://use.perl.org/~acme/journal" target=_top>cool 
  kids</A> are doing it. </P>
  <LI>
  <P>It's a neat hack. </P>
  <LI>
  <P>You get all of the pleasure of programming in Assembly language without any 
  of the requisite system crashes. </P></LI></UL></DIV>
<P></P>
<P>Seriously, though, programming in Parrot assembly language is an interesting 
challenge. It's also one of the best ways to write test cases for Parrot. 
</P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id335734'><B>6.  </B>When can I expect to use Parrot with a <SPAN 
class=emphasis><I>real</I></SPAN> programming language? </A></P></DIV>
<DIV class=answer>
<P><B></B>It depends on what you mean by <SPAN 
class=emphasis><I>real</I></SPAN>. :-) 
<DIV class=itemizedlist>
<UL>
  <LI>
  <P>Leon Brocard has released a proof-of-concept <A 
  href="http://archive.develooper.com/perl6-internals@perl.org/msg03864.html" 
  target=_top>java bytecode to Parrot bytecode</A> compiler. </P>
  <LI>
  <P>Gregor Purdy is working on a little language called Jako that targets 
  Parrot bytecode directly. (Available with the Parrot distribution.) </P>
  <LI>
  <P>Dan Sugalski and Jeff Goff have started work on compiling Scheme down to 
  Parrot bytecodes (Available with the Parrot distribution.) </P></LI></UL></DIV>
<P></P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id335812'><B>7.  </B>What language is Parrot written in? </A></P></DIV>
<DIV class=answer>
<P><B></B>C </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id332693'><B>8.  </B>For the love of god, man, why?!?!?!? </A></P></DIV>
<DIV class=answer>
<P><B></B>Because it's the best we've got. </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id333857'><B>9.  </B>That's sad. </A></P></DIV>
<DIV class=answer>
<P><B></B>So true. Regardless, C's available pretty much everywhere. Perl 5's in 
C, so we can potentially build any place perl 5 builds. </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id333746'><B>10.  </B>Why not write it in <SPAN class=emphasis><I>insert favorite 
language here</I></SPAN> </A></P></DIV>
<DIV class=answer>
<P><B></B>Because of one of: 
<DIV class=itemizedlist>
<UL>
  <LI>
  <P>Not available everywhere </P>
  <LI>
  <P>Limited talent pool for core programmers </P>
  <LI>
  <P>Not fast enough </P></LI></UL></DIV>
<P></P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id333518'><B>11.  </B>Why your own virtual machine? Why not compile to JVM/.NET? 
</A></P></DIV>
<DIV class=answer>
<P><B></B>Those VMs are designed for statically typed languages. That's fine, 
since Java, C#, and lots of other languages are statically typed. Perl isn't. 
For a variety of reasons, it means that perl would run more slowly there than on 
an interpreter geared towards dynamic languages. </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id333545'><B>12.  </B>So you won't run on the JVM/.NET? </A></P></DIV>
<DIV class=answer>
<P><B></B>Sure we will. They're just not our first target. We build our own 
interpreter/VM, then when that's working we start in on the JVM and/or .NET back 
ends. </P></DIV></DIV></DIV>
<DIV class=qandadiv>
<H3 class=title><A name='id308320'>2 Parrot and Perl</A></H3>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id308546'><B>1.  </B>Why reimplement Perl? </A></P></DIV>
<DIV class=answer>
<P><B></B>Good question. </P>
<P>At The Perl Conference 4.0, in the summer of 2000, Larry Wall <A 
href="http://www.perl.com/pub/a/2000/10/23/soto2000.html" 
target=_top>announced</A> that it was time to recreate Perl from the ground up. 
This included the Perl language, the implementation of that language, the 
community of open source developers who volunteer to implement and maintain the 
language, and the larger community of programmers who use Perl. </P>
<P>A variety of reasons were given for embarking on this project: 
<DIV class=itemizedlist>
<UL>
  <LI>
  <P>Perl5 is a stable, reliable, robust platform for developing software; it's 
  not going away for a long time, even after Perl6 is released. (Proof: Perl4 is 
  still out there, no matter how much we all want it to go away.) </P>
  <LI>
  <P>We have the ability to translate Perl5 into Perl6 if necessary. This 
  preserves backward compatibility with a large body of existing Perl code, 
  which is <SPAN class=emphasis><I>very</I></SPAN> important. </P>
  <LI>
  <P>The language can stand some revision: formats don't really belong in the 
  core language, and typeglobs have outlived their usefulness. By revising the 
  language now, we can make Perl better. </P>
  <LI>
  <P>Some warts really should be removed: <TT>system</TT> should return <SPAN 
  class=emphasis><I>true</I></SPAN> instead of <SPAN 
  class=emphasis><I>false</I></SPAN> on success, and <TT>localtime</TT> should 
  return the year, not the year - 1900 </P>
  <LI>
  <P>It would be nice to write the Perl to Bytcode compiler in Perl, instead of 
  C. That would make it much easier for Perl hackers to hack on Perl. 
</P></LI></UL></DIV>
<P></P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id309128'><B>2.  </B>You want to write the Perl compiler in Perl? </A></P></DIV>
<DIV class=answer>
<P><B></B>Sure. Why not? C, Java, Lisp, Scheme and practically every other 
language is self-hosting. Why not? </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id309305'><B>3.  </B>Isn't there a bootstrapping problem? </A></P></DIV>
<DIV class=answer>
<P><B></B>No, not really. Don't forget we can use Perl5 to run Perl5 programs, 
such as a Perl5 to Parrot compiler. </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id304989'><B>4.  </B>How will Parrot handle both Perl5 and Perl6? </A></P></DIV>
<DIV class=answer>
<P><B></B>We don't know yet, since it depends on the Perl6 language definition. 
But we <SPAN class=emphasis><I>could</I></SPAN> use the more appropriate of two 
Perl compilers, depending on whether we're compiling Perl5 or Perl6 programs. 
</P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id303224'><B>5.  </B>Is this how Parrot will run Python, Ruby and Tcl code? </A></P></DIV>
<DIV class=answer>
<P><B></B>Probably. </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id303924'><B>6.  </B>Latin and Klingon too? </A></P></DIV>
<DIV class=answer>
<P><B></B>No, Parrot won't be twisted enough for Damian. Perhaps when Parrot is 
ported to a pair of supercooled Calcium ions, though... </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id305187'><B>7.  </B>Huh? </A></P></DIV>
<DIV class=answer>
<P><B></B>You had to <A 
href="http://www.csse.monash.edu.au/~damian/papers/#Superpositions" 
target=_top>be there</A>. </P></DIV></DIV></DIV>
<DIV class=qandadiv>
<H3 class=title><A name='id305886'>3 Parrot Implementation issues</A></H3>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id305765'><B>1.  </B>What's with this whole register machine thing? </A></P></DIV>
<DIV class=answer>
<P><B></B>Not much, why do you ask? </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id306735'><B>2.  </B>Don't you know that stack machines are the way to go in software? 
</A></P></DIV>
<DIV class=answer>
<P><B></B>No, in fact, I don't. </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id306717'><B>3.  </B>But look at all the successful stack-based VMs! </A></P></DIV>
<DIV class=answer>
<P><B></B>Like what? There's just the JVM. </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id307312'><B>4.  </B>What about all the others? </A></P></DIV>
<DIV class=answer>
<P><B></B>*What* others? That's it, unless you count perl, python, or ruby. 
</P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id307491'><B>5.  </B>Yeah, them! </A></P></DIV>
<DIV class=answer>
<P><B></B>Yeah, right. You never thought about them as VMs, admit it. :) </P>
<P>Seriously, we're already running with a faster opcode dispatch than any of 
them are, and having registers just decreases the amount of stack thrash we get. 
</P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id307714'><B>6.  </B>Right, smarty. Then name a successful register-based VM! </A></P></DIV>
<DIV class=answer>
<P><B></B>The 68K emulator Apple ships with all its PPC-enabled version of 
MacOS. </P></DIV></DIV>
<DIV class=qandaentry>
<DIV class=question>
<P><A name='id308673'><B>7.  </B>Really? </A></P></DIV>
<DIV class=answer>
<P><B></B><A 
href="http://developer.apple.com/techpubs/mac/PPCSoftware/PPCSoftware-13.html" 
target=_top>Really.</A> </P></DIV></DIV></DIV></DIV></DIV></BODY></HTML>
