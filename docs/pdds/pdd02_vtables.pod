=head1 TITLE

Common vtable format for all variables

=head1 VERSION

=head2 CURRENT

   Maintainer: Dan Sugalski <dan@sidhe.org>
   Class: Internals
   PDD Number: 2
   Version: 1.1
   Status: Developing
   Last Modified: 13 May 2002
   PDD Format: 1
   Language: English

=head2 HISTORY

=over 4

=item 1.1

13 May 2002

=item 1.0

None. First version

=back

=head1 CHANGES

=over 4

=item 1.1

Cleaned up the definition. It was a mess.

=item 1.0

None. First version

=back

=head1 ABSTRACT

This RFC presents the vtable entries, and their order, that all
variables MUST provide.

=head1 DESCRIPTION

All perl variables hide their guts behind a magic perl structure
generally referred to as a PMC, or Perl Magic Cookie. Nothing outside
the core of perl (in fact, nothing outside the data type's vtable
routines) should infer anything about a PMC. (hence the Magic part)

The first parameter to all of these should be the destination PMC.

vtables are neat because they decouple the interface and
implementation of various object functions. This does mean, though,
that you need to either know what functions are available and what
they do, or have some method of finding out. It's faster if you know
which vtable entry does what, so that's the method perl's using.

=head1 IMPLEMENTATION

=head2 vtable functions

The following functions are singleton functions. (There are no keyed
versions of these)

=over 4

=item INTVAL init(PMC)

The init vtable method takes an unused PMC as a parameter, and turns
it into a PMC appropriate for the class owning the vtable. Called as a
class method.

Returns 0 if the method has thrown an exception. 

=item INTVAL morph(PMC, type)

turns the PMC into a PMC of type C<type>. If the morphing can't be
reasonably done, for example if an integer is asked to turn into a
PerlArray, then the PMC is first destroyed, then recreated as an empty
PMC of the new type.

This method is primarily used when the interpreter has need of
coercing a PMC to a particular type, and isn't meant as a general
purpose casting tool. Compilers should only emit valid
transformations.

Returns 0 if the method has thrown an exception.

=item PMC mark(PMC, PMC)

Called by the DOD when its sweeping through the PMCs and has detected
that this PMC is both alive and has a custom mark routine. The second
parameter is the PMC at the tail of the free PMC list, as passed to
C<mark_used>. This should return the new tail of the free PMC list.

If a PMC has this set, its responsible for marking all buffers and
PMCs under its control as alive. If it does not, those PMCs or buffers
may be collected later.

This routine may B<not> throw an exception.

=item destroy(PMC)

=back

The following functions have two forms, a plain form and a _keyed
form. The keyed form takes a KEY for I<each> PMC parameter. 

=over 4

=item type(PMC) I<keyed>
=item subtype(PMC, type) I<keyed>
=item name(PMC) I<keyed>
=item clone(PMC) I<keyed>
=item find_method(PMC, string) I<keyed>
=item get_integer(PMC) I<keyed>
=item get_number(PMC) I<keyed>
=item get_bignum(PMC) I<keyed>
=item get_string(PMC) I<keyed>
=item get_bool(PMC) I<keyed>
=item get_pmc
=item is_same
=item set_integer
=item set_number
=item set_string
=item set_pmc
=item add
=item subtract
=item multiply
=item divide
=item modulus
=item concatenante
=item is_equal
=item logical_or
=item logical_and
=item logical_not
=item repeat
=item increment
=item decrement
=item exists
=item nextkey
=item nextvalue




=back

=cut
