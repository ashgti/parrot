Deprecated opcodes (branches/leo-ctx5 first)

newsub(in INT, in INT, labelconst INT, labelconst INT)

  Creates a sub in P0 and a continuation in P1. It was a premature
  attempt to be able to create a return continuation outside a loop.
  This isn't needed anymore due to continuation recycling and the opcode
  also has implicit register usage (P0, P1).

  use 3 arg newsub, find_global, set_p_pc, or just foo() syntax

Register stack opcodes

pop{i,s,p,n}, popbottom{i,s,p,n}, poptop{i,s,p,n},
push{i,s,p,n}, pushbottom{i,s,p,n}, pushtop{i,s,p,n},
savetop, restoretop,

  With the upcoming variable-sized register frame handling these opcodes
  will stop working and are useless anyway.

  use saveall/restoreall (whole register frame) or
  user stack opcodes save/restore instead.

FUTURE changes

Not yet deprecated, but it's recommended to use the new syxtax and
gradually change the old.

Subroutine attributes will use the colon syntax:

  .sub foo method, @MULTI(x,y)    => .sub foo :method :multi(x,y)
  .sub foo @ANON, @LOAD           => .sub foo :anon :load

The new syntax uses no comma separators and all sub attributes are lower
case and prefixed by a colon.

Class name IDs will require a dot in front

  $P0 = new Integer               => $P0 = new .Integer

