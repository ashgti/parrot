=head1 Deprecated opcodes

=over 4

=item newsub Pdest, IType, ILabel

C<newsub> creates a subroutine object just from a label. The
Sub object is lacking necessary meta information like name, length,
MMD-info, and more.

Use: find_name, find_global, or Sub constants instead.

=item Register stack opcodes

pop{i,s,p,n}, popbottom{i,s,p,n}, poptop{i,s,p,n},
push{i,s,p,n}, pushbottom{i,s,p,n}, pushtop{i,s,p,n},
savetop, restoretop,

With the upcoming variable-sized register frame handling these opcodes
will stop working and are useless anyway.

use saveall/restoreall (whole register frame) or
user stack opcodes save/restore instead.

=back

=head1 FUTURE changes

Not yet deprecated, but it's recommended to use the new syxtax and
gradually change the old.

=over

=item Chip's colon

Subroutine attributes will use the colon syntax:

  .sub foo method, @MULTI(x,y)    => .sub foo :method :multi(x,y)
  .sub foo @ANON, @LOAD           => .sub foo :anon :load

The new syntax uses no comma separators and all sub attributes are lower
case and prefixed by a colon.

=item Class name IDs

... will require a dot in front

  $P0 = new Integer               => $P0 = new .Integer

=item Assignment syntax with opcodes [#36283]

When the first argument of an opcode is C<OUT>, then the assignment syntax
will be allowed, as it is today.

In any other case (i.e. C<INOUT>, C<IN>), this will become
a syntax error. For example:

	$S0 = print
	$P0 = substr 1, 2, "x"

Will have to be:

	print $S0
	substr $P0, 1, 2, "x"	



=back
