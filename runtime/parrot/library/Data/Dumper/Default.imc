=head1 TITLE

Data::Dumper::Default - The default output module of Data::Dumper.

=head1 VERSION

version 0.10

=head1 SYNOPSIS

TDB

=head1 DESCRIPTION

This module provides the default output style of C<Data::Dumper>.

=cut

.sub __library_data_dumper_default_onload @LOAD
    find_type $I0, "Data::Dumper::Default"
    if $I0 > 1 goto END
    load_bytecode "library/Data/Dumper/Base.imc"
    load_bytecode "library/Data/Sort.imc"
    load_bytecode "library/Data/Escape.imc"
    getclass $P0, "Data::Dumper::Base"
    subclass $P0, $P0, "Data::Dumper::Default"
END:
    .return ()
.end

.namespace ["Data::Dumper::Default"]

=head1 METHODS

A Data::Dumper::Default object has the following methods:

=over 4

=item style."dumpWithName"( shortname, name, dump )

=cut

.sub dumpWithName method
    .param string shortname
    .param string name
    .param pmc dump
    .local int ret

    print "\""
    print shortname
    print "\" => "

    ret = self."dump"( name, dump )

    .return ( ret )
.end

=item style."dumpCached"( name, dump )

=cut

.sub dumpCached method
    .param string name
    .param pmc dump

    print "\\"
    print name

    .return ( 1 )
.end


=item style."dumpProperties"( name, dump )

=cut

.sub dumpProperties method
    .param string paramName
    .param pmc dump
    .local string name
    .local pmc prop
    .local int ret

    ret = 1
    isnull dump, END
    prophash prop, dump
    unless prop goto END

    print " with-properties: "
    clone name, paramName
    concat name, ".properties()"
    ret = self."dump"( name, prop )

END:
    .return ( ret )
.end

=item style.dumpHash( name, hash )

Dumps a 'generic' Hash.

=cut

.sub dumpHash method
    .param string name
    .param pmc hash
    .local string indent
    .local string subindent
    .local pmc iter
    .local string key
    .local pmc val
    .local pmc keys
    .local string name2

    (subindent, indent) = self."newIndent"()

    print "{"

    new keys, .PerlArray
    new iter, .Iterator, hash
    set iter, 0

iter_loop:
    unless iter, iter_end

    shift key, iter
    push keys, key
    branch iter_loop

iter_end:
    P0 = find_global "Data::Sort", "simple"
    P0( keys )

dump_loop:
    unless keys, dump_end

    print "\n"
    print subindent

    shift key, keys

    new val, .PerlArray
    push val, name
    push val, key
    sprintf name2, "%s[\"%s\"]", val

    set val, hash[key]

    self."dumpWithName"( key, name2, val )

    unless keys, dump_end
    print ","

    branch dump_loop

dump_end:
    print "\n"
    print indent
    print "}"
    self."deleteIndent"()

    .return ( 1 )
.end

=item style."dumpStringEscaped"( string, escapeChar )

Escape any characters in a string so we can re-use it as a literal.

=cut

.sub dumpStringEscaped method
    .param pmc var
    .param string char
    .local string str
    .local pmc escape

    escape = find_global "Data::Escape", "String"
    str = var
    str = escape( str, char )
    print str

    .return ( 1 )
.end

=item style."pmcDefault"( name, dump )

=cut

.sub pmcDefault method
    .param string name
    .param pmc dump
    .local string type

    typeof type, dump
    print "PMC '"
    print type
    print "' "

    can $I0, dump, "__dump"
    if $I0 goto CAN_DUMP
    print "{ ... }"
    branch END
CAN_DUMP:
    dump."__dump"( self, name )
END:
    .return ( 1 )
.end

=item style."pmcPMCArray"( name, array )

Dumps an (PMC) Array.

=cut

.sub pmcPMCArray
    S0 = "pmcPerlArray"
    callmethod
.end

=item style."pmcIntList"( name, array )

Dumps an IntList PMC.

=cut

.sub pmcIntList method
    .param string name
    .param pmc array
    .local string indent
    .local string subindent
    .local int size
    .local int pos
    .local pmc val
    .local string name2
    .local int tmp

    (subindent, indent) = self."newIndent"()

    typeof name2, array
    print name2
    print " (size:"
    $I0 = array
    print $I0
    print ") ["

    set size, array
    set pos, 0

    unless size, iter_end

iter_loop:
    print "\n"

    print subindent

    new val, .PerlArray
    push val, name
    push val, pos
    sprintf name2, "%s[%d]", val

    $I0 = array[pos]
    print $I0

    # next array member
    inc pos

    # skip the ',' after the last element
    if pos >= size goto iter_end

    print ","

    # elements left?
    branch iter_loop

iter_end:
    print "\n"
    print indent
    print "]"

    self."deleteIndent"()

    .return ( 1 )
.end

=item style."pmcStringArray"( name, array )

Dumps an (string) Array.

=cut

.sub pmcStringArray
    S0 = "pmcPerlArray"
    callmethod
.end

=item style."pmcPerlArray"( name, array )

Dumps an (Perl) Array.

=cut

.sub pmcPerlArray method
    .param string name
    .param pmc array
    .local string indent
    .local string subindent
    .local int size
    .local int pos
    .local pmc val
    .local string name2
    .local int tmp

    (subindent, indent) = self."newIndent"()

    typeof name2, array
    print name2
    print " (size:"
    $I0 = array
    print $I0
    print ") ["

    set size, array
    set pos, 0

    unless size, iter_end

iter_loop:
    print "\n"

    print subindent

    new val, .PerlArray
    push val, name
    push val, pos
    sprintf name2, "%s[%d]", val

    set val, array[pos]

    self."dump"( name2, val )

    # next array member
    inc pos

    # skip the ',' after the last element
    if pos >= size goto iter_end

    print ","

    # elements left?
    branch iter_loop

iter_end:
    print "\n"
    print indent
    print "]"

    self."deleteIndent"()

    .return ( 1 )
.end

=item style."pmcPerlHash"( name, hash )

Dumps a PerlHash PMC.

=cut

.sub pmcPerlHash method
    .param string name
    .param pmc hash
    .local string indent

    print "PerlHash "

    self."dumpHash"( name, hash )

    .return ( 1 )
.end


=item style."pmcHash"( name, hash )

Dumps a Hash PMC.

=cut

.sub pmcHash method
    .param string name
    .param pmc hash
    .local string indent

    print "Hash "

    self."dumpHash"( name, hash )

    .return ( 1 )
.end


=item style."pmcString"( name, str )

Dumps a String PMC.

=cut

.sub pmcString method
    .param string name
    .param pmc str

    print "\""
    self."dumpStringEscaped"( str, "\"" )
    print "\""

    .return ( 1 )
.end


=item style."pmcPerlString"( name, str )

Dumps a PerlString PMC.

=cut

.sub pmcPerlString method
    .param string name
    .param pmc str

    print "\""
    self."dumpStringEscaped"( str, "\"" )
    print "\""

    .return ( 1 )
.end


=item style."pmcPerlInt"( name, val )

Dumps a PerlInt PMC.

=cut

.sub pmcPerlInt method
    .param string name
    .param pmc val

    print val

    .return ( 1 )
.end

=item style."pmcPerlNum"( name, val )

Dumps a PerlNum PMC.

=cut

.sub pmcPerlNum method
    .param string name
    .param pmc val

    print val

    .return ( 1 )
.end

=item style."pmcPerlUndef"( name, val )

Dumps a PerlUndef PMC.

=cut

.sub pmcPerlUndef method
    print "undef"

    .return ( 1 )
.end

=item style."pmcSub"( name, val )

Dumps a Sub pmc

=cut

.sub pmcSub method
    print "sub { ... }"

    .return ( 1 )
.end

=item style."pmcNull"( name, val )

Dumps a Null PMC.

=cut

.sub pmcNull method
    print "null"

    .return ( 1 )
.end

=item style."pmcOrderedHash"( name, val )

Dumps a OrderedHash PMC.

=cut

.sub pmcOrderedHash method
    print "OrderedHash { ... }"

    .return ( 1 )
.end

=item style."pmcManagedStruct"( name, val )

Dumps a ManagedStruct PMC.

=cut

.sub pmcManagedStruct method
    print "ManagedStruct { ... }"

    .return ( 1 )
.end

=item style."pmcUnManagedStruct"( name, val )

Dumps a UnManagedStruct PMC.

=cut

.sub pmcUnManagedStruct method
    print "UnManagedStruct { ... }"

    .return ( 1 )
.end

=item style."pmcArray"( name, array )

Dumps an Array.

=cut

.sub pmcArray
    S0 = "pmcPerlArray"
    callmethod
.end

=item style."pmcInteger"( name, val )

Dumps an Integer PMC.

=cut

.sub pmcInteger method
    .param string name
    .param pmc val

    print val

    .return ( 1 )
.end

=back

=head1 AUTHOR

Jens Rieks E<lt>parrot at jensbeimsurfen dot deE<gt> is the author
and maintainer.
Please send patches and suggestions to the Perl 6 Internals mailing list.

=head1 COPYRIGHT

Copyright (c) 2004, the Perl Foundation.

=cut
