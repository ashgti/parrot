/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/pyfloat.pmc - Python Floating-Point Number

=head1 DESCRIPTION

These are the vtable functions for the PyFloat base class

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "pyconsts.h"

pmclass PyFloat extends Float extends PyObject dynpmc group python_group {

/*

=item C<PMC* "__new__"(PMC *class, PMC *source)>

Create a new floating point number

=cut

*/

    METHOD PMC* __new__(PMC *class, PMC *value) {
        INTVAL argc = REG_INT(3);

        PMC * ret = pmc_new(INTERP, PyBuiltin_PyFloat);

        if (argc > 1) {
            if (value->vtable->base_type == PyBuiltin_PyInt) {
                FLOATVAL fvalue = VTABLE_get_number(INTERP, value);
                VTABLE_set_number_native(INTERP, ret, fvalue);
            }
            else {
                STRING *svalue = VTABLE_get_string(INTERP, value);
                VTABLE_set_string_native(INTERP, ret, svalue);
            }
        }

        return ret;
    }


/*

=item C<INTVAL get_integer()>

Returns an integer representation of the number (by casting).

=cut

*/

   INTVAL get_integer() {
        return (INTVAL) PMC_num_val(SELF);
   }

/*

=item C<PMC *get_class()>

Return the class of this object.

=cut

*/

    PMC* get_class() {
        return PyBuiltin_PyFloat_class;
    }

/*

=item C<STRING *get_repr()>

Returns the number as a Parrot string.

=cut

*/

    STRING* get_repr () {
        double d = (double) PMC_num_val(SELF);
        const char *sign = "-";
        STRING *s;
        if (!signbit(PMC_num_val(SELF)))
            sign = "";
        d = fabs(d);
        /* XXX make a Python format string */
        s = Parrot_sprintf_c(INTERP, "%s%.17g", sign, d);
        if (string_str_index(INTERP, s,
                    const_string(INTERP, "."), 0) == -1 &&
                string_str_index(INTERP, s,
                    const_string(INTERP, "e"), 0) == -1)
            string_append(INTERP, s, const_string(INTERP, ".0"), 0);
        return s;
    }

/*

=item C<STRING *get_string()>

Returns the number as a Parrot string.

=cut

*/

    STRING* get_string () {
        double d = (double) PMC_num_val(SELF);
        const char *sign = "-";
        STRING *s;
        if (!signbit(PMC_num_val(SELF)))
            sign = "";
        d = fabs(d);
        /* XXX make a Python format string */
        s = Parrot_sprintf_c(INTERP, "%s%.12g", sign, d);
        if (string_str_index(INTERP, s,
                    const_string(INTERP, "."), 0) == -1 &&
                string_str_index(INTERP, s,
                    const_string(INTERP, "e"), 0) == -1)
            string_append(INTERP, s, const_string(INTERP, ".0"), 0);
        return s;
    }

/*

=item C<FLOATVAL get_number()>

Returns the value of the number.

=cut

*/

    FLOATVAL get_number() {
        return PMC_num_val(SELF);
    }

/*

=item C<INTVAL hash(size_t seed)>

Returns a unique hash for this value

=cut

*/

    INTVAL hash (size_t seed) {
        return VTABLE_get_integer(INTERP, SELF);
    }


/*

=item C<void set_number_native(FLOATVAL value)>

Sets the value of the number to C<value>.

=cut

*/

    void set_number_native (FLOATVAL value) {
        PMC_num_val(SELF) = value;
    }

/*

=item C<void set_string_native(STRING* value)>

Sets the value of the number by converting C<*value> to a number.

=cut

*/

    void set_string_native(STRING* value) {
        PMC_num_val(SELF) = string_to_num(INTERP, value);
    }

/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
