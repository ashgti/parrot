/*
Copyright: 2004 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/pylong.pmc - Python BigInt PMC class

=head1 DESCRIPTION

C<PyLong> provides arbitray precision integer mathematic functions.

=head2 Functions

=over 4

=item C<static void bigint_set_long(Interp*, PMC*, long value)>

=item C<static void bigint_set_double(Interp*, PMC*, double value)>

=cut

*/

#include "parrot/parrot.h"
#include "pyconsts.h"

pmclass PyLong extends BigInt dynpmc group python_group {

/*

=item C<PMC* "__hex__"(PMC *self)>

Returns the hex representation of C<self>.

=cut

*/

    METHOD PMC* __hex__(PMC *self) {
        PMC * ret = pmc_new(INTERP, PyBuiltin_PyString);

        STRING *res = string_from_cstring(INTERP, "0x", 0);
        STRING *s = VTABLE_get_string_keyed_int(INTERP, self, 16);
        res = string_append(INTERP, res, s, 0);
        res = string_append(INTERP, res, const_string(INTERP, "L"), 0);

        VTABLE_set_string_native(INTERP, ret, res);
        return ret;
    }

/*

=item C<PMC* "__new__"(PMC *class, PMC *value, PMC *base)>

Create a new long.

=cut

*/

    METHOD PMC* __new__(PMC *class, PMC *value, PMC *base) {
        INTVAL argc = REG_INT(3);

        PMC * ret = pmc_new(INTERP, PyBuiltin_PyLong);

        if (argc > 1) {
            if (value->vtable->base_type == PyBuiltin_PyInt) {
                INTVAL ivalue = VTABLE_get_integer(INTERP, value);
                VTABLE_set_integer_native(INTERP, ret, ivalue);
            }
            else {
                STRING *svalue = VTABLE_get_string(INTERP, value);
                if (argc < 3)
                    VTABLE_set_string_native(INTERP, ret, svalue);
                else {
                    INTVAL key = VTABLE_get_integer(INTERP, base);
                    VTABLE_set_string_keyed_int(INTERP, ret, key, svalue);
                }
            }
        }

        return ret;
    }


/*

=item C<PMC *get_class()>

Return the class of this object.

=cut

*/

    PMC* get_class() {
        return PyBuiltin_PyLong_class;
    }

/*

=item C<INTVAL is_equal (PMC* value)>

The C<==> operation.

=cut

*/

    INTVAL is_equal (PMC* value) {
MMD_PyInt: {
            PMC *temp = pmc_new(INTERP, PyBuiltin_PyLong);
            VTABLE_set_integer_native(INTERP, temp, PMC_int_val(value));
            return mmd_dispatch_i_pp(INTERP, SELF, temp, MMD_EQ);
        }
MMD_DEFAULT: {
            return (INTVAL)(PMC_int_val(SELF) ==
                VTABLE_get_integer(INTERP, value));
        }
    }

/*

=item C<void morph(INTVAL type)>

Morphs the scalar to the specified type.

=cut

*/

    void morph (INTVAL type) {
        if (type == enum_class_BigInt) return;
        if (type == enum_class_Integer) type = PyBuiltin_PyInt;
        pmc_reuse(INTERP, SELF, type, 0);
    }

/*

=item C<INTVAL hash()>

Returns a unique hash for this value

=cut

*/

    INTVAL hash () {
        return VTABLE_get_integer(INTERP, SELF);
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
