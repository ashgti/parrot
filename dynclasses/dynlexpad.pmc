/*
Copyright: 2005 The Perl Foundation.  All Rights Reserved.
$Id:$

=head1 NAME

dynclasses/dynlexpad.pmc - DynLexPad PMC

=head1 DESCRIPTION

DynLexPad provides a more dynamic lexpad that allows the addition of lexicals at runtime.

=head2 Functions

=over 4

=cut

*/

#include "parrot/parrot.h"

pmclass DynLexPad dynpmc does lexpad need_ext {

    void class_init() {
        if (pass) {
            PMC *current_sub;
            int hll;
            current_sub = CONTEXT(INTERP->ctx)->current_sub;
            hll = PMC_sub(current_sub)->HLL_id;
            Parrot_register_HLL_type(INTERP, hll,
                    enum_class_LexPad, entry);
        }
    }
    void init() {
        real_exception(INTERP, NULL, INVALID_OPERATION,
                "don't create me like this");
    }

/*

=item C<init_pmc(PMC *lexinfo)>

Initialize the LexPad PMC and remember the associate
lexinfo.

=item C<void set_pointer(void *)>

Initialize the LexPad PMC and remember the associate context.
XXX - we really should have one-stage initialisation.
XXX - we could abuse init_pmc_props

=item C<INTVAL elements()>

Returns the number of elements in the hash.

=item C<PMC *get_pmc_keyed_str(STRING *name)>

=item C<PMC *get_pmc_keyed(PMC *name)>

Return the lexical with the given name, or NULL (not PMCNULL), if the
lexical doesn't exist.

=item C<void set_pmc_keyed(PMC *name, PMC *value)>

=item C<void set_pmc_keyed_str(STRING *name, PMC *value)>

Set the lexical with the given name to value. If the lexical name
doesn't exist, it is created.

=item C<METHOD PMC* get_lexinfo()>

Return the LexInfo PMC, if any or a Null PMC.

=cut

*/
    void init_pmc(PMC* lexinfo) {
        PMC_pmc_val(SELF) = lexinfo;
        PMC_struct_val(SELF) = NULL;
        PObj_custom_mark_destroy_SETALL(SELF);
        new_pmc_hash(INTERP, SELF);
    }

    void set_pointer(void* ctx) {
        PMC_data(SELF) = ctx;
    }

    void destroy () {
        if (PMC_struct_val(SELF)) {
            hash_destroy(INTERP, (Hash*) PMC_struct_val(SELF));
            PMC_struct_val(SELF) = NULL;
        }
    }
/*

=item C<void mark()>

Marks the lexpad hash as live.

=cut

*/

    void mark () {
        if (PMC_struct_val(SELF))
            mark_hash(INTERP, PMC_struct_val(SELF));
    }

    PMC* get_pmc_keyed_str (STRING* key) {
        HashBucket *b = hash_get_bucket(INTERP, (Hash*) PMC_struct_val(SELF),
                                        key);
        if (!b) 
            return NULL;
        return b->value;
    }

    void set_pmc_keyed_str (STRING* key, PMC* value) {
        hash_put(INTERP, PMC_struct_val(SELF), key, value);
    }
}


/*

=back

=head1 SEE ALSO

F<docs/pdds/pdd20_lecical_vars.pod>, F<classes/lexpad.pmc>, F<classes/lexinfo.pmc>.

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
