/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/pyboolean.pmc - PyBoolean PMC

=head1 DESCRIPTION

This class implements a Python Boolean value variable.

Albeit C<PyBoolean> is derived from C<PyInt>, it doesn't morph to other
types, its value is changed only.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "pyconsts.h"

static STRING *_TRUE;
static STRING *_FALSE;

pmclass PyBoolean extends PyObject dynpmc group python_group {

/*

=item C<void class_init()>

Class initialization. Caches constant strings that will be used later.

=cut

*/

    void class_init() {
        if (pass) {
            _TRUE = const_string(INTERP, "True");
            _FALSE = const_string(INTERP, "False");
        }
    }

/*

=item C<PMC* "__new__"(PMC *class, PMC *source)>

Create a new boolean

=cut

*/

    METHOD PMC* __new__(PMC *class, PMC *source) {
        INTVAL argc = REG_INT(3);

        PMC * ret = pmc_new(INTERP, PyBuiltin_PyBoolean);

        if (argc > 1) {
            INTVAL ivalue = VTABLE_get_bool(INTERP, source);
            VTABLE_set_integer_native(INTERP, ret, ivalue);
        }

        return ret;
    }

/*

=item C<INTVAL get_bool()>

Returns the boolean value.

=cut

*/

    INTVAL get_bool () {
        return PMC_int_val(SELF) != 0;
    }

/*

=item C<PMC *get_class()>

Return the class of this object.

=cut

*/

    PMC* get_class() {
        return PyBuiltin_PyBoolean_class;
    }

/*

=item C<STRING* get_string ()>

Return "True" or "False" if python_mode is true.

=cut

*/

    STRING* get_string () {
        return PMC_int_val(SELF) ? _TRUE : _FALSE;
    }

/*

=item C<INTVAL is_equal (PMC* value)>

The C<==> operation.

=cut

*/

    INTVAL is_equal (PMC* value) {
MMD_PyBoolean: {
            return (VTABLE_get_bool(INTERP, SELF) ==
                VTABLE_get_bool(INTERP, value));
        }
MMD_DEFAULT: {
            return 0;
        }
    }

/*

=item C<void logical_not()>

Returns the negated value of the boolean.

=cut

*/

    void logical_not (PMC *dest) {
        VTABLE_morph(INTERP, dest, PyBuiltin_PyBoolean);
        VTABLE_set_integer_native(INTERP, dest, PMC_int_val(SELF) == 0);
    }

/*

=item C<void set_integer_native (INTVAL value)>

=cut

*/

    void set_integer_native (INTVAL value) {
        PMC_int_val(SELF) = (value != 0);
    }

/*

=item C<void set_integer_same(PMC *value)>

Sets the value of the integer to the value of the C<PyInt> C<*value>.

=cut

*/

    void set_integer_same (PMC * value) {
        PMC_int_val(SELF) = PMC_int_val(value);
    }

/*

=item C<void set_pmc(PMC *value)>

Sets the PMC C<*value>, calling the appropriate C<set_*> method
according to the type of C<*value>.

=cut

*/

    void set_pmc (PMC* value) {
        if (SELF->vtable->base_type == value->vtable->base_type) {
            DYNSELF.set_integer_same(value);
        }
        else {
            DYNSELF.morph(value->vtable->base_type);
            DYNSELF.set_pmc(value);
        }
    }

/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
