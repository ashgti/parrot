/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/pytype.pmc - Python Class

=head1 DESCRIPTION

These are the vtable functions for the Python Type base class (i.e.,
methods you would expect to see on Python Classes

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

/* cache of classes referenced */
static INTVAL dynclass_PyClass;
static INTVAL dynclass_PyString;
static INTVAL dynclass_PyType;
static STRING *CLASS;
static STRING *INIT;
static STRING *NAME;
static STRING *BASES;
static STRING *PYTYPE;

pmclass PyType dynpmc group python_group {

/*

=item C<void class_init()>

Class initialization. Caches the type id of various PMCs because
they will be used frequently here.

=cut

*/

    void class_init() {
        if (pass) {
            dynclass_PyClass = Parrot_PMC_typenum(INTERP, "PyClass");
            dynclass_PyString = Parrot_PMC_typenum(INTERP, "PyString");
            dynclass_PyType = Parrot_PMC_typenum(INTERP, "PyType");
            CLASS = const_string(INTERP, "__class__");
            INIT = const_string(INTERP, "__init__");
            NAME = const_string(INTERP, "__name__");
            BASES = const_string(INTERP, "__bases__");
            PYTYPE = const_string(INTERP, "PyType");
        }
    }

/*

=item C<PMC *find_method(STRING *method_name)>

Looks up the method for C<*method_name> and returns it.

=cut

*/

    PMC* find_method(STRING* method_name) {
        PMC *parent;

        PMC *method = VTABLE_getprop(INTERP, SELF, method_name);
        if (method && VTABLE_defined(INTERP, method)) return method;

        parent = VTABLE_getprop(INTERP, SELF, BASES);
        if (parent) {
            return VTABLE_find_method(INTERP, parent, method_name);
        }

        return 0;
    }

/*

=item C<PMC* get_attr_str(STRING *name)>

Return attribute named C<name>.

=cut

*/

    PMC* get_attr_str(STRING* idx) {
        PMC *parent;

        PMC *attr = VTABLE_getprop(INTERP, SELF, idx);
        if (attr && VTABLE_defined(INTERP, attr)) return attr;

        parent = VTABLE_getprop(INTERP, SELF, BASES);
        if (parent) {
            attr = VTABLE_get_attr_str(INTERP, parent, idx);
        }

        if (!attr || !VTABLE_defined(INTERP, attr)) {
            STRING *message;
            message = Parrot_sprintf_c(INTERP, "AttributeError: %s",
                string_to_cstring(INTERP, idx));
            real_exception(INTERP, NULL, E_AttributeError,
                string_to_cstring(INTERP, message));
        }

        return attr;
    }

/*

=item C<void* invoke(void* next)>

Pythonic object constructor.

=cut

*/

    void* invoke(void* next) {
        PMC *object, *init;

        object = pmc_new(interpreter, dynclass_PyClass);
        VTABLE_setprop(INTERP, object, CLASS, REG_PMC(0));

        init = VTABLE_find_method(INTERP, object, INIT);
        if (init) {
            REG_PMC(2) = object;
            Parrot_runops_fromc(INTERP, init);
        }

        REG_PMC(5) = object;
        return next;
    }

/*

=item C<PMC* subclass(STRING *name)>

Create a subclass of the given class.  Note that this merely creates
a new PyType... all the interesting details that make it a subclass
need to be filled in.

=cut

*/

    PMC* subclass(STRING* name) {
        PMC *ret = pmc_new(INTERP, dynclass_PyType);
        PMC *nameprop = pmc_new(INTERP, dynclass_PyString);
        VTABLE_set_string_native(INTERP, nameprop, name);
        VTABLE_setprop(INTERP, ret, NAME, nameprop);
        VTABLE_setprop(INTERP, ret, BASES, SELF);
        return ret;
    }

/*

=item C<STRING *name()>

Returns the name of this class.

*/


    STRING* name() {
        PMC *name = VTABLE_getprop(INTERP, SELF, NAME);
        return VTABLE_get_string(INTERP, name);
    }

/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
