/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/pytype.pmc - Python Class

=head1 DESCRIPTION

These are the vtable functions for the Python Class base class

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

/* cache of classes referenced */
static INTVAL dynclass_PyClass;
static INTVAL dynclass_PyType;
static STRING *CLASS;

pmclass PyType extends ParrotClass dynpmc group python_group {

/*

=item C<void class_init()>

Class initialization. Caches the type id of various PMCs because
they will be used frequently here.

=cut

*/

    void class_init() {
        if (pass) {
            dynclass_PyClass = Parrot_PMC_typenum(INTERP, "PyClass");
            dynclass_PyType = Parrot_PMC_typenum(INTERP, "PyType");
            CLASS = const_string(INTERP, "__class__");
        }
    }

/*

=item C<PMC* get_attr_str(STRING *name)>

Return attribute named C<name>.

=cut

*/

    PMC* get_attr_str(STRING* idx) {
        STRING *message;

        /* XXX: should test SUPER(idx) first, but for now we receive a
           SIGSEGV Segmentation fault in hash_get_bucket
        PMC *attr = SUPER(idx);
        if (attr && VTABLE_defined(INTERP, attr)) return attr;
        */

        PMC *attr = VTABLE_getprop(INTERP, SELF, idx);
        if (attr && VTABLE_defined(INTERP, attr)) return attr;

        message = Parrot_sprintf_c(INTERP, "AttributeError: %s",
            string_to_cstring(INTERP, idx));
        real_exception(INTERP, NULL, E_AttributeError,
            string_to_cstring(INTERP, message));
        return attr;
    }

/*

=item C<void* invoke(void* next)>

Pythonic object constructor.

=cut

*/

    void* invoke(void* next) {
        REG_PMC(5) = pmc_new(interpreter, REG_PMC(0)->vtable->base_type);

        REG_PMC(5)->vtable = Parrot_base_vtables[dynclass_PyClass];

        VTABLE_setprop(INTERP, REG_PMC(5), CLASS, REG_PMC(0));

        return next;
    }

/*

=item C<PMC* subclass(STRING *name)>

Create a subclass of the given class.

=cut

*/

    PMC* subclass(STRING* name) {
        /* XXX: Ideally, we would have metaclasses (and C<subclass> would
           be a method on the metaclass itself and could be set
           up to create a PMC of the proper type, but for now, we create
           a ParrotClass and morph it */
        PMC *ret = SUPER(name);
        ret->vtable = Parrot_base_vtables[dynclass_PyType];
        return ret;
    }

/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
