/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/pytuple.pmc - Python tuple

=head1 DESCRIPTION

This class, PyTuple, implements an array of fixed size, which stores PMCs,
it puts things into Integer, Float, or String PMCs as appropriate

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "pyconsts.h"

pmclass PyTuple extends PyObject need_ext does array dynpmc group python_group {

/*

=item C<void init()>

Initializes the array.

=cut

*/

    void init () {
        list_pmc_new(INTERP, SELF);
        PMC_int_val(SELF) = 0;
    }

/*

=item C<void destroy()>

Destroys the array.

=cut

*/

    void destroy () {
        SUPER();
        if (PMC_data(SELF))
            mem_sys_free(PMC_data(SELF));
        PMC_data(SELF) = NULL;
        PMC_int_val(SELF) = 0;
    }

/*

=item C<PMC* "__new__"(PMC *class, PMC *value)>

Create a new long.

=cut

*/

    METHOD PMC* __new__(PMC *class, PMC *value) {
        INTVAL argc = REG_INT(3);

        PMC * ret = pmc_new(INTERP, PyBuiltin_PyTuple);

        if (argc > 1) {
            INTVAL n = VTABLE_elements(INTERP, value);
            INTVAL j;

            VTABLE_set_integer_native(INTERP, ret, n);

            for (j=0; j<n; j++) {
                PMC *item = VTABLE_get_pmc_keyed_int(INTERP, value, j);
                VTABLE_set_pmc_keyed_int(INTERP, ret, j, item);
            }
        }

        return ret;
    }

/*

=item C<INTVAL get_bool()>

Returns true iff there are elements in the tuple.

=cut

*/

    INTVAL get_bool () {
        return DYNSELF.elements() != 0;
    }

/*

=item C<INTVAL elements()>

Returns the number of elements in the array.

=cut

*/

    INTVAL elements () {
        if (PMC_int_val(SELF) < 0)  PMC_int_val(SELF) = 0;
        return PMC_int_val(SELF);
    }

/*

=item C<PMC *get_class()>

Return the class of this object.

=cut

*/

    PMC* get_class() {
        return PyBuiltin_PyTuple_class;
    }

/*

=item C<INTVAL get_integer()>

Returns the number of elements in the array.

=cut

*/

    INTVAL get_integer () {
        return DYNSELF.elements();
    }

/*

=item C<PMC* get_iter ()>

Return a new iterator for SELF.

=cut

*/

    PMC* get_iter () {
        PMC *iter = pmc_new_init(interpreter, enum_class_Iterator, SELF);
        PMC *key =  pmc_new(interpreter, enum_class_Key);
        PMC_struct_val(iter) = key;
        PObj_get_FLAGS(key) |= KEY_integer_FLAG;
        PMC_int_val(key) = 0;
        if (!((List *) PMC_data(SELF))->length)
            PMC_int_val(key) = -1;
        return iter;
    }

/*

=item C<PMC* get_pmc_keyed(PMC* key)>

Returns the PMC value of the element at index C<key>.

=cut

*/

    PMC* get_pmc_keyed (PMC* key) {
        INTVAL ix = key_integer(INTERP, key);
        return SELF.get_pmc_keyed_int(ix);
    }

/*

=item C<PMC* get_pmc_keyed_int(INTVAL key)>

Returns the PMC value of the element at index C<key>.

=cut

*/

    PMC* get_pmc_keyed_int (INTVAL key) {
        PMC **data;
        if (key < 0 || key >= PMC_int_val(SELF))
            internal_exception(OUT_OF_BOUNDS,
                "PyTuple: index out of bounds!");

        data = (PMC **)PMC_data(SELF);
        return data[key];
    }

/*

=item C<STRING *get_string()>

Return a representation of the tuple

=cut

*/

    STRING* get_string () {
        STRING *res, *s;
        INTVAL j, n;
        PMC *val;

        res = string_from_cstring(INTERP, "(", 0);
        n = VTABLE_elements(INTERP, SELF);
        for (j = 0; j < n; ++j) {
            val = SELF.get_pmc_keyed_int(j);
            res = string_append(INTERP, res,
                    VTABLE_get_repr(INTERP, val), 0);
            if (n == 1)
                res = string_append(INTERP, res,
                        const_string(INTERP, ","), 0);
            else if (j < n - 1)
                res = string_append(INTERP, res,
                        const_string(INTERP, ", "), 0);
        }
        res = string_append(INTERP, res,
                    const_string(INTERP, ")"), 0);
        return res;
    }

/*

=item C<INTVAL is_equal (PMC* value)>

The C<==> operation. Compares two array to hold equal elements.

=cut

*/

    INTVAL is_equal (PMC* value) {
        INTVAL j, n;

        if (SELF->vtable->base_type != PyBuiltin_PyTuple)
            internal_exception(OUT_OF_BOUNDS,
                "PyTuple: is_equal on a non-tuple");
        if (value->vtable->base_type != PyBuiltin_PyTuple)
            return 0;
        if (SELF == value)
            return 1;
        n = SELF.elements();
        if (VTABLE_elements(INTERP, value) != n)
            return 0;
        for (j = 0; j < n; ++j) {
            PMC *item1, *item2;
            item1 = SELF.get_pmc_keyed_int(j);
            item2 = VTABLE_get_pmc_keyed_int(INTERP, value, j);
            if (item1 == item2)
                continue;
            if (!mmd_dispatch_i_pp(INTERP, item1, item2, MMD_EQ))
                return 0;
        }
        return 1;
    }

/*

=item C<void set_integer_keyed(PMC *key, INTVAL value)>

Sets the integer value of the element at index C<key> to C<value>.

=cut

*/

    void set_integer_keyed (PMC *key, INTVAL value) {
        PMC *val = pmc_new(INTERP, PyBuiltin_PyInt);
        VTABLE_set_integer_native(INTERP, val, value);
        DYNSELF.set_pmc_keyed_int(PMC_int_val(key), val);
    }

/*

=item C<void set_integer_native(INTVAL size)>

Resizes the array to C<size> elements.

=cut

*/

    void set_integer_native (INTVAL size) {
        int i;
        PMC **data;

        if (PMC_int_val(SELF) && size)
            internal_exception(OUT_OF_BOUNDS, "PyTuple: Can't resize!");
        if (!size)
            return;
        PMC_int_val(SELF) = size;
        data = (PMC**)mem_sys_allocate(size * sizeof(PMC*));
        for(i = 0; i < size; i++)
            data[i] = PMCNULL;
        PMC_data(SELF) = data;
        PObj_data_is_PMC_array_SET(SELF);
    }

/*

=item C<void set_number_keyed(PMC *key, INTVAL value)>

Sets the number value of the element at index C<key> to C<value>.

=cut

*/

    void set_number_keyed (PMC *key, FLOATVAL value) {
        PMC *val = pmc_new(INTERP, PyBuiltin_PyFloat);
        VTABLE_set_number_native(INTERP, val, value);
        DYNSELF.set_pmc_keyed_int(PMC_int_val(key), val);
    }

/*

=item C<void set_pmc_keyed_int(INTVAL key, PMC *src)>

Sets the PMC value of the element at index C<key> to C<*src>.

=cut

*/

    void set_pmc_keyed_int (INTVAL key, PMC* src) {
        PMC **data;
        if (key < 0 || key >= PMC_int_val(SELF))
            internal_exception(OUT_OF_BOUNDS,
                "PyTuple: index out of bounds!");

        data = (PMC**)PMC_data(SELF);
        DOD_WRITE_BARRIER(INTERP, SELF, data[key], src);
        data[key] = src;
    }

/*

=item C<void set_string_keyed_int(INTVAL key, STRING* value)>

Sets the string value of the PMC at element C<key> to C<value>.

=cut

*/

    void set_string_keyed_int (INTVAL key, STRING* value) {
        PMC *src = pmc_new_noinit(INTERP, PyBuiltin_PyString);
        VTABLE_set_string_native(INTERP, src, value);
        DYNSELF.set_pmc_keyed_int(key, src);
    }

/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
