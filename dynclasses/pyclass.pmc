/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/pyclass.pmc - Python Class

=head1 DESCRIPTION

These are the vtable functions for the Python Class base class

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

/* cache of classes referenced */
static INTVAL dynclass_PyType;
static STRING *CLASS;

pmclass PyClass extends ParrotObject dynpmc group python_group {

/*

=item C<void class_init()>

Class initialization. Caches the type id of various PMCs because
they will be used frequently here.

=cut

*/

    void class_init() {
        if (pass) {
            dynclass_PyType = Parrot_PMC_typenum(INTERP, "PyType");
            CLASS = const_string(INTERP, "__class__");
        }
    }

/*

=item C<PMC *find_method(STRING *method_name)>

Looks up the method for C<*method_name> and returns it. If no method is
found then lookup an attribute by this name, and return it.  If all else
fails, return null.

=cut

*/

    PMC* find_method(STRING* method_name) {
        PMC * method = SUPER(method_name);
        if (method && VTABLE_defined(INTERP, method)) return method;

        method = VTABLE_getprop(INTERP, REG_PMC(0), method_name);
        if (method && VTABLE_defined(INTERP, method)) return method;

        return 0;
    }

/*

=item C<PMC* get_attr_str(STRING *name)>

Return attribute named C<name>.

=cut

*/

    PMC* get_attr_str(STRING* idx) {
        STRING *message;

        /* XXX: should test SUPER(idx) first, but for now we receive:
           "Can't set non-core object attribs yet"
        PMC *attr = SUPER(idx);
        if (attr && VTABLE_defined(INTERP, attr)) return attr;
        */

        PMC *attr = VTABLE_getprop(INTERP, SELF, idx);
        if (attr && VTABLE_defined(INTERP, attr)) return attr;

        message = Parrot_sprintf_c(INTERP, "AttributeError: %s",
            string_to_cstring(INTERP, idx));
        real_exception(INTERP, NULL, E_AttributeError,
            string_to_cstring(INTERP, message));
        return attr;
    }

/*

=item C<PMC *get_class()>

Return the class of this object.

=cut

*/

    PMC* get_class() {
        PMC *ret = VTABLE_getprop(INTERP, SELF, CLASS);
        return ret;
    }

/*

=item C<PMC *getprop(STRING *key)>

Returns the property for C<*key>. If the property is not defined then for
the instance, try the class.  If still no luck, return None.

=cut

*/

    PMC* getprop(STRING* key) {
        PMC * prop = SUPER(key);
        PMC * class;

        if (prop && VTABLE_defined(INTERP, prop)) return prop;

        class = SUPER(CLASS);
        if (class) {
            prop = VTABLE_getprop(INTERP, class, key);
            if (prop && VTABLE_defined(INTERP, prop)) return prop;
        }

        return prop;
    }

/*

=item C<PMC* subclass(STRING *name)>

Create a subclass of the given class.

=cut

*/

    PMC* subclass(STRING* name) {
        /* XXX: Ideally, we would have metaclasses (and C<subclass> would
           be a method on the metaclass itself and could be set
           up to create a PMC of the proper type, but for now, we create
           a ParrotClass and morph it */
        PMC *ret = SUPER(name);
        ret->vtable = Parrot_base_vtables[dynclass_PyType];
        return ret;
    }

/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
