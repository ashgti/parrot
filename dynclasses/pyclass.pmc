/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/pyclass.pmc - Python Class

=head1 DESCRIPTION

These are the vtable functions for the Python Class base class

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

/* cache of classes referenced */
static INTVAL dynclass_PyNone;
static STRING *CLASS;

pmclass PyClass dynpmc group python_group {

/*

=item C<void class_init()>

Class initialization. Caches the type id of various PMCs because
they will be used frequently here.

=cut

*/

    void class_init() {
        if (pass) {
            dynclass_PyNone = Parrot_PMC_typenum(INTERP, "PyNone");
            CLASS = string_from_cstring(INTERP, "__class__", 0);
        }
    }

/*

=item C<PMC *getprop(STRING *key)>

Returns the property for C<*key>. If the property is not defined then for
the instance, try the class.  If still no luck, return None.

=cut

*/

    PMC* getprop(STRING* key) {
        PMC * prop = SUPER(key);
        PMC *class = SELF;

        if (prop && VTABLE_defined(INTERP, prop)) return prop;

        if (PObj_is_object_TEST(SELF)) {
            class = GET_CLASS((Buffer *)PMC_data(SELF), SELF);
        }

        if (class) {
            prop = VTABLE_getprop(INTERP, class, key);
        }

        if (prop && VTABLE_defined(INTERP, prop)) return prop;

        return pmc_new(INTERP, dynclass_PyNone);
    }

/*

=item C<PMC *find_method(STRING *method_name)>

Looks up the method for C<*method_name> and returns it. If no method is
found then lookup an attribute by this name, and return it.  If all else
fails, return null.

=cut

*/

    PMC* find_method(STRING* method_name) {
        PMC * method = SUPER(method_name);
        if (!method) {
            method = VTABLE_getprop(INTERP, REG_PMC(0), method_name);
            if (!VTABLE_defined(INTERP, method)) method=0;
        }
        return method;
    }

/*

=item C<void* invoke(void* next)>

Pythonic object constructor.

=cut

*/

    void* invoke(void* next) {
        REG_PMC(5) = pmc_new(interpreter, REG_PMC(0)->vtable->base_type);

        /*
           XXX

           If Parrot allowed you to override getprop on subclasses, and
           put the parent class PMC someplace where it could be found,
           none of this would be necessary, but as Parrot doesn't
           (currently!), we take matters into our own hands...
        */

        REG_PMC(5)->vtable->getprop = Parrot_PyClass_getprop;
        VTABLE_setprop(INTERP, REG_PMC(0), CLASS, REG_PMC(0));

        return next;
    }

/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
