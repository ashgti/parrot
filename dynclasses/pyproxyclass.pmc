/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/pyproxyclass.pmc - Python Proxy Class

=head1 DESCRIPTION

Forward method and attribute requests onto the object that is
being proxied.

=head2 Methods

=over 4

TODO: handle attributes.

=cut

*/

#include "parrot/parrot.h"
#include "pyconsts.h"

pmclass PyProxyClass extends PyType dynpmc group python_group {

/*

=item C<PMC *find_method(STRING *method_name)>

Looks up the method for C<*method_name> and returns it.

=cut

*/

    PMC* find_method(STRING* method_name) {
        PMC *method = SUPER(method_name);

        if (method) {
            if (method->vtable->base_type != PyBuiltin_PyBoundMeth)
                internal_exception(1, "Non-bound method encountered in proxy");
            else {
                PMC *proxy = INTERP->ctx.current_object;
                VTABLE_set_pmc(INTERP, method,
                    VTABLE_getprop(INTERP, proxy, PyString_proxy));
            }
        }

        return method;
    }


/*

=back

=cut

*/

}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
