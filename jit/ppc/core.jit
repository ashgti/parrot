;
; ppc/core.jit
;
;
; $Id$
;

Parrot_end {
    jit_emit_add_rri_i(NATIVECODE, r1, r1, 64);
    jit_emit_lwz(NATIVECODE, r0, 8, r1);
    jit_emit_mtlr(NATIVECODE, r0);
;    jit_emit_lmw(NATIVECODE, r30, -8, r1);
    jit_emit_blr(NATIVECODE);
}

Parrot_set_i_ic {
    if (MAP[1]) {
        jit_emit_load_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
    }
    else {
        jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[2]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]); 
    }
}

Parrot_set_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_mr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, MAP[1], &INT_REG[2]); 
    } 
    else if (MAP[2]) {
        jit_emit_store_rd_i(NATIVECODE, MAP[2], &INT_REG[1]); 
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]); 
    }
}

Parrot_set_n_nc {
    if (MAP[1]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, MAP[1], 0, r12);
    }
    else {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, r12, 0, r12);
        jit_emit_stfd_r(NATIVECODE, r12, &NUM_REG[1]); 
    }
}

Parrot_neg_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_neg_rr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_neg_rr(NATIVECODE, MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_neg_rr(NATIVECODE, r12, MAP[1]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_neg_rr(NATIVECODE, r12, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_bor_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_or_rrr(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]); 
        jit_emit_or_rrr(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_or_rrr(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_or_rrr(NATIVECODE, r12, MAP[2], MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_or_rrr(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_or_rrr(NATIVECODE, r12, MAP[2], r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_or_rrr(NATIVECODE, r12, r12, MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_or_rrr(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_bor_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_or_rrr(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_or_rrr(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_or_rrr(NATIVECODE, r12, r12, MAP[2]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_or_rrr(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_add_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_add_rrr(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]); 
        jit_emit_add_rrr(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_add_rrr(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_add_rrr(NATIVECODE, r12, MAP[2], MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_add_rrr(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_add_rrr(NATIVECODE, r12, MAP[2], r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_add_rrr(NATIVECODE, r12, r12, MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_add_rrr(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_add_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_add_rrr(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_add_rrr(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_add_rrr(NATIVECODE, r12, r12, MAP[2]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_add_rrr(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_bxor_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_xor(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]); 
        jit_emit_xor(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_xor(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_xor(NATIVECODE, r12, MAP[2], MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_xor(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_xor(NATIVECODE, r12, MAP[2], r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_xor(NATIVECODE, r12, r12, MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_xor(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_bxor_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_xor(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_xor(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_xor(NATIVECODE, r12, r12, MAP[2]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_xor(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_div_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_divw(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]); 
        jit_emit_divw(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_divw(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_divw(NATIVECODE, r12, MAP[2], MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_divw(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_divw(NATIVECODE, r12, MAP[2], r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_divw(NATIVECODE, r12, r12, MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_divw(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_div_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_divw(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_divw(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_divw(NATIVECODE, r12, r12, MAP[2]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_divw(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_band_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_and(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]); 
        jit_emit_and(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_and(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_and(NATIVECODE, r12, MAP[2], MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_and(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_and(NATIVECODE, r12, MAP[2], r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_and(NATIVECODE, r12, r12, MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_and(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_band_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_and(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_and(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_and(NATIVECODE, r12, r12, MAP[2]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_and(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_mul_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_mullw(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]); 
        jit_emit_mullw(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_mullw(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_mullw(NATIVECODE, r12, MAP[2], MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_mullw(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_mullw(NATIVECODE, r12, MAP[2], r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_mullw(NATIVECODE, r12, r12, MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_mullw(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_mul_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_mullw(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_mullw(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_mullw(NATIVECODE, r12, r12, MAP[2]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_mullw(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_sub_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_sub_rrr(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]); 
        jit_emit_sub_rrr(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_sub_rrr(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_sub_rrr(NATIVECODE, r12, MAP[2], MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_sub_rrr(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_sub_rrr(NATIVECODE, r12, MAP[2], r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_sub_rrr(NATIVECODE, r12, r12, MAP[3]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[3]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_sub_rrr(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_sub_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_sub_rrr(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_sub_rrr(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_sub_rrr(NATIVECODE, r12, r12, MAP[2]);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_sub_rrr(NATIVECODE, r12, r11, r12);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_inc_i {
    if (MAP[1]) {
        jit_emit_add_rri_i (NATIVECODE, MAP[1], MAP[1], 1);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]); 
        jit_emit_add_rri_i (NATIVECODE, r12, r12, 1);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_dec_i {
    if (MAP[1]) {
        jit_emit_add_rri_i (NATIVECODE, MAP[1], MAP[1], -1);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]); 
        jit_emit_add_rri_i (NATIVECODE, r12, r12, -1);
        jit_emit_store_rd_i(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_neg_n_n {
    if (MAP[1] && MAP[2]) {
        jit_emit_fneg_rrr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fneg_rrr(NATIVECODE, MAP[1], f12);
    }
    else if (MAP[2]) {
        jit_emit_fneg_rrr(NATIVECODE, f12, MAP[2]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fneg_rrr(NATIVECODE, f12, f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
}

Parrot_abs_n_n {
    if (MAP[1] && MAP[2]) {
        jit_emit_fabs_rrr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fabs_rrr(NATIVECODE, MAP[1], f12);
    }
    else if (MAP[2]) {
        jit_emit_fabs_rrr(NATIVECODE, f12, MAP[2]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fabs_rrr(NATIVECODE, f12, f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
}

Parrot_add_n_n_n {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_fadd_rrr(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fadd_rrr(NATIVECODE, MAP[1], MAP[2], f12);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fadd_rrr(NATIVECODE, MAP[1], MAP[3], f12);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_fadd_rrr(NATIVECODE, f12, MAP[2], MAP[3]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fadd_rrr(NATIVECODE, MAP[1], f11, f12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fadd_rrr(NATIVECODE, f12, MAP[2], f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else if (MAP[3]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fadd_rrr(NATIVECODE, f12, MAP[3], f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fadd_rrr(NATIVECODE, f12, f11, f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
}

Parrot_add_n_n {
    if (MAP[1] && MAP[2]) {
        jit_emit_fadd_rrr(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fadd_rrr(NATIVECODE, MAP[1], MAP[1], f12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[1]);
        jit_emit_fadd_rrr(NATIVECODE, f12, f12, MAP[2]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fadd_rrr(NATIVECODE, f12, f11, f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
}

Parrot_div_n_n_n {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_fdiv(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fdiv(NATIVECODE, MAP[1], MAP[2], f12);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fdiv(NATIVECODE, MAP[1], f12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_fdiv(NATIVECODE, f12, MAP[2], MAP[3]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fdiv(NATIVECODE, MAP[1], f11, f12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fdiv(NATIVECODE, f12, MAP[2], f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else if (MAP[3]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fdiv(NATIVECODE, f12, f12, MAP[3]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fdiv(NATIVECODE, f12, f11, f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
}

Parrot_div_n_n {
    if (MAP[1] && MAP[2]) {
        jit_emit_fdiv(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fdiv(NATIVECODE, MAP[1], MAP[1], f12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[1]);
        jit_emit_fdiv(NATIVECODE, f12, f12, MAP[2]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fdiv(NATIVECODE, f12, f11, f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
}

Parrot_mul_n_n_n {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_fmul(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fmul(NATIVECODE, MAP[1], MAP[2], f12);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fmul(NATIVECODE, MAP[1], f12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_fmul(NATIVECODE, f12, MAP[2], MAP[3]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fmul(NATIVECODE, MAP[1], f11, f12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fmul(NATIVECODE, f12, MAP[2], f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else if (MAP[3]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fmul(NATIVECODE, f12, f12, MAP[3]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fmul(NATIVECODE, f12, f11, f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
}

Parrot_mul_n_n {
    if (MAP[1] && MAP[2]) {
        jit_emit_fmul(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fmul(NATIVECODE, MAP[1], MAP[1], f12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[1]);
        jit_emit_fmul(NATIVECODE, f12, f12, MAP[2]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fmul(NATIVECODE, f12, f11, f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
}

Parrot_sub_n_n_n {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_fsub(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fsub(NATIVECODE, MAP[1], MAP[2], f12);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fsub(NATIVECODE, MAP[1], f12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_fsub(NATIVECODE, f12, MAP[2], MAP[3]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fsub(NATIVECODE, MAP[1], f11, f12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fsub(NATIVECODE, f12, MAP[2], f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else if (MAP[3]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fsub(NATIVECODE, f12, f12, MAP[3]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[3]);
        jit_emit_fsub(NATIVECODE, f12, f11, f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
}

Parrot_sub_n_n {
    if (MAP[1] && MAP[2]) {
        jit_emit_fsub(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fsub(NATIVECODE, MAP[1], MAP[1], f12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[1]);
        jit_emit_fsub(NATIVECODE, f12, f12, MAP[2]);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fsub(NATIVECODE, f12, f11, f12);
        jit_emit_stfd_r(NATIVECODE, f12, &NUM_REG[1]);
    }
}

Parrot_if_i_ic {
    if (MAP[1]) {
        jit_emit_cmpi(NATIVECODE, MAP[1], 0);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_cmpi(NATIVECODE, r12, 0);
    }
    jit_emit_bc(jit_info, BNE, *INT_CONST[2]);
}
        
Parrot_gt_i_i_ic {
; First, jit_emit the compare op:
    if (MAP[1] && MAP[2]) {
        jit_emit_cmp_rr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_cmp_rr(NATIVECODE, MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_cmp_rr(NATIVECODE, r12, MAP[2]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_cmp_rr(NATIVECODE, r11, r12);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BGT, *INT_CONST[3]);
}

Parrot_gt_i_ic_ic {
    jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[2]);

    if (MAP[1]) {
        jit_emit_cmp_rr(NATIVECODE, MAP[1], r12);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[1]);
        jit_emit_cmp_rr(NATIVECODE, r11, r12);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BGT, *INT_CONST[3]);
}

Parrot_gt_ic_i_ic {
    jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[1]);

    if (MAP[2]) {
        jit_emit_cmp_rr(NATIVECODE, r12, MAP[2]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_cmp_rr(NATIVECODE, r12, r11);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BGT, *INT_CONST[3]);
}

Parrot_gt_ic_ic_ic {
    if (*INT_CONST[1] > *INT_CONST[2])
        jit_emit_bx(jit_info, 0, *INT_CONST[3]);
}

Parrot_eq_i_i_ic {
; First, jit_emit the compare op:
    if (MAP[1] && MAP[2]) {
        jit_emit_cmp_rr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_cmp_rr(NATIVECODE, MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_cmp_rr(NATIVECODE, r12, MAP[2]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_cmp_rr(NATIVECODE, r11, r12);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BEQ, *INT_CONST[3]);
}

Parrot_eq_i_ic_ic {
    jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[2]);

    if (MAP[1]) {
        jit_emit_cmp_rr(NATIVECODE, MAP[1], r12);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[1]);
        jit_emit_cmp_rr(NATIVECODE, r11, r12);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BEQ, *INT_CONST[3]);
}

Parrot_eq_ic_i_ic {
    jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[1]);

    if (MAP[2]) {
        jit_emit_cmp_rr(NATIVECODE, r12, MAP[2]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_cmp_rr(NATIVECODE, r12, r11);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BEQ, *INT_CONST[3]);
}

Parrot_eq_ic_ic_ic {
    if (*INT_CONST[1] == *INT_CONST[2])
        jit_emit_bx(jit_info, 0, *INT_CONST[3]);
}

Parrot_ge_i_i_ic {
; First, jit_emit the compare op:
    if (MAP[1] && MAP[2]) {
        jit_emit_cmp_rr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_cmp_rr(NATIVECODE, MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_cmp_rr(NATIVECODE, r12, MAP[2]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_cmp_rr(NATIVECODE, r11, r12);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BGE, *INT_CONST[3]);
}

Parrot_ge_i_ic_ic {
    jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[2]);

    if (MAP[1]) {
        jit_emit_cmp_rr(NATIVECODE, MAP[1], r12);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[1]);
        jit_emit_cmp_rr(NATIVECODE, r11, r12);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BGE, *INT_CONST[3]);
}

Parrot_ge_ic_i_ic {
    jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[1]);

    if (MAP[2]) {
        jit_emit_cmp_rr(NATIVECODE, r12, MAP[2]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_cmp_rr(NATIVECODE, r12, r11);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BGE, *INT_CONST[3]);
}

Parrot_ge_ic_ic_ic {
    if (*INT_CONST[1] >= *INT_CONST[2])
        jit_emit_bx(jit_info, 0, *INT_CONST[3]);
}

Parrot_lt_i_i_ic {
; First, jit_emit the compare op:
    if (MAP[1] && MAP[2]) {
        jit_emit_cmp_rr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_cmp_rr(NATIVECODE, MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_cmp_rr(NATIVECODE, r12, MAP[2]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_cmp_rr(NATIVECODE, r11, r12);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BLT, *INT_CONST[3]);
}

Parrot_lt_i_ic_ic {
    jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[2]);

    if (MAP[1]) {
        jit_emit_cmp_rr(NATIVECODE, MAP[1], r12);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[1]);
        jit_emit_cmp_rr(NATIVECODE, r11, r12);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BLT, *INT_CONST[3]);
}

Parrot_lt_ic_i_ic {
    jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[1]);

    if (MAP[2]) {
        jit_emit_cmp_rr(NATIVECODE, r12, MAP[2]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_cmp_rr(NATIVECODE, r12, r11);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BLT, *INT_CONST[3]);
}

Parrot_lt_ic_ic_ic {
    if (*INT_CONST[1] < *INT_CONST[2])
        jit_emit_bx(jit_info, 0, *INT_CONST[3]);
}

Parrot_le_i_i_ic {
; First, jit_emit the compare op:
    if (MAP[1] && MAP[2]) {
        jit_emit_cmp_rr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_cmp_rr(NATIVECODE, MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_cmp_rr(NATIVECODE, r12, MAP[2]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_cmp_rr(NATIVECODE, r11, r12);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BLE, *INT_CONST[3]);
}

Parrot_le_i_ic_ic {
    jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[2]);

    if (MAP[1]) {
        jit_emit_cmp_rr(NATIVECODE, MAP[1], r12);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[1]);
        jit_emit_cmp_rr(NATIVECODE, r11, r12);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BLE, *INT_CONST[3]);
}

Parrot_le_ic_i_ic {
    jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[1]);

    if (MAP[2]) {
        jit_emit_cmp_rr(NATIVECODE, r12, MAP[2]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_cmp_rr(NATIVECODE, r12, r11);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BLE, *INT_CONST[3]);
}

Parrot_le_ic_ic_ic {
    if (*INT_CONST[1] <= *INT_CONST[2])
        jit_emit_bx(jit_info, 0, *INT_CONST[3]);
}

Parrot_ne_i_i_ic {
; First, jit_emit the compare op:
    if (MAP[1] && MAP[2]) {
        jit_emit_cmp_rr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]); 
        jit_emit_cmp_rr(NATIVECODE, MAP[1], r12);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[1]);
        jit_emit_cmp_rr(NATIVECODE, r12, MAP[2]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[1]);
        jit_emit_load_rd_i(NATIVECODE, r12, &INT_REG[2]);
        jit_emit_cmp_rr(NATIVECODE, r11, r12);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BNE, *INT_CONST[3]);
}

Parrot_ne_i_ic_ic {
    jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[2]);

    if (MAP[1]) {
        jit_emit_cmp_rr(NATIVECODE, MAP[1], r12);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[1]);
        jit_emit_cmp_rr(NATIVECODE, r11, r12);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BNE, *INT_CONST[3]);
}

Parrot_ne_ic_i_ic {
    jit_emit_load_ri_i(NATIVECODE, r12, *INT_CONST[1]);

    if (MAP[2]) {
        jit_emit_cmp_rr(NATIVECODE, r12, MAP[2]);
    }
    else {
        jit_emit_load_rd_i(NATIVECODE, r11, &INT_REG[2]);
        jit_emit_cmp_rr(NATIVECODE, r12, r11);
    }
; Now the branch. XXX: need to handle large displacements.
    jit_emit_bc(jit_info, BNE, *INT_CONST[3]);
}

Parrot_ne_ic_ic_ic {
    if (*INT_CONST[1] != *INT_CONST[2])
        jit_emit_bx(jit_info, 0, *INT_CONST[3]);
}

Parrot_gt_n_n_ic {
    if (MAP[1] && MAP[2]) {
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], MAP[2]);
        jit_emit_bc(jit_info, BGT, *INT_CONST[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], f12);
        jit_emit_bc(jit_info, BGT, *INT_CONST[3]);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[1]);
        jit_emit_fcmp_rr(NATIVECODE, f12, MAP[2]);
        jit_emit_bc(jit_info, BGT, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fcmp_rr(NATIVECODE, f11, f12);
        jit_emit_bc(jit_info, BGT, *INT_CONST[3]);
    }
}

Parrot_gt_n_nc_ic {
    if (MAP[1]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], f12);
        jit_emit_bc(jit_info, BGT, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f11, f12);
        jit_emit_bc(jit_info, BGT, *INT_CONST[3]);
    }
}

Parrot_gt_nc_n_ic {
    if (MAP[2]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[1]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f12, MAP[2]);
        jit_emit_bc(jit_info, BGT, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[1]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f12, f11);
        jit_emit_bc(jit_info, BGT, *INT_CONST[3]);
    }
}

Parrot_gt_nc_nc_ic {
    if (*NUM_CONST[1] > *NUM_CONST[2])
        jit_emit_bx(jit_info, 0, *INT_CONST[3]);
}

Parrot_eq_n_n_ic {
    if (MAP[1] && MAP[2]) {
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], MAP[2]);
        jit_emit_bc(jit_info, BEQ, *INT_CONST[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], f12);
        jit_emit_bc(jit_info, BEQ, *INT_CONST[3]);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[1]);
        jit_emit_fcmp_rr(NATIVECODE, f12, MAP[2]);
        jit_emit_bc(jit_info, BEQ, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fcmp_rr(NATIVECODE, f11, f12);
        jit_emit_bc(jit_info, BEQ, *INT_CONST[3]);
    }
}

Parrot_eq_n_nc_ic {
    if (MAP[1]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], f12);
        jit_emit_bc(jit_info, BEQ, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f11, f12);
        jit_emit_bc(jit_info, BEQ, *INT_CONST[3]);
    }
}

Parrot_eq_nc_n_ic {
    if (MAP[2]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[1]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f12, MAP[2]);
        jit_emit_bc(jit_info, BEQ, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[1]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f12, f11);
        jit_emit_bc(jit_info, BEQ, *INT_CONST[3]);
    }
}

Parrot_eq_nc_nc_ic {
    if (*NUM_CONST[1] == *NUM_CONST[2])
        jit_emit_bx(jit_info, 0, *INT_CONST[3]);
}

Parrot_ge_n_n_ic {
    if (MAP[1] && MAP[2]) {
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], MAP[2]);
        jit_emit_bc(jit_info, BGE, *INT_CONST[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], f12);
        jit_emit_bc(jit_info, BGE, *INT_CONST[3]);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[1]);
        jit_emit_fcmp_rr(NATIVECODE, f12, MAP[2]);
        jit_emit_bc(jit_info, BGE, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fcmp_rr(NATIVECODE, f11, f12);
        jit_emit_bc(jit_info, BGE, *INT_CONST[3]);
    }
}

Parrot_ge_n_nc_ic {
    if (MAP[1]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], f12);
        jit_emit_bc(jit_info, BGE, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f11, f12);
        jit_emit_bc(jit_info, BGE, *INT_CONST[3]);
    }
}

Parrot_ge_nc_n_ic {
    if (MAP[2]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[1]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f12, MAP[2]);
        jit_emit_bc(jit_info, BGE, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[1]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f12, f11);
        jit_emit_bc(jit_info, BGE, *INT_CONST[3]);
    }
}

Parrot_ge_nc_nc_ic {
    if (*NUM_CONST[1] >= *NUM_CONST[2])
        jit_emit_bx(jit_info, 0, *INT_CONST[3]);
}

Parrot_lt_n_n_ic {
    if (MAP[1] && MAP[2]) {
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], MAP[2]);
        jit_emit_bc(jit_info, BLT, *INT_CONST[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], f12);
        jit_emit_bc(jit_info, BLT, *INT_CONST[3]);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[1]);
        jit_emit_fcmp_rr(NATIVECODE, f12, MAP[2]);
        jit_emit_bc(jit_info, BLT, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fcmp_rr(NATIVECODE, f11, f12);
        jit_emit_bc(jit_info, BLT, *INT_CONST[3]);
    }
}

Parrot_lt_n_nc_ic {
    if (MAP[1]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], f12);
        jit_emit_bc(jit_info, BLT, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f11, f12);
        jit_emit_bc(jit_info, BLT, *INT_CONST[3]);
    }
}

Parrot_lt_nc_n_ic {
    if (MAP[2]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[1]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f12, MAP[2]);
        jit_emit_bc(jit_info, BLT, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[1]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f12, f11);
        jit_emit_bc(jit_info, BLT, *INT_CONST[3]);
    }
}

Parrot_lt_nc_nc_ic {
    if (*NUM_CONST[1] < *NUM_CONST[2])
        jit_emit_bx(jit_info, 0, *INT_CONST[3]);
}

Parrot_le_n_n_ic {
    if (MAP[1] && MAP[2]) {
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], MAP[2]);
        jit_emit_bc(jit_info, BLE, *INT_CONST[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], f12);
        jit_emit_bc(jit_info, BLE, *INT_CONST[3]);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[1]);
        jit_emit_fcmp_rr(NATIVECODE, f12, MAP[2]);
        jit_emit_bc(jit_info, BLE, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fcmp_rr(NATIVECODE, f11, f12);
        jit_emit_bc(jit_info, BLE, *INT_CONST[3]);
    }
}

Parrot_le_n_nc_ic {
    if (MAP[1]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], f12);
        jit_emit_bc(jit_info, BLE, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f11, f12);
        jit_emit_bc(jit_info, BLE, *INT_CONST[3]);
    }
}

Parrot_le_nc_n_ic {
    if (MAP[2]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[1]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f12, MAP[2]);
        jit_emit_bc(jit_info, BLE, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[1]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f12, f11);
        jit_emit_bc(jit_info, BLE, *INT_CONST[3]);
    }
}

Parrot_le_nc_nc_ic {
    if (*NUM_CONST[1] <= *NUM_CONST[2])
        jit_emit_bx(jit_info, 0, *INT_CONST[3]);
}

Parrot_ne_n_n_ic {
    if (MAP[1] && MAP[2]) {
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], MAP[2]);
        jit_emit_bc(jit_info, BNE, *INT_CONST[3]);
    }
    else if (MAP[1]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], f12);
        jit_emit_bc(jit_info, BNE, *INT_CONST[3]);
    }
    else if (MAP[2]) {
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[1]);
        jit_emit_fcmp_rr(NATIVECODE, f12, MAP[2]);
        jit_emit_bc(jit_info, BNE, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_rd_n(NATIVECODE, f12, &NUM_REG[2]);
        jit_emit_fcmp_rr(NATIVECODE, f11, f12);
        jit_emit_bc(jit_info, BNE, *INT_CONST[3]);
    }
}

Parrot_ne_n_nc_ic {
    if (MAP[1]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, MAP[1], f12);
        jit_emit_bc(jit_info, BNE, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[1]);
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[2]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f11, f12);
        jit_emit_bc(jit_info, BNE, *INT_CONST[3]);
    }
}

Parrot_ne_nc_n_ic {
    if (MAP[2]) {
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[1]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f12, MAP[2]);
        jit_emit_bc(jit_info, BNE, *INT_CONST[3]);
    }
    else {
        jit_emit_load_rd_n(NATIVECODE, f11, &NUM_REG[2]);
        jit_emit_load_ri_i(NATIVECODE, r12, &NUM_CONST[1]);
        jit_emit_lfd(NATIVECODE, f12, 0, r12);
        jit_emit_fcmp_rr(NATIVECODE, f12, f11);
        jit_emit_bc(jit_info, BNE, *INT_CONST[3]);
    }
}

Parrot_ne_nc_nc_ic {
    if (*NUM_CONST[1] != *NUM_CONST[2])
        jit_emit_bx(jit_info, 0, *INT_CONST[3]);
}
