;
; ppc/core.jit
;
; $Id$
;

Parrot_end {
    emit_addi(NATIVECODE, r1, r1, 64);
    emit_lwz(NATIVECODE, r0, 8, r1);
    emit_mtlr(NATIVECODE, r0);
;    emit_lmw(NATIVECODE, r30, -8, r1);
    emit_blr(NATIVECODE);
}

Parrot_set_i_ic {
    if (MAP[1]) {
        emit_imm32(NATIVECODE, MAP[1], *INT_CONST[2]);
    }
    else {
        emit_imm32(NATIVECODE, MAP[1], *INT_CONST[2]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]); 
    }
}

Parrot_set_i_i {
    if (MAP[1] && MAP[2]) {
        emit_mr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, MAP[1], &INT_REG[2]); 
    } 
    else if (MAP[2]) {
        emit_stw_r(NATIVECODE, MAP[2], &INT_REG[1]); 
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]); 
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]); 
    }
}

Parrot_neg_i_i {
    if (MAP[1] && MAP[2]) {
        emit_neg(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]); 
        emit_neg(NATIVECODE, MAP[1], r12);
    }
    else if (MAP[2]) {
        emit_neg(NATIVECODE, r12, MAP[1]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_neg(NATIVECODE, r12, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_bor_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        emit_or(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]); 
        emit_or(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_or(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        emit_or(NATIVECODE, r12, MAP[2], MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_or(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_or(NATIVECODE, r12, MAP[2], r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_or(NATIVECODE, r12, r12, MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_or(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_bor_i_i {
    if (MAP[1] && MAP[2]) {
        emit_or(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]); 
        emit_or(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_or(NATIVECODE, r12, r12, MAP[1]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_or(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_add_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        emit_add(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]); 
        emit_add(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_add(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        emit_add(NATIVECODE, r12, MAP[2], MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_add(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_add(NATIVECODE, r12, MAP[2], r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_add(NATIVECODE, r12, r12, MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_add(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_add_i_i {
    if (MAP[1] && MAP[2]) {
        emit_add(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]); 
        emit_add(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_add(NATIVECODE, r12, r12, MAP[1]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_add(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_bxor_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        emit_xor(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]); 
        emit_xor(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_xor(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        emit_xor(NATIVECODE, r12, MAP[2], MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_xor(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_xor(NATIVECODE, r12, MAP[2], r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_xor(NATIVECODE, r12, r12, MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_xor(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_bxor_i_i {
    if (MAP[1] && MAP[2]) {
        emit_xor(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]); 
        emit_xor(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_xor(NATIVECODE, r12, r12, MAP[1]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_xor(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_div_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        emit_divw(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]); 
        emit_divw(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_divw(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        emit_divw(NATIVECODE, r12, MAP[2], MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_divw(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_divw(NATIVECODE, r12, MAP[2], r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_divw(NATIVECODE, r12, r12, MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_divw(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_div_i_i {
    if (MAP[1] && MAP[2]) {
        emit_divw(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]); 
        emit_divw(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_divw(NATIVECODE, r12, r12, MAP[1]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_divw(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_band_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        emit_and(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]); 
        emit_and(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_and(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        emit_and(NATIVECODE, r12, MAP[2], MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_and(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_and(NATIVECODE, r12, MAP[2], r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_and(NATIVECODE, r12, r12, MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_and(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_band_i_i {
    if (MAP[1] && MAP[2]) {
        emit_and(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]); 
        emit_and(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_and(NATIVECODE, r12, r12, MAP[1]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_and(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_mul_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        emit_mullw(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]); 
        emit_mullw(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_mullw(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        emit_mullw(NATIVECODE, r12, MAP[2], MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_mullw(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_mullw(NATIVECODE, r12, MAP[2], r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_mullw(NATIVECODE, r12, r12, MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_mullw(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_mul_i_i {
    if (MAP[1] && MAP[2]) {
        emit_mullw(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]); 
        emit_mullw(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_mullw(NATIVECODE, r12, r12, MAP[1]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_mullw(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_sub_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        emit_subf(NATIVECODE, MAP[1], MAP[2], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]); 
        emit_subf(NATIVECODE, MAP[1], MAP[2], r12);
    }
    else if (MAP[1] && MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_subf(NATIVECODE, MAP[1], r12, MAP[3]);
    }
    else if (MAP[2] && MAP[3]) {
        emit_subf(NATIVECODE, r12, MAP[2], MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[3]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_subf(NATIVECODE, MAP[1], r11, r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_subf(NATIVECODE, r12, MAP[2], r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else if (MAP[3]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]);
        emit_subf(NATIVECODE, r12, r12, MAP[3]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[3]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_subf(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_sub_i_i {
    if (MAP[1] && MAP[2]) {
        emit_subf(NATIVECODE, MAP[1], MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[2]); 
        emit_subf(NATIVECODE, MAP[1], MAP[1], r12);
    }
    else if (MAP[2]) {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_subf(NATIVECODE, r12, r12, MAP[1]);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]);
        emit_lwz_r(NATIVECODE, r11, &INT_REG[2]);
        emit_subf(NATIVECODE, r12, r11, r12);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_inc_i {
    if (MAP[1]) {
        emit_addi (NATIVECODE, MAP[1], MAP[1], 1);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]); 
        emit_addi (NATIVECODE, r12, r12, 1);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_dec_i {
    if (MAP[1]) {
        emit_addi (NATIVECODE, MAP[1], MAP[1], -1);
    }
    else {
        emit_lwz_r(NATIVECODE, r12, &INT_REG[1]); 
        emit_addi (NATIVECODE, r12, r12, -1);
        emit_stw_r(NATIVECODE, r12, &INT_REG[1]);
    }
}

Parrot_neg_n_n {
        emit_lfd_r(NATIVECODE, r12, &NUM_REG[2]);
        emit_fneg(NATIVECODE, r12, r12);
        emit_stfd_r(NATIVECODE, r12, &NUM_REG[1]);
}

Parrot_abs_n_n {
        emit_lfd_r(NATIVECODE, r12, &NUM_REG[2]);
        emit_fabs(NATIVECODE, r12, r12);
        emit_stfd_r(NATIVECODE, r12, &NUM_REG[1]);
}

Parrot_add_n_n_n {
        emit_lfd_r(NATIVECODE, r11, &NUM_REG[2]);
        emit_lfd_r(NATIVECODE, r12, &NUM_REG[3]);
        emit_fadd(NATIVECODE, r12, r11, r12);
        emit_stfd_r(NATIVECODE, r12, &NUM_REG[1]);
}

Parrot_add_n_n {
        emit_lfd_r(NATIVECODE, r11, &NUM_REG[1]);
        emit_lfd_r(NATIVECODE, r12, &NUM_REG[2]);
        emit_fadd(NATIVECODE, r12, r11, r12);
        emit_stfd_r(NATIVECODE, r12, &NUM_REG[1]);
}

Parrot_div_n_n_n {
        emit_lfd_r(NATIVECODE, r11, &NUM_REG[2]);
        emit_lfd_r(NATIVECODE, r12, &NUM_REG[3]);
        emit_fdiv(NATIVECODE, r12, r11, r12);
        emit_stfd_r(NATIVECODE, r12, &NUM_REG[1]);
}

Parrot_div_n_n {
        emit_lfd_r(NATIVECODE, r11, &NUM_REG[1]);
        emit_lfd_r(NATIVECODE, r12, &NUM_REG[2]);
        emit_fdiv(NATIVECODE, r12, r11, r12);
        emit_stfd_r(NATIVECODE, r12, &NUM_REG[1]);
}

Parrot_mul_n_n_n {
        emit_lfd_r(NATIVECODE, r11, &NUM_REG[2]);
        emit_lfd_r(NATIVECODE, r12, &NUM_REG[3]);
        emit_fmul(NATIVECODE, r12, r11, r12);
        emit_stfd_r(NATIVECODE, r12, &NUM_REG[1]);
}

Parrot_mul_n_n {
        emit_lfd_r(NATIVECODE, r11, &NUM_REG[1]);
        emit_lfd_r(NATIVECODE, r12, &NUM_REG[2]);
        emit_fmul(NATIVECODE, r12, r11, r12);
        emit_stfd_r(NATIVECODE, r12, &NUM_REG[1]);
}

Parrot_sub_n_n_n {
        emit_lfd_r(NATIVECODE, r11, &NUM_REG[2]);
        emit_lfd_r(NATIVECODE, r12, &NUM_REG[3]);
        emit_fsub(NATIVECODE, r12, r11, r12);
        emit_stfd_r(NATIVECODE, r12, &NUM_REG[1]);
}

Parrot_sub_n_n {
        emit_lfd_r(NATIVECODE, r11, &NUM_REG[1]);
        emit_lfd_r(NATIVECODE, r12, &NUM_REG[2]);
        emit_fsub(NATIVECODE, r12, r11, r12);
        emit_stfd_r(NATIVECODE, r12, &NUM_REG[1]);
}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil 
 * End:
 *
 * vim: expandtab shiftwidth=4:
 */
