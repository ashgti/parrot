;
; sun4/core.jit
;
; $Id$ 
;

Parrot_end {
    emitm_ret(NATIVECODE);
    emitm_restore_i(NATIVECODE, emitm_g(0), emitm_g(0), emitm_g(0));
}

Parrot_noop {
    emitm_nop(NATIVECODE);
}

Parrot_set_i_i {
    Parrot_jit_int_load(jit_info, interpreter, 2, emitm_l(0));
    Parrot_jit_int_store(jit_info, interpreter, 1, emitm_l(0));
}

Parrot_set_i_ic {
    Parrot_jit_int_load(jit_info, interpreter, 2, emitm_l(0));
    Parrot_jit_int_store(jit_info, interpreter, 1, emitm_l(0));
}

Parrot_set_n_nc {
    Parrot_jit_int_load(jit_info, interpreter, 2, emitm_l(0));
    Parrot_jit_int_store(jit_info, interpreter, 1, emitm_l(0));
}

Parrot_set_n_n {
    Parrot_jit_int_load(jit_info, interpreter, 2, emitm_l(0));
    Parrot_jit_int_store(jit_info, interpreter, 1, emitm_l(0));
}

Parrot_set_n_i {
    Parrot_jit_float_load(jit_info, interpreter, 2, emitm_f(0));
    emitm_fitod(NATIVECODE, emitm_f(0), emitm_f(2));
    Parrot_jit_float_store(jit_info, interpreter, 1, emitm_f(2));
}

Parrot_set_i_n {
    Parrot_jit_float_load(jit_info, interpreter, 2, emitm_f(0));
    emitm_fdtoi(NATIVECODE, emitm_f(0), emitm_f(2));
    Parrot_jit_float_store(jit_info, interpreter, 1, emitm_f(2));
}

Parrot_if_i_ic {
    Parrot_jit_int_load(jit_info, interpreter, 1, emitm_l(0));
    emitm_subcc_r(NATIVECODE, emitm_l(0), emitm_g(0), emitm_g(0));
    Parrot_jit_bicc(jit_info, emitm_bne, 0, *INT_CONST[2]);
    emitm_nop(NATIVECODE);
}

Parrot_branch_ic {
    Parrot_jit_bicc(jit_info, emitm_ba, 0, *INT_CONST[1]);
    emitm_nop(NATIVECODE);
}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil 
 * End:
 *
 * vim: expandtab shiftwidth=4:
 */
