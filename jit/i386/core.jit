;
; i386/core.jit
;
; $Id$
;

# TODO complete this
#define P_ARITH ((PREV_OP == dec_i) || (PREV_OP == inc_i) || (PREV_OP == sub_i_i_i))

Parrot_end {
    jit_emit_add_ri_i(jit_info->native_ptr, emit_ESP, 4);
    emitm_popl_r(NATIVECODE, emit_EDI);
    emitm_popl_r(NATIVECODE, emit_EBX);
    emitm_popl_r(NATIVECODE, emit_ESI);
    emitm_popl_r(NATIVECODE, emit_EBP);
    emitm_ret(NATIVECODE);
}

Parrot_noop {
    emit_nop(NATIVECODE);
}

Parrot_set_i_ic {
    if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
    }
    else {
        jit_emit_mov_mi_ii(NATIVECODE, &INT_REG[1], *INT_CONST[2]);
    }
}

Parrot_set_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], MAP[2]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_set_p_p {
    jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &PMC_REG[2]);
    jit_emit_mov_mr_i(NATIVECODE, &PMC_REG[1], emit_EAX);
}

Parrot_set_n_nc {
    jit_emit_fload_m_n(NATIVECODE, &NUM_CONST[2]);
    jit_emit_fstore_m_n(NATIVECODE, &NUM_REG[1]);
}

Parrot_set_n_n {
    jit_emit_fload_m_n(NATIVECODE, &NUM_REG[2]);
    jit_emit_fstore_m_n(NATIVECODE, &NUM_REG[1]);
}

Parrot_mul_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_mul_rr(NATIVECODE, MAP[1], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_mul_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        jit_emit_mul_rr(NATIVECODE, emit_EAX, MAP[2]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        jit_emit_mul_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_mul_i_ic {
    if (MAP[1]) {
        jit_emit_mul_rir_i(NATIVECODE, MAP[1], *INT_CONST[2], MAP[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        jit_emit_mul_rir_i(NATIVECODE, emit_EAX, *INT_CONST[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_mul_i_ic_ic {
    if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2] * *INT_CONST[3]);
    }
    else {
        jit_emit_mov_mi_ii(NATIVECODE, &INT_REG[1], *INT_CONST[2] * *INT_CONST[3]);
    }
}

Parrot_mul_i_i_ic {
    if (MAP[1] && MAP[2]) {
        jit_emit_mul_rir_i(NATIVECODE, MAP[1], *INT_CONST[3], MAP[2]);
    }
    else if (MAP[1]) {
        jit_emit_mul_rim_ii(NATIVECODE, MAP[1], *INT_CONST[3], &INT_REG[2]);
    }
    else if (MAP[2]) {
        jit_emit_mul_rir_i(NATIVECODE, emit_EAX, *INT_CONST[3], MAP[2]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        jit_emit_mul_rir_i(NATIVECODE, emit_EAX, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_mul_i_ic_i {
    if (MAP[1] && MAP[3]) {
        jit_emit_mul_rir_i(NATIVECODE, MAP[1], *INT_CONST[2], MAP[3]);
    }
    else if (MAP[1]) {
        jit_emit_mul_rim_ii(NATIVECODE, MAP[1], *INT_CONST[2], &INT_REG[3]);
    }
    else if (MAP[3]) {
        jit_emit_mul_rir_i(NATIVECODE, emit_EAX, *INT_CONST[2], MAP[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mul_rir_i(NATIVECODE, emit_EAX, *INT_CONST[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_mul_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        jit_emit_mul_rr(NATIVECODE, MAP[1], MAP[3]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        jit_emit_mul_rm_i(NATIVECODE, MAP[1], &INT_REG[3]);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[3]);
        jit_emit_mul_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        jit_emit_mul_rr(NATIVECODE, emit_EAX, MAP[2]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        jit_emit_mul_rm_i(NATIVECODE, MAP[1], &INT_REG[3]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        jit_emit_mul_rm_i(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        jit_emit_mul_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        jit_emit_mul_rm_i(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_neg_i {
    if (MAP[1]) {
        jit_emit_neg_r(NATIVECODE, MAP[1]);
    }
    else {
        jit_emit_neg_m_i(NATIVECODE, &INT_REG[1]);
    }
}

Parrot_neg_i_ic {
    if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], -(*INT_CONST[2]));
    }
    else {
        jit_emit_mov_mi_ii(NATIVECODE, &INT_REG[1], -(*INT_CONST[2]));
    }
}

Parrot_neg_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        jit_emit_neg_r(NATIVECODE, MAP[1]);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[1]);
        jit_emit_neg_r(NATIVECODE, MAP[1]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        jit_emit_neg_r(NATIVECODE, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        jit_emit_neg_r(NATIVECODE, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_set_n_i {
    if (MAP[2]) {
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[2], MAP[2]);
    }
    emit_fildl(NATIVECODE, &INT_REG[2]);
    jit_emit_fstore_m_n(NATIVECODE, &NUM_REG[1]);
}

Parrot_div_n_n_n {
    jit_emit_fload_m_n(NATIVECODE, &NUM_REG[2]);
    jit_emit_fload_m_n(NATIVECODE, &NUM_REG[3]);
    emitm_fdivp(NATIVECODE, 1);
    jit_emit_fstore_m_n(NATIVECODE, &NUM_REG[1]);
}

Parrot_sub_n_n_n {
    jit_emit_fload_m_n(NATIVECODE, &NUM_REG[2]);
    jit_emit_fload_m_n(NATIVECODE, &NUM_REG[3]);
    emitm_fsubp(NATIVECODE, 1);
    jit_emit_fstore_m_n(NATIVECODE, &NUM_REG[1]);
}

Parrot_if_ic_ic {
    if (*INT_CONST[1] != 0)
        emit_jump(jit_info, *INT_CONST[2]);
}

Parrot_if_i_ic {
    if (MAP[1]) {
        if (P_ARITH) {
            emit_jcc(jit_info, emitm_jnz, *INT_CONST[2]);
        }
        else {
            emitm_cmpl_i_r(NATIVECODE, 0, MAP[1]);
            emit_jcc(jit_info, emitm_jne, *INT_CONST[2]);
        }
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emitm_cmpl_i_r(NATIVECODE, 0, emit_EAX);
        emit_jcc(jit_info, emitm_jne, *INT_CONST[2]);
    }
}

Parrot_unless_ic_ic {
    if (*INT_CONST[1] == 0)
        emit_jump(jit_info, *INT_CONST[2]);
}

Parrot_unless_i_ic {
    if (MAP[1]) {
        emitm_cmpl_i_r(NATIVECODE, 0, MAP[1]);
        emit_jcc(jit_info, emitm_je, *INT_CONST[2]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emitm_cmpl_i_r(NATIVECODE, 0, emit_EAX);
        emit_jcc(jit_info, emitm_je, *INT_CONST[2]);
    }
}

Parrot_branch_ic {
    emit_jump(jit_info, *INT_CONST[1]);
}

Parrot_inc_i {
    if (MAP[1]) {
        emit_inc_r(NATIVECODE, MAP[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emit_inc_r(NATIVECODE, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
}

Parrot_add_i_i {
    if (MAP[1] && MAP[2]) {
        emitm_addl_r_r(NATIVECODE, MAP[2], MAP[1]);
    }
    else if (MAP[1]) {
        emit_addl_m_r(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        emit_addl_r_m(NATIVECODE, MAP[2], &INT_REG[2]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emit_addl_r_m(NATIVECODE, emit_EAX, &INT_REG[1]);
    }
}

Parrot_add_i_ic {
    if (MAP[1]) {
        jit_emit_add_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        jit_emit_add_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
}

Parrot_add_i_ic_ic {
    if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2] + *INT_CONST[3]);
    }
    else {
        jit_emit_mov_mi_ii(NATIVECODE, &INT_REG[1], *INT_CONST[2] + *INT_CONST[3]);
    }
}

Parrot_add_i_i_ic {
    if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        jit_emit_add_ri_i(NATIVECODE, MAP[1], *INT_CONST[3]);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        jit_emit_add_ri_i(NATIVECODE, MAP[1], *INT_CONST[3]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        jit_emit_add_ri_i(NATIVECODE, emit_EAX, *INT_CONST[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        jit_emit_add_ri_i(NATIVECODE, emit_EAX, *INT_CONST[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
}

Parrot_add_i_ic_i {
    if (MAP[1] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[3]);
        jit_emit_add_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[3]);
        jit_emit_add_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
    }
    else if (MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        jit_emit_add_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_add_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
}

Parrot_add_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emitm_addl_r_r(NATIVECODE, MAP[3], MAP[1]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emit_addl_m_r(NATIVECODE, MAP[1], &INT_REG[3]);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[3]);
        emit_addl_m_r(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        emitm_addl_r_r(NATIVECODE, MAP[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        emit_addl_m_r(NATIVECODE, MAP[1], &INT_REG[3]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emit_addl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        emit_addl_m_r(NATIVECODE, emit_EAX, &INT_REG[2]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emit_addl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_dec_i {
    if (MAP[1]) {
        emit_dec_r(NATIVECODE, MAP[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emit_dec_r(NATIVECODE, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
}

Parrot_sub_i_i {
    if (MAP[1] && MAP[2]) {
        emitm_subl_r_r(NATIVECODE, MAP[2], MAP[1]);
    }
    else if (MAP[1]) {
        emit_subl_m_r(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        emit_subl_r_m(NATIVECODE, MAP[2], &INT_REG[2]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emit_subl_r_m(NATIVECODE, emit_EAX, &INT_REG[1]);
    }
}

Parrot_sub_i_ic {
    if (MAP[1]) {
        emitm_subl_i_r(NATIVECODE, *INT_CONST[2], MAP[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emitm_subl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
}

Parrot_sub_i_ic_ic {
    if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2] - *INT_CONST[3]);
    }
    else {
        jit_emit_mov_mi_ii(NATIVECODE, &INT_REG[1], *INT_CONST[2] - *INT_CONST[3]);
    }
}

Parrot_sub_i_i_ic {
    if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emitm_subl_i_r(NATIVECODE, *INT_CONST[3], MAP[1]);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        emitm_subl_i_r(NATIVECODE, *INT_CONST[3], MAP[1]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emitm_subl_i_r(NATIVECODE, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emitm_subl_i_r(NATIVECODE, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
}

Parrot_sub_i_ic_i {
    if (MAP[1] && MAP[3]) {
        if (MAP[1] == MAP[3]) {
            emitm_subl_i_r(NATIVECODE, *INT_CONST[2], MAP[1]);
        }
        else {
            jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
            emitm_subl_r_r(NATIVECODE, MAP[3], MAP[1]);
        }
    }
    else if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
        emit_subl_r_m(NATIVECODE, MAP[1], &INT_REG[3])
    }
    else if (MAP[3]) {
        jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
        emitm_subl_r_r(NATIVECODE, MAP[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
    else {
        jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
        emit_subl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
}

Parrot_sub_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        if (MAP[1] == MAP[3]) {
            jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
            emitm_subl_r_r(NATIVECODE, MAP[3], emit_EAX);
            jit_emit_mov_rr(NATIVECODE, MAP[1], emit_EAX);
        }
        else {
            jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
            emitm_subl_r_r(NATIVECODE, MAP[3], MAP[1]);
        }
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emit_subl_m_r(NATIVECODE, MAP[1], &INT_REG[3]);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        emitm_subl_r_r(NATIVECODE, MAP[3], MAP[1]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        emitm_subl_r_r(NATIVECODE, MAP[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        emit_subl_m_r(NATIVECODE, MAP[1], &INT_REG[3]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emit_subl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[3]) {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emitm_subl_r_r(NATIVECODE, MAP[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emit_subl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_lt_ic_ic_ic {
    if (*INT_CONST[1] < *INT_CONST[2])
        emit_jump(jit_info, *INT_CONST[3]);
}

Parrot_lt_i_ic_ic {
    if (MAP[1]) {
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], MAP[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    }
    emit_jcc(jit_info, emitm_jl, *INT_CONST[3]);
}

Parrot_lt_ic_i_ic {
    jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[1]);
    if (MAP[2]) {
        emitm_cmpl_r_r(NATIVECODE, MAP[2], emit_EAX);
    }
    else {
        emit_cmpl_m_r(NATIVECODE, emit_EAX, &INT_REG[2]);
    }
    emit_jcc(jit_info, emitm_jl, *INT_CONST[3]);
}

Parrot_lt_i_i_ic {
    if (MAP[1] && MAP[2]) {
        emitm_cmpl_r_r(NATIVECODE, MAP[2], MAP[1]);
    }
    else if (MAP[1]) {
        emit_cmpl_r_m(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        emit_cmpl_m_r(NATIVECODE, MAP[2], &INT_REG[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emit_cmpl_r_m(NATIVECODE, emit_EAX, &INT_REG[2]);
    }
    emit_jcc(jit_info, emitm_jl, *INT_CONST[3]);
}

Parrot_gt_ic_ic_ic {
    if (*INT_CONST[1] > *INT_CONST[2])
        emit_jump(jit_info, *INT_CONST[3]);
}

Parrot_gt_ic_i_ic {
    jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[1]);
    if (MAP[2]) {
        emitm_cmpl_r_r(NATIVECODE, MAP[2], emit_EAX);
    }
    else {
        emit_cmpl_m_r(NATIVECODE, emit_EAX, &INT_REG[2]);
    }
    emit_jcc(jit_info, emitm_jg, *INT_CONST[3]);
}

Parrot_gt_i_ic_ic {
    if (MAP[1]) {
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], MAP[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    }
    emit_jcc(jit_info, emitm_jg, *INT_CONST[3]);
}

Parrot_gt_i_i_ic {
    if (MAP[1] && MAP[2]) {
        emitm_cmpl_r_r(NATIVECODE, MAP[2], MAP[1]);
    }
    else if (MAP[1]) {
        emit_cmpl_r_m(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        emit_cmpl_m_r(NATIVECODE, MAP[2], &INT_REG[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emit_cmpl_r_m(NATIVECODE, emit_EAX, &INT_REG[2]);
    }
    emit_jcc(jit_info, emitm_jg, *INT_CONST[3]);
}

Parrot_gt_n_n_ic {
    /* s. Pentium4.pdf 8.1 */
    jit_emit_fload_m_n(NATIVECODE, &NUM_REG[1]);
/*    jit_emit_fload_m_n(NATIVECODE, &NUM_REG[2]); */
/*    emitm_fcompp(NATIVECODE); */
    emitm_fcomp_m(NATIVECODE, emit_None, emit_None, emit_None, &NUM_REG[2]);
    emitm_fstw(NATIVECODE);

    emitm_andl_i_r(NATIVECODE, 0x4500, emit_EAX);
    emit_jcc(jit_info, emitm_jz, *INT_CONST[3]);

/*    emitm_sahf(NATIVECODE); doesn't work ??? */
/*    emit_jcc(jit_info, emitm_jg, *INT_CONST[3]); */
}

Parrot_ge_ic_ic_ic {
    if (*INT_CONST[1] >= *INT_CONST[2])
        emit_jump(jit_info, *INT_CONST[3]);
}

Parrot_ge_ic_i_ic {
    jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[1]);
    if (MAP[2]) {
        emitm_cmpl_r_r(NATIVECODE, MAP[2], emit_EAX);
    }
    else {
        emit_cmpl_m_r(NATIVECODE, emit_EAX, &INT_REG[2]);
    }
    emit_jcc(jit_info, emitm_jnl, *INT_CONST[3]);
}

Parrot_ge_i_ic_ic {
    if (MAP[1]) {
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], MAP[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    }
    emit_jcc(jit_info, emitm_jnl, *INT_CONST[3]);
}

Parrot_ge_i_i_ic {
    if (MAP[1] && MAP[2]) {
        emitm_cmpl_r_r(NATIVECODE, MAP[2], MAP[1]);
    }
    else if (MAP[1]) {
        emit_cmpl_r_m(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        emit_cmpl_m_r(NATIVECODE, MAP[2], &INT_REG[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emit_cmpl_r_m(NATIVECODE, emit_EAX, &INT_REG[2]);
    }
    emit_jcc(jit_info, emitm_jnl, *INT_CONST[3]);
}

Parrot_le_ic_ic_ic {
    if (*INT_CONST[1] <= *INT_CONST[2])
        emit_jump(jit_info, *INT_CONST[3]);
}

Parrot_le_ic_i_ic {
    jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[1]);
    if (MAP[2]) {
        emitm_cmpl_r_r(NATIVECODE, MAP[2], emit_EAX);
    }
    else {
        emit_cmpl_m_r(NATIVECODE, emit_EAX, &INT_REG[2]);
    }
    emit_jcc(jit_info, emitm_jle, *INT_CONST[3]);
}

Parrot_le_i_ic_ic {
    if (MAP[1]) {
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], MAP[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    }
    emit_jcc(jit_info, emitm_jle, *INT_CONST[3]);
}

Parrot_le_i_i_ic {
    if (MAP[1] && MAP[2]) {
        emitm_cmpl_r_r(NATIVECODE, MAP[2], MAP[1]);
    }
    else if (MAP[1]) {
        emit_cmpl_r_m(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        emit_cmpl_m_r(NATIVECODE, MAP[2], &INT_REG[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emit_cmpl_r_m(NATIVECODE, emit_EAX, &INT_REG[2]);
    }
    emit_jcc(jit_info, emitm_jle, *INT_CONST[3]);
}

Parrot_eq_ic_ic_ic {
    if (*INT_CONST[1] == *INT_CONST[2])
        emit_jump(jit_info, *INT_CONST[3]);
}

Parrot_eq_i_ic_ic {
    if (MAP[1]) {
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], MAP[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    }
    emit_jcc(jit_info, emitm_je, *INT_CONST[3]);
}

Parrot_eq_ic_i_ic {
    if (MAP[2]) {
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[1], MAP[2]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[1], emit_EAX);
    }
    emit_jcc(jit_info, emitm_je, *INT_CONST[3]);
}

Parrot_eq_i_i_ic {
    if (MAP[1] && MAP[2]) {
        emitm_cmpl_r_r(NATIVECODE, MAP[2], MAP[1]);
    }
    else if (MAP[1]) {
        emit_cmpl_r_m(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        emit_cmpl_m_r(NATIVECODE, MAP[2], &INT_REG[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emit_cmpl_r_m(NATIVECODE, emit_EAX, &INT_REG[2]);
    }
    emit_jcc(jit_info, emitm_je, *INT_CONST[3]);
}

Parrot_ne_ic_ic_ic {
    if (*INT_CONST[1] != *INT_CONST[2])
        emit_jump(jit_info, *INT_CONST[3]);
}

Parrot_ne_i_ic_ic {
    if (MAP[1]) {
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], MAP[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    }
    emit_jcc(jit_info, emitm_jne, *INT_CONST[3]);
}

Parrot_ne_ic_i_ic {
    if (MAP[2]) {
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[1], MAP[2]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emitm_cmpl_i_r(NATIVECODE, *INT_CONST[1], emit_EAX);
    }
    emit_jcc(jit_info, emitm_jne, *INT_CONST[3]);
}

Parrot_ne_i_i_ic {
    if (MAP[1] && MAP[2]) {
        emitm_cmpl_r_r(NATIVECODE, MAP[2], MAP[1]);
    }
    else if (MAP[1]) {
        emit_cmpl_r_m(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        emit_cmpl_m_r(NATIVECODE, MAP[2], &INT_REG[1]);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[1]);
        emit_cmpl_r_m(NATIVECODE, emit_EAX, &INT_REG[2]);
    }
    emit_jcc(jit_info, emitm_jne, *INT_CONST[3]);
}

Parrot_band_i_ic_ic {
    jit_emit_mov_mi_ii(NATIVECODE, &INT_REG[1], *INT_CONST[2] & *INT_CONST[3]);
}

Parrot_band_i_i_ic {
    if (MAP[1] && MAP[2]) {
        if (MAP[1] == MAP[2]) {
            emitm_andl_i_r(NATIVECODE, *INT_CONST[3], MAP[2]);
        }
        else {
            jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[3]);
            emit_andl_r_r(NATIVECODE, MAP[2], MAP[1]);
        }
    }
    else if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[3]);
        emit_andl_m_r(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emitm_andl_i_r(NATIVECODE, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX,  &INT_REG[2]);
        emitm_andl_i_r(NATIVECODE, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_band_i_ic_i {
    if (MAP[1] && MAP[3]) {
        if (MAP[1] == MAP[3]) {
            jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
            emit_andl_r_r(NATIVECODE, MAP[3], emit_EAX);
            jit_emit_mov_rr(NATIVECODE, MAP[1], emit_EAX);
        }
        else {
            jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
            emit_andl_r_r(NATIVECODE, MAP[3], MAP[1]);
        }
    }
    else if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
        emit_andl_m_r(NATIVECODE, MAP[1], &INT_REG[3]);
    }
    else if (MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        emitm_andl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX,  &INT_REG[3]);
        emitm_andl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_band_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        if (MAP[1] == MAP[3]) {
            jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
            emit_andl_r_r(NATIVECODE, MAP[3], emit_EAX);
            jit_emit_mov_rr(NATIVECODE, MAP[1], emit_EAX);
        }
        else {
            jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
            emit_andl_r_r(NATIVECODE, MAP[3], MAP[1]);
        }
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emit_andl_m_r(NATIVECODE, MAP[1], &INT_REG[3]);
    }
    else if (MAP[1] && MAP[3]) {
        if (MAP[1] != MAP[3]) {
            jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[3]);
        }
        emit_andl_m_r(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        emit_andl_r_r(NATIVECODE, MAP[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emit_andl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_rr(NATIVECODE, MAP[1], emit_EAX);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emit_andl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        emit_andl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emit_andl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_bor_i_ic_ic {
    jit_emit_mov_mi_ii(NATIVECODE, &INT_REG[1], *INT_CONST[2] | *INT_CONST[3]);
}

Parrot_bor_i_i_ic {
    if (MAP[1] && MAP[2]) {
        if (MAP[1] == MAP[2]) {
            emitm_orl_i_r(NATIVECODE, *INT_CONST[3], MAP[1]);
        }
        else {
            jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[3]);
            emit_orl_r_r(NATIVECODE, MAP[2], MAP[1]);
        }
    }
    else if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[3]);
        emit_orl_m_r(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emitm_orl_i_r(NATIVECODE, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX,  &INT_REG[2]);
        emitm_orl_i_r(NATIVECODE, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_bor_i_ic_i {
    if (MAP[1] && MAP[3]) {
        if (MAP[1] == MAP[3]) {
            jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
            emit_orl_r_r(NATIVECODE, MAP[3], emit_EAX);
            jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[1]);
        }
        else {
            jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
            emit_orl_r_r(NATIVECODE, MAP[3], MAP[1]);
        }
    }
    else if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
        emit_orl_m_r(NATIVECODE, MAP[1], &INT_REG[3]);
    }
    else if (MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        emitm_orl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX,  &INT_REG[3]);
        emitm_orl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_bor_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        if (MAP[1] == MAP[3]) {
            jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
            emit_orl_r_r(NATIVECODE, MAP[3], emit_EAX);
            jit_emit_mov_rr(NATIVECODE, MAP[1], emit_EAX);
        }
        else {
            jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
            emit_orl_r_r(NATIVECODE, MAP[3], MAP[1]);
        }
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emit_orl_m_r(NATIVECODE, MAP[1], &INT_REG[3]);
    }
    else if (MAP[1] && MAP[3]) {
        if (MAP[1] != MAP[3]) {
            jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[3]);
        }
        emit_orl_m_r(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        emit_orl_r_r(NATIVECODE, MAP[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emit_orl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_rr(NATIVECODE, MAP[1], emit_EAX);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emit_orl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        emit_orl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emit_orl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}


Parrot_bxor_i_ic_ic {
    jit_emit_mov_mi_ii(NATIVECODE, &INT_REG[1], *INT_CONST[2] | *INT_CONST[3]);
}

Parrot_bxor_i_i_ic {
    if (MAP[1] && MAP[2]) {
        if (MAP[1] == MAP[2]) {
            emitm_xorl_i_r(NATIVECODE, *INT_CONST[3], MAP[1]);
        }
        else {
            jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[3]);
            emit_xorl_r_r(NATIVECODE, MAP[2], MAP[1]);
        }
    }
    else if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[3]);
        emit_xorl_m_r(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emitm_xorl_i_r(NATIVECODE, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX,  &INT_REG[2]);
        emitm_xorl_i_r(NATIVECODE, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_bxor_i_ic_i {
    if (MAP[1] && MAP[3]) {
        if (MAP[1] == MAP[3]) {
            jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
            emit_xorl_r_r(NATIVECODE, MAP[3], emit_EAX);
            jit_emit_mov_rr(NATIVECODE, MAP[1], emit_EAX);
        }
        else {
            jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
            emit_xorl_r_r(NATIVECODE, MAP[3], MAP[1]);
        }
    }
    else if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
        emit_xorl_m_r(NATIVECODE, MAP[1], &INT_REG[3]);
    }
    else if (MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        emitm_xorl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX,  &INT_REG[3]);
        emitm_xorl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_bxor_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        if (MAP[1] == MAP[3]) {
            jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
            emit_xorl_r_r(NATIVECODE, MAP[3], emit_EAX);
            jit_emit_mov_rr(NATIVECODE, MAP[1], emit_EAX);
        }
        else {
            jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
            emit_xorl_r_r(NATIVECODE, MAP[3], MAP[1]);
        }
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emit_xorl_m_r(NATIVECODE, MAP[1], &INT_REG[3]);
    }
    else if (MAP[1] && MAP[3]) {
        if (MAP[1] != MAP[3]) {
            jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[3]);
        }
        emit_xorl_m_r(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        emit_xorl_r_r(NATIVECODE, MAP[2], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emit_xorl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_rr(NATIVECODE, MAP[1], emit_EAX);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emit_xorl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[3]);
        emit_xorl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emit_xorl_m_r(NATIVECODE, emit_EAX, &INT_REG[3]);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_bnot_i_i {
    if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emitm_notl_r(NATIVECODE, MAP[1]);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        emitm_notl_r(NATIVECODE, MAP[1]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emitm_notl_r(NATIVECODE, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emitm_notl_r(NATIVECODE, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_bnot_i_ic {
    if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], ~(*INT_CONST[2]));
    }
    else {
        jit_emit_mov_mi_ii(NATIVECODE, &INT_REG[1], ~(*INT_CONST[2]));
    }
}

Parrot_shl_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emitm_shll_r_r(NATIVECODE, emit_ECX, MAP[1]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_mov_rm_i(NATIVECODE, emit_ECX, &INT_REG[3]);
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emitm_shll_r_r(NATIVECODE, emit_ECX, MAP[1]);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        emitm_shll_r_r(NATIVECODE, emit_ECX, MAP[1]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emitm_shll_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, emit_ECX, &INT_REG[3]);
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        emitm_shll_r_r(NATIVECODE, emit_ECX, MAP[1]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rm_i(NATIVECODE, emit_ECX, &INT_REG[3]);
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emitm_shll_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emitm_shll_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX,  &INT_REG[2]);
        jit_emit_mov_rm_i(NATIVECODE, emit_ECX,  &INT_REG[3]);
        emitm_shll_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE,  &INT_REG[1], emit_EAX);
    }
}

Parrot_shl_i_i_ic {
    if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emitm_shll_i_r(NATIVECODE, *INT_CONST[3], MAP[1]);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        emitm_shll_i_r(NATIVECODE, *INT_CONST[3], MAP[1]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emitm_shll_i_r(NATIVECODE, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emitm_shll_i_r(NATIVECODE, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_shl_i_ic_i {
    if (MAP[1] && MAP[3]) {
        if (MAP[1] == MAP[3]) {
            jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
            jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
            emitm_shll_r_r(NATIVECODE, emit_ECX, emit_EAX);
            jit_emit_mov_rr(NATIVECODE, MAP[1], emit_EAX);
        }
        else {
            jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
            jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
            emitm_shll_r_r(NATIVECODE, emit_ECX, MAP[1]);
        }
    }
    else if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
        jit_emit_mov_rm_i(NATIVECODE, emit_ECX, &INT_REG[3]);
        emitm_shll_r_r(NATIVECODE, emit_ECX, MAP[1]);
    }
    else if (MAP[3]) {
        jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
        jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
        emitm_shll_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
        jit_emit_mov_rm_i(NATIVECODE, emit_ECX, &INT_REG[3]);
        emitm_shll_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_shl_i_ic_ic {
    if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2] << *INT_CONST[3]);
    }
    else {
        jit_emit_mov_mi_ii(NATIVECODE, &INT_REG[1], *INT_CONST[2] << *INT_CONST[3]);
    }
}

Parrot_shr_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emitm_shrl_r_r(NATIVECODE, emit_ECX, MAP[1]);
    }
    else if (MAP[1] && MAP[2]) {
        jit_emit_mov_rm_i(NATIVECODE, emit_ECX, &INT_REG[3]);
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emitm_shrl_r_r(NATIVECODE, emit_ECX, MAP[1]);
    }
    else if (MAP[1] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        emitm_shrl_r_r(NATIVECODE, emit_ECX, MAP[1]);
    }
    else if (MAP[2] && MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emitm_shrl_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, emit_ECX, &INT_REG[3]);
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        emitm_shrl_r_r(NATIVECODE, emit_ECX, MAP[1]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rm_i(NATIVECODE, emit_ECX, &INT_REG[3]);
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emitm_shrl_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else if (MAP[3]) {
        jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emitm_shrl_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX,  &INT_REG[2]);
        jit_emit_mov_rm_i(NATIVECODE, emit_ECX,  &INT_REG[3]);
        emitm_shrl_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE,  &INT_REG[1], emit_EAX);
    }
}

Parrot_shr_i_i_ic {
    if (MAP[1] && MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, MAP[1], MAP[2]);
        emitm_shrl_i_r(NATIVECODE, *INT_CONST[3], MAP[1]);
    }
    else if (MAP[1]) {
        jit_emit_mov_rm_i(NATIVECODE, MAP[1], &INT_REG[2]);
        emitm_shrl_i_r(NATIVECODE, *INT_CONST[3], MAP[1]);
    }
    else if (MAP[2]) {
        jit_emit_mov_rr(NATIVECODE, emit_EAX, MAP[2]);
        emitm_shrl_i_r(NATIVECODE, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_rm_i(NATIVECODE, emit_EAX, &INT_REG[2]);
        emitm_shrl_i_r(NATIVECODE, *INT_CONST[3], emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX)
    }
}

Parrot_shr_i_ic_i {
    if (MAP[1] && MAP[3]) {
        jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
        jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
        emitm_shrl_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_rr(NATIVECODE, MAP[1], emit_EAX);
    }
    else if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2]);
        jit_emit_mov_rm_i(NATIVECODE, emit_ECX, &INT_REG[3]);
        emitm_shrl_r_r(NATIVECODE, emit_ECX, MAP[1]);
    }
    else if (MAP[3]) {
        jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
        jit_emit_mov_rr(NATIVECODE, emit_ECX, MAP[3]);
        emitm_shrl_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
    else {
        jit_emit_mov_ri_i(NATIVECODE, emit_EAX, *INT_CONST[2]);
        jit_emit_mov_rm_i(NATIVECODE, emit_ECX, &INT_REG[3]);
        emitm_shrl_r_r(NATIVECODE, emit_ECX, emit_EAX);
        jit_emit_mov_mr_i(NATIVECODE, &INT_REG[1], emit_EAX);
    }
}

Parrot_shr_i_ic_ic {
    if (MAP[1]) {
        jit_emit_mov_ri_i(NATIVECODE, MAP[1], *INT_CONST[2] >> *INT_CONST[3]);
    }
    else {
        jit_emit_mov_mi_ii(NATIVECODE, &INT_REG[1], *INT_CONST[2] >> *INT_CONST[3]);
    }
}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
 */
