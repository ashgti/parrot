;
; i386/core.jit 
;
; $Id$
;

Parrot_end {
    NATIVECODE = emit_popl_r(NATIVECODE, emit_ESI);
    emitm_ret(NATIVECODE);
}

Parrot_noop {
    NATIVECODE = emit_nop(NATIVECODE);
}

Parrot_set_i_ic {
    emitm_movl_i_m(NATIVECODE, *INT_CONST[2], emit_None, emit_None, emit_None,
	    &INT_REG[1]);
}

Parrot_set_i_i {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[2]);
    emitm_movl_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
}

Parrot_set_n_nc {
    emitm_fldl(NATIVECODE, emit_None, emit_None, emit_None, &NUM_CONST[2]);
    emitm_fstpl(NATIVECODE, emit_None, emit_None, emit_None, &NUM_REG[1]);
}

Parrot_set_n_n {
    emitm_fldl(NATIVECODE, emit_None, emit_None, emit_None, &NUM_REG[2]);
    emitm_fstpl(NATIVECODE, emit_None, emit_None, emit_None, &NUM_REG[1]);
}

Parrot_mul_i_i_i {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[2]);
    emitm_smull_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[3]);
    emitm_movl_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
}

Parrot_sub_i_i_i {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[2]);
    emitm_subl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[3]);
    emitm_movl_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1])
}

Parrot_set_n_i {
    emitm_fildl(NATIVECODE, emit_None, emit_None, emit_None, &INT_REG[2]);
    emitm_fstpl(NATIVECODE, emit_None, emit_None, emit_None, &NUM_REG[1]);
}

Parrot_div_n_n_n {
    emitm_fldl(NATIVECODE, emit_None, emit_None, emit_None, &NUM_REG[2]);
    emitm_fldl(NATIVECODE, emit_None, emit_None, emit_None, &NUM_REG[3]);
    emitm_fdivp(NATIVECODE, 1);
    emitm_fstpl(NATIVECODE, emit_None, emit_None, emit_None, &NUM_REG[1]);
}

Parrot_sub_n_n_n {
    emitm_fldl(NATIVECODE, emit_None, emit_None, emit_None, &NUM_REG[2]);
    emitm_fldl(NATIVECODE, emit_None, emit_None, emit_None, &NUM_REG[3]);
    emitm_fsubp(NATIVECODE, 1);
    emitm_fstpl(NATIVECODE, emit_None, emit_None, emit_None, &NUM_REG[1]);
}

Parrot_if_i_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_cmpl_i_r(NATIVECODE, 0, emit_EAX);
    emit_jcc(jit_info, emitm_jne, *INT_CONST[2]);
}

Parrot_branch_ic {
    emit_jump(jit_info, *INT_CONST[1]);
}

Parrot_inc_i {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_addl_i_r(NATIVECODE, 1, emit_EAX);
    emitm_movl_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1])
}
Parrot_dec_i {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_subl_i_r(NATIVECODE, 1, emit_EAX);
    emitm_movl_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1])
}
Parrot_inc_i_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_addl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    emitm_movl_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1])
}
Parrot_dec_i_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_subl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    emitm_movl_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1])
}
Parrot_lt_i_ic_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    emit_jcc(jit_info, emitm_jl, *INT_CONST[3]);
}
Parrot_lt_i_i_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_cmpl_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[2]);
    emit_jcc(jit_info, emitm_jl, *INT_CONST[3]);
}
Parrot_gt_i_ic_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    emit_jcc(jit_info, emitm_jg, *INT_CONST[3]);
}
Parrot_gt_i_i_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_cmpl_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[2]);
    emit_jcc(jit_info, emitm_jg, *INT_CONST[3]);
}
Parrot_ge_i_ic_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    emit_jcc(jit_info, emitm_jnl, *INT_CONST[3]);
}
Parrot_ge_i_i_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_cmpl_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[2]);
    emit_jcc(jit_info, emitm_jnl, *INT_CONST[3]);
}
Parrot_le_i_ic_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    emit_jcc(jit_info, emitm_jle, *INT_CONST[3]);
}
Parrot_le_i_i_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_cmpl_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[2]);
    emit_jcc(jit_info, emitm_jle, *INT_CONST[3]);
}
Parrot_eq_i_ic_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_cmpl_i_r(NATIVECODE, *INT_CONST[2], emit_EAX);
    emit_jcc(jit_info, emitm_je, *INT_CONST[3]);
}
Parrot_eq_i_i_ic {
    emitm_movl_m_r(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[1]);
    emitm_cmpl_r_m(NATIVECODE, emit_EAX, emit_None, emit_None, emit_None, &INT_REG[2]);
    emit_jcc(jit_info, emitm_je, *INT_CONST[3]);
}
/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil 
 * End:
 *
 * vim: expandtab shiftwidth=4:
 */
