;
; alpha/core.jit
;
; $Id$
;

Parrot_noop {
    emit_nop(jit_info->native_ptr);
}

Parrot_set_i_i {
    jit_info->native_ptr = emit_l_s_r(jit_info->native_ptr, interpreter, LDQ, REG7_t6, REG6_t5, &INT_REG[2]);
    jit_info->native_ptr = emit_l_s_r(jit_info->native_ptr, interpreter, STQ, REG7_t6, REG6_t5, &INT_REG[1]);
}

Parrot_set_i_ic {
    jit_info->native_ptr = emit_l_c(jit_info, REG7_t6, &INT_CONST[2]);
    jit_info->native_ptr = emit_l_s_r(jit_info->native_ptr, interpreter, STQ, REG7_t6, REG6_t5, &INT_REG[1]);
}

Parrot_add_i_i_i {
    jit_info->native_ptr = emit_l_s_r(jit_info->native_ptr, interpreter, LDQ, REG7_t6, REG6_t5, &INT_REG[3]);
    jit_info->native_ptr = emit_l_s_r(jit_info->native_ptr, interpreter, LDQ, REG8_t7, REG6_t5, &INT_REG[2]);
    jit_info->native_ptr = emit_arithmetic(jit_info->native_ptr, ADDQ, REG7_t6, REG7_t6, REG8_t7);
    jit_info->native_ptr = emit_l_s_r(jit_info->native_ptr, interpreter, STQ, REG7_t6, REG6_t5, &INT_REG[1]);
}

Parrot_if_i_ic {
    jit_info->native_ptr = emit_l_s_r(jit_info->native_ptr, interpreter, LDQ, REG7_t6, REG6_t5, &INT_REG[1]);
    jit_info->native_ptr = emit_b(jit_info, BNE, REG7_t6, *INT_CONST[2]);
}

Parrot_end {
    emit_mov(jit_info->native_ptr, REG15_s6, REG30_sp);
    jit_info->native_ptr = emit_l_s_c(jit_info->native_ptr, LDQ, REG26_ra, REG30_sp, 0);

    jit_info->native_ptr = emit_l_s_c(jit_info->native_ptr, LDQ, REG15_s6, REG30_sp, 8);
    jit_info->native_ptr = emit_l_s_c(jit_info->native_ptr, LDA, REG30_sp, REG30_sp, 16);
    emit_ret(jit_info->native_ptr);
}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil 
 * End:
 *
 * vim: expandtab shiftwidth=4:
 */
