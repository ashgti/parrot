;
; alpha/core.jit
;
;
; $Id$
;

Parrot_noop {
    emit_nop(NATIVECODE);
}

Parrot_set_i_i {
    if (MAP[1] && MAP[2]) {
        emit_mov(NATIVECODE, MAP[2], MAP[1]);
    }
    else if (MAP[1]) {
        emit_ldq(NATIVECODE, MAP[1], &INT_REG[2]);
    }
    else if (MAP[2]) {
        emit_stq(NATIVECODE, MAP[2], &INT_REG[1]);
    }
    else {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[2]);
        emit_stq(NATIVECODE, REG0_v0, &INT_REG[1]);
    }
}

Parrot_set_i_ic {
    if (MAP[1]) {
        emit_lc(NATIVECODE, MAP[1], *INT_CONST[2]);
    }
    else {
        emit_lc(NATIVECODE, REG0_v0, *INT_CONST[2]);
        emit_stq(NATIVECODE, REG0_v0, &INT_REG[1]);
    }
}

Parrot_sub_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        emit_subq(NATIVECODE, MAP[2], MAP[3], MAP[1]);
    }
    else if (MAP[1] && MAP[2]) {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[3]);
        emit_subq(NATIVECODE, MAP[2], REG0_v0, MAP[1]);
    }
    else if (MAP[1] && MAP[3]) {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[2]);
        emit_subq(NATIVECODE, REG0_v0, MAP[3], MAP[1]);
    }
    else if (MAP[2] && MAP[3]) {
        emit_subq(NATIVECODE, MAP[2], MAP[3], REG0_v0);
        emit_stq(NATIVECODE, REG0_v0, &INT_REG[1]);
    }
    else if (MAP[1]) {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[3]);
        emit_ldq(NATIVECODE, REG8_t7, &INT_REG[2]);
        emit_subq(NATIVECODE, REG8_t7, REG0_v0, MAP[1]);
    }
    else if (MAP[2]) {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[3]);
        emit_subq(NATIVECODE, MAP[2], REG0_v0, REG0_v0);
        emit_stq(NATIVECODE, REG0_v0, &INT_REG[1]);
    }
    else if (MAP[3]) {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[2]);
        emit_subq(NATIVECODE, REG0_v0, MAP[3], REG0_v0);
        emit_stq(NATIVECODE, REG0_v0, &INT_REG[1]);
    }
    else {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[3]);
        emit_ldq(NATIVECODE, REG8_t7, &INT_REG[2]);
        emit_subq(NATIVECODE, REG0_v0, REG8_t7, REG0_v0);
        emit_stq(NATIVECODE, REG0_v0, &INT_REG[1]);
    }
}

Parrot_add_i_i_i {
    if (MAP[1] && MAP[2] && MAP[3]) {
        emit_addq(NATIVECODE, MAP[2], MAP[3], MAP[1]);
    }
    else if (MAP[1] && MAP[2]) {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[3]);
        emit_addq(NATIVECODE, MAP[2], REG0_v0, MAP[1]);
    }
    else if (MAP[1] && MAP[3]) {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[2]);
        emit_addq(NATIVECODE, REG0_v0, MAP[3], MAP[1]);
    }
    else if (MAP[2] && MAP[3]) {
        emit_addq(NATIVECODE, MAP[2], MAP[3], REG0_v0);
        emit_stq(NATIVECODE, REG0_v0, &INT_REG[1]);
    }
    else if (MAP[1]) {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[3]);
        emit_ldq(NATIVECODE, REG8_t7, &INT_REG[2]);
        emit_addq(NATIVECODE, REG8_t7, REG0_v0, MAP[1]);
    }
    else if (MAP[2]) {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[3]);
        emit_addq(NATIVECODE, MAP[2], REG0_v0, REG0_v0);
        emit_stq(NATIVECODE, REG0_v0, &INT_REG[1]);
    }
    else if (MAP[3]) {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[2]);
        emit_addq(NATIVECODE, REG0_v0, MAP[3], REG0_v0);
        emit_stq(NATIVECODE, REG0_v0, &INT_REG[1]);
    }
    else {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[3]);
        emit_ldq(NATIVECODE, REG8_t7, &INT_REG[2]);
        emit_addq(NATIVECODE, REG0_v0, REG8_t7, REG0_v0);
        emit_stq(NATIVECODE, REG0_v0, &INT_REG[1]);
    }
}

Parrot_if_i_ic {
    if (MAP[1]) {
        emit_bne(NATIVECODE, MAP[1], *INT_CONST[2]);
    }
    else {
        emit_ldq(NATIVECODE, REG0_v0, &INT_REG[1]);
        emit_bne(NATIVECODE, REG0_v0, *INT_CONST[2]);
    }
}

Parrot_end {
;   emit_mov(NATIVECODE, REG15_s6, REG30_sp);
    emit_ldq_b(NATIVECODE, REG26_ra, 0, REG30_sp);
    emit_ldq_b(NATIVECODE, REG15_s6, 8, REG30_sp);
    emit_lda_b(NATIVECODE, REG30_sp, 16, REG30_sp);
    emit_ret(NATIVECODE);
}

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil 
 * End:
 *
 * vim: expandtab shiftwidth=4:
 */
