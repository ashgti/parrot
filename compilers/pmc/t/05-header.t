#! ../../parrot
# Check generating header for parsed PMC

.include 't/common.pir'

.sub 'main' :main
.include 'test_more.pir'
load_bytecode 'pmc.pbc'
    .local int total

    plan(3)

    .local string filename
    filename = 't/data/class00.pmc'
    $S0 = _slurp(filename)
    check_one_header(filename, $S0, "'DO NOT EDIT THIS FILE'", "Warning generated")

    check_one_header(filename, $S0, "'PARROT_PMC_FOO_H_GUARD'", "Guard generated")

    filename = 't/data/class07.pmc'
    $S0 = _slurp(filename)
    check_one_header(filename, $S0, "'PMC * Parrot_Integer_instantiate(PARROT_INTERP, PMC *sig, PMC* init)'", "VTable method generated")

.end

# Check genrated header.
# Parse passed string, generate header, check against supplied pattern
.sub 'check_one_header'
    .param string name
    .param string source
    .param string pattern
    .param string message

    .local pmc emitter, capture
    (emitter, capture) = get_emitter_and_capture(name, source, 'past')
    $S0 = emitter.'generate_h_file'(capture)
    say $S0
    like($S0, pattern, message)
.end

# Don't forget to update plan!

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4 ft=pir:
