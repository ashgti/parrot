=head1 NAME

design.pod - description PIRC's design.

=head1 DESCRIPTION

This document describes the design and implementation of PIRC, a PIR Compiler.

=head1 OVERVIEW

PIRC currently consists of a PIR parser, together with a lexer. It also has
the beginning of semantic actions in the parser. Through the use of a vtable,
several back-ends can be implemented, leaving the parser untouched.

Documentation of the lexer and the parser can be generated by running:

 pod2html src/pirlexer.c > doc/pirlexer.html
 pod2html src/pirparser.c > doc/pirparser.html

This document will only provide a high-level overview.


=head1 THE LEXER

The lexer is defined in C<pirlexer.c>. The header file lists all tokens that
may be returned by the lexer.

The lexer reads the complete file contents into a buffer, from which it reads
the individual words, or I<tokens>. A buffer is much faster than using C<getc()>
for each character, as I/O is relatively slow.



=head1 THE PARSER

The parser is defined in C<pirparser.c>. The header file only predeclares the
C<parser_state> structure, but its definition is written in the C file, to hide
the implementation details from other files. Access to specific fields is done
through accessor functions, defined in the header file as well.

The parser communicates with the lexer through the lexer's accessor function. Of
these, the C<next_token()> function is most important: it requests the next token
from the lexer.

The parser does not know anything about the spelling of tokens, although it can
request these through C<find_keyword()>.


=head1 SEMANTIC ACTIONS

The parser calls at a number of places C<emit> functions. These are I<hooks> to
which a function can be hooked, that will be called when the parser calls that
function. This is implemented using vtables.

Currently, there are two back-end targets: Parrot Abstract Syntax Tree (PAST),
and simply PIR.

See src/pirvtable.{c,h} for details.

=head1 AUTHOR

Klaas-Jan Stol <parrotcode at gmail dot com>

=cut
