# Copyright (C) 2001-2007, The Perl Foundation.
# $Id$

=head1 NAME

README.txt - Readme file for pirc/new compiler, a fresh implementation of
the PIR language using Bison and Flex.

=head1 AUTHOR

kjs

=head1 DESCRIPTION

pirc/new is a fresh implementation of the PIR language. Maintaining the
current default implementation (IMCC) is a bit of a pain, and I wanted to
see how far I could come with a fresh implementation. A lot of ugly things
could be removed.

Of course, it is not finished yet. Currently only work is done on the parser.
This needs a lot of testing, there are probably some dark corners that need
to be updated, but fixing them should be rather easy. Once the parser is
tested, semantic actions can be added, which can be copied or based on the
actions in IMCC.

Current shortcomings are:

=over 4

=item * Macro layer

The whole macro layer needs more thought. The C<.include> and C<.macro_const> directives
(the latter was formerly called C<.constant>) are implemented, but the macro definition and
expansion functionality needs some redesign. I'm thinking of implementing a macro
pre-processor. A big pro of that approach would be a much cleaner lexer specification.
However, it might make the compilation process a bit slower.

=back

During reimplementing PIR using Bison/Flex, I learned a lot about the current
implementation. Also, although the macro layer is not completed yet, it's quite clean
and easier to read than the current implementation.

Of course, besides shortcomings, the new implementation also has some unique features:

=over 4

=item * Multiple heredoc arguments

In pirc/new (a new name is yet to be defined) it is allowed to use multiple
heredocs as function arguments, like so:

   ...
   foo(<<'HI', <<'BYE')

   ...
 HI

   ...
 BYE

=item * Reentrant

The generated lexer and parser are fully re-entrant. (It does need to be tested, though).


=item * Comments!

The code is provided with comments, so you can actually understand what it does.

=item * Pre-processing option

Although IMCC does define the option '-E', it is not really working correctly. pirc/new's
'-E' option is (as far as I have checked, but it should be fairly complete).


=item * Multiple command line args

You can specify a list of .pir files to be compiled; all of them will be processed.

=item * Grammar cleanup

This is a nice opportunity to clean up the grammar of the PIR language. Hacking on
IMCC's grammar is possible, but not for the faint of heart.

=back

=head1 NOTES


=head2 Cygwin processable lexer spec.

The file C<pir.l> from which the lexer is generated is I<not> processable by Cygwin's
default version of Flex. In order to make a reentrant lexer, a newer version is needed,
which can be downloaded from the link below.

L<http://sourceforge.net/project/downloading.php?groupname=flex&filename=flex-2.5.33.tar.gz&use_mirror=belnet>

=head2 On the macro pre-processor

As listed in the TODO, it might be worth while considering to remove the macro handling
from pir.l, and create a separate macro pre-processor. However, when doing so, its lexer
is almost a duplicate of pir.l. This is to correctly scan heredocs and recognize macro
expansions. When a dot-prefixed identifier is encountered, it should only be expanded
when the lexer is not scanning a heredoc. So, at least the whole heredoc scanning stuff
should also go into the pre-processor.

A first version of a separate macro pre-processor can be found in C<compilers/pirc/macro>.
This pre-processor is mostly done, except for macro argument expansion, and heredoc parsing.

=head3 Pros of a separate Macro Pre-Processor

=over 4

=item * cleaner solution, as the macro layer is implemented in a separate processor.

=item * easier to maintain. The heredoc and macro scanning is complex, and to isolate it in a
different file is a Good Thing.

=back

=head3 Cons of a separate Macro Pre-Processor

=over 4

=item * a great deal of the PIR lexer is duplicated. Duplication of code is bad.

=item * having the input processed by two instead of 1 scanner results in a performance penalty.
This is especially true if the intermediate results are written to and read from a file on disk.

=back

=head1 NOTES FOR A MACRO PRE-PROCESSOR

In C<compilers/pirc/macro> a macro pre-processor is implemented. It's fairly complete, missing
the following features:

=over 4

=item * Heredoc parsing (both for normal PIR code, as well as macro arguments)

=item * arguments for macro expansion

=item * macro labels.

=back

Although the number of features of the macro layer is quite small, during development of
this pre-processor, implementing it was more complex than one would think. I list some of
the details that need to be considered, in order to share this information with other
interested people.

=over 4

=item * The preprocessor must be a full tokenizer; it is not enough to just scan characters,
as it needs to recognize a subset of the tokens of the PIR language. Notably, the following
tokens need to be recognized (depending on context):

 ".include"
 ".macro_constant"
 macro labels ("$"IDENT":")
 ".macro"
 ".endm"
 "("
 ","
 ")"
 newlines
 identifiers
 flags (":"IDENT)
 labels (IDENT":")
 integer and floating-point constants
 string constants
 heredoc-strings ("<<string-constant")
 Parrot registers
 any other set of characters that make up a token in PIR, such as "=="
 macro expansions ("."IDENT)
 <<EOF>>

=item * If it must be possible to expand macros with heredoc arguments, then the
heredoc parsing must be done in the preprocessor's lexer. If not, the lexer still needs
to handle heredocs, as they contain newline characters. Newline characters are somewhat
special in the macro layer, as they sometimes need to be returned as such (TK_NL) and
sometimes as just any token (TK_ANY), and still other times they can be just skipped.

=item * Heredocs, if handled in the preprocessor, must be I<flattened>, meaning that
some code like this:

   .sub main
     foo(<<'HI')
  this is a string
      heredoc argument.
 HI
   .end

must be preprocessed into something like this:

   .sub main
     foo("this is a string\n   heredoc argument.\n")
   .end

I'm not entirely sure if there should be a newline at the beginning of this string, and
at the end of the string (in this case I added one at the end). In any case, the newline
characters must be embedded, and when printing this string to file or screen, they need
to be escaped (otherwise the PIR lexer cannot read it).

=item * Overall, the implementation of the preprocessor can become quite complex, but
it does result in a very clean and simple implementation of the PIR lexer.

=back

=head1 BUGS

Having a look at this implementation would be greatly appreciated, and any resulting
feedback even more :-)

=head1 TODO

Major issues that need work:

=over 4

=item * finish the macro pre-processor.

=item * remove the macro layer (incomplete) from the PIR lexer.

=item * pipe the output of the preprocessor to the PIR lexer.

=back

=head1 SEE ALSO

See also C<languages/PIR> for a PGE based implementation.
See also C<compilers/pirc>, a hand-written, recursive-descent PIR parser.
See also C<compilers/imcc>, the current I<standard> PIR implementation.
See also C<docs/imcc/syntax.pod> for a description of PIR syntax.
See also C<docs/imcc/> for more documentation about the PIR language.

=cut
