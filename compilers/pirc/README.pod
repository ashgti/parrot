=head1 INTRODUCTION

This is the readme file for PIRC, a PIR Compiler written in C.

This is an attempt to implement Parrot Intermediate Representation (PIR)
using a top-down approach. This is still in its early phases, and only
the parser is being worked on.

As the current implementation of PIR (IMCC) is a bit messy, this is
an attempt to write a clean implementation to see what constructs should
be allowed, and which should be forbidden. It's also a nice experiment
to see whether a top-down parser has any advantages over a YACC implementation.
(For instance, it's much smaller).

This implementation is as complete as I can currently oversee. Of course,
things will be fixed as I encounter them.

More importantly, ops cannot be parsed yet, because the distinction between
an op and a plain identifiers can only be decided during runtime. This is
because Parrot allows for runtime loading of op-libraries. Currently,
I hardcoded the "print" op, so you can compile:

 .sub main :main
   print "Hello World"
 .end

On the other hand, most of the "sugar" that PIR adds to Parrot assembly
syntax has been implemented, and can be parsed successfully.

For more documentation, please run:
 
 pod2html src/pirparser.c > doc/pirparser.html
 pod2html src/pirlexer.c  > doc/pirlexer.html
 
This will generate the documentation in HTML format. The documentation of
pirparser.c contains the grammar that is accepted by PIRC. The documentation
of pirlexer.c contains the lexical specifiction as accepted by PIRC.


=head1 ISSUES

=over 4

=item *

Macros are not expanded at this point, but can be parsed.

=item *

Parrot ops cannot be parsed, except for C<print> and C<null>, as C<null> is
a PIR keyword (used in the C<if> and C<unless> statements).

=back

Comments, improvements etc. are most welcome and may be sent to the author.

=head1 AUTHOR

klaas-Jan stol <parrotcode at gmail dot com>

=cut

