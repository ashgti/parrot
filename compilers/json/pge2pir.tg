grammar JSON::PIR is TGE::Grammar;

transform result (ROOT) {
   .local pmc pir
   .local string result
 
   $S0 = tree.'get'('pir', node, 'thing')

   pir = new 'PGE::CodeString'
   pir.emit(".sub anon :anon")
   pir.emit($S0)
   result = node['ret']
   pir.emit("    .return (%0)",result)
   pir.emit(".end")
   
  .return(pir)
} 

transform pir (thing) {
   $P0 = node['string']
   unless null $P0 goto got_string
   
   $P0 = node['number']
   unless null $P0 goto got_number

   .return ('')

  got_string:
   $P0 = tree.'get'('pir', $P0, 'string')
   $P1 = get_root_global ['parrot'], '_dumper'
   # XXXXXXX Need to get the child node's 'ret' attributer here, 
   # so we can set our own 'ret' to it. How now, brown cow?
   $P1(node)
   .return  ($P0)

  got_number:
   .return tree.'get'('pir', $P0, 'number')
}

#transform pir (object) {
#transform pir (array) {
#transform pir (thing) {
#transform pir (object) {

transform pir (string) {
    .local pmc pir, result
    pir = new 'PGE::CodeString'
    result = pir.unique("$P")
    $S0 = node
    pir.emit("    %0 = new .String", result)
    pir.emit("    %0 = %1", result, $S0)
    node['ret'] = result
   .return(pir)
}

transform pir (number) {
    .local pmc pir, result
    pir = new 'PGE::CodeString'
    result = pir.unique("$P")
    $S0 = node
    pir.emit("    %0 = new .Integer", result)
    pir.emit("    %0 = %1", result, $S0)
    node['ret'] = result
   .return(pir)
}
