#! ../../parrot
# Check generating header for parsed PMC

.include 't/common.pir'

.sub 'main' :main
    .include 'test_more.pir'
    load_bytecode 'pmcc.pbc'
    .local int total

    plan(6)

    $P0 = new ['ResizableStringArray']
    $P0 = split ',', 't/data'
    set_hll_global ['PMC';'Emitter'], '@?pmc_path', $P0

    .local string filename
    filename = 't/data/class00.pmc'
    $S0 = _slurp(filename)
    check_one_header(filename, $S0, "'DO NOT EDIT THIS FILE'", "Warning generated")

    check_one_header(filename, $S0, "'PARROT_PMC_FOO_H_GUARD'", "Guard generated")

    filename = 't/data/class07.pmc'
    $S0 = _slurp(filename)
    check_one_header(filename, $S0, "'PMC * Parrot_Integer_instantiate(PARROT_INTERP, PMC *sig, PMC* init)'", "VTable method generated")

    .local string attr_struct
    filename = 't/data/class10.pmc'
    $S0 = _slurp(filename)
    attr_struct = <<'STRUCT'
typedef struct Parrot_foo_attributes {
\s*int\s+int_attribute[;]
\s*PMC\*\s+pmc_attribute[;]
} Parrot_foo_attributes[;]
STRUCT
    attr_struct = "attributes"
    check_one_header(filename, $S0, attr_struct, "ATTR struct generated")

    .local string attr_macro
    attr_macro = '#define\sPARROT_FOO\(o\)\s\(\(Parrot_foo_attributes\s\*\)\sPMC_data\(o\)\)'
    filename = "t/data/class10.pmc"
    $S0 = _slurp(filename)
    check_one_header(filename, $S0, attr_macro, "ATTR macro generated")

    #generate the dump for Parent
    .local pmc emitter, capture
    filename = 't/data/parent.pmc'

    $P0 = new ['String']
    $P0 = filename
    set_hll_global ['PMC';'Emitter'], '$?filename', $P0

    $S0 = _slurp(filename)
    (emitter, capture) = get_emitter_and_capture(filename, $S0, 'past')
    $S0 = emitter.'generate_dump'(capture)
    filename = 't/data/parent.dump'
    $P0 = open filename, "w"
    print $P0, $S0
    close $P0

    #test that parent ATTRs are included in children, and in the right order
    filename = 't/data/child.pmc'

    $P0 = new ['String']
    $P0 = filename
    set_hll_global ['PMC';'Emitter'], '$?filename', $P0
    $S0 = _slurp(filename)
    attr_struct = 'parent_1\;.*parent_2\;.*parent_3\;.*child_1\;.*child_2\;.*child_3\;'
    check_one_header(filename, $S0, attr_struct, "parent/child ATTR ordering")

.end

# Check genrated header.
# Parse passed string, generate header, check against supplied pattern
.sub 'check_one_header'
    .param string name
    .param string source
    .param string pattern
    .param string message

    .local pmc emitter, capture
    (emitter, capture) = get_emitter_and_capture(name, source, 'past')
    $S0 = emitter.'generate_h_file'(capture)
    #say $S0
    like($S0, pattern, message)
.end

# Don't forget to update plan!

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4 ft=pir:
