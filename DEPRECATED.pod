# $Id$

=head1 Deprecation in Parrot

Please see F<docs/project/support_policy.pod> for the parrot
project's policy regarding deprecated features.

This is a list of currently deprecated features of Parrot.  Every deprecation
has an associated Trac ticket [1].  Each item indicates the first release
in which it is eligible for removal. If the release listed is one that
has already occurred, this feature may be removed in any upcoming release.

Whenever deprecated items are removed, information
regarding how to cope with the removal will be added to
L<https://trac.parrot.org/parrot/wiki/Deprecation>.

When running parrot, you can receive warnings about deprecated opcodes.
Either run parrot with the C<-w> option to enable all warnings, or
specifically by including this C<PIR> code:

 .include 'warnings.pasm'
 warningson .PARROT_WARNINGS_DEPRECATED_FLAG

=head1 Configuration

=over 4

=item Alternate GC configurations [eligible in 1.5]

C<malloc>, C<malloc-trace> and C<libc> will be removed as potential
options for the C<--gc> config option.

L<https://trac.parrot.org/parrot/ticket/490>

=back

=head1 PMCS

=over 4

=item pointer [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/187>

=item random [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/189>

=item moved to dynpmc [eligible in 1.1]

AddrRegistry, CodeString, Env, Eval, File, OS, PCCMETHOD_Test, StringHandle,
and Timer.

L<https://trac.parrot.org/parrot/ticket/448>

=item multiple dispatch within core PMCs [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/452>

=back

=head1 Opcodes

=over 4

=item moved to dynop [eligible in 1.1]

Parts or all of: bit.ops, debug.ops, io.ops, math.ops, obscure.ops, set.ops
(the obscure and rarely used parts), sys.ops.

L<https://trac.parrot.org/parrot/ticket/449>

=item experimental ops [eligible in 1.1]

F<src/ops/experimental.ops> - only the C<trap> opcode remains

=item myops [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/450>

=back

=head1 Bytecode

=over 4

=item packfile structure [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/451>

=item opcode numbering [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/451>

=item PMC numbering [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/451>

=back

=head1 Class Features

=over 4

=item :anon and :vtable named parameters to add_method [eligible in 1.1]

If you want to override a vtable method/function when building a Class, then
use the method C<add_vtable_override> instead of calling C<add_method> with
one or both of these flags.

L<https://trac.parrot.org/parrot/ticket/158>

=back

=head1 PIR syntax

=over 4

=item Assignment syntax with opcodes [eligible in 1.1]

When the first argument of an opcode is C<OUT>, then
the assignment syntax will be allowed, as it is today.

In any other case (i.e. C<INOUT>, C<IN>), this will become
a syntax error. For example:

    $S0 = print
    $P0 = substr 1, 2, "x"

Will have to be:

    print $S0
    substr $P0, 1, 2, "x"

L<http://rt.perl.org/rt3/Ticket/Display.html?id=36283>

=item named class/pmc lookup in pir syntax such as new, isa, subclass, 
    get_class, etc [eligible in 1.1]

Class PMC name resolution will be the following.

if the arg is a STRING
  Relative to the current Namespace

if the arg is a Array (of any sort) or Key
  Relative to the current HLL Namespace

if the arg is a Namespace or Class PMC
  The passed in class or the class attatched to the passed in namespace.

L<https://trac.parrot.org/parrot/ticket/159>

=item load or include paths prefixed with 'library/' or 'include/'
[eligible in 1.5]

L<https://trac.parrot.org/parrot/ticket/511>

=back

=head1 Functions

=over 4

=item mmd_cvt_to_types [eligible in 1.1]

L<http://rt.perl.org/rt3/Ticket/Display.html?id=60626>

=item src/pic.c and src/pic_jit.c [eligible in 1.1]

These two files were a thin prototype implementation of Polymorphic Inline
Caching that only ever applied to 4 opcodes, one of which has now been removed.
The files (and all functions in them) are deprecated, and will be removed.

L<http://rt.perl.org/rt3/Ticket/Display.html?id=60048>

=item Subs marked with C<:vtable>/C<:method> aren't in namespace [eligible in 1.1]

Subs marked with C<:vtable> or C<:method> flags are no longer given a
namespace entry by default.  Use the C<:nsentry> flag to cause this
to happen.

L<http://rt.perl.org/rt3/Ticket/Display.html?id=53302>

=item Parrot_readbc, Parrot_loadbc. [eligible in 1.1]

They have been renamed to C<Parrot_pbc_read>, C<Parrot_pbc_load>.
C<Parrot_pbc_read> has one third int argument.

L<https://trac.parrot.org/parrot/ticket/266>

=item C API coding standards cleanup [eligible in 1.1]

All C API functions that aren't currently named according to the
'Parrot_<system>_*' scheme will be renamed. If you depend on these
functions in an extending/embedding interface or C-level custom PMCs,
check in 1.4 or 2.0 for the new names.

L<https://trac.parrot.org/parrot/ticket/443>

=item Parrot_add_library_path [eligible in 1.1]

Will be renamed to C<Parrot_lib_add_path_from_cstring>.

L<https://trac.parrot.org/parrot/ticket/455>

=item parrot_new_pmc_hash [eligible in 1.5]

This function will be removed.  parrot_new_hash should be used in its place.

L<https://trac.parrot.org/parrot/ticket/494>

=item Parrot_get_namespace_autobase [eligible in 1.5]

L<https://trac.parrot.org/parrot/ticket/155>

=item Parrot_find_global_k [eligible in 1.5]

L<https://trac.parrot.org/parrot/ticket/156>

=back

=head1 Compiler tools

=head2 P6object

=over 4

=item P6protoobject stringification [eligible in 1.1]

Stringification of protoobjects will return the full name of the type
and parentheses, per Synopsis 12.

L<https://trac.parrot.org/parrot/ticket/168>

=back

=head2 Parrot Grammar Engine

=over 4

=item Deprecated rules and methods [eligible in 1.1]

The following "built-in" PGE rules and methods are from previous 
versions of Synopsis 5.

Deprecated rules:
    C<null>, C<fail>, C<sp>, C<lt>, C<gt>, C<dot>

Deprecated methods:
    C<.text>, C<.item>, C<.result_object>

L<https://trac.parrot.org/parrot/ticket/460>

=item Stringification, numification [eligible in 1.1]

C< PGE::Match > objects will stringify or numify based on
the text that is matched, not the result object.

L<https://trac.parrot.org/parrot/ticket/461>

=back

=head2 Parrot Compiler Toolkit

=over 4

=item PCT::HLLCompiler stages [eligible in 1.1]

The interface of various methods for adding, removing, and modifying 
the list stages in a PCT::HLLCompiler object is subject to change.
The existing actual stages will remain; only the mechanism for specifying
the order of individual stages is likely to change.

L<https://trac.parrot.org/parrot/ticket/462>

=item PCT::HLLCompiler from Perl 5's Test::Harness [eligible in 1.1]

In order to facilitate using PCT::HLLCompiler with test harnesses,
the C<command_line> method of PCT::HLLCompiler object exits silently 
if it detects that it is being run in a sample run from Perl's
Test::Harness.  Currently this detection is done by checking the
second command line argument for "@INC"; future releases may
use a different detection mechanism or eliminate it altogether.

L<https://trac.parrot.org/parrot/ticket/463>

=back

=head2 Not Quite Perl (NQP)

=over 4

=item C< $(...) > syntax  [eligible in 1.5]

The C< $(...) > syntax for obtaining a result object from a Match
object will no longer work.  The new syntax is to invoke the 
C<.ast> method on the Match object.

L<https://trac.parrot.org/parrot/ticket/459>

=back

=cut

=head1 build tools

=over 4

=item tools/build/dynoplibs.pl and tools/build/dynpmc.pl [eligible in 1.1]

Replaced with makefiles.

L<https://trac.parrot.org/parrot/ticket/338>

=back

=head1 Parrot library

=over 4

=item Data::Replace [eligible in 1.5]

L<https://trac.parrot.org/parrot/ticket/108>

=item JSON, JSON, and Config;JSON [eligible in 1.5]

L<https://trac.parrot.org/parrot/ticket/508>

=back

=head1 Footnotes

=over 4

=item 1

L<Trac|http://trac.parrot.org/> is parrot's primary issue tracking system.

Older tickets may be listed at L<RT|https://rt.perl.org/rt3>.

=back

=cut
