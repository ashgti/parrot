=head1 Deprecated opcodes

=over 4

=item fetchmethod

Use the C<find_method> opcode instead.

=back

=head1 .imc file extension

http://xrl.us/jc4u

 IMC vs. PIR
 Two names enter
 One name leaves

 /me giggles
 -- Chip Salzenberg

=head1 Deprecated APIs

=over 4

=item *

All Parrot_char_is_* functions from src/string_primitives.c will
be removed. Please use Parrot_string_is_cclass() instead.

=back

=head1 Deprecated methods

=over 4

=item PGE

PGE::P6Regex is now a registered compiler, and should be used like so:

 <@pmichaud> it's easy; instead of  $P0 = find_global "PGE", "p6rule"
   one now does  $P0 = compreg "PGE::P6Regex"

This syntax is also true for PGE::Glob and PGE::P5Regex

=item Subpragma syntax

Subroutine attributes now use the colon syntax:

  .sub foo method, @MULTI(x,y)    => .sub foo :method :multi(x,y)
  .sub foo @ANON, @LOAD           => .sub foo :anon :load

The new syntax uses no comma separators and all sub attributes are lower
case and prefixed by a colon.

=back

=head1 FUTURE changes

Not yet deprecated, but it's recommended to use the new syntax and
gradually change the old.

=over 4

=item Class name IDs

... will require a dot in front

  $P0 = new Integer               => $P0 = new .Integer

=item Assignment syntax with opcodes [#36283]

When the first argument of an opcode is C<OUT>, then the assignment syntax
will be allowed, as it is today.

In any other case (i.e. C<INOUT>, C<IN>), this will become
a syntax error. For example:

    $S0 = print
    $P0 = substr 1, 2, "x"

Will have to be:

    print $S0
    substr $P0, 1, 2, "x"

=back
