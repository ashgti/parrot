# $Id$

=head1 Purpose

Provide a list of deprecated and experimental items in parrot.
All items in this list should have a corresponding Trac ticket[1].

=head1 Experimental Status

These features are not considered supported, even though they may
have shipped in a supported release of parrot[2]. Use them at your own
risk, as they can be removed or changed in any release. These
items are marked below with C<[experimental]>.

=head1 Deprecated Status

Please see F<docs/project/support_policy.pod> for the parrot
project's policy regarding deprecated features.

Each item shows the first release in which it is eligible for removal, e.g.
C<[eligible in 1.5]>.  If the release listed is one that has already
shipped, this feature may be removed in B<any> upcoming release, and
you should no longer rely on it.

Whenever deprecated items are removed, information
regarding how to cope with the removal should be added to
L<https://trac.parrot.org/parrot/wiki/Deprecation>.

When running parrot, you can receive warnings about deprecated opcodes.
Either run parrot with the C<-w> option to enable all warnings, or
specifically by including this C<PIR> code:

 .include 'warnings.pasm'
 warningson .PARROT_WARNINGS_DEPRECATED_FLAG

=head1 PMCS

=over 4

=item RetContinuation [eligible in 2.4]

In future, just use Continuation.

L<https://trac.parrot.org/parrot/ticket/1427>

=item moved to dynpmc [eligible in 1.1]

AddrRegistry, CodeString, Env, Eval, File, OS, PCCMETHOD_Test, StringHandle,
and Timer.

L<https://trac.parrot.org/parrot/ticket/448>

=item multiple dispatch within core PMCs [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/452>

=item Method stdhandle in ParrotInterpreter [experimental]

L<https://trac.parrot.org/parrot/ticket/264>

=item Overriding vtable invoke in PIR objects [experimental]

The VTABLE invoke in object.pmc puts SELF at the start of the
signature call arguments when there is no current object and is
not already here. This allows the usage of $P0() instead of $P0($P0).

L<https://trac.parrot.org/parrot/ticket/103>

=item Digest dynpmcs [eligible in 2.4]

The digest dynpmcs are, since the posting of this notice, available on
http://gitorious.org/digest-dynpmcs and will no longer be distributed
with parrot after 2.3.

L<https://trac.parrot.org/parrot/ticket/1467>

=item gdbmhash dynpmc [eligible in 2.4]

The gdbmhash dynpmc is, since the posting of this notice, available on
http://gitorious.org/dbm-dynpmcs and will no longer be distributed
with parrot after 2.3.

L<https://trac.parrot.org/parrot/ticket/1469>

=item NCI without signature ("raw" pointers) [eligible in 2.4]

No equivalent functionality is promised. You shouldn't be using this. Here be
segfaults.

L<https://trac.parrot.org/parrot/ticket/1549>

=item UnManagedStruct handling nested structure [eligible in 2.4]

UnManagedStruct will be simplified to only support flat structures. This means
that elements which themselves have structure - struct pointers and function
pointers will be stored as C<void *> and C<void (*)(void)> respectively. To use
these, they will need to be cast to the appropriate signature on access.

L<https://trac.parrot.org/parrot/ticket/1551>

=item UnManagedStruct initializer structure [eligible in 2.4]

The initializer structure will cease to be an array of triples. In stead, an
array of flags (no counts or offsets), or a string representation of the same
information may be used.

L<https://trac.parrot.org/parrot/ticket/1552>

=item UnManagedStruct get_integer, set_integer_native [eligible in 2.4]

These will no longer refer to the byte length of the buffer, but to the number
of times the struct is repeated; emulating an array of structs.

L<https://trac.parrot.org/parrot/ticket/1553>

=item ManagedStruct reallocations based on shape changes [eligible in 2.4]

Since shape changes may simply be used for re-interpreting data, and may also
occur in several steps, re-allocating after any one shape change may be
undesirable. In stead, an explicit allocate/reallocate method will be provided.

L<https://trac.parrot.org/parrot/ticket/1554>

=back

=head1 Opcodes

=over 4

=item moved to dynop [eligible in 1.1]

Parts or all of: bit.ops, debug.ops, io.ops, math.ops, set.ops
(the obscure and rarely used parts), sys.ops.

L<https://trac.parrot.org/parrot/ticket/449>

=item get_addr and set_addr [eligible in 1.5]

L<https://trac.parrot.org/parrot/ticket/218>

These opcodes are being repurposed. They will always return a unique memory
address of the PMC. Uses of get_addr and set_addr that would set label values
for Sub, Exception, and related PMC types will instead be handled by
get_label and set_label.

=item sizeof [eligible in 2.4]

This opcode uses the old integer ID for a PMC type; this opcode should be changed
to use the current methods to lookup a PMC or removed entirely.

L<https://trac.parrot.org/parrot/ticket/633>

=item All bitwise ops [eligible in 2.1]

All bitwise ops (all ops containing C<bitwise> in their names) will be provided
by dynops.  B<NOTE>: Before removing the bitwise ops, make sure that the
equivalent dynops are available and that the major HLLs (Rakudo, Partcl, Lua,
etc) have switched to using them.

L<https://trac.parrot.org/parrot/ticket/1260>

=item get_results opcode order and features [eligible in 2.1]

get_results no longer used to fetch exception object.

L<https://trac.parrot.org/parrot/ticket/1406>

=item GC_SYS_NAME option to interpinfo_s_i [experimental]

Ability to get the string name of the current GC core from the interpinfo_s_i.
See r43900 and r43904 for details.

=item NCI_FB_CB and NCI_FB_UD in iglobals [experimental]

Hooks allowing a runtime-loadable dynamic frame builder.

=item loadlib_p_s_p [experimental]

Ability to use non-default dynamic loading behaviour.

=item pushaction, pushmark, popmark [eligible in 2.4]

L<https://trac.parrot.org/parrot/ticket/876>

=item new_callback_p_p_p_s [eligible in 2.4]

To be replaced with new_callback_p_p_p_p_s.

L<https://trac.parrot.org/parrot/ticket/1548>

=item find_lex [eligible in 2.4]

find_lex will not throw exception for non-existing lexicals.

L<https://trac.parrot.org/parrot/ticket/1207>

=item substr_s_i_i_s [eligible in 2.4]

This op will be replaced with replace_s_s_i_i_s op to clearly indicate
semantic. Part of COW removal.

L<https://trac.parrot.org/parrot/ticket/1540>

=item substr_s_s_i_i_s [eligible in 2.4]

This op is deprecated. Use replace_s_s_i_i_s or substr_s_s_i_i (or both)
instead. Part of COW removal.

L<https://trac.parrot.org/parrot/ticket/1540>

=item inplace string updates. [eligible in 2.4]

All "inplace" string update ops are deprecated. E.g. "chopn_s", etc.
Part of COW removal.

L<https://trac.parrot.org/parrot/ticket/1540>

=back

=head1 Bytecode

=over 4

=item packfile structure [experimental]

L<https://trac.parrot.org/parrot/ticket/451>

=item opcode numbering [experimental]

L<https://trac.parrot.org/parrot/ticket/451>

=item PMC numbering [experimental]

L<https://trac.parrot.org/parrot/ticket/451>

=back

=head1 Debugger

Assigning to registers [experimental]

=head1 PIR syntax

=over 4

=item Assignment syntax with opcodes [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/906>

=item continuation-based ExceptionHandlers [eligible in 2.1]

L<https://trac.parrot.org/parrot/ticket/1091>

=item implicit optional named parameters [eligible in 2.1]

L<https://trac.parrot.org/parrot/ticket/1103>

=back

=head1 Functions

=over 4

=item mmd_cvt_to_types [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/907>

=item Subs marked with C<:vtable>/C<:method> aren't in namespace [eligible in 1.1]

Subs marked with C<:vtable> or C<:method> flags are no longer given a
namespace entry by default.  Use the C<:nsentry> flag to cause this
to happen.

L<https://trac.parrot.org/parrot/ticket/389>

=item C API coding standards cleanup [eligible in 1.1]

All C API functions that aren't currently named according to the
'Parrot_<system>_*' scheme will be renamed. A list of renamed
functions will be kept in the ticket at:

L<https://trac.parrot.org/parrot/ticket/443>

=item PMC Attributes Allocation Functions [experimental]

 Parrot_gc_allocate_pmc_attributes
 Parrot_gc_free_pmc_attributes

These items and related helper functions are added as experimental support
for L<https://trac.parrot.org/parrot/ticket/895>

=item STRING Out parameters in Parrot_str_* functions [eligible in 2.1]

All STRING modification functions will return a STRING pointer; capture and use
this rather than relying on in-place modification of an existing pointer.

=item STRING_is_null function [eligible in 2.4]

renamed to Parrot_str_is_null

=item Parrot_string_* [eligible in 2.4]

rename Parrot_string_cstring to Parrot_str_cstring

=item STRING COW [eligible in 2.4]

COW strings are to be removed. All "inplace" string modification
functions and all "inplace" string ops are deprecated.

L<https://trac.parrot.org/parrot/ticket/1540>

=item Parrot_PMC_* in src/extend.c [eligible in 2.4]

These are duplicates of functions in src/extend_vtable.c. Exceptions:

  Parrot_PMC_new
  Parrot_PMC_typenum
  Parrot_PMC_null
  Parrot_PMC_set_vtable
  Parrot_PMC_newclass

=item Parrot_VTABLE, Parrot_get_vtable, Parrot_PMC_set_vtable [eligible in 2.4]

These do not expose any functionality that should be available to code outside
of parrot core.

These might get revived in some form to allow for creating new types and adding
vtable-overrides, if that functionality becomes desired.

=back

=head1 Compiler tools

=head2 Parrot Grammar Engine (PGE)

=over 4

=item Action methods in rules

Per Synopsis 5, all regexes will have an implied {*} token at the
end which cause invocation of an action method if a C<:action>
object is supplied.

L<https://trac.parrot.org/parrot/ticket/843>

=back

=head2 Parrot Compiler Toolkit

=over 4

=item PCT::HLLCompiler stages [eligible in 1.1]

The interface of various methods for adding, removing, and modifying
the list stages in a PCT::HLLCompiler object is subject to change.
The existing actual stages will remain; only the mechanism for specifying
the order of individual stages is likely to change.

L<https://trac.parrot.org/parrot/ticket/462>

=item PCT::HLLCompiler from Perl 5's Test::Harness [eligible in 1.1]

In order to facilitate using PCT::HLLCompiler with test harnesses,
the C<command_line> method of PCT::HLLCompiler object exits silently
if it detects that it is being run in a sample run from Perl's
Test::Harness.  Currently this detection is done by checking the
second command line argument for "@INC"; future releases may
use a different detection mechanism or eliminate it altogether.

L<https://trac.parrot.org/parrot/ticket/463>

=item PAST::Val node generation [eligible in 1.5]

The PAST::Compiler may generate the code for PAST::Val nodes
(i.e., constants) at the beginning of the block (Parrot sub) instead
of the location where they occur in the PAST tree.

L<https://trac.parrot.org/parrot/ticket/868>

=back

=head1 Compilers

=over 4

=item json [eligible in 2.4]

The json compiler was dupicated into data_json some time ago. If you're
using json, just use data_json instead, it's the same code. See TT #1461.

=item nqp [eligible in 2.4]

Replaced by ext/nqp-rx and parrot-nqp.

L<http://trac.parrot.org/parrot/ticket/1462>

=back

=head1 Parrot library

=over 4

=item PARROT_LIBRARY and PARROT_INCLUDE environment variables [experimental]

L<https://trac.parrot.org/parrot/ticket/1429>

A way to provide an equivalent of -L and -I parrot command line options
to language that doesn't support it.

=item JSON, JSON, and Config;JSON [eligible in 1.5]

L<https://trac.parrot.org/parrot/ticket/508>

=item Cross-HLL library loading [experimental]

L<https://trac.parrot.org/parrot/ticket/754>

=item OpenGL bindings and libraries [experimental]

L<https://trac.parrot.org/parrot/ticket/852>

=back

=head1 Footnotes

=over 4

=item 1

L<Trac|http://trac.parrot.org/> is parrot's primary issue tracking system.

=item 2

For an item to be considered experimental, it can B<never> have shipped in
a supported release without the C<[experimental]> tag; otherwise, it must be
deprecated normally before removal or incompatible change.

=back

=cut
