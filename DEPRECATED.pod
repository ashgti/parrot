
=head1 Deprecation in Parrot

This is a list of currently deprecated features of Parrot.
Every deprecation should have an associated RT ticket, but this
is not the case yet [RT#41226].

=head1 new object system

The object system of Parrot is being overhauled. This touches some opcode
and PIR syntax. So some deprecation can be found in pdd17_pmc.pod.

=head1 nonexisting array elements

As of the 0.5.0 release, fetching an element that doesn't exist from an array
will return a null PMC, instead of Undef. (Returning a null PMC can be
considered the standard behavior for Parrot aggregates when accessing an
element that doesn't exist. HLL aggregates define their own behavior.)

=head1 PGE::P6Regex and pgc.pir

In early 2007 there were a number of changes made to the Perl 6
regular expression syntax (as given by Synopsis 5).  The new
syntax is implemented via the PGE::Perl6Regex compiler, and the
PGE::P6Regex compiler is now deprecated in favor of the new
syntax.

Similarly, the pgc.pir compiler (for grammars) is deprecated
in favor of runtime/parrot/library/PGE/Perl6Grammar.{pir|pbc} .

=head1 Deprecated C APIs

Currently no C APIs are deprecated.

=head1 Deprecated methods

No methods are known to be deprecated.

=head1 Deprecated ops

From L<http://www.parrotcode.org/docs/ops/var.html>, the following ops are
deprecated:

=over 4

=item B<store_global>

=item B<find_global>

=item B<find_name>

There are several variants of some of the above ops; all are deprecated,
and are replaced by the ops {set,get}_[hll,root]_global. See also
http://www.parrotcode.org/docs/ops/var.html.

=item B<substr_r>

For now this op will stay available as an experimental op [RT#41749].

=back

From L<http://www.parrotcode.org/docs/ops/experimental.html>, the following ops
are deprecated:

=over 4

=item B<new>(out PMC, in INT, in STR) (RT #47011)

The VTABLE method 'new_from_string' will be removed.

=back

They will be removed in the 0.5.0 release.

=head1 Deprecated Class Features

=over 4

=item 1

Type IDs will go away in 0.5.0.
Instead of:

  $P0 = new Integer

or

  $P0 = new .Integer # better, but ...

we are moving to use:

  $P0 = new 'Integer'

=item 2

The C<classname> op is deprecated and will be removed in the 0.5.0 release.
It's an exact duplicate of the string return variant of the C<typeof> op.

=item 3

The experimental C<instantiate> opcode is deprecated and will be removed in the
0.5.0 release.

(The C<instantiate> vtable function becomes core in 0.5.0, but is accessed via
the "new" opcode for the PMCs that use it.)

=item 4

  PMC* subclass(PMC *name)

The subclass vtable method is deprecated and will be removed in the 0.5.0
release. The subclass opcode stays. (RT #42969)

=item 5

The C<getclass> opcode is deprecated (replaced by the C<get_class> opcode) and
will be removed in the 0.5.0 release.

=item 6

The C<get_mro> opcode is deprecated (replaced by C<inspect>) and will be
removed in the 0.5.0 release.

=item 7

The PMC union struct is deprecated and will be removed once all core PMCs have
been updated.

=back

=head1 Deprecated Exception Features

=over 4

=item 1

Attributes on exception objects will no longer be accessible by integer or
string key, use C<getattribute> and C<setattribute> instead. Slated for removal
in the 0.5.2 release.

=back

=head1 deprecated PIR syntax

=over 4

=item type names

As of Parrot 0.4.16 all type names for .local other than string, num, int, and
pmc are deprecated. Using C<float> for C<num> or a basic PMC name like C<Array>
for C<pmc> will no longer be possible in Parrot 0.4.17.  [RT#42769].

=item C<.HLL_map INTC, INTC> will become C<.HLL_map STRINGC, STRINGC>

As the dot-prefix type notation (for instance, '.Integer') is disappearing, the
C<.HLL_map> syntax will also be updated to take strings to indicate the types.
[RT#45453].

=item .sym directive

The C<.sym> directive will be removed, as there is already the C<.local> directive
to declare a variable.

See [RT#45405]

=item .local macro labels will become C<.label>

In macros you can declare a unique label by writing:

 .local $myLabel:

This will be automagically translated into some magic that generates
a unique label. The C<.local> directive will be changed into C<.label>.

See [RT#45405]

=item .namespace [ "a" .. "b" ]

IMCC currently allows for writing:

.namespace ["a" .. "b"]

This does not make sense, and this slicing syntax will be deprecated.

See [RT#46715]

=item .pcc_ prefix

The C<.pcc_> prefix on the directives for subroutine invocation will be removed
after the 0.5.0 release. C<.pcc_begin_return> will become C<.begin_return>.
C<.pcc_{begin,end}> will become C<.{begin,end}_call>.

See [RT#45925].

=back

=head1 Deprecated compiler tools

=over 4

=item pgc.pir

The pgc.pir compiler for P6 grammars (pre-2007 regex syntax) is deprecated.
Switch to using the new Perl6Grammar.pir compiler instead, and the
Perl6Regex syntax.

=item compilers/PAST-pm

The compiler tools in compilers/PAST-pm/ and 
runtime/parrot/library/Parrot/HLLCompiler.pir are deprecated
in favor of the new versions in the Parrot Compiler Toolkit
( compilers/pct/ ).  In particular, the PAST representation in 
PCT follows the specification given by pdd26 .

=back

=head1 FUTURE changes

Not yet deprecated, but it's recommended to use the new syntax and
gradually change the old.

=over 4

=item Assignment syntax with opcodes [RT#36283]

When the first argument of an opcode is C<OUT>, then the assignment syntax
will be allowed, as it is today.

In any other case (i.e. C<INOUT>, C<IN>), this will become
a syntax error. For example:

    $S0 = print
    $P0 = substr 1, 2, "x"

Will have to be:

    print $S0
    substr $P0, 1, 2, "x"

=back
