# $Id$

=head1 Deprecation in Parrot

Please see L<docs/project/support_policy.pod> for the parrot
project's policy regarding deprecated features.

This is a list of currently deprecated features of Parrot.  Every deprecation
has an associated Trac ticket [1].  Each item indicates the first release
in which it is eligible for removal. If the release listed is one that
has already occurred, this feature may be removed at any time.

Following the 1.0 release, whenever deprecated items are removed, information
regarding how to cope with the removal will be added to
L<https://trac.parrot.org/parrot/wiki/Deprecation>.

When running parrot, you can receive warnings about deprecated opcodes.
Either run parrot with the C<-w> option to enable all warnings, or
specifically by including this C<PIR> code:

 .include 'include/warnings.pasm'
 warningson .PARROT_WARNINGS_DEPRECATED_FLAG

=head1 Configuration

=over 4

=item Always build with core PMC set (remove config option) [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/310>

=back

=head1 PMCS

=over 4

=item pointer [BEFORE 1.0]

L<https://trac.parrot.org/parrot/ticket/187>

=item random [BEFORE 1.0]

L<https://trac.parrot.org/parrot/ticket/189>

=item ref [BEFORE 1.0]

L<https://trac.parrot.org/parrot/ticket/190>

=item slice [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/372>

=item bound_nci [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/373>

=item moved to dynpmc [eligible in 1.1]

AddrRegistry, CodeString, Env, Eval, File, OS, PCCMETHOD_Test, StringHandle,
and Timer.

L<https://trac.parrot.org/parrot/ticket/448>

=back

=head1 Opcodes

=over 4

=item moved to dynop [eligible in 1.1]

Parts or all of: bit.ops, debug.ops, io.ops, math.ops, obscure.ops, set.ops
(the obscure and rarely used parts), sys.ops.

L<https://trac.parrot.org/parrot/ticket/449>

=item experimental ops [eligible in 1.1]

L<src/ops/experimental.ops>

=item myops & dan ops [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/450>

=back

=head1 Bytecode

=over 4

=item packfile structure [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/451>

=item opcode numbering [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/451>

=item PMC numbering [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/451>

=back

=head1 Class Features

=over 4

=item PMC union struct [BEFORE 1.0]

This will be removed once all core PMCs have been updated.

L<http://rt.perl.org/rt3/Ticket/Display.html?id=48014>

=item :anon and :vtable named parameters to add_method [BEFORE 1.0]

If you want to override a vtable method/function when building a Class, then
use the method C<add_vtable_override> instead of calling C<add_method> with
one or both of these flags.

L<https://trac.parrot.org/parrot/ticket/158>

=back

=head1 PIR syntax

=over 4

=item Assignment syntax with opcodes [BEFORE 1.0]

When the first argument of an opcode is C<OUT>, then
the assignment syntax will be allowed, as it is today.

In any other case (i.e. C<INOUT>, C<IN>), this will become
a syntax error. For example:

    $S0 = print
    $P0 = substr 1, 2, "x"

Will have to be:

    print $S0
    substr $P0, 1, 2, "x"

L<http://rt.perl.org/rt3/Ticket/Display.html?id=36283>

=item named class/pmc lookup in pir syntax such as new, isa, subclass, get_class, etc [BEFORE 1.0]

Class PMC name resolution will be the following.

if the arg is a STRING
  Relative to the current Namespace

if the arg is a ResizableStringArray
  Relative to the current HLL Namespace

if the arg is a Namespace or Class PMC
  The passed in class or the class attatched to the passed in namespace.

L<https://trac.parrot.org/parrot/ticket/159>

=item C<.HLL_map> [BEFORE 1.0]

Languages should use this instead:

  $P0 = getinterp
  $P0.'hll_map'(TypeA, TypeB)

L<https://trac.parrot.org/parrot/ticket/314>

=back

=head1 Functions

=over 4

=item mmd_cvt_to_types [BEFORE 1.0]

L<http://rt.perl.org/rt3/Ticket/Display.html?id=60626>

=item src/pic.c and src/pic_jit.c [BEFORE 1.0]

These two files were a thin prototype implementation of Polymorphic Inline
Caching that only ever applied to 4 opcodes, one of which has now been removed.
The files (and all functions in them) are deprecated, and will be removed.

L<http://rt.perl.org/rt3/Ticket/Display.html?id=60048>

=item Subs marked with C<:vtable>/C<:method> aren't in namespace [BEFORE 1.0]

Subs marked with C<:vtable> or C<:method> flags are no longer given a
namespace entry by default.  Use the C<:nsentry> flag to cause this
to happen.

L<http://rt.perl.org/rt3/Ticket/Display.html?id=53302>

=item Parrot_readbc, Parrot_loadbc. [BEFORE 1.0]

They have been renamed to C<Parrot_pbc_read>, C<Parrot_pbc_load>.
C<Parrot_pbc_read> has one third int argument.

L<https://trac.parrot.org/parrot/ticket/266>

=item C API coding standards cleanup [eligible in 1.1]

All C API functions that aren't currently named according to the
'Parrot_<system>_*' scheme will be renamed. If you depend on these
functions in an extending/embedding interface or C-level custom PMCs,
check in 1.4 or 2.0 for the new names.

L<https://trac.parrot.org/parrot/ticket/443>

=item src/hash.c API cleanup [eligible in 1.1]

The following functions will be changed to return a C<Hash*> instead of
taking a C<Hash**> as an argument:

=over 4

=item * parrot_new_hash_x

=item * parrot_new_cstring_hash

=item * parrot_new_pointer_hash

=back

L<https://trac.parrot.org/parrot/ticket/447>

=back

=head1 Compiler tools

=over 4

=item P6protoobject stringification [BEFORE 1.0]

Stringification of protoobjects will return the full name of the type
and parentheses, per Synopsis 12.

L<https://trac.parrot.org/parrot/ticket/168>

=back

=head1 build tools

=over 4

=item tools/build/dynoplibs.pl and tools/build/dynpmc.pl [BEFORE 1.0]

Replaced with makefiles.

L<https://trac.parrot.org/parrot/ticket/338>

=back

=head1 Footnotes

=over 4

=item 1

L<Trac|http://trac.parrot.org/> is parrot's primary issue tracking system.

Older tickets may be listed at L<RT|https://rt.perl.org/rt3>.

=back

=cut
