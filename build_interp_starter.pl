# !/usr/bin/perl -w
#
# build_interp_starter.pl
#
# $Id$
#

use strict;
use Parrot::Opcode;

my %opcodes            = Parrot::Opcode::read_ops();
my $opcode_fingerprint = Parrot::Opcode::fingerprint();

open INTERP_GUTS_H, "> include/parrot/interp_guts.h" or die "Can't open include/parrot/interp_guts.h, $!/$^E";
open INTERP_GUTS_C, "> interp_guts.c" or die "Can't open interp_guts.c, $!/$^E";

open OP_INFO_H, "> include/parrot/op_info.h" or die "Can't open include/parrot/op_info.h, $!/$^E";
open OP_INFO_C, "> op_info.c" or die "Can't open op_info.c, $!/$^E";

print INTERP_GUTS_H <<CONST;
/*
 *
 * interp_guts.h
 *
 * this file is autogenerated by build_interp_starter.pl
 *
 * Best not edit it
 */

#ifndef INTERP_GUTS_H
#define INTERP_GUTS_H

#include "parrot/config.h"

typedef opcode_t *(*op_func_t)(); /* NOTE: Sure wish we could put the types here... */
typedef op_func_t op_func_table_t[2048];

extern op_func_table_t builtin_op_func_table;


/*
 * DO_OP macro:
 *
 * w = code
 * z = interpreter
 */

#define DO_OP(PC,INTERP) PC = ((INTERP->opcode_funcs)[*PC])(PC,INTERP);
#define OPCODE_FINGERPRINT "$opcode_fingerprint"

#endif /* INTERP_GUTS_H */

CONST


###############################################################################

print OP_INFO_H <<CONST;
/*
 *
 * op_info.h
 *
 * this file is autogenerated by build_interp_starter.pl
 *
 * Best not edit it
 */

#ifndef OP_INFO_H
#define OP_INFO_H

#include "parrot/config.h"

typedef struct {
    char *    name;
    INTVAL    nargs;
    char      types[5];
} op_info_t;

typedef op_info_t op_info_table_t[2048];

extern op_info_table_t builtin_op_info_table;

#endif /* OP_INFO_H */

CONST

###############################################################################

print INTERP_GUTS_C <<CONST;
/*
 * interp_guts.c
 *
 * this file is autogenerated by build_interp_starter.pl
 *
 * Best not edit it
 */

#include "parrot/interp_guts.h"
#include "parrot/parrot.h"

op_func_table_t builtin_op_func_table = {
        /* TODO: (void *) casting here sucks! */
CONST

for my $name (sort {$opcodes{$a}{CODE} <=> $opcodes{$b}{CODE}} keys %opcodes) {
    printf INTERP_GUTS_C "    (void *)%-12s, /* %4d */\n", $name, $opcodes{$name}{CODE};
}
print INTERP_GUTS_C "};\n\n";


###############################################################################

print OP_INFO_C <<CONST;
/*
 * op_info.c
 *
 * this file is autogenerated by build_interp_starter.pl
 *
 * Best not edit it
 */

#include "parrot/op_info.h"

op_info_table_t builtin_op_info_table = {
CONST

for my $name (sort {$opcodes{$a}{CODE} <=> $opcodes{$b}{CODE}} keys %opcodes) {
    printf OP_INFO_C "    { %-14s, %d, { ",
	"\"$name\"", $opcodes{$name}{ARGS};

    if ($opcodes{$name}{ARGS}) {
	printf OP_INFO_C " %-18s }", join(", ", map { "'$_'" } @{$opcodes{$name}{TYPES}});
    } else {
        printf OP_INFO_C " %-18s }", "'*'";
    }

    printf OP_INFO_C " }, /* %4d */\n", $opcodes{$name}{CODE};
}
print OP_INFO_C "};\n\n";

