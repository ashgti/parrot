; ModuleID = 'test.o'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-apple-darwin10.0.0"

%struct.GC_Subsystem = type opaque
%struct.Memory_Pools = type opaque
%struct.PDB = type { %struct.PDB_file*, %struct.PDB_breakpoint*, %struct.PDB_condition*, i64, i8*, i8*, i64*, i32, %struct.parrot_interp_t*, %struct.parrot_interp_t*, i64, %struct.__sFILE*, i64 }
%struct.PDB_breakpoint = type { i64*, i64, i64, %struct.PDB_condition*, %struct.PDB_breakpoint*, %struct.PDB_breakpoint* }
%struct.PDB_condition = type { i16, i8, i8, i8*, %struct.PDB_condition* }
%struct.PDB_file = type { i8*, i8*, i64, i64, %struct.PDB_line*, %struct.PDB_label*, %struct.PDB_file* }
%struct.PDB_label = type { i64*, i64, %struct.PDB_label* }
%struct.PDB_line = type { i64*, i64, i64, %struct.PDB_label*, %struct.PDB_line* }
%struct.PMC = type { i64, %struct._vtable*, i8*, %struct.PMC* }
%struct.PackFile = type { %struct.PackFile_Directory, %struct.PackFile_Directory*, i64*, i64, i64, %struct.PackFile_Header*, [7 x %struct.PackFile_funcs], %struct.PackFile_ByteCode*, i64, i64, i64, i64 (i8*)*, i64 (i8*)*, void (i8*, i8*)* }
%struct.PackFile_Annotations = type { %struct.PackFile_Segment, i64, %struct.PackFile_Annotations_Group*, i64, %struct.PackFile_Annotations_Group*, i64, %struct.PackFile_Annotations_Entry*, %struct.PackFile_ByteCode* }
%struct.PackFile_Annotations_Entry = type { i64, i64, i64 }
%struct.PackFile_Annotations_Group = type { i64, i64 }
%struct.PackFile_ByteCode = type { %struct.PackFile_Segment, %struct.PackFile_Debug*, %struct.PackFile_ConstTable*, %struct.PackFile_FixupTable*, %struct.PackFile_Annotations* }
%struct.PackFile_ConstTable = type { %struct.PackFile_Segment, i64, %struct.PackFile_Constant**, %struct.PackFile_ByteCode*, %struct.PMC* }
%struct.PackFile_Constant = type { i64, %union.anon }
%struct.PackFile_Debug = type { %struct.PackFile_Segment, i64, %struct.PackFile_Annotations_Group*, %struct.PackFile_ByteCode* }
%struct.PackFile_Directory = type { %struct.PackFile_Segment, i64, %struct.PackFile_Segment** }
%struct.PackFile_FixupEntry = type { i64, i8*, i64 }
%struct.PackFile_FixupTable = type { %struct.PackFile_Segment, i64, %struct.PackFile_FixupEntry*, %struct.PackFile_ByteCode* }
%struct.PackFile_Header = type { [8 x i8], i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8*, i64 }
%struct.PackFile_Segment = type { %struct.PackFile*, %struct.PackFile_Directory*, i64, %struct.parrot_string_t*, i64, i64, i64, i64, i64, i64* }
%struct.PackFile_funcs = type { %struct.PackFile_Segment* (%struct.parrot_interp_t*, %struct.PackFile*, %struct.parrot_string_t*, i32)*, void (%struct.parrot_interp_t*, %struct.PackFile_Segment*)*, i64 (%struct.parrot_interp_t*, %struct.PackFile_Segment*)*, i64* (%struct.parrot_interp_t*, %struct.PackFile_Segment*, i64*)*, i64* (%struct.parrot_interp_t*, %struct.PackFile_Segment*, i64*)*, void (%struct.parrot_interp_t*, %struct.PackFile_Segment*)* }
%struct.QUEUE = type opaque
%struct._Caches = type { i64, %struct._meth_cache_entry*** }
%struct._ParrotIOData = type opaque
%struct._Thread_data = type { %struct._opaque_pthread_t*, i64, i32, i64, %struct.parrot_interp_t*, %struct._opaque_pthread_mutex_t, %struct._opaque_pthread_cond_t, %struct._hash* }
%struct.__darwin_pthread_handler_rec = type { void (i8*)*, i8*, %struct.__darwin_pthread_handler_rec* }
%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }
%struct._charset = type { i8*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*, i64, i64)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, i64 (%struct.parrot_interp_t*, %struct.parrot_string_t*, %struct.parrot_string_t*)*, i64 (%struct.parrot_interp_t*, %struct.parrot_string_t*, %struct.parrot_string_t*, i64)*, i64 (%struct.parrot_interp_t*, %struct.parrot_string_t*, %struct.parrot_string_t*, i64)*, i64 (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, i64 (%struct.parrot_interp_t*, i64, %struct.parrot_string_t*, i64)*, i64 (%struct.parrot_interp_t*, i64, %struct.parrot_string_t*, i64, i64)*, i64 (%struct.parrot_interp_t*, i64, %struct.parrot_string_t*, i64, i64)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, i64)*, i64 (%struct.parrot_interp_t*, %struct.parrot_string_t*, i64)*, %struct._encoding* }
%struct._encoding = type { i8*, i64, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, i64 (%struct.parrot_interp_t*, %struct.parrot_string_t*, i64)*, i64 (%struct.parrot_interp_t*, %struct.parrot_string_t*, i64)*, void (%struct.parrot_interp_t*, %struct.parrot_string_t*, i64, i64)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*, i64, i64)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.parrot_string_t*, i64, i64)*, i64 (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, i64 (%struct.parrot_interp_t*, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.parrot_string_t*, %struct.string_iterator_t*)*, i64 (%struct.parrot_interp_t*, %struct.parrot_string_t*, i64*, i64, i64, i64)*, i64 (%struct.parrot_interp_t*, %struct.parrot_string_t*, i64)* }
%struct._handler_node_t = type { void (%struct.parrot_interp_t*, i32, i8*)*, i8*, %struct._handler_node_t* }
%struct._hash = type { %struct._hashbucket*, %struct._hashbucket**, %struct._hashbucket*, i64, i64, %struct.PMC*, i32, i32, i64, i32 (%struct.parrot_interp_t*, i8*, i8*)*, i64 (%struct.parrot_interp_t*, i8*, i64)* }
%struct._hashbucket = type { %struct._hashbucket*, i8*, i8* }
%struct._imc_info_t = type opaque
%struct._meth_cache_entry = type { i8*, %struct.PMC*, %struct._meth_cache_entry* }
%struct._opaque_pthread_cond_t = type { i64, [40 x i8] }
%struct._opaque_pthread_mutex_t = type { i64, [56 x i8] }
%struct._opaque_pthread_t = type { i64, %struct.__darwin_pthread_handler_rec*, [1168 x i8] }
%struct._vtable = type { %struct.PMC*, i64, %struct.parrot_string_t*, i64, %struct.parrot_string_t*, %struct._hash*, %struct.PMC*, %struct.PMC*, i8*, %struct._vtable*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, double, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, i64, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, i64)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, double, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, i64, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, i64)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, double, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, i64, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.parrot_string_t*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, i64)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*)*, double (%struct.parrot_interp_t*, %struct.PMC*)*, double (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, double (%struct.parrot_interp_t*, %struct.PMC*, i64)*, double (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, i64)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, i8* (%struct.parrot_interp_t*, %struct.PMC*)*, i8* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i8* (%struct.parrot_interp_t*, %struct.PMC*, i64)*, i8* (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.PMC*, i64)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, double)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, double)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, double)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, double)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, double)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, double)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64* (%struct.parrot_interp_t*, %struct.PMC*, i8*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, double, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, i64, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, double, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, i64, %struct.PMC*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, double (%struct.parrot_interp_t*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, double)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, i64, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.parrot_string_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, double)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64, double)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*, double)*, void (%struct.parrot_interp_t*, %struct.PMC*, double)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, i8*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, i8*)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64, i8*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*, i8*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*)*, double (%struct.parrot_interp_t*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, i64, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64, i64, %struct.PMC*)*, %struct.parrot_string_t* (%struct.parrot_interp_t*, %struct.PMC*, i64, i64)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, double, %struct.PMC*)*, %struct.PMC* (%struct.parrot_interp_t*, %struct.PMC*, i64, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 (%struct.parrot_interp_t*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, double)*, void (%struct.parrot_interp_t*, %struct.PMC*, i64)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.parrot_string_t*)*, void (%struct.parrot_interp_t*, %struct.PMC*, %struct.PMC*)*, i64 }
%struct.op_info_t = type { i8*, i8*, i8*, i16, i16, [16 x i32], [16 x i32], [16 x i8] }
%struct.op_lib_t = type { i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.op_info_t*, i64* (i64*, %struct.parrot_interp_t*)**, i32 (%struct.parrot_interp_t*, i8*, i32)* }
%struct.parrot_interp_t = type { %struct.PMC*, %struct.Memory_Pools*, %struct.GC_Subsystem*, %struct.PMC*, %struct.PMC*, %struct._vtable**, i32, i32, %struct._ParrotIOData*, %struct.op_lib_t*, i64, %struct.op_info_t*, i64* (i64*, %struct.parrot_interp_t*)**, i64* (i64*, %struct.parrot_interp_t*)**, i64* (i64*, %struct.parrot_interp_t*)**, i32, %struct.op_lib_t**, i64, i64, %struct.runcore_t*, %struct.runcore_t**, i64, i64, i64, %struct.PackFile_ByteCode*, %struct.PackFile*, %struct._imc_info_t*, i8*, %struct.PDB*, %struct.PMC*, i8*, %struct.parrot_interp_t*, i64, i64, %struct.PMC*, %struct.PMC*, %struct.PMC*, %struct.PMC*, %struct.PMC*, %struct._hash*, %struct._Caches*, %struct.parrot_string_t**, %struct._hash*, %struct.QUEUE*, %struct._handler_node_t*, i32, %struct.parrot_runloop_t*, %struct.parrot_runloop_t*, i32, i32, %struct._Thread_data*, i64, %struct.PMC* }
%struct.parrot_runloop_t = type { %struct.parrot_runloop_t*, i64*, i32, [37 x i32] }
%struct.parrot_string_t = type { i64, i8*, i64, i8*, i64, i64, i64, %struct._encoding*, %struct._charset* }
%struct.runcore_t = type opaque
%struct.string_iterator_t = type { %struct.parrot_string_t*, i64, i64, i64 (%struct.parrot_interp_t*, %struct.string_iterator_t*)*, void (%struct.parrot_interp_t*, %struct.string_iterator_t*, i64)*, void (%struct.parrot_interp_t*, %struct.string_iterator_t*, i64)* }
%union.anon = type { i64 }

@.str = private constant [3137 x i8] c"\FEPBC\0D\0A\1A\0A\08\00\00\02\05\00\06\15\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\80\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00BYTECODE_test.pir\00\00\00\00\00\00\00$\00\00\00\00\00\00\004\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00FIXUP_test.pir\00\00X\00\00\00\00\00\00\00\0C\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00CONSTANT_test.pir\00\00\00\00\00\00\00d\00\00\00\00\00\00\00\0A\01\00\00\00\00\00\00\05\00\00\00\00\00\00\00BYTECODE_test.pir_DB\00\00\00\00n\01\00\00\00\00\00\00\1A\00\00\00\00\00\00\004\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00/\00\00\00\00\00\00\00!\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00e\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\22\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\1D\00\00\00\00\00\00\00\AF\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0F\00\00\00\00\00\00\00\BC\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\00\00\00mfoo\00\00\00\00\00\09\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00main\00\00\00\00\15\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0A\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00p\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\98\02\00\00\00\00\00\00\FEPBC\0D\0A\1A\0A\08\00\00\02\05\00\06\15\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00$\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\0C\00\00\00\00\00\00\00 \00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\9F\FF\FF\FF\FF\FF\FF\FF\01\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00parrotparrotparrot\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\9C\FF\FF\FF\FF\FF\FF\FF\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00io_ops\00\00\01\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00p\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00H\00\00\00\00\00\00\00\FEPBC\0D\0A\1A\0A\08\00\00\02\05\00\06\15\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\17\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00s\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00(0x0002)p\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00@\00\00\00\00\00\00\00\FEPBC\0D\0A\1A\0A\08\00\00\02\05\00\06\15\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\17\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00s\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00()\00\00\00\00\00\00s\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00test.pirs\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00foo\00\00\00\00\00s\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00s\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\06\00\00\00\00\00\00\00parrot\00\00pp\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00H\00\00\00\00\00\00\00\FEPBC\0D\0A\1A\0A\08\00\00\02\05\00\06\15\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\17\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00s\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00(0x0010)p\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00H\00\00\00\00\00\00\00\FEPBC\0D\0A\1A\0A\08\00\00\02\05\00\06\15\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\17\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00s\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00(0x0001)s\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00readline_interactive\00\00\00\00n\00\00\00\00\00\00\00\00\00\00\00\00\C0^@s\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00Please enter \22foo\22: \00\00\00\00s\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00bar\00\00\00\00\00s\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\0F\00\00\00\00\00\00\00(0x0002,0x0011)\00p\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00P\00\00\00\00\00\00\00\FEPBC\0D\0A\1A\0A\08\00\00\02\05\00\06\15\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00\17\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\11\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00s\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\04\00\00\00\00\00\00\00main\00\00\00\00px i8]*> [#uses=1]
@program_code = global i8* getelementptr inbounds ([3137 x i8]* @.str, i64 0, i64 0), align 8 ; <i8**> [#uses=2]
@bytecode_size = constant i32 3136, align 4       ; <i32*> [#uses=0]

define i8* @get_program_code() nounwind readonly ssp {
entry:
  %tmp = load i8** @program_code                  ; <i8*> [#uses=1]
  ret i8* %tmp
}

define i32 @main(i32 %argc, i8** %argv) nounwind ssp {
entry:
  %interp = alloca %struct.parrot_interp_t*, align 8 ; <%struct.parrot_interp_t**> [#uses=12]
  %tmp.i = load i8** @program_code                ; <i8*> [#uses=2]
  %tobool = icmp eq i8* %tmp.i, null              ; <i1> [#uses=1]
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  call void @Parrot_set_config_hash() nounwind
  %call1 = call %struct.parrot_interp_t* @Parrot_new(%struct.parrot_interp_t* null) nounwind ; <%struct.parrot_interp_t*> [#uses=3]
  store %struct.parrot_interp_t* %call1, %struct.parrot_interp_t** %interp
  %tobool3 = icmp eq %struct.parrot_interp_t* %call1, null ; <i1> [#uses=1]
  br i1 %tobool3, label %return, label %if.end5

if.end5:                                          ; preds = %if.end
  %conv = bitcast %struct.parrot_interp_t** %interp to i8* ; <i8*> [#uses=1]
  call void @Parrot_init_stacktop(%struct.parrot_interp_t* %call1, i8* %conv) nounwind
  %tmp7 = load %struct.parrot_interp_t** %interp  ; <%struct.parrot_interp_t*> [#uses=2]
  %tmp10 = load i8** %argv                        ; <i8*> [#uses=1]
  %call11 = call %struct.parrot_string_t* @Parrot_str_new(%struct.parrot_interp_t* %tmp7, i8* %tmp10, i64 0) nounwind ; <%struct.parrot_string_t*> [#uses=1]
  call void @Parrot_set_executable_name(%struct.parrot_interp_t* %tmp7, %struct.parrot_string_t* %call11) nounwind
  %tmp12 = load %struct.parrot_interp_t** %interp ; <%struct.parrot_interp_t*> [#uses=1]
  call void @Parrot_set_flag(%struct.parrot_interp_t* %tmp12, i64 512) nounwind
  %tmp13 = load %struct.parrot_interp_t** %interp ; <%struct.parrot_interp_t*> [#uses=1]
  %call14 = call %struct.PackFile* @PackFile_new(%struct.parrot_interp_t* %tmp13, i64 0) nounwind ; <%struct.PackFile*> [#uses=4]
  %tobool16 = icmp eq %struct.PackFile* %call14, null ; <i1> [#uses=1]
  br i1 %tobool16, label %return, label %if.end18

if.end18:                                         ; preds = %if.end5
  %tmp19 = load %struct.parrot_interp_t** %interp ; <%struct.parrot_interp_t*> [#uses=1]
  %0 = bitcast i8* %tmp.i to i64*                 ; <i64*> [#uses=1]
  %call22 = call i64 @PackFile_unpack(%struct.parrot_interp_t* %tmp19, %struct.PackFile* %call14, i64* %0, i64 3136) nounwind ; <i64> [#uses=1]
  %tobool23 = icmp eq i64 %call22, 0              ; <i1> [#uses=1]
  br i1 %tobool23, label %return, label %if.end25

if.end25:                                         ; preds = %if.end18
  %tmp26 = load %struct.parrot_interp_t** %interp ; <%struct.parrot_interp_t*> [#uses=1]
  %tmp28 = getelementptr inbounds %struct.PackFile* %call14, i64 0, i32 7 ; <%struct.PackFile_ByteCode**> [#uses=1]
  %tmp29 = load %struct.PackFile_ByteCode** %tmp28 ; <%struct.PackFile_ByteCode*> [#uses=1]
  call void @do_sub_pragmas(%struct.parrot_interp_t* %tmp26, %struct.PackFile_ByteCode* %tmp29, i32 4, %struct.PMC* null) nounwind
  %tmp30 = load %struct.parrot_interp_t** %interp ; <%struct.parrot_interp_t*> [#uses=1]
  call void @Parrot_pbc_load(%struct.parrot_interp_t* %tmp30, %struct.PackFile* %call14) nounwind
  %tmp32 = load %struct.parrot_interp_t** %interp ; <%struct.parrot_interp_t*> [#uses=1]
  call void @PackFile_fixup_subs(%struct.parrot_interp_t* %tmp32, i32 1, %struct.PMC* null) nounwind
  %tmp33 = load %struct.parrot_interp_t** %interp ; <%struct.parrot_interp_t*> [#uses=1]
  ; call void @Parrot_runcode(%struct.parrot_interp_t* %tmp33, i32 %argc, i8** %argv) nounwind
  %tmp36 = load %struct.parrot_interp_t** %interp ; <%struct.parrot_interp_t*> [#uses=1]
  call void @Parrot_destroy(%struct.parrot_interp_t* %tmp36) nounwind
  %tmp37 = load %struct.parrot_interp_t** %interp ; <%struct.parrot_interp_t*> [#uses=1]
  call void @Parrot_exit(%struct.parrot_interp_t* %tmp37, i32 0) nounwind
  ret i32 0

return:                                           ; preds = %if.end18, %if.end5, %if.end, %entry
  ret i32 1
}

declare void @Parrot_set_config_hash()

declare %struct.parrot_interp_t* @Parrot_new(%struct.parrot_interp_t*)

declare void @Parrot_init_stacktop(%struct.parrot_interp_t*, i8*)

declare void @Parrot_set_executable_name(%struct.parrot_interp_t*, %struct.parrot_string_t*)

declare %struct.parrot_string_t* @Parrot_str_new(%struct.parrot_interp_t*, i8*, i64)

declare void @Parrot_set_flag(%struct.parrot_interp_t*, i64)

declare %struct.PackFile* @PackFile_new(%struct.parrot_interp_t*, i64)

declare i64 @PackFile_unpack(%struct.parrot_interp_t*, %struct.PackFile*, i64*, i64)

declare void @do_sub_pragmas(%struct.parrot_interp_t*, %struct.PackFile_ByteCode*, i32, %struct.PMC*)

declare void @Parrot_pbc_load(%struct.parrot_interp_t*, %struct.PackFile*)

declare void @PackFile_fixup_subs(%struct.parrot_interp_t*, i32, %struct.PMC*)

declare void @Parrot_runcode(%struct.parrot_interp_t*, i32, i8**)

declare void @Parrot_destroy(%struct.parrot_interp_t*)

declare void @Parrot_exit(%struct.parrot_interp_t*, i32)
