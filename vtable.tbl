# $Id$
# This is the main vtable data
# Lines have the following format:
# [keyed] <method-type> <return-type> <method_name>([<type> <pname>[, <type> <pname>...]])
#
# <method-type> is either int, float, num, str, bitwise, bignum,
# or unique if the method has a set of int entries, float entries, 
# num entries, string entries, is a bitwise operator, has bignum
# entries, or is a unique method.
#
# If keyed is specified, a keyed version will also be generated that
# is keyed by a KEY* or an INTVAL.
#
# So, for instance, a function with two arguments where the second
# argument is a string would look like this:
# str void frob (INTVAL foo, STRING* bar)
#
# Note that we don't include the source "PMC* pmc" - that's done implicitly.
#
# A <pname> of "value" in non-unique methods (multimethods) is a magic name.
# Its type will be replaced appropriately.
#
# A <method-name> that contains "keyed" will only generate a keyed version.  It
# is not neccessary to specify keyed in that case.

unique void init()
unique void init_pmc(PMC* value)
unique void morph(INTVAL type)
unique PMC* mark(PMC* end_of_used_list)
unique void destroy()

keyed unique INTVAL type()
keyed unique UINTVAL subtype(INTVAL type)
keyed unique STRING* name()
keyed unique PMC* clone()
keyed unique PMC* find_method(STRING* method_name)
keyed unique INTVAL get_integer()
keyed unique FLOATVAL get_number()
keyed unique BIGNUM* get_bignum()
keyed unique STRING* get_string()
keyed unique INTVAL get_bool()
keyed unique INTVAL elements()

keyed unique PMC* get_pmc()

keyed unique INTVAL is_same(PMC* pmc2)

keyed int void set_integer(INTVAL value)
keyed float void set_number(FLOATVAL value)
keyed bignum void set_bignum(BIGNUM* value)
keyed str void set_string(STRING* value)

keyed unique void set_pmc(PMC* value)
keyed unique void set_same(PMC* value)

keyed num void add(PMC* value,PMC* dest)
keyed num void subtract(PMC* value,PMC* dest)
keyed num void multiply(PMC* value,PMC* dest)
keyed num void divide(PMC* value,PMC* dest)
keyed num void modulus(PMC* value,PMC* dest)
keyed unique void neg(PMC* dest)

keyed bitwise void bitwise_or(PMC* value,PMC* dest)
keyed bitwise void bitwise_and(PMC* value,PMC* dest)
keyed bitwise void bitwise_xor(PMC* value,PMC* dest)
keyed unique void bitwise_not(PMC* dest)

keyed bitwise void bitwise_shr(PMC* value,PMC* dest)
keyed bitwise void bitwise_shl(PMC* value,PMC* dest)

keyed str void concatenate(PMC* value,PMC* dest)

keyed unique INTVAL is_equal(PMC* value)
keyed unique INTVAL cmp(PMC* value)
keyed unique INTVAL cmp_num(PMC* value)
keyed unique INTVAL cmp_string(PMC* value)

keyed unique void logical_or(PMC* value, PMC* dest)
keyed unique void logical_and(PMC* value, PMC* dest)
keyed unique void logical_xor(PMC* value, PMC* dest)
keyed unique void logical_not(PMC* dest)

keyed unique void repeat(PMC* value, PMC* dest)
keyed unique void repeat_int(INTVAL value, PMC* dest)

keyed unique void increment()
keyed unique void decrement()

unique INTVAL exists_keyed()

keyed unique INTVAL defined()

unique void delete_keyed()
unique KEY* nextkey_keyed()

keyed unique void substr(INTVAL offset,INTVAL length,PMC* dest)
keyed unique STRING* substr_str(INTVAL offset,INTVAL length)
