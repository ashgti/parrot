#! perl
# Copyright (C) 2008, The Perl Foundation.
# $Id$

use strict;
use warnings;

use lib qw( . lib ../lib ../../lib );
use Test::More tests => 1;
use Parrot::Distribution;

=head1 NAME

t/codingstd/c_arg_assert.t - checks that all the headerizer asserts are used

=head1 SYNOPSIS

    # test all files
    % prove t/codingstd/c_arg_assert.t

=head1 DESCRIPTION

Finds all the argument guards generated by headerizer (asserts to enforce the
non-NULLness of specially marked pointers) are actually used.

=head1 SEE ALSO

L<docs/pdds/pdd07_codingstd.pod>

=cut

my @files = Parrot::Distribution->new()->get_c_language_files();

check_asserts(@files);

sub check_asserts {
    my @files = @_;
    my @defines;
    my %usages;

    # first, find the definitions and the usages
    diag("finding definitions");
    foreach my $file (@files) {
        my $path  = $file->path();
        my @lines = ($file->read());
        foreach my $line (@lines) {
            if($line =~ /^#define ASSERT_ARGS_([_a-zA-Z0-9]+)\s/s) {
                push(@defines, $1);
            }
            if($line =~ /^\s+ASSERT_ARGS\(([_a-zA-Z0-9]+)\);/) {
                $usages{$1} = 1;
            }
        }
    }

    # next, cross reference them.
    my @missing = grep { !exists($usages{$_}) } @defines;
    ok(!scalar @missing);
    if(scalar @missing) {
        diag("unused assert macros found:");
        foreach my $missing (sort @missing) {
            diag($missing);
        }
        diag(scalar(@missing) . " unused assert macros found in total.");
    }
}

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4:
