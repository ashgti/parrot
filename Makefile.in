O = ${o}
SO = .so
A = .a
RM_F = ${rm_f}
RM_RF = ${rm_rf}
AR_CRS = ar crs

INC=include/parrot


###############################################################################
#
# "STICKY" GENERATED FILES:
#
# These files are created when Configure.pl runs.
#
# We don't delete these on 'clean' only on 'realclean'.
# That way, we don't have to re-Configure.pl after making
# clean.
#
###############################################################################

GEN_MAKEFILES = Makefile classes/Makefile languages/Makefile docs/Makefile \
languages/jako/Makefile languages/miniperl/Makefile languages/scheme/Makefile

GEN_CONFIGS  = include/parrot/config.h include/parrot/platform.h Parrot/Config.pm \
Parrot/Types.pm platform.c

STICKY_FILES = $(GEN_CONFIGS) $(GEN_MAKEFILES) config.opt


###############################################################################
#
# "FLUID" GENERATED FILES:
#
# These files are created during the build process.
#
# We *do* delete these on 'clean'.
#
###############################################################################

GEN_OPSFILES = vtable.ops

GEN_HEADERS = $(INC)/vtable.h ${jit_struct_h} $(INC)/oplib/core_ops.h \
$(INC)/oplib/core_ops_prederef.h

GEN_SOURCES = core_ops.c core_ops_prederef.c vtable_ops.c

GEN_MODULES = Parrot/Jit.pm Parrot/PMC.pm Parrot/OpLib/core.pm

FLUID_FILES = $(GEN_OPSFILES) $(GEN_HEADERS) $(GEN_SOURCES) $(GEN_MODULES)


###############################################################################
#
# OTHER FILE GROUPS:
#
###############################################################################

H_FILES = $(INC)/config.h $(INC)/exceptions.h $(INC)/io.h $(INC)/op.h \
$(INC)/register.h $(INC)/string.h $(INC)/events.h $(INC)/interpreter.h \
$(INC)/memory.h $(INC)/parrot.h $(INC)/stacks.h $(INC)/packfile.h \
$(INC)/global_setup.h $(INC)/vtable.h $(INC)/oplib/core_ops.h $(INC)/oplib/core_ops_prederef.h \
$(INC)/runops_cores.h $(INC)/trace.h \
$(INC)/pmc.h $(INC)/key.h $(INC)/resources.h $(INC)/platform.h \
$(INC)/interp_guts.h ${jit_h} ${jit_struct_h}

CLASS_O_FILES = classes/default$(O) classes/perlint$(O) classes/perlstring$(O) \
classes/perlnum$(O) classes/perlarray$(O) classes/perlundef$(O) \
classes/perlhash$(O)

ENCODING_O_FILES = encodings/singlebyte$(O) encodings/utf8$(O) encodings/utf16$(O) \
encodings/utf32$(O)

CHARTYPE_O_FILES = chartypes/unicode$(O) chartypes/usascii$(O)

IO_O_FILES = io/io$(O) io/io_os$(O) io/io_stdio$(O)

INTERP_O_FILES = global_setup$(O) interpreter$(O) parrot$(O) register$(O) \
core_ops$(O) core_ops_prederef$(O) memory$(O) packfile$(O) stacks$(O) \
string$(O) encoding$(O) chartype$(O) runops_cores$(O) trace$(O) pmc$(O) key$(O) \
platform$(O) ${jit_o} resources$(O)

O_FILES = $(INTERP_O_FILES) $(IO_O_FILES) $(CLASS_O_FILES) $(ENCODING_O_FILES) $(CHARTYPE_O_FILES)

OPS_FILES = ${ops} $(GEN_OPSFILES)

###############################################################################
#
# BUILD TOOL CONFIGURATIONS:
#
# DO NOT ADD C COMPILER FLAGS HERE
# Add them in Configure.pl--look for the
# comment 'ADD C COMPILER FLAGS HERE'
#
###############################################################################

CFLAGS = ${ccflags} ${cc_warn} ${cc_debug} ${cc_inc} ${cc_hasjit}
LDFLAGS = ${ldflags}

C_LIBS = ${libs}

CC = ${cc}
LD = ${ld}
PERL = ${perl}


###############################################################################
#
# BUILD TARGET CONFIGURATIONS:
#
###############################################################################

TEST_PROG = ${test_prog}${exe}
TEST_PROG_SO = ${test_prog}_so${exe}
PDUMP = pdump${exe}
LINT = lclint
LINTFLAGS = +showscan +posixlib -weak +longintegral +matchanyintegral -formattype


###############################################################################
#
# MAKE CONFIGURATION:
#
###############################################################################

#
# This is set to  MAKE=$make if your $make command doesn't
# do it for you.
#

${make_set_make}

.c$(O):
	$(CC) $(CFLAGS) ${cc_o_out}$@ -c $<

all : $(TEST_PROG) $(PDUMP) docs

mops: examples/assembly/mops${exe} examples/mops/mops${exe}

$(TEST_PROG): test_main$(O) $(GEN_HEADERS) $(O_FILES) Parrot/OpLib/core.pm Parrot/PMC.pm
	$(LD) ${ld_out}$(TEST_PROG) $(LDFLAGS) $(O_FILES) test_main$(O) $(C_LIBS)


###############################################################################
#
# Shared Library Targets:
#
# XXX This target is not portable to Win32
#
###############################################################################

blib:
	mkdir -p blib

blib_lib:
	mkdir -p blib/lib

shared: blib_lib blib/lib/libparrot$(SO) blib/lib/libcore_prederef$(SO) $(TEST_PROG_SO)

blib/lib/libparrot$(SO).${VERSION}: $(O_FILES)
	$(LD) -shared -Wl,-soname,libparrot$(SO).${MAJOR} $(LDFLAGS) -o blib/lib/libparrot$(SO).${VERSION} $(O_FILES)

blib/lib/libparrot$(SO).${MAJOR}.${MINOR}: blib/lib/libparrot$(SO).${VERSION}
	rm -f $@
	cd blib/lib; ln -s libparrot$(SO).${VERSION} libparrot$(SO).${MAJOR}.${MINOR}

blib/lib/libparrot$(SO).${MAJOR}: blib/lib/libparrot$(SO).${MAJOR}.${MINOR}
	rm -f $@
	cd blib/lib; ln -s libparrot$(SO).${MAJOR}.${MINOR} libparrot$(SO).${MAJOR}

blib/lib/libparrot$(SO): blib/lib/libparrot$(SO).${MAJOR}
	rm -f $@
	cd blib/lib; ln -s libparrot$(SO).${MAJOR} libparrot$(SO)

blib/lib/libcore_prederef$(SO).${VERSION}: core_ops_prederef$(O)
	$(LD) -shared -Wl,-soname,libparrot$(SO).${MAJOR} $(LDFLAGS) -o blib/lib/libcore_prederef$(SO).${VERSION} core_ops_prederef$(O)

blib/lib/libcore_prederef$(SO).${MAJOR}.${MINOR}: blib/lib/libcore_prederef$(SO).${VERSION}
	rm -f $@
	cd blib/lib; ln -s libcore_prederef$(SO).${VERSION} libcore_prederef$(SO).${MAJOR}.${MINOR}

blib/lib/libcore_prederef$(SO).${MAJOR}: blib/lib/libcore_prederef$(SO).${MAJOR}.${MINOR}
	rm -f $@
	cd blib/lib; ln -s libcore_prederef$(SO).${MAJOR}.${MINOR} libcore_prederef$(SO).${MAJOR}

blib/lib/libcore_prederef$(SO): blib/lib/libcore_prederef$(SO).${MAJOR}
	rm -f $@
	cd blib/lib; ln -s libcore_prederef$(SO).${MAJOR} libcore_prederef$(SO)

$(TEST_PROG_SO): test_main$(O) blib/lib/libparrot$(SO) Parrot/OpLib/core.pm Parrot/PMC.pm
	$(LD) ${ld_out}$(TEST_PROG) test_main$(O) $(LDFLAGS) $(C_LIBS) -L blib/lib -lparrot


#
# Parrot Dump
#

$(PDUMP): pdump$(O) $(O_FILES)
	$(LD) ${ld_out}$(PDUMP) $(O_FILES) pdump$(O) $(C_LIBS) $(LDFLAGS)


###############################################################################
#
# Other Dependencies and Build Rules:
#
###############################################################################

test_main$(O): test_main.c $(H_FILES)

Parrot/Jit.pm: Parrot/Jit/${jitarchname}.pm
	$(PERL) -MFile::Copy=cp -e ${PQ}cp q|Parrot/Jit/${jitarchname}.pm|, q|Parrot/Jit.pm|${PQ}

Parrot/OpLib/core.pm: $(OPS_FILES) ops2pm.pl Parrot/OpsFile.pm Parrot/Op.pm
	$(PERL) ops2pm.pl $(OPS_FILES)

Parrot/PMC.pm: include/parrot/pmc.h pmc_pm.pl
	$(PERL) pmc_pm.pl 


###############################################################################
#
# Examples (Assembly):
#
###############################################################################

examples/assembly/mops.pbc: examples/assembly/mops.pasm assemble.pl
	cd examples && cd assembly && $(MAKE) mops.pbc PERL=$(PERL) && cd .. && cd ..

examples/assembly/mops.c: examples/assembly/mops.pbc pbc2c.pl
	$(PERL) pbc2c.pl examples/assembly/mops.pbc > examples/assembly/mops.c

examples/assembly/mops${exe}: examples/assembly/mops$(O) $(O_FILES)
	$(LD) $(LDFLAGS) ${ld_out}examples/assembly/mops${exe} examples/assembly/mops$(O) $(O_FILES) $(C_LIBS)


###############################################################################
#
# Examples (MOPS) - Comparative:
#
###############################################################################

examples/mops/mops$(O): examples/mops/mops.c

examples/mops/mops${exe}: examples/mops/mops$(O) platform$(O)
	$(LD) $(LDFLAGS) ${ld_out}examples/mops/mops${exe} examples/mops/mops$(O) platform$(O) $(C_LIBS)


###############################################################################
#
# Dependencies:
#
###############################################################################

global_setup$(O): $(H_FILES)

pmc$(O): $(H_FILES)

jit$(O): $(H_FILES)

key$(O): $(H_FILES)

resources$(O): $(H_FILES)

platform$(O): $(H_FILES)

string$(O): $(H_FILES)

chartype$(O): $(H_FILES)

encoding$(O): $(H_FILES)

chartype/usascii$(O): $(H_FILES)

chartype/unicode$(O): $(H_FILES)

encoding/singlebyte$(O): $(H_FILES)

encoding/utf8$(O): $(H_FILES)

encoding/utf16$(O): $(H_FILES)

encoding/utf32$(O): $(H_FILES)

interpreter$(O): interpreter.c $(H_FILES)

memory$(O): $(H_FILES)

packfile$(O): $(H_FILES)

parrot$(O): $(H_FILES)

register$(O): $(H_FILES)

stacks$(O): $(H_FILES)

core_ops$(O): $(H_FILES) core_ops.c

core_ops.c $(INC)/oplib/core_ops.h: $(OPS_FILES) ops2c.pl Parrot/OpsFile.pm Parrot/Op.pm
	$(PERL) ops2c.pl C $(OPS_FILES)

core_ops_prederef$(O): $(H_FILES) core_ops_prederef.c

core_ops_prederef.c $(INC)/oplib/core_ops_prederef.h: $(OPS_FILES) ops2c.pl Parrot/OpsFile.pm Parrot/Op.pm
	$(PERL) ops2c.pl CPrederef $(OPS_FILES)

vtable.ops: make_vtable_ops.pl
	$(PERL) make_vtable_ops.pl > vtable.ops

$(STICKY_FILES): Configure.pl config_h.in
	$(PERL) Configure.pl

$(INC)/vtable.h: vtable.tbl vtable_h.pl
	$(PERL) vtable_h.pl

$(INC)/jit_struct.h: jit2h.pl Parrot/OpLib/core.pm Parrot/Jit.pm jit/${jitcpuarch}/core.jit jit/${jitcpuarch}/string.jit
	$(PERL) jit2h.pl ${jitcpuarch} > $(INC)/jit_struct.h

docs: docs/.dummy

docs/.dummy:
	cd docs && $(MAKE) && cd ..

$(CLASS_O_FILES):
	cd classes && $(MAKE) && cd ..

languages: languages.dummy

languages.dummy:
	cd languages && $(MAKE) && cd ..


###############################################################################
#
# Testing Targets:
#
###############################################################################

test: $(TEST_PROG) assemble.pl .test_dummy

.test_dummy:
	$(PERL) t/harness

mopstest: $(TEST_PROG) examples/assembly/mops.pbc
	$(TEST_PROG) examples/assembly/mops.pbc


###############################################################################
#
# Cleaning Targets:
#
###############################################################################

clean: testclean
	$(RM_F) $(O_FILES)
	$(RM_F) *.s
	$(RM_F) $(FLUID_FILES)
	$(RM_F) $(TEST_PROG) $(PDUMP) pdump$(O)
	$(RM_F) examples/assembly/mops${exe} examples/assembly/mops.c
	$(RM_F) examples/assembly/mops$(O) examples/assembly/mops.pbc
	$(RM_F) examples/mops/mops$(O) examples/mops/mops${exe}
	$(RM_RF) blib
	$(RM_F) *~
	cd docs && $(MAKE) clean && cd ..
	cd classes && $(MAKE) clean && cd ..
	cd languages && $(MAKE) clean && cd ..

testclean:
	$(RM_F) t/op/*.pasm t/op/*.pbc t/op/*.out

realclean: clean
	$(RM_F) $(STICKY_FILES)

distclean:
	$(PERL) -MExtUtils::Manifest=filecheck -le ${PQ}$$ExtUtils::Manifest::Quiet=1;unlink $$_ for filecheck()${PQ}

cvsclean:
	$(PERL) -MExtUtils::Manifest=filecheck -le ${PQ}$$ExtUtils::Manifest::Quiet=1; do { unlink $$_ unless $$_ =~ m!(?:CVS/|\.cvs)! } for filecheck()${PQ}

reconfig:
	$(MAKE) clean; $(PERL) Configure.pl --reconfig


###############################################################################
#
# CVS Targets:
#
###############################################################################

update:
	cvs -q update -dP

status:
	cvs -n -q upd -dP

lint: ${test_prog}
	$(LINT) ${cc_inc} -Iclasses $(LINTFLAGS) `echo $(O_FILES) | sed 's/\.o/\.c/g'`
	$(LINT) ${cc_inc} $(LINTFLAGS) test_main.c

